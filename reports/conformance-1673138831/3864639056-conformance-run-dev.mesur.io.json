{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "baeae659-ca53-4067-b756-f7a0cbf99d65",
        "name": "Clear Cache",
        "item": [
          {
            "id": "7dff4579-24d2-4793-bddb-e01d2a82a540",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "907ad5a6-251a-4ebd-8426-7773a4ca6a11",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c06b0ae6-5fb3-4fe4-a0d7-2581f531a07f"
                }
              }
            ]
          },
          {
            "id": "f7b751f6-8cf7-4bc0-84cb-06fb9aedfa14",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3059610a-56d3-4a39-910f-6980a9b8fd35",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "969fa941-6378-4945-9030-e484688f194e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "eee07b76-c484-4f93-aacd-5f729939b3a6",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "c5b46f35-9437-460c-b77c-33609d8ca910",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5835df62-80f8-496a-b6b6-2435b049f487",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "846a64ce-06c9-4f50-9a15-cc915319e818",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "54bc9470-0d09-475a-8898-9d041f540aa7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "aa0e001b-d755-49fd-bfc6-325aead6baec",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "043124e2-79ff-4ae8-a69c-cbb87f83569f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d1a26518-4088-4aa4-ab9e-b5aef1478fd8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "68e96dad-3e89-40fb-98b3-e25be022b017"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1e7845ee-6f37-4aae-9d96-0165f2e100bb",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "fafb88a9-f1bc-4573-ae1c-815e617056e0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5033f2a6-1c6a-4713-8d0c-51f5f9b976bb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e92eb4a6-d621-4e5c-a492-8ec1edda958f"
            }
          }
        ]
      },
      {
        "id": "1745bda5-2b1f-41b4-82b4-05a8145057ec",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "037a8572-0378-42d0-8a97-9385823d5f9f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6c11674a-e367-4295-9ed7-bbdabc6d2ab1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6e74a813-5ddf-4ee9-ae73-3452bc84c00d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62aa3a6e-42e5-483d-9f70-658dec8e22dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e96bd784-6479-4690-b0e9-059c465b9dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "364304a8-d2c1-457e-b9a2-d64b31ea8d0d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b81646d-9363-4985-84b6-55327835aa9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ffbd8bfe-046e-4b10-9b91-2e912851b6a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79c00a2a-511f-43ea-a8ae-f38c4d0a8ff2",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "256ea223-6f22-4985-a26f-bb87097c92b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c39b682-2826-4793-bcd0-66dfaa10e820"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ac5f7fd2-3be3-49d3-85be-495f1d0c707a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "839d7988-f6fc-4fd8-bd8e-c5fa28ca4768",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "496b8619-09ee-4941-ad7f-1edc6ff9c144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "193957d9-b618-4f60-8ed8-ac9012ebce76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0821b295-e939-4836-b7c1-2eaeef9265b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b1bbc23-2fa7-4e3d-beca-c5e73641a2ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27df2f71-6d0d-49f1-8695-602152f7ed7e",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "577c3953-99f8-49ff-a17a-272a1775f4a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7a71d144-59bd-4787-9ced-7ecfdf0c46f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dac3b02-7e83-4be7-8de9-5533e62ea8cb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "a9a17801-ddb4-4a58-b1f9-d2e4db21b513"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f3483082-7802-478a-b15d-2da1cdc135c3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "93db8a8c-b0f7-4462-8031-526ba383e81c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "722b9e97-f06e-4923-9c02-fb7c43af67dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0f076c03-299c-4879-b97e-133ea4ccada8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a7dff52-1b6e-4c32-9006-7f66a2c40aeb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "306adae9-e581-4b4c-91b7-65a5b48aae33"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6d1e3f93-b485-41f3-b06b-d63108893af5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "811491ca-20cd-468a-9d08-209fbb702309"
            }
          }
        ]
      },
      {
        "id": "0256768d-3be6-486f-964e-754d616af03c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "b292083e-f461-4a03-8b90-ab0d0164e1d2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c17aea11-5205-4758-9bab-eb564080fafa",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7a724852-54b3-4cc8-8658-483656068bd3",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9731bbac-62a5-4e55-905c-00d3662a4aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33153bc6-ebe9-4517-b30f-7d7d1007e95f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "687cd115-fab1-4f62-8d5a-c78de516aa49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f4f8b9fd-8ce1-49ba-9d2a-c2ac615b41f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbef1bf7-1af5-4b8a-8c1c-aa481e4d69ab",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca2ecbfe-ac21-4285-ac71-9f31fbac39cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6ead2cc-90cf-451f-9d1d-d20d341141e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dfb4ce0-eb06-4b8c-8c5e-a0e191842c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f409bbc-bfe9-48f8-95c4-6649f6a1200e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77144ac9-522b-4bed-b164-ded4745e798c",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a028113-57a8-46b1-b0af-5ad02013c7e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbe499f5-9a96-4e71-81bf-ac073f4cce89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14afeedf-9e13-4200-a5cb-c60c0404fcc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "68d58b53-5625-470a-bde7-a2f67ae19b2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6bdfad2-ea22-4e76-968d-e27bdce1263e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e1c46c3-af7e-4444-b852-247852ec8606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "070f82aa-f7b0-43bd-9003-792885899890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7482f10-21e2-46cf-a62e-15ff444787d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e90e5a9d-702f-4532-bacb-6384ebed2393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ad345ab-4f0e-4078-b176-c065b3d6c444",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8513508-f704-417f-b7a6-f6cf1230d962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2caefc4-58fa-4b95-b215-e625a3bb0071"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6db30e7a-1344-483d-a06f-02decf68f1de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "608afdf7-d44a-4a70-9593-cc96774841ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67734d75-5463-479c-abc4-00d490b0a0a3",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0955e16a-1c04-4e26-939e-993ffc2b2118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44e5a288-2606-486f-9add-09a674c0ed78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a2a5ce0-bb88-44e0-b003-0486a5a89ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3ea62b0-b295-4c04-9046-76a1fec9b23d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f13631bf-3ea6-4a87-b41b-bf6401d38ea9",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17a7e1a7-163f-418c-9687-f20283b10c29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a414376-3f11-4fab-82cd-542a4bfc2c7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f3d1d9-f021-413a-95dd-4c94ac3b2dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4249e4b4-e2b6-4c95-8f48-541567517a95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f053176-91ea-4872-ba2c-d48b311134e6",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84fcc78b-8390-4e42-8961-441d9bfc8d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99b7976d-e586-43c3-84d6-561e048383b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca7104c4-9629-47d7-a8cc-758fe37eb51b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1dd36955-0179-4238-92ef-841a89a6c746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c79a79ca-c6cb-44e2-b233-2359be4e3d33",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77859466-770b-454d-a2a3-33d46b712616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6b6625f-c529-426c-ae07-4bf52a41f743"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44b56bef-2a94-48ab-9918-dd356f1cfd93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0f4c459-a1e5-4fc1-989b-db7367557bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06030427-437c-475b-b13e-5fdd692fb7f6",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6355755c-e890-48e4-8d4d-8b900705c8ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1790574e-de5c-4ef4-a559-94f535d60654"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cafdad2c-c3a8-4c65-973f-563bac50e2b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "085132e8-e66b-409f-8d5b-9dc892314a5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d859ff43-e962-45fb-9d0e-1822b2c49a43",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d21eef35-027a-4085-b9e3-8b9047b87c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eb66078-ad7e-4c9c-b9d7-fa4ccf6de2e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62af03ea-721d-41bd-bfd2-fd4b1766cd22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fce4058f-b64f-47c9-a72e-f2ecfc3b6a92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb6e11b-ec6c-4335-911d-ecdaf4e05224",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a840c5-acb1-4f22-b2c8-3b3a2c023914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c3f4d28-2955-45b6-855f-d1451dd194b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e03ec3ae-c2cc-463c-bafa-89fca4494d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa99868b-b2bb-42d9-bbec-e054542dd255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "818fe9d9-8cfd-44d3-98e4-7d23ee57e083",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bbacc2e-bb42-4ce1-984c-2f7e21884162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efdbabe8-71cb-420b-99ad-a5b0f4e955bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57d57247-acdf-4a34-a561-2c8c96118a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "065022a8-d203-4d4e-afa9-ebf01e98eadc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd0c9116-e232-4262-8f8a-677776950097",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae29a8b3-5ef9-4f44-ad9a-a2fef826b3e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c27c6e13-537f-4066-956f-b1c816feba11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dcef653-ee84-4a6d-b379-493c3798df5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b90f835-8dcf-4e3b-b40c-3621ed1f90a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a92714f7-d888-4a84-ab75-c6b33032f153",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "864c72a2-ddf1-45c5-88b7-61c53fd90790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63215fb7-9ff3-41c9-8edc-e4e6d075f765"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8afae86-0ffc-49e3-b1a0-1d96fde21ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e05056e-f0cb-48c6-8eb6-36b2961a2536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85613b23-8416-4a11-926d-4365c9b189ac",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fd74dd2-9337-4a28-97fe-a8517a01bec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e165e31-7f43-4011-ba18-462fb118c234"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0743b22-4e0a-46b4-9156-d1ba42c78ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed4085bf-23d4-442c-9c44-0279407c79c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4f2e54-ca21-4b20-8c8d-b386cfee6ec0",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a5d5383-baa2-4a4a-99ef-70810ed14fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "680c90bc-9948-42a7-8bee-39457bbc2d02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d76ed0bd-0485-441c-8849-8ea100aab116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62ebeb2c-9ae1-4c9d-990e-40e1d2eae554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae46b6d1-c62c-47cb-a97a-6ac0143e2b50",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed783312-f688-4a2d-85ca-ba52bb97e55f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7682133-f079-4dc3-86c2-8a7a2e588be4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15def871-560f-4bd1-b597-bab461c93402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e61ed065-f26d-4e17-8f90-dff6a6ffb7c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a9a9ddb-a702-46c3-9c62-a8a9c2383a22",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e65e73-1af8-4e2b-88c6-fe7a4ed603e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd53ee64-d0d8-4caa-b5c3-b530dc6e9797"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f72b42cd-9fa3-4362-a90a-37b308208ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0402dd09-1593-441d-abf0-94f5db96d3dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac5c4200-112d-45a0-82de-c27f89985250",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85dd4030-e0c4-4a85-8cf1-36e288db3415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef64528d-3281-423c-aaf5-224f4414a1b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df115448-c521-4b58-aa4a-b9b9710fdf73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6b8044e-f52a-4a3b-aff2-5f24008d8f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b28e798-56a2-4c73-bed3-e4d561a17228",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "433a2199-4967-4336-835c-a84ed6c1ee99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31b4be5e-e788-4185-9b27-3e8c5edbff64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1abbd292-f27c-4e03-bab7-71f5721f66a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b12e992-871e-45fb-afe2-ca897cb032e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f16abdbd-2af7-465b-9fdf-98e1a8b93b19",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b720e34e-72c0-44d8-b2c3-40c49ebaa5df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9262213f-21f8-4510-9328-36e5995d0e92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1b8134-08ff-4c19-8ebf-7a46cfc8f4d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bc0ca44-9c98-469e-aa82-3e4500928f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "297b2e90-f1b3-4b5e-9ade-e79799fa97fc",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e6e9e79-66f2-41e4-904e-72a91ea5d0c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef46c72a-01c0-4697-9f6d-07d132cfa143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c47fad5b-43eb-4474-947a-d1bd2770b95c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0842ea54-88cd-4e96-8c2f-9361c65fba00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29d95688-321f-4e43-9d97-88ffa37a3a6b",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60fbc6b8-e72d-4c8e-92a8-abe7bf513e18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11590020-e8e8-43d9-9a0e-69e3d966d4b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec68799-7212-418c-860b-c9e7675f4d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f870a0f7-2f8d-4ff2-ab54-f6f60489d754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e907eff8-fc1a-4a6a-b4b9-c38fa2e83948",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31fbc0fe-e1a9-42e1-b971-82d8a1c92e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1e6d0a9-c33e-4017-8f19-37132598ce71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae8604e-8425-4c0a-a7a0-e591717c5fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9a7637ca-c6f2-409a-914b-a2ecfae9bd25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c7db907-d530-4cc1-9939-01a5c42771f5",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f50ff1e3-66c4-42bc-8046-0a3981253737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84084cbe-0649-489e-808b-6f1dfaf6ccf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b09019f9-5fac-43d6-a421-37723e0e4dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ce48223-848f-4683-bb96-af6a3cf87fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03362b2b-134b-47b7-984b-1cf296a4e89d",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e2803a1-9d96-43f9-8b12-cdf6576a6005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06fc98f7-af29-4027-9d31-36c10b9e7f30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a7c4011-0fbb-40cd-94cb-8e39fcf7ce4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c3503ec-29b2-4fe3-b7ef-95fd41ce6c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973f9ea8-b5a2-4acc-8da0-32785c1655ca",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd55a4bc-fe46-4b54-a19a-5d6ed38f65f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c64ca48-f32f-4798-b176-5b7d1fb8cc95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a208c9d5-055a-431a-86cd-927fc58c8797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "358c4ca0-a6ec-4bc7-aa63-238404eb2350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c196300-70a5-4c9b-9411-429fbfdc44e5",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2964285c-b295-4f13-84b5-b181e9e9f882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dd99d39-1797-42fd-aede-b5da700a1728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79bdce81-c3f3-4730-acc8-e2b0faff1acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "303f64ce-e69a-44bf-9a3c-ec57497c7500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cc07b02-88bf-4bf1-9dfa-5b6bcc8488a5",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a183359-5d84-46fb-a1c7-5069b0a76ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdd51b37-51c7-452d-ac2d-26408dc1a1eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0239a778-4bad-4e1b-a436-91f662eb06f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "eedeac16-9b35-4eac-ad2b-b99bb77b1c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "644d4d87-068d-4b37-b67f-15ac83af180d",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea3e5275-36b9-4727-ae32-729b955f8d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8be24a3-454f-4ed9-8c2a-19105c7fc186"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b043ad08-d35c-49d9-a41f-e953d9228318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7edaec6b-9c86-4730-9440-2e17797e8e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6123eb1-dd96-4cc9-b8c9-ae066f37f61a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a73d779b-6f34-439f-984e-0a9eaabfc49e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79469a27-7e40-4c41-9432-c23f2b64cbdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df179cad-2028-4b5e-b940-2863ebb00087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7270743-3ced-4072-b5ec-9c7482b60be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cfb14f8-20a0-4198-ad4a-235ec8148bb8",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31b9394f-a406-456e-bfe0-f666119c2e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4e14f4a-f402-4c93-b235-a958d7cdad15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d5b819-f396-4e9c-ad9c-c118cb5cce7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2161ea06-3c4f-4cd2-9366-f3aed98a1f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2387b8f-0e9f-4b9c-b4e6-d7b76c0135ae",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d13158-6869-4652-b31b-b47761953ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "853de5f2-c063-45f0-abbd-018e10feb7dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb9f88a9-a1ea-4b20-ab10-5f65b544fa85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba6b984b-1df5-463c-bd69-a259dfa0b1eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ed324cb-c412-4482-b63c-10d57ad518ed",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b974ed5-a47f-4159-b186-126dc11e84ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50953927-a494-4110-866f-bb38fc9df023"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b715c10-ec1e-4381-80b8-f58927d7705d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "30c4ec51-8bbe-4cb2-8bb8-5f906c05606a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7906a92-d88e-4957-b05b-4cbd4a576971",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba9e306f-8b83-4e89-a68b-6f8300dbd828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4560e218-9c1f-4237-b0ac-5eceaa7b24c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de146265-c9ac-44b1-91f2-43919fdb73eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e134b2f2-4969-42c9-b4bc-9fc6b6ac6089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c710a9-cd85-4672-bef9-a2c7404f5407",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c7cd994-010b-4ffe-accf-4a9fb8c6b180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22d6a606-8f42-4395-b9f6-12db5feb0159"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2db61075-1891-4f31-bc9c-0dcb6fd76f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "004bdfda-6198-45c7-b7b7-9ddced141bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "764995fe-419c-4c72-8358-f36abc46c90e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "102eb354-f04a-463e-8a39-d4df27215c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b8143b4-04b9-4035-a22b-2af05eec4775"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1412e161-d604-4120-aa4b-0d5576f57cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8fb4c1ea-7d7e-4679-9d93-3bdd22b6a177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "511c8a00-125f-437d-802b-127ef4b47193",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb7582c9-339c-4e90-aa0b-a4e9494d0210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fe4821d-6a3b-48ee-b65a-fda75153b9d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c33923a-371d-4e79-aae9-cca035b2f7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b7ac74b-d42b-448f-8182-94fef0eb716e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c655619-6f22-4331-8d4e-aafb2ecf6a96",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0e88ef6-9262-4a62-8177-2f5c990e0e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b796ddd3-c550-42ef-9a36-2434d5f7e34f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acc34958-9c0d-49bb-82ec-6f277a89452c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5eb38cf2-01e1-4e0d-97ee-b3a1da677969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31ad0b51-0f2c-454e-9df8-5cbe06811eec",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc0259b-b8c6-442c-b9ab-063d3471adaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "476d89e2-ef21-41a8-89f9-2e7ce48c6cdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11d49174-bbc5-4dd2-a570-6c8d54224a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "29d07fc7-5ba8-4e40-ab3b-0fc8f05ec458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b7f8e7-1e62-4230-ab3c-43735a83204a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d34c4d-41ab-4752-a1fd-91085bb5ad04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e083f47-b397-4c95-bb5e-75a19f9719a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e96d7037-f7b7-4359-a8f8-3fc28af658fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2735800b-1211-48b2-ab10-5788b4e587aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dde0519-e5dd-4164-a385-b594c8c5ce6e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7360cc00-42f9-423e-89e0-9b358f159581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4670474-28f9-4f79-99e8-36b50856a492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09032fb1-73c5-404c-a813-aca4750e08ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "557949b3-89e3-47a9-900c-4cd5cf22a898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c706a722-6576-4b7a-9cb3-5539f915ba14",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d4924e-6635-4350-8f8e-300e53d07cfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "865bcc01-0daf-48c0-b720-3b76fb14bac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e97b4508-b9ce-4a89-9ffe-d58193c3b67b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "56371ced-6b01-4808-9bc6-8ce6fe0b1461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e728ba2e-6745-4183-ad0d-0c2d6f3bf149",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c50140-e0b8-4137-bee8-41d34a60d593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec6d7504-f482-4f84-b437-4c91f4aa11b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fed2d6d-b038-4e6d-97fb-89c971dd7bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1dd6d50c-0874-4abb-8be2-f16da5183339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eae4ff6a-baea-4b5f-84e9-56deb6356407",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e9ac5cd-d2a9-42f5-a0f0-20d636f04e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edb6daeb-bfbd-4d1c-b3e9-b993f9bf5762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e86213a-c48b-4a7a-90cd-31b5cff01b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d65a0695-2140-407b-af91-7b3779ae03c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "723fe16b-6d50-4740-99d2-a91d0062f40f",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d030c1-85f3-489d-bf54-e1f3e55083b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "418f6154-d1c9-4472-a98c-691201a9878a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf1fbe4-c637-4d30-a85f-d64faf38d481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "95c3fbbc-445c-4e75-97a8-3b198559f985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cfc5aea-dccb-4de3-b902-7da5b50aa956",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89078671-745b-479a-8a00-b9c27af1a533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce1849cf-f46d-452b-9674-2546722da269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d5a10fe-9531-4a19-86b3-84a8a497b5d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "12b3a2de-cf88-466d-aacf-c302c1affd91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12324f07-3161-4b4c-91cb-11d31bbd968c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71e95a11-4961-4580-a9a5-07336436134d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "febc91ab-8b7e-4fbb-b540-d7b4c532972c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b76cc244-ea8c-4ed7-b06a-c6e1d1ec04fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f3558f3-9280-44c9-8681-b40ac9c58baa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a70d9b73-3438-44e6-9409-1c92088112ba",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5fc1c6c-6c3b-4cca-862e-6d14288bdac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb5982e-5a9e-4392-b547-6f1c75a37a2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7e6ac3-49d5-4878-bd4d-fb640154fe0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "51bd918f-9e39-4191-8ed5-4cb415821782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3856dff6-e98f-47e9-b568-409891548ad1",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3961623c-30b3-45a8-92e2-00638a261ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d36f9242-44e6-42e8-ad6e-3e67a1c2d8cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf6808a-abb8-4364-ac77-d5b66f983016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1daefd4a-0774-4ef5-9034-698e48cf4706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a91d0790-39fc-4689-9958-c3af26808053",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36946412-26c1-4f3c-9e85-0474c33c531d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c9cd645-63ce-46ff-8f13-552323cd62d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e943155-4906-413d-9b85-30e06f72298b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "74c4f6c5-7ddc-4bb7-ba16-ec0dadfe824a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55e9e952-6d8f-4088-b77a-e82da80b2491",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8fe1785-600e-428e-904a-8ee957a37f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f345053-5fd1-468b-abd0-94e2364f9ff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72cf9a8f-81cf-4f0c-82ad-158e4f5b2308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ad5179a-d26b-4d09-8fe0-318f15381d4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd5e6891-4802-4dc8-87ba-e1b9bd749081",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0dccab0-42fb-4dae-9dd5-94e1951a6bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6bbd915-a2a5-49b7-b0aa-1a62610d89f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "563cba2b-6c30-4396-ab80-c6881149c765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "51d4e376-c4b7-4572-b0ce-40a1544ca748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a46eeb98-15f4-4b73-b053-5a23a7c35756",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e09a4227-2c6c-4572-b4b3-913c6fd82ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42ac3c6e-8522-4b9c-9f3a-9d64d0e91c47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce017538-e254-40b4-8717-652ec436ab68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc205b07-cb37-4468-a9d8-954f1f3f76d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7382575-1b14-4a54-a845-580c67b09343",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef2675d-4bd3-431e-b386-b1300d46f7a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37b1010d-27ce-4e2d-bfb2-45ad38fe784a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37e18693-3806-4bca-ab04-b41c5e22386d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "717100d8-d7b2-427a-a3f6-e574bffe2fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0356cca-245d-4fad-86fd-92f1e2d00612",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb9e76b0-50be-4a55-837d-a694a5518a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "510a4cee-f5a2-405e-9215-383efe1734ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6500630f-1430-411d-b627-aec29da895a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a509da40-b56e-41e1-8c8b-fb8226f14003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "335b0e9c-9081-4a23-8527-6721794e7469",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d3ce69-8455-4cf9-859e-cb4f46b9a8fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72563f3a-0946-48e2-8ccc-23f3519e5005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85afd78e-2e4a-4b72-b977-8ae02f121218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "0eb4ef8b-1ccb-4cbd-a848-4c016cec51c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec836ac3-2c84-41cc-bae9-e82923df5c50",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af98f875-94c4-4edb-922e-ed75529ce7f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f21766c4-feef-41d8-82aa-fc8a4139f7bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04cbf818-2e12-4de1-9c61-4004925cd6f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "798a330b-d7bf-4484-a381-6d18138a349e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a8f287-5c0e-4852-81d8-5ab364027774",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa182ebd-1d6a-4dbb-8bf3-da181f9ddec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a1002ee-8de6-4983-b67d-d90ddc29c445"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcdbebbe-7c7f-45c7-bfe1-4c6abe17ba4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9022f930-fa00-4dea-a540-53e227b04b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa2847a3-c4c6-4639-b1d8-3e4b4bfe45d4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edad48a1-56e4-49fd-9d3e-deeb6325127a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd8f653d-d974-4de7-acb7-dcce23319d02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66aab053-99c9-43b6-b8cc-93e57dd1da72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0dd2906d-bcf0-436c-ac0c-c393d34da605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad02acd-c659-4c44-a13a-a43fe24775c9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5414c222-b6a4-4f59-89a5-2dba15ad31eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "010d3052-392b-4fb0-bc16-322212a0d341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff84bd0-e3ef-4d54-a435-a178d674c75a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e21aeb72-4cf4-47dc-8e3c-359dc94cd379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74614bb3-e18b-4c60-84db-43a43b776c36",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "842242af-ed88-43eb-8d9a-218ec8b51cb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7a8f28b-75be-4ca6-83eb-525a5e3d0c9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e747fe-164e-4f51-9293-96b545ee4f5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5926fc48-0159-4e77-b742-f38a2dd754bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b898d9a-9da8-4112-935b-78ec9e8449bf",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4420df31-c345-4353-9f90-9a8eefc2633b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55a00758-6472-4843-84d2-19a2ff31737c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf835326-6e03-4c33-b466-01785c551bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "860bb580-8b21-4986-9eef-a2e9f0c5fdc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60e9beed-46bb-4e59-9872-5a78cf2e7cbd",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1143a7f6-8676-4f5c-bac0-d6d2c8fab9ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6a9c2fa-07f1-4877-8fcf-db98f8bdb370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08bbb83b-e57b-46e1-8fc2-8d6822bd2577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3312026c-9ea2-4faf-808a-4a82dccdd198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6055b4ee-8f65-4602-9b2b-e39b50d3f0cd",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45bce58c-4661-4e0b-a75a-71d1596606f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e41b8820-a15a-4f13-a7e1-f0f2c810780f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7886efc2-c5b2-4b7f-9516-bece439c0b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b123f80-3387-43a1-a545-d03582e87875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "005651c4-f442-46b3-92ea-f1e30936ad2b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b014b21-f58b-498d-9fa2-992e362c5abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5b42d57-6245-4973-b81c-e1923e1614a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6072d4ef-61ab-42b0-bd60-a42e93e40e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "720bd6a4-33af-48d2-b174-b722cd2fc270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "232308ac-85da-49ec-a9d6-a7cfc7ed9270",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "076d4cc0-e615-4ec6-9282-5a7aefcb89e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cf24e12-c57c-4d7c-ba19-925fbc202526"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f82808-6aa5-4793-beec-f77745c5c4cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dea6f2cb-2162-471e-b269-f346ed243033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6101bc3-df1b-4507-ad21-f266a3af015c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f0c6339-58e4-4a32-853a-cb203354f5ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3876dd7c-bfc0-4c05-88ba-bca531391009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "602c2c8a-476f-4993-98b4-02b79b9b4a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f15b2845-b5a6-4e96-81e0-51698df3b021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d286349-218a-442d-9972-4acc5b934147",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb7dc046-ba7c-471c-94a0-a14b1686c729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f28c3481-2329-404e-b4f8-19d501846741"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8f33483-5d14-4605-aec1-fcf78240e85a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f10bd902-a5d4-44e3-8035-0e23ed8e1f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a473a9a-ffcd-4921-a1ed-1e74e6bf4d0b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aadc5da1-cce3-4c53-a11f-b4d799cc4f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "529e3d7b-6eda-4f73-a9dc-4e771f981d68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e59eec9d-9e7c-49c0-add9-a32c1a5be1e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad4a22ed-e727-40c6-b5f1-9ba1c8359196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77285d4e-6b46-4e1a-89c0-b0fe7df5cc86",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25730b27-097d-4311-b875-1f1cdcf83d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0656004b-7f89-4a3e-9206-e8f3b821af62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82966292-fba9-46cc-8031-dcb5fc0b217a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9409a26-6cc0-4b3a-b64e-7661800981c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac4770f-b71a-4220-8d8d-5a681be9dea8",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e4a075-da1d-46ad-82cc-e63fea236ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7513d59-78d9-4bfe-be3d-0830b96d8c6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61eeef2-0b00-4e7a-b072-e4c5c27ec52b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cc797bb-0c6e-4b1a-a047-87e11f4f6d3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6688fa7c-bddf-46ee-b9dd-7cefbce6bec7",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddc857ff-b972-4d52-b28b-f0f53ea0afb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43ea916e-3ff9-4204-aa57-dd2095c6d6ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a014987a-c646-48cb-8848-a342ec1d8bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7b50160-276c-4a3f-aca2-0293ab20f7ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c58511a7-4cd9-4589-a246-c669cdb1735f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef66dc92-2cff-4832-be79-ad4c1126ad00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43ff68c2-ae94-4926-b78b-39f956acad0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6763f3c-9a4d-4b85-a1eb-edf72e7253d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3b0df03-48c0-42a6-afa0-83a77e8fcaa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa6cc30-e9eb-4a95-8d47-bd64c93d9915",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec234088-c5c3-4ef2-998a-74c9a6715bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79af405a-8570-41e2-b2f4-9ea503b4fa94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58bc7638-ef54-4264-8c21-1f8ae44c9302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7d23451c-a171-41ae-97df-d4c252e5afb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f80229-06c7-483b-8f83-adb58fd1d596",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdabed70-16d3-4cea-b7d8-235bb21afd0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9a9c52f-a51e-43a7-bcb6-0a181b28055a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "814fe6c3-62b1-41f7-b3ef-2cf386d60880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba72ee75-9546-4556-b4a9-2aa62c45915a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "017a1adb-b935-496c-ac48-fd26ab085b2a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75abc51a-20e4-418d-9242-75b23f360bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb193bc5-5fbf-4cc1-b912-16f0550b59de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36415766-177c-46eb-b2d5-ad4f8dad04fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "444f00da-f1b6-4cb1-a9aa-9b52270b316c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb46fab-d05e-4dce-a76a-2e4e0703f850",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a48638c3-db67-4bd7-90af-786c49b868cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f37a2c18-f828-49ac-b60d-4cb28733cc19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e9b26a-1b79-4737-b6ba-a75d90958434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "902b9479-599c-4298-8fd3-3d6ebaa56281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "852b798d-377e-47e3-903a-63d85f4042e3",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1635750c-2803-45f4-8a32-7835f3189993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3189e5ba-3042-413d-b643-a1c916f1f7aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c87bf629-bc12-4353-84b2-d7d0f67da705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7624f19-153e-4a05-a720-15341fc46d76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ce1c4f-d76c-4f1b-b979-7a0e6dd59229",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faaac435-616b-480b-8fec-e11eabcfa13a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33bd2570-7456-4249-bcc4-c6a69ad29596"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e771631e-3cb0-4783-9e78-78db1a4f079f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c054cea-7183-4210-b8ca-a2ab3e017b70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "083b0f9b-f12e-49a0-8af6-46c5220ab8f3",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa11764b-e6d4-4788-a54c-1e9c57001ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4deab96-f8f1-4852-a0d5-6a7f79883add"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d812591c-5630-48fa-ae7a-1adccf001c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d1a1bc1f-31f0-424b-a8e9-0695b001f45a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e0f7b1f-715e-4f61-b31c-c5f431047e0f",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "accc7edc-5b4e-4b37-8deb-f8d5de867de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9391784-be88-4a49-bde0-90e5fc9dd339"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb6cd4bc-96c5-4161-8035-884a630658ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fda400a-7087-4d7f-ac3b-08ce746550f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce105d8f-df5f-4510-81a4-8b3cddfb2486",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db73aaed-84b1-4ae9-a621-06658120bb45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4033b71c-87d9-49ee-abd7-13a1a559c29d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c1efd8-f21d-401d-a8ef-6aa1845dc36b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccdb86c6-5cd9-44d2-80fd-38ba4c63b2ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f9f3c11-ce48-490f-b177-e4810be8d685",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b9fcd5d-8dfb-4891-88c7-1d5a3e7b8d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2531adff-1228-4e34-a45c-8745289b073c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58b4973-075d-456c-8789-3a554af9d9f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2af836db-7cdc-475a-9025-e46702df4f58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d72a638-1f07-42fb-8565-8e990942c6b5",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "728e4d53-cb42-4e2b-a0f9-fb9388a07825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88fbbf79-972b-45be-8eae-18e536bff301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da882d76-0e75-446d-a814-fb0cc2e49a10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "23978381-a467-4d4c-9f82-4937a914379d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1353d282-6d9b-4020-96e9-d01866aba027",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "296a9b4f-8b48-447d-a40e-faa00f266af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39182da8-dabc-474a-99fa-cb2b9f2bbd79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "674a9693-d6c1-4fe8-adf8-1c3773809c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c54104f2-8883-4d23-95c0-5bb22420e753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e072d94-8dfb-437e-8869-40d6cc3f4cab",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a407e9-0405-4594-8a5e-1d64544dfd3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2818fe47-c592-4d3f-bae4-f7e9765f8f67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3c7beb3-6b96-4016-8dee-2cd227d0b4d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d45a8b02-27eb-40c9-8cc2-5a0255a36ad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceba803c-be07-43c5-8d82-c5ddba7a2df9",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a78da97-9134-4bf5-9078-aac69365f382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5662e05d-482e-4d82-9846-5a3b7927854e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d205b07b-27d1-43f8-beb0-ef7f01bd83c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c22ddba-849c-4a11-98a1-01cad1d94617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "421c1758-c38f-49f7-a17a-30a388b6304f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b72e08-5d89-41fb-9450-a3e00b5fb492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "293b2cf4-e347-413e-8732-127a218eba6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a38b8f5-6ca3-4e93-9bbe-2b1243f495f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a58c0ec-fe61-412b-86d5-d73d7f9971ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6266fe-0b6e-4669-aa6d-cbedff8ddc82",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ef94ea-ab0d-4289-bf45-6c8ea9b06cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44fbc514-005f-401c-a0f2-32d614d95067"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e261f98-2dcb-4251-95a6-71e7f5ff8611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "313d69c0-9baf-4fa7-9997-06be630d6136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f196fec-6134-44f8-844e-542206d2a3a2",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5722859c-4adb-4218-a778-2ce7f21b5424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "750d4212-af60-4e9c-827e-9895aa48d07a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b79a5a33-9b91-448e-a196-d9cc03d746b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec76e606-d46d-428c-84df-48c983ccc5b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d01cb49-d9ef-4de7-bec5-7812ff2e5237",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f2c931-c181-4c4f-854d-107fffe59045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69aca14b-5d46-4ef5-9dd4-fadcad7f2594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a05e26cc-31d4-4eef-abf4-c49d0899be85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "33dcf4e9-5ffd-4b89-a706-600f8d559f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5fd0247-065b-4839-8279-d65f72fab7f2",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0fea79e-e4d1-4c8f-a4e4-446563cd331e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0c4c803b-9288-4705-aa98-2f5e46b1f152"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e3114e5-0d2a-4e45-ac95-cc3dc1390585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "024ed46b-ce6c-47c1-a673-d98960ff1056"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b87f54cf-ce5b-41f9-9e2e-76ea9b65abd7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eee0b89e-f86c-4ee1-aa6d-56ff73c0d70f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07cc2bd9-5f35-4ee6-8c54-0de0f1c46085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7613630-4417-4587-9d52-2431beeaeef6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d64493-a95a-4453-93f6-2926056c8179",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "f8485020-cc5c-4ac5-8e1b-a9876135a9a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b432cda6-bb5a-4b51-aec5-dd5edb2155cb",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29450678-d2ef-43f7-8c56-67ac9f169c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7769b6c0-7b11-4162-bf2f-4435daaf8445"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e845da5-78cb-4d95-8191-099c6659b227",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "b0fd7b8a-241e-4b18-9eb5-655bc8a0a64b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "34a3f7a1-1c71-4231-a10f-f481363ed3dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6cd20478-f553-489f-bd15-c3d4840b17db"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b995bc2a-3215-429d-a6c3-a16fb2312024",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac0f7ebf-49b2-4290-88c1-a6791fcd6b76"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "330664b5-cb32-4f5c-9de6-c061e1f5eed2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bad4427d-a493-4341-ad15-5bb12229e0b5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "21764a28-bb49-4f28-a9cd-a2e0a3c27a2f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "260d855f-876a-4b64-964d-0189e4689451"
                }
              }
            ]
          },
          {
            "id": "a76e3ec8-05c8-47bc-98fd-84348138860e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "226b7fd5-887d-418d-8055-4de97079b951",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "20d8dfd5-f6e9-4c0d-b5e0-60225d7e73ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "caa53284-476a-4561-b2a9-c7efea62cbff"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "075e04ae-a959-4579-8a75-0ca0bde28510",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bea56e4b-574d-4c62-bbca-00170eb2be56"
                    }
                  }
                ]
              },
              {
                "id": "cfad51d4-8c8d-465c-b392-030dc6b2458c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f2312801-e92e-40d2-939c-ede5ac51b7d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ef28eaa1-4eee-4570-9c90-ed97d888d2f2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d87cc68c-901e-41b7-beed-814446edb2ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1d6a5944-4c7d-496f-b645-cda4f95572f5"
                    }
                  }
                ]
              },
              {
                "id": "9a68beed-7805-49a2-bb55-31ffbf621b85",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "83a7872d-e813-42f9-985d-65a16473e63a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "73c53ed9-c7ed-4987-ad62-1ca638ae197e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f31cc52-1dcb-4358-88f0-616dc9d4bc67",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "f602cd73-ba64-4657-bc80-9d8478bad31b"
                    }
                  }
                ]
              },
              {
                "id": "b983de1f-81ef-402c-88d3-4c03290f4fa1",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3862f094-28c1-48bd-aff0-0f380958edc8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "40802184-5904-4a29-af34-4a87aa7c153f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "efd1e669-6970-4095-bab5-b2d7d51bcad9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "a87abdba-5d55-4f67-8609-b554abc7fc1c"
                    }
                  }
                ]
              },
              {
                "id": "894926b3-32fd-497c-8912-9e5eeb54225e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "27977785-6ea1-4ece-b16e-fa4ccf085118",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "61f28b51-9d3e-4f76-b6ad-3ea05084cd8d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5571f92-5db0-46bc-a3f7-ece2b0fcff68",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0d1aa78a-2db9-484f-927d-9453a88b7fc8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "347efb1b-38a3-48c2-9e13-351887753217",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e3dcd445-96f5-44d1-869a-0552f5f4cda7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "68c795ab-516b-4a08-bf17-34006d38fd71",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ba22ae98-3f19-4bca-bcaf-628c749d5a87"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "49699ee0-de31-4dae-9f3d-01ad17065b25",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2660bc70-c058-43c4-b59b-7acf1aa58ba3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cdc4301e-87ae-4773-90ef-18d0502996ce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9988cdc5-95c6-4d63-b3a2-b3b4b9d2578a"
            }
          }
        ]
      },
      {
        "id": "0d8028ce-2ec8-445e-a9a8-20feafe03bc1",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c0103ba3-2b9b-4036-99e3-c6c22df2d7f2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f9885bb-c25a-43d1-a631-5a63fb527125",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f276f3ec-fd40-4fc3-87c0-7969fa905f82",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71ebf1d1-80f7-4851-8382-91c339354c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3d6ea0c-20c3-4dd7-ae06-87daee59d22f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44c98913-87b7-4c83-9b94-5b50ff8dc782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "69007ddb-7f35-4b16-ae55-c395436b3335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c949e1b7-db74-44cd-b971-0400cc87f357",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1c9116a-cf8b-4ab6-96f7-e1efa7e51409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4830a847-4d8a-4ffc-bc0a-7967c2e5b288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff0f2f85-4828-43bb-8af8-938d89c6d743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a79a0fa1-8f82-41d1-842c-659bf8c55ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35031690-2983-4428-ab4f-c1a914cf6487",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "495bc1fe-ac9a-46ee-83ba-4127fa56d4d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b96b6ec2-e7f8-403a-b39a-dd82c1878f21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "803f585b-0c3c-4b7b-a289-dfe5074ec1a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "16063a5a-e30d-478e-9e0f-ca92a723b661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e340b48-0d20-4554-9093-993cff15ad10",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7681eabc-9a4e-447d-820b-8eaa7e8f12b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f69becb-b1ad-4728-a2f3-e6573d874a47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9734810-6997-4aea-b9e2-ae5e062a5b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "379d5d00-872f-4fce-8892-e20b6ab427d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb68009-77b9-4307-a33f-42ae2ab10689",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c179979-b4d3-40dc-a1f3-085b0b1c4b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55626eee-3f98-4cf9-8cb6-19f1c9a6e3e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51a2386a-bc85-4426-891c-20ebc6465af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4d8bbba-92bf-4e09-9d45-136bdbdaaee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32598c02-202b-4932-b4a0-dbf22bddf598",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d3b8085-e4f1-4a95-904a-7ebab2636a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24da9e34-d218-4384-884d-88b70c0451b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ce13292-42d5-4463-a066-229ea4aacb04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bab79a7d-fead-4fa0-9f9e-409c51dc1ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f7dae8-be41-42ad-9668-499aae13daeb",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "954d521f-3ac2-4f91-a730-c8bff7c46be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b72ec4a6-e5a1-42f7-99ea-190007f474ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41079a10-c670-42b6-a0ee-5d98c04e20f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b16ddaa8-3051-4ccf-ac77-f46450321677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828e5fb1-0112-4adb-850f-c044cf2c18af",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cba240a5-bd85-4708-abd2-5768d97dca23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e010b19e-56f6-444b-84e3-fd2f91693c7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97b52d0c-989e-491c-a143-c93b7c131e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0256d478-364b-4bf0-bb30-77da47cd1b58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf6c3c73-01ad-49e1-a281-f3920bcaeaca",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d8a10c-c774-41f7-a27a-6c53c53f89a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5f39f47-745f-4f3d-b012-e7bf61bdb546"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5bf707c-6326-48c9-8ce7-17a5da0fdb60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "495fcea1-aa3d-4eac-adea-68a37ab687f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c482d16-aec7-485c-ad9e-f1d19d21cada",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a62946f8-33c4-4c87-866d-acc7445a1b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5686027-9c2b-430e-a473-150870722f4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee13c2c0-c479-4038-9b2d-9198fcb217ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee239216-c4b9-462c-ae79-0ab412f38191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c251b36-0d56-4508-b3e6-62e2d0d33d0e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ebb7790-ce3f-43e7-97bc-ebfd54685a90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "803058eb-df79-445a-94d3-bf90c7539714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2ec8b3c-803c-4575-afe4-efb4af7726f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0b2e8823-432f-4a95-8a01-a5c338ddddb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1228215f-e810-47d6-846f-5d1db26dd16c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "341f91f7-b05a-4975-a7cc-dac5cdb4a2ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a684cc75-e237-4c0b-a47c-c39a0a26e083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c38a41b3-93d5-4b51-9e14-7c44b46effb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "663415ac-89f8-4759-a2c7-72736f659dab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "710ab461-0ba4-4265-8d0d-fef552078a4f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f2f4c9d-e172-42d9-ac8f-2a7e5ce5237d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffac398c-0ea2-4fe5-b4e7-3ec77578ca2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9727da81-fabd-4534-a25f-2eb2f975c211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6c5c36a-cf44-4977-931e-6f370d3229e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65644271-26c7-454f-8bc7-dd019392161e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba3b9a05-87b4-4949-aed6-2425625b9eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af87fdcb-999d-40f2-98a1-3cf36e797ac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e2ddd07-99a9-43e1-a8f9-ff5a93972378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ea9ab4e-677d-4f2d-a2bf-a6f5ab0d1317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e07c2b5f-e07b-4b4b-a3e1-14a17695088c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a6c9bb-6b6e-49da-99b9-61cb1b9e1860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc298236-39a2-4992-87be-7dff59b4fc05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a861fd0-d715-466f-afa7-fab63bdead1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "83d977f7-bfb4-405d-989a-e8b5280d10a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29327280-02ec-4b6a-b3e4-73144efd6218",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "566c4475-86c1-4b78-83d1-f0570997d88e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc8f662e-b431-4f41-b674-d1cfcc12024d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "826d5e4a-dc1e-446b-bc1c-eddbfb9a9342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "63e776da-cb43-483b-94e2-f33823888017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a6046a-04de-4682-954d-13944ff90257",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79b84230-e39d-496d-af74-6627bbd7c0bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "246f690c-5aed-4291-a698-2188155e9d36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6a13c58-d085-4458-aa01-8c853ee2d0b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a5baeef-2ab9-43c8-aef5-aafac45d80a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af3f5427-4dd6-40be-b47a-c295f05f61e9",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12202329-ddc0-4844-be35-b0ba6c295b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5e460ed-feff-49c1-840c-5f69e8937fef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b84d625-77fc-4d07-acee-fb5a9faae8fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf50ff17-cbc0-4468-b471-41cced926e7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "763c32c9-54a5-41f8-86fd-5365700d868e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3172acde-8dab-43bc-b7c4-abd4b13080a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f606c014-a524-416e-8dcd-45f284e4631c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "103a676f-a824-4863-8518-f926069e9da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "655395f6-5b9f-480d-b474-fcbdc684d185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa67993-bcd0-437e-916e-be704d149b28",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb173b4-9594-4cd4-881a-36bea98aa287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6ee279d-ada9-490b-a6dd-e74b7e10e4a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ba48526-73e7-4709-9ed1-7ccd7e2f056a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac04c4fa-c19d-4e3d-8d74-7df248c27e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "663ca6c4-d060-4bee-aebf-6c0f1d70f3dd",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b9587c-16f1-436a-bdae-2fed2f0e1854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "250f8239-8c0d-468d-a711-4a5f5c5d2b53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ed39b04-0cea-490e-bef0-02537bc28cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08fb9277-3b8f-4cce-8c76-bb02888a5ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486bfabe-c51f-4ce2-8a61-eedbc3bfe12f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45efaa7a-fa4b-4045-a4f3-0299154f6c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e337b67-6c09-4794-ab09-aa6e700f20ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56bcbd7c-e009-483f-a3d9-d39fdeed67dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17ceab36-482d-4d93-8114-8921216dae2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b624f9c-8760-47a2-bdd7-036afffe4600",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "475d7546-6e0b-4b9b-818e-e1924fb730b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f10b327-3542-414b-8a61-cf0b6135e440"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "712b9eb4-1449-4e8a-8024-356116f666ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27f2cac3-9a17-4a21-9650-cec2ce0c85d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "733485aa-1393-4783-97f6-85069f6df559",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef77c828-b977-4df9-a206-3c1ee808abb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20e2ea25-cd39-4d0f-ad20-ea150e35c3e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18965896-9680-4c11-8a89-14953d74d3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7df4dc2c-bf94-4af9-839c-4da7fc6777fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f778d8c1-95bf-499c-a92b-3ac00bc95049",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd6d5266-9e7d-4968-802c-3c676d307f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "435571b2-4957-4be3-af4f-491b499aa754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29be4cb0-d99d-43fe-b14a-2de09cb927d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2ac1305-0aa4-47e2-8f3c-f0c0aa57d2d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17af084e-9737-4129-8fd5-3f075c566893",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a694b92-7ef2-4f2a-bc14-8ff36c3ae416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f83dc606-5ad9-467a-b75c-a6e387be124e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2611abe3-b755-4173-baf0-ac3af245dd1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10340ea3-2c69-4f1f-8b84-bd0cd1e0c67b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b101e7a-dd08-4e18-ab0a-e7ad434119b0",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ccd2f3-358e-4140-9ec0-82c968053cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d3849da-2231-49fa-9b86-2f8a2efb50e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ddc1db-716f-45fc-8a71-1a59988ada6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "549d3a32-490c-4dde-b4a3-3ef5a89364f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f86e73-7c9b-4bd1-85a0-020fd5bc85d2",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1456b557-c9a8-462d-8b18-6dc0908a0000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91a22b96-1a69-4af5-abd1-878f4e28006a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "133e4ab1-8eee-4f3a-b3a3-a7fa00424f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83112e0d-cb86-4a87-9ef8-d3cc1e353d64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b89a2e-7b8b-47fa-bb5e-2e61d82ea1f1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "305bd4ce-a8e5-4e99-a2bf-1692127aaafb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45a66a1d-7b10-46ce-ad81-a231547f2144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b21623-c1e8-465a-a63e-0b8e6dec6dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "79eba5ec-cf4e-4fdd-bee0-47061fe9d450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f34c25d9-2807-4739-b743-633d344c1935",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "538b8d9e-b425-48f8-975c-6b183c4acf9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58649c65-bb75-4672-8e6e-3e166a34d76d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee39ea9-827f-437e-9d3e-422be5937ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ffed83c-384f-4109-9181-17104807decd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd02af63-cf97-42ef-a5e3-d2d7f1b5ccbc",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab4cb1ab-45e7-4dd2-878b-324920d4381e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dab06198-ef87-4995-8154-b04118ca11a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5132cda-65e9-4c71-9b74-ba3eab2e8fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cd4e68d-ab18-42e4-87e6-82c8dc8893a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dacf4a1-5996-4915-a4e3-281ba7134556",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae6aa44-c44d-4731-a810-250d819c6957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf768c5e-43fd-4947-b2a2-24145c917901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "686226b1-5bc3-454f-9570-f36f38836e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc954525-2a8e-440e-89d5-698e42dad7e2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "03e8e102-2a42-49c4-bb04-a38c51b9c880",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f82e97a4-6ba2-4cb8-9341-9cf19f5249b4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8e0e1b1-d1bf-4192-ba7f-7fb4ca00c170",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91e06f92-2a76-4b21-a7e1-2c9e458ad544"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efbc4c5d-2cfd-427f-a6e6-6c9c90231d28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "656ea832-2112-4378-b257-b653f009cfd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b233ba4c-e522-4fea-890a-cd32e4d954ef",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9222db19-8137-49b1-9b3a-65c5d64e3d35",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "1daedcac-cb76-4065-b744-44441a016aa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e40c0af8-8b13-4faf-ae1f-123673f6d9eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "788db2e2-03af-42ac-8999-f068db6ff8e0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3dcdb45a-b11c-4009-bcb3-b484d8070b46",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f339883-ad0b-4a5d-bc7f-6df9b67b77d5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b559e6ab-547f-4d15-a438-cffcef0d0a4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd344bf7-631d-4aac-af54-46d86d92d311"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bb5e59ab-eb49-4d44-891e-ba0bb0507c01",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "18da036d-073a-485c-8e8b-acc6417118a4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "26cfc22b-4582-4ba0-a216-8368359f09b3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "57d06a49-6749-43a9-934e-feb59e4d54c4"
            }
          }
        ]
      },
      {
        "id": "deae9e98-c903-4075-8cc8-8f64cd3b7a7c",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b90f6bca-eea2-4039-a834-065238c23bec",
            "name": "Negative Testing",
            "item": [
              {
                "id": "86d1f656-401b-400c-becd-4857242a642b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e2b7d4f0-1710-4d6d-8dec-23da0f326274",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c1b23b-9fe6-4c99-92c3-34b839b0059c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aef1e17-4b3c-4cb9-8f3c-188de6e07bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c28ac173-e04f-41c3-8fef-a58ac0f53d77",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f91bf3dc-fce0-4c3d-a8d3-495227b1269c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d321b45-7991-4611-aa92-9891192a6902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0394a1d5-5be8-46e0-a776-1b9d00396926",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f32a5b8a-6594-40f9-b277-f41d1f302225",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ded4a57c-5df2-4308-940a-b33e2aee9d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7750b5e-01e1-4058-bb45-1a8708620bda",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da6ce42c-8deb-4882-8a33-0a245a0d63ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fcf7fc2-af06-4b2e-b292-aa818c724f92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c143c5a-b723-4dcc-9df6-67c021a8b39d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2650d21-c8d3-402d-93bb-d765cc03db8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d42dd37f-7083-477b-9ee3-24933ec406cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee31b635-76e8-4d52-991a-a93d8315cd64",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce9dbbf8-e693-46cd-a167-eeee5fc5da7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "210da8b7-df93-4f5e-8bcd-d9c47095420e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3496cfa-6c4e-4625-a3a8-982071018952",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d85ad2-5988-4a02-9829-f664c098a25a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bd8b1de-77af-421d-ba24-16d90d968b82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39187d8c-d267-42e9-8ce1-2dfaf1d2a597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c7e4acd-a7d9-4b0a-b9c8-180204ff948f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a28eb060-55cf-43ca-ab8d-5aff5a048b27",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68dec064-c2e4-43e9-823d-0e404c42c8c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "956dfb59-510b-4d0d-9ab8-a81bfe4ff227"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a641334a-25fb-41b9-9a49-366fb8ccc192",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83891060-6294-4d00-b121-5e8e2a3baf5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa1dd26d-f403-465e-ac4a-b72f31ebd8fa",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1d7fb4-5e08-457f-911d-cc190d8eac08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5aa2b8b0-a53b-4e7e-bdfa-c111dc384b8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b58749-37e3-498a-a3a0-e1000215382a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fc3533c-5483-45cc-8fc1-b7940310ae2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4058225-82e8-4cf2-9242-c2cc54290324",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d9d4519-16fa-4f6f-b738-0896e83151f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b6d88dd-ce04-462e-953b-209139965b20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "340a36ac-55b1-4689-a9ac-b34713039171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37744709-8ef1-4dd7-a7a6-cc11b6f295aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b92b3513-7f09-4596-9a7f-e624dcc8c45f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42d61853-c243-432c-9f99-62bb955e0a8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "724a42e5-6f82-46ac-855c-498c22478557"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da74cb08-e294-41c8-bfd4-756e23cc18c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acf062ec-211f-4ddd-a4fa-0f5e00f17ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0145c06c-3267-4881-8b32-905878e845cf",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd54026c-acbd-4817-8b51-fee9f609fd14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52c2b232-e947-4540-bc5c-4915594d2535"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44bb4092-b44a-42cd-bdd3-c28e6573763d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b576af0-6c4e-4372-ab35-d7a6196b6ed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b72f415e-ea1c-48fa-8207-b18b6a375f30",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31d2fede-1140-46b1-b848-0ee098bd47b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acbeca74-4f28-4744-ac7e-c16324bca571"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac7e8b71-bb78-4bc8-a4f0-e7fa4aab81f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2b6edff-aace-4f89-a1b2-5bf76225dd20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfe6d6fd-5d7c-4614-a79a-ecfaf572d962",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97f8431d-6274-43ba-9e40-20d7bf1573d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba3d5f9b-55b1-4f3d-a383-3d560c71d8b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e433b5c-95d9-4c39-85d4-3ec36c2baddc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81c89a1d-44f6-4f9c-a7d0-b523e2bc91c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dbf6cd5-3b5f-48fa-918a-ec5bb21b3491",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45833310-d976-49b3-a7a4-b9dc68f04b6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45623ed4-db6a-477f-abbc-a1b49682eded"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f70744c-9aaa-4ddc-81e6-39a317e8360d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c00a7fd5-a858-4288-b8f2-f154cfb8d22e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f902f780-9139-4731-a21f-0593179bd7a8",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c99eb1-9f12-406c-888a-f6f08cb06225",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23b830df-f4b2-4ef7-87b5-15500d3922e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e59a47-b0d5-4031-807c-bc1baf1c2a29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a57c550a-95f0-419d-a153-5d6fd6bcfbdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1132f4df-b696-4978-8887-964cad380a57",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4faa9ed5-4bbf-41c7-9b94-48c78408a6d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6ab265e-9c62-4d4c-98b0-90dd292dc9d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e1be585-0841-4569-9782-61488ecb17e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fb3a503-95a0-46ef-92b7-c84b9854de44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c0b997c-c9f2-42e5-8f30-8fa3d8090a4f",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3184c8be-47f8-4661-a6b2-cb55f56696c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7e34b1c-f672-4d6d-a0a0-a05aefda606c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ffe81e-5ab9-4520-94f0-079261b1b0a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7240aa26-a0d9-4b4f-80fc-7ac0db195c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f741147f-570a-4cfb-9882-870142b5d0cf",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8533044a-4205-4c1d-9d30-259da767e5d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4aee326-d62c-4c1c-95aa-578ec3d68442"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dedc1ff4-bd45-450c-9744-5830bedefef2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e982fb68-c74c-4007-ba56-5fbed6f8a135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5209aeac-5276-4558-a494-4029c1eb1397",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11947845-0249-499d-9160-9e25bd71363e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15001237-6e37-4dcc-8e9d-5bc4a0f4c3fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46d44f87-d882-40d3-b873-c43614f2dda2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcd21ab6-13f7-4336-93ee-8fc3d122ecef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98103c4c-a4f9-48fa-8e88-63a26c5eb0db",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6244aba0-9ccb-4329-92cb-78c7aa2d5e0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d8ba3a6-41b5-4925-b092-ba0e249d84c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "479ca7c3-d18c-40f3-8662-4e9ea690a9d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70d159ad-6c46-44a0-9ec7-462be3ed655e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50c394a7-21dc-45f6-b098-47f3a01f7e74",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b848631-b6da-4397-a13a-d4332ba64329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06f8d74d-6d8f-442f-b314-c393900aba23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6548f41e-3d95-4485-ac7c-5ff911b4d0c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0d6bc63-9bb2-42b1-ac11-60d98add00fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f449150-3850-4b5d-88de-a4718fcb78c1",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90d9876d-d5c9-40c0-924b-1f89b48ce243",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14a98e96-e776-4b7f-a5a3-37841c1bb5f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c34756a6-8d9f-46e1-9fed-7225f5cce14b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67d50f86-e3e9-41a1-999e-cdd76952b222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdc51245-7f17-45f1-a953-8832764eeaf5",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de00e94-ec14-44f0-91df-ed8ecaa1959a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4354651-6680-490f-87cd-e5e9d7cb9e0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70180e5-4149-453b-98a7-7320f310bc6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcaa227c-8efd-4ad0-8397-9cf9cd954fb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bec1374-0d85-4db0-b829-186c09088b1c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31588261-d613-4dbd-a121-4cb2323e0003",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af548b50-6cff-4cfb-ad34-4e02f973f6fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6dce981-c920-4851-8be3-3c4d3b80ff84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea2abf19-d6c5-48ef-803a-4c2904319ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f2aa806-d692-4248-9ee6-a871303ddf79",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f88aae2-652a-4f07-a88f-b6c512010aa8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37d9d2c9-cde7-4011-a179-e467b3fdddec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25971333-e09b-4eb9-98f6-817527a39dce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52de4ee2-7629-4c9b-8cdb-25428d9dbcc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e71b6a4-dfd7-46b8-977d-b69c328e2658",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df2ae1e-ee2c-4c75-8d2b-ce69d97006be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d7661c0-5bd5-4c8f-9a15-b022ec0b5edd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aaa23b7-ce6e-4b25-9c4e-959490328bbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d28f560-4cba-43a4-acfe-b51693e88322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0da5976a-a61a-4fb1-b0ce-04232e047532",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "300ff51b-a619-41e2-b659-15677100e0b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20f0e1d7-a3a7-479f-befc-87803939227f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec52069d-3551-425f-986d-b2212fb1991a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e583970-fda8-4734-b495-b409b0108ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64c7027e-9667-4c82-a3ca-0c2e30418827",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0a40835-b9b2-4fb4-85e2-121f3e3c7e83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ceba221-fafc-4542-8d3a-18fa782783fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c225d15-ef8d-4d4d-9ab9-4aee4fb3d01b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f66810ec-ae89-4464-864d-16d7c0dce931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b173380-adff-4428-a989-d842f8c1c619",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1be9da2-8991-4fda-8f34-1c9c2ad296a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bfc378b-5472-437d-aa52-b5dd56468463"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79d5f7a0-d066-4659-b112-ccbe9838c917",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "909bd25d-5096-4b39-8007-bf46e7b6f71c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c0cd447-bb14-41a9-8833-5e972691005a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0149e33e-63b4-4883-a7dd-7294019ed218",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a50be84-038f-4d59-a722-21f30cde95a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f82fe9f-3a12-4847-ae56-0df30d6cfbf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4e88bee-926e-4a37-be72-9918818749be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce9171ed-b790-4d51-bab5-bc74f450d642",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b274cfb3-87dd-4a10-97b8-a123ab1b3bf6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c856545-5c9c-4de5-ba9d-fb1ab905bcae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41daa59c-a1e7-4086-9b0b-bd880da59de6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4f73e05-1311-4730-a8a5-f0daba9c2be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9af35777-775c-4bbc-b58b-c28560afffc6",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62f1eb2-d3db-404f-99c8-5dcf744c6c9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b0e7fa2-d1aa-41e2-8b34-e534a0a53432"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a542fcf-b99e-4aa4-b947-ea7876528095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0e8ef23-d9b7-4c73-9634-159d2f0d7b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88220208-cdf0-4b65-a82f-02d9a1e7e16c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81cb1583-e05b-4b2e-8ef4-ddbea9d9f1ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4468b152-22cf-4f3a-9e5f-baf29aca015f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3657a62a-ab53-4b2b-89a8-49a52d114eb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dd6b816-c9ca-4834-a401-1eb04d011f49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6283142-b644-4dc1-8db8-7574dac34cfb",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb49cd39-200f-494e-904c-7fa9f9a4fee0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e786bf27-570c-47e4-8433-7bd9b0e397ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b6a0677-7bb1-41a8-9382-b01d1be0da2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed46c6be-2685-4bad-8252-cc0ad4510690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65172f10-cfea-49d1-87ab-d6a65be6a91c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d71bbb0-1b80-4ac9-ad6f-837382312a69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3525b90c-e7f0-4836-82d5-8912d691744e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df7348c7-c2c8-4faf-b62d-e1f02c5dd443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81fa4fee-84c7-4207-beff-de4343f0bd4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97db68bd-385f-4e41-9eb9-59b54c70387d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12eecd33-92f8-4d8a-96cc-a89c6c810c82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8b995e8-1635-4ecb-9304-fe4d741eb211"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8af20634-d0b2-49f9-8e4e-e7d62b014278",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99741801-e6ba-4189-aade-167687900237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8a256b5-b309-4733-a917-a8610ee19c8d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1a2651d-9ce9-46c0-b196-3b120bba022d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd0177d6-b27b-4f62-8c38-3dc8ff0394ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "313a11c8-238e-4fe9-8887-6a60ad95404d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b14d7f84-5ef9-4913-a037-29cbc5eb40cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ae062d-6997-4f7f-ad2a-32a1bfcc1134",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a1b9c74-b0d7-4ca2-93eb-55e03176697b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7725273-5fae-418e-a45f-b944da0792b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9bfa7f9-03d9-4ee9-8f9b-8cff08375d1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a02cec0-d9f9-4ce7-963d-c22fec66ceb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8cfdf8c-4b76-450a-9e3d-2b2496891848",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d9c84e-de64-4dce-99af-beca185153bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4ce4a10-6426-484d-a8f6-011e988a4998"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cea6cfa-8054-44ef-9c89-765a7d129807",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ad7b619-3289-45f6-ae4f-cadc67bef55d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29ff269a-0f9d-4f8f-bfdc-232c37883fa1",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a628461f-271f-42fd-8d08-69de423aca63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ad6c329-c565-470c-9899-c7b490c213f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cb1f019-f72e-454a-8952-f936bd68b16a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d192f20-1da9-41cd-9534-6c4e3f44054b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835a1a02-122d-4034-b120-a04e24b409e3",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b873c6a-04f7-44e0-9242-c415864ebbc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37ac4dc1-1f83-41c5-8b06-ada71038cde3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e75d90-e083-419d-847c-32dbb9f21251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f990a5c5-86d7-49bc-9fe7-eb1de9f60327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d529f4c-1fd3-46d3-9a56-2669c970c05e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b1f4d85-9560-458a-9117-51ef393a8f0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aa9275f-21e4-413e-a297-8bf0858bedfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65cf106c-ca14-47c6-a64a-886d659bdf79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f159641-9899-4118-9357-19313045271f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32482840-9ff3-47a7-9464-8e9e5568b3dc",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d0467f-39d8-4083-9c0f-7edcc3edf55e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "127bfcb6-2ceb-4d63-bc17-05bdc7be9096"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bad0226-0fcc-48b9-95a4-f0b685f0cd0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab219ecc-e0ef-477c-8e4c-a0cb22fcdeb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f0c5829-43c5-435a-b0c9-9cc8e9f2e3c0",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06624c5d-8afa-4534-8523-777866bab943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a048b7d-eb01-4836-be70-e669efdb4a69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d4c9cc-125b-46cf-abba-6c12bf7fa23e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ecb0666-2209-46d6-8e2a-0178446916ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4de81bda-21d5-47fa-bd91-99d1b912a32d",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a994eae-69ec-4464-80f7-022847226943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ca1afe4-3686-4254-860a-08e01119c238"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b92aaf95-4f0b-4d48-ac71-4f9869485208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cebf3970-8294-40e3-b948-7f67d8bc4fb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a0f936e-15a0-4a8c-a0f8-79476b0cb203",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ceb0b4-b15f-4247-b388-b460b138a059",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "068afcb1-3662-4346-811f-025102336c26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a2b091-6dfd-4783-b01e-d7961247448d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7405032e-2698-452c-83e2-37ab05b526c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb1c59aa-b6b7-48a6-a774-810258cc743f",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff66dda3-edc8-4c62-88a5-c21ce22df825",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90f596a2-3bc0-48d2-a3e1-dde48b4b6f4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6037dbbd-a6ce-4ac2-b838-c02261717b26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f0c4a81-7935-4dc8-b6d2-7a4e7c04b543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c28d12bb-dc3a-49e6-b6d8-b75577537d38",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d0b4210-349b-4f72-95d3-18c12a66a561",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "819d7468-143b-40ba-b91b-7e9bb63b4f37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbdccc4a-fdf0-4a76-a12e-50f455b04b6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4a1c688-44a7-4dc6-ae69-c8cc851e2610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0429efae-3749-4550-9ffb-b35ab842bad9",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc1f7bc6-e283-43f6-bda2-2318be07b493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "928330bd-e0b8-4858-9736-0db89c635922"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acdd6acb-0ece-404c-937e-054758c3dd28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abbd84ad-f052-4b5c-9c38-cac2d57d76f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a16d976-2197-4b13-935d-c8aeb0a0b6f0",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec716a2-536b-4d2d-a468-da410dde5b8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f88fcc39-64d0-4c55-9dde-3cfec7ef9328"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d3954e8-d71c-4a42-9788-b25c401e6919",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "204c4907-1951-41a0-bb5c-87da59eec987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e72d64e9-cb16-458c-b0be-7a614403e463",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f97dbee-b666-4f9d-8b5b-04410742c2b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8c73143-10c7-4750-a684-b7d589fa4ac3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10237940-6776-45c8-81bb-0160f99b72da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b03c282-f6e1-49fe-a24a-9e6c713a6cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dcfcfe9-3f17-41a2-9b85-83b4135236c5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6acebf89-0e32-4303-bec9-dffbcbc43398",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "562bd092-8c14-4cd4-8734-8386b7886c2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a3a6035-2c3a-4a0a-b008-2cd0ecd4fc06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f10b7aab-46a0-4594-b54e-c86980eb05e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d71b15-f3e7-4f54-8bf2-d2159b819090",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b470626c-fa70-4ad8-8052-d0e9d25370fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cc0e589-f039-4cd8-80d1-91a70150d98e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e6da905-2c58-417f-bb70-ca635886531e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60a50e1f-bc35-4c64-ad4a-c3d7ecbdcf5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdb294e6-9a74-49b4-99d4-4749478ffbdd",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab4e15a7-df58-4564-b4f5-31e88f8530d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63aaf443-4653-43d8-86cb-d8335bd2100d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee6c76d-d52b-466d-b07e-18b6b64a399b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b63baa6-7821-4cea-92e5-ab09b12ab499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba0e42fa-e704-46c5-bec8-fe6a1dbd00bf",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "654cb51e-4094-4f77-a524-7c5de9c5b759",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2ea8dac-d06e-4e4b-8efa-445e88019685"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8cee894-7110-406e-ac14-9b56219195c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5fa67cc-5fe6-4223-9c0b-7b848f0848bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ecd865b-e066-4103-a271-e29950ab7701",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec8ba1f5-51a8-4c55-93b7-b1fecc491d45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7576e8b-80d1-4771-8bcb-884a64277d74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1aae03-3bb4-4dc2-8369-4147b94eebc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a731f599-d9a9-4576-a1e6-86a02208f147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53706866-b589-4ddc-82b1-410cae2b556f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df2c7aee-28e9-45e3-8094-26129e7c14c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "755730fe-1df6-4455-8060-4bde120f84a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df15718-d4d4-4c88-8f60-7d761a20d979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31633f4f-a745-4320-a487-b5d2b82f97b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a302f3-b79c-49bf-9088-c51a601ffb1f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81a74ff2-67ea-4261-8575-7a04d941d923",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e75b77cf-3c54-4a79-a66e-920f05021724"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "992025c7-01b9-4bcc-b96e-e05c120efff1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e562fff7-a2db-4c58-a271-257116fb3164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb6fd34-c64b-48bd-9f2c-cdaa97d0997c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "969aa918-bc62-43dc-84f5-77a113dc5b9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f044c2d-a885-4a9a-a3fe-77b7d394c2b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a64ba17-7bf7-4b54-89dd-7d9862e34b45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33fe85b6-bf42-4028-ba31-cbfc18a938dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa721c05-d4ca-49a3-8c3e-79d06c5b6987",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b09edb5c-f0fc-41fb-b31a-a5e6a863c16f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d88db01a-968e-47e5-9146-017c2f0e1c58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a6f3446-a9c2-4737-81bf-d0fffcb1a7ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc9282a3-fd0b-4408-8ebc-f09fa82f93bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa39e9da-3051-48fe-b252-8dde099e44fa",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b903056-97f6-42ed-bf91-575769e1c55a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5872617c-f95d-4409-8a69-530ffb70d7e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dedc6a2f-7848-490a-8126-9a5513f59a73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77cf4fc3-e81a-480c-a97c-12a8e824f951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "029bd68e-1ca9-441e-b273-c99781564b5b",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ec9f2e-a559-4f6a-ad3a-adeb2522d58f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12ff4fbd-208d-40f3-9bb2-92f52403b1e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0869ec95-ea26-4151-b3ad-a62dfcfd7640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4448da77-b96a-450b-9520-8d542244f9c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9dc1ecc-e855-4245-a735-a10a1d67e809",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4fcb17c-431d-4b41-bebf-4ca3106b5941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab186b4a-9c48-453f-9ea7-3139f6beb238"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7473677d-ecb3-42ac-97d8-5c130decfaa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8127e7dd-7cb1-4f29-af59-35c5d1e59dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "467b63b9-bf10-41b0-a8ec-02cfd525c973",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10c3950a-dac8-4f5e-8f28-baf7b9875210",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9acc6b49-d816-4b5f-91f3-3eb4d682ddf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9722b13-5f67-4c1f-abd5-f136c2e7ef1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8da1bace-e32f-4452-9dd4-a68d935146d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32da3e0f-0bff-4e62-ba9e-552f1d25a0ec",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48943511-daec-4697-9f70-7470a177ae02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "995c5689-a942-4e2b-bce6-eee7c3c1e6fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "356faea0-bba2-4bf8-816f-ce31a32791a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f55c497b-15f5-423b-a8fc-427f96174b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07dc11c2-0033-4cd7-a4a6-2ef50ef0035d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe506cf1-e708-427e-8ced-ef20f6040d4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bc2aef5-a2a7-430c-af01-00bb05dbc2cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87227255-e057-483a-b553-7565e5ecbd7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e785c4f2-c34b-4571-a619-4cb706ac72b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36065e71-d1fb-4ffa-a8c4-992fd6dbaba2",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa2ba49c-a912-468a-b47f-0dc235830e00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29cbac82-7278-4b4c-99f1-08455216c7fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90deb044-8e5c-46d2-9ea5-c208439747f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d215a836-3415-4e1c-88f2-3075f54922aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5807ff0a-ea6a-46b8-b7e5-4a6ae6914838",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1acf42a9-f9bc-4a5e-a1e7-6117a400279e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f099e4dc-1df4-4a20-bc2e-6612dce387a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01485175-63cf-4273-b055-87db4fd9fc05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c24e1a2b-7af8-405f-9e75-d9eb002f8c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e3ae57-f857-45d7-b7e9-ab0f1969c79b",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "656cf41f-9f89-482a-a9f7-6260f6a72c54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a495034-d37d-4950-81d2-91a871d2481d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83547955-e70e-4c8a-8814-6240b3d8b92b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f20261a-5ab3-4015-ae7d-9b0568237410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1ec2994-0f14-41fb-8efb-e32482b081ee",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3342ef60-997e-4023-af2a-e6a353149898",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35eb1fde-6e24-49ee-8ddc-b988f9cc4ee2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "225a2f0c-17f7-4a2e-99b4-d265317a2399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a6273fa-b49a-43a1-be11-76e37b3e5351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f3d560-826b-4bf0-965a-a9596ec222d7",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b8540b-ae93-4d68-a743-7623ec219b27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32154a6b-2850-4d6c-a63d-8ec20f56c464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d8a771-dac2-4318-a1a6-5145e804e472",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca410448-3b81-4905-a2de-fff95e0c1654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae802f7-c522-44f2-8c69-0969866f58af",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "194ab8ce-ea34-4d77-a6f7-a3f5c77ebab5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7eeba57a-74f5-47a2-879c-ec3a1e9a59e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd01bf4b-a344-43e3-bb49-cf4bb0256107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faf9fd32-a869-42e6-8518-8e27ff6b11a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c1b8502-2f36-450c-9c89-cece60648e90",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34a2ba34-bb88-4f85-bf3e-d69099796498",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52910799-261a-4968-9dad-a3fe61deca12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd0f78ba-7336-41a9-909c-86d9574698fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef4134f1-2fc6-420f-9fcc-c8ebff310af0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a9c3d4-ce74-4646-b31c-fd5bc2f93e7f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a8626b-905b-4aa7-bc40-1f54abc52abf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78af50ca-8f62-4e6c-b82a-b6a3b1f0d392"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6045cfc8-8ebe-492a-844b-17ee03d6d1c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8ecff7b-2684-4a55-bb28-f83dad47dd7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a3a5e87-004e-42fd-af91-26e6b841e1bb",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1dce3e3-dc64-4aa0-a055-bedb524eed80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "905b7b88-052f-4859-9366-7d2a4354d312"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fd73c47-fa92-4bc8-8a91-79b7714c29ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7c293be-b31e-4b92-bed2-ab493eedbe7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae0682f6-fbf0-4d7c-bd92-da60c712a8c9",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e22cde-5e66-434e-9758-c23b52461d6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "411b6d51-b31f-46bb-a063-395d4d815224"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e717bc9a-2548-4cc2-8e48-0b0be2f13e02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67040d8b-2c05-41d2-9518-614d4a94ea75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fde4a70-3774-4cd7-ad6c-5e30f76ed7a8",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063ba85b-550a-49c2-b5e3-417960321248",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d974adbb-12b2-4e28-8cf4-5436a6377f49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0069b12a-2b24-42c3-915b-53a129416f31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e7d505a-67a5-48f4-912e-b3a36cd89937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2411f15c-6407-457d-9985-e00020d5198a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d565f9-eed7-498e-a10f-2404f2efa754",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21ba464f-9d0d-4e67-acb6-0d1ca1717089"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35860e38-184e-41a1-9e87-7cd8b50f9966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aac98b8b-c789-4bd6-b5b1-ec9e123cdf6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f216c0-72ef-46b4-a524-967645a2fcad",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40dc8c9e-41ae-4d22-8405-242d2f5a6c53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25f01f93-9e52-421a-ab8f-344f12b50bd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbe8dd6d-ea20-4328-9ada-887b0a318c0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9123a9c6-faae-4b0f-88bf-f480804daef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d98c2397-809a-45bd-9980-4e35b9d7a2b5",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b34154-1e45-45ac-99c4-a8fdaac2d3d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52eccbd2-faf1-414a-9824-815d3fad1cdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf242f85-7dec-40a5-a177-cc877fa16824",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bde72ba5-08f5-4097-a088-252e2bee736b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b9b0431-1ada-4628-b928-ca68db3b7bc5",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d8e629-5ccf-4a0a-9158-908e5238c5e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8df925d-5b71-497a-b61e-55d24684586b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d98ff09d-a363-4f73-a69f-0d079a6f6716",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "918c3994-ee33-4f27-a8d0-13f5d1d96475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f3dbed-371a-443f-af04-c836e0cfa96f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7026d3e6-8362-4c09-960b-778e4f3f7d57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "697d8b84-24fd-4b5f-bf15-8da81648ff46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe76684-de8f-4c44-a233-3a7b52ac863a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17620ee2-02fa-486c-ac9b-541cac5c0ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad13fd1-dd53-4df8-a8fd-408d1d18a824",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41706f74-905c-4a29-8508-55dcc215aa8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b4e02f2-3d1a-448b-a058-4fa63e6c8335"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b2ba56b-2558-4b18-801d-3a482fa77505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d92c7e72-94c8-4793-8733-f75c19be4624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8746ff6d-9d93-48c8-be94-9bbb9831d457",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a31b2a78-7331-421f-a996-81d53488a61c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4571e22-af3d-4c09-8bfb-9dd5af94641c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d18746-99c4-481b-bc92-39cf7bcbe9e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef7d8ddf-0edd-4fc9-9f6c-f44ffc9d719b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c562e385-109b-4ff4-87ba-40c675a720af",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fc3aee5-d759-4e24-b9c1-8f4e61ce762f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dec6c15c-5cd3-4c12-af8d-4c515ba5390e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85ee41d8-ccdd-4b7b-8fc9-1939e4c915cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "045a8fcb-7adc-420e-8b50-801c333433c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdad152d-bff9-4226-bae0-36ba9d47fa4b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef18f9df-4fce-470c-82a2-60533398e71d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54c67d7e-a983-4181-9dd5-729acf884ce2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84f74aa3-a180-4d09-804b-fa9f61386bbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac9700bb-5797-4630-9eb7-b6b35f1fa2f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b841b82-00a6-4f14-91fc-6f129dd38dfa",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf470ea6-416c-490f-8fb3-bc3d0b89e912",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bd5e85b-f5fb-4241-ac95-32c253557900"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76ac3bc6-79e7-4688-90ad-d36271cc50bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3681a27b-33bc-4f1d-9f9d-85fe344069ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35f7d6bb-c8ef-4485-876a-3c17d516216f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f4ae8d-143d-4a69-8af4-1fb6303a0e96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87adc272-b82a-443c-b10c-fadb30e67f07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f4ed1e-c7f0-4e94-88aa-8c4909a494fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfdf6e64-a773-4d78-8751-cd98c18fb25a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37af9088-9bd9-4daf-9009-d33aa2c584a2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60283360-b5f9-4b70-bb78-5b26e7cbfa75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "462f318e-470f-4cdf-96da-066559ddc544"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "818a51ad-6d8c-4218-b269-418f1e905f69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d473bf0-29d5-40c6-9a7f-cef01aab6aaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6a4301-28dc-4eee-ab4b-8db37cd55538",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a82314b1-4942-453c-a795-1f727508cd39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fea0cdd9-e59d-4589-8264-03f7a2f0419d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be0d011-22b6-48bf-a592-c87c60cf9363",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee9312b3-a846-48dc-ba11-ab12ad36ebf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58529191-81b7-4f39-9b90-f89562ba9671",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c22615-bba1-4d7b-a23b-37df0f03b14e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1486461f-0ae2-40a0-907c-b03581db5103"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6996f55-f9d8-44a3-8784-f8f3148e37ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "764a3c45-1069-44ff-acdc-979eb63ccefc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "119d59e9-caf3-4121-989f-0c617bbf4362",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac8e274-ea7b-4fac-ad2c-f1482eac9332",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a647b9e-f981-4877-bc7c-8396de7560d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1424dfb0-93b1-474d-be56-14fe84a73845",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "579a2f1d-373c-4130-8607-f48c090128a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ecd39e9-d262-4764-b9e1-ebb33bc494f2",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d332dfc2-9aeb-43f9-bde7-6b29cad95880",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c31174e-e5c2-476b-877b-ab9a3952ff1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20d44b31-a2b7-4917-95d1-74cbac6edb43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4de627d4-0d67-42bc-baf3-0639c935529d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "151fe7ea-ae3c-4c5b-bb84-b2560be53022",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "493f472d-a8f3-478a-950e-a4b963ac4a5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b647242e-f6e7-4cef-8165-5e6ef8ebecc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc1f1df-cc05-45cc-b94e-b922ffb2c363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1075e2c-724d-4422-b826-a66dc11c3762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4187f54-f759-4f39-8681-4583204e7119",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae32216f-802c-4d59-9c42-df88d5bfea29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c79db852-c50f-4d08-8398-579c995c3aab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d8c4c4a-b62f-4d28-a350-a81b8e20ee97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "521c5016-468d-49c5-8460-ac8afadd6640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96356c62-b4c6-453e-8b4e-7b7849f1b412",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ac9a35-d7ec-43b2-905b-8a76d06c682f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d42d4fb6-510c-45b3-ad6f-3809ea1df34e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebdbccb4-58d4-4132-8fc8-85e6844eb0a6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fbc03b3-a838-486c-b6d3-fbe46ee042b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1d2ec17-76b5-4d48-ab1b-2b67cbf46f0e",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab2bf9d-135e-4bd2-bbaf-13c41dbddf20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccde9e92-b239-4e6a-9953-06dc68d9b992"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90424cbd-b0f0-4a43-8bc1-822dba705cbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5f8e764-c62d-4325-b106-bd6e842a3bfa"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9818bf97-3f59-4c7c-9f04-3bcd1fcfae85",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "36968fe8-8823-461c-abbc-7f4645d9160a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8d23522-e0ff-40a9-a051-d41a67b7168f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "525083a9-493d-42a2-980a-4f64c5b9cafc"
                    }
                  }
                ]
              },
              {
                "id": "40081b96-dc24-4b5b-a397-dfa5c11b889b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8ea64129-7888-4af9-a2e2-f60f63ca13fa",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d067b1-4092-4067-a600-61371d4147e8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "57cf9f21-bad4-4b5b-8c96-d022c6df5ce9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fdbd7e1-f971-4072-8d7a-545078f0dfe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4f68b3a1-acad-4f5f-8546-7e9b45557aa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ccd8524-2637-4167-8fe7-501dee96ff7a",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3d6ecd9-32fc-4e55-9d40-8794f02da65b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c165c37a-93d6-4c09-af73-bb42031b2812"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0298a1c-171e-4fa4-a134-f76ece584ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0fbff117-285c-4134-8b9e-e3a9ee975d25"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06cd7edc-618e-42f8-8c0a-b18df1a7c7f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d10f909-4228-46ef-bb39-b29985d59ea4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e25be52-7c39-4603-8b8e-d8311f5eaf40",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "96683795-88b1-493b-87f0-30e4f7ba46ab"
                    }
                  }
                ]
              },
              {
                "id": "f476065b-b113-4abe-ad64-3677a22cc49a",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "f269a15d-d9ac-4721-a759-79e183670592",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f5dbdaa-05f3-4beb-892d-12a05ec58767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "18de8dbb-ca7e-486d-9e93-868213e9bad3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b74c0926-1f4e-4a40-a6ee-80a28d70b10c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6ac8213-ed41-4710-8387-047fa99dae86"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d625ac37-e44c-4809-8ff9-50f9fb83937c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3057fc76-bff3-47ef-9939-fefd60aaac51",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f9e3157-1da9-4fc4-8fa8-0d88ae3e2b85",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7b25fda2-64ac-48f2-a82f-020037e0ac73"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d3803891-6b85-49f5-bd26-9afe00cbd59c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "432ca3c1-63f0-4569-9dec-caf3c10bd505"
                    }
                  }
                ]
              },
              {
                "id": "d84a3c80-4e93-4bb2-bb63-6efc9bcbbbbf",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "252281ed-b313-4fdb-bf97-d57b15c7a7d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "22052eb4-2058-44f7-8f1d-30d0b555c332"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f19eba72-85bd-431a-9e0e-b3b0947f470a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "08f0f3b7-ce0b-4287-8937-92b68a73e5a1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b33fd57b-0ff3-4498-8cf5-3e1c1d7dcf3d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "54906ff6-3dfc-4228-95e9-be614f734d8a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e4bba79e-1e15-450f-b5be-0b2eda14776f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d7b2d010-b746-4ba1-904a-6e3d17cad293"
            }
          }
        ]
      },
      {
        "id": "edd9b681-3797-4e24-8755-a4cdfd81f0ca",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "66678106-2492-4d6f-b438-8a0c9665d6ba",
            "name": "Negative Testing",
            "item": [
              {
                "id": "39aa2caf-b7e3-4922-b53c-621a4b4055d3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1eb4fe35-a1cd-45be-90c6-dd3f0aa8e9c6",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012c8552-87c2-4b92-ab31-f2b1c72368d0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "34aaa6c6-48f1-433e-9c63-6715cbfc0bc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f36df950-f15e-4dc4-9386-5427ef6c4f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2924b8c6-1c4a-4771-ab32-bb5ef8a8e027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae1f5c4-c784-452a-a578-1ae2065d7e67",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1af47a-8c7f-4a48-b501-25d3e660b3b1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ad9e2165-f5b3-4595-927d-66e6ae803260"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38cfc5c5-2ee2-4998-a4cf-8686fe74db8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "580e0b8b-4038-4341-b7ad-3b0e6e1a311c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "beef5cad-6489-4ec1-a8db-b594e0b6552f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41d8ebd1-9758-4db7-a4c4-cdd39885bc7b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a8dad9c4-da99-42d5-aeff-1be7ff2743ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9f3bca5-402e-46cb-b41c-5d4676bcc853"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "51a703f0-b99d-4d00-9413-d58cfb898518",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "aeee6207-067c-4cf1-bc97-212f37e6bc4d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1aa033de-4912-4a5f-ad1b-9984494270ac",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "363109cd-9aa6-491f-b4b5-f1545b1e1451"
            }
          }
        ]
      },
      {
        "id": "459e5d61-b1de-437f-bc16-31ed214d6c87",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "5800e33e-b991-4873-95ec-21ac9f8a0fdd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1b63e482-247b-4ccc-9feb-ff2c3fe0f427",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eaf8563c-8a74-404c-81be-6b56e20d5103",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8987ca6-f317-4243-ac43-a6ec83c409ed",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "04af17bf-e150-4ecd-a66d-cd48017b3911"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59c668e0-b545-475c-9a0a-f256ecb3482d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b2d7fbb-440c-4cb6-bad0-7af69e850c62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d5e70cb-06c1-45e0-ade2-e905c6aed807",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2802da1f-488a-46fc-a44c-c1d14e5827c2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9a335507-964b-4fb6-9431-9d33f586bc0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb6b47a-44c2-471e-919a-b20140c40a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dffce5f5-e1ad-45ee-833a-a5f59946b4d1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16ca3827-e3bb-4c47-a89e-97cb6477faf9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "66aaaa5c-d3bf-4347-bea0-58bdc012ef5e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c969315a-50f2-4978-977d-d9ba920e7cd4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b36940aa-5ec3-4978-99bf-f18e9208d71f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "32d099c1-bcfa-4fa1-9180-8b5209f4d19a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0672c15b-b556-4089-9bd4-6e2d130701bf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b08086b6-8747-4743-bee5-e74d5b7c7666",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c59595a7-92a3-4b82-93ff-55a869f69190"
            }
          }
        ]
      },
      {
        "id": "fb668cc3-8bae-4a8c-a9bb-b94a4d04ee46",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0883ab0a-7abc-4d05-b5eb-171afc3b1588",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7580c558-3349-4740-9402-04d9c0b9b9ae",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d8c353f3-9eac-4e33-9187-e5782970c071",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a3f3be6-910d-4c12-841d-5f5af63ed819",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3f75998e-3676-46ae-9bc0-8384b2c19fd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd252764-4ac2-4b67-aa88-323697e56f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8b450d4-f1cc-472d-a89d-515fefb3e28c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c126ee-00c2-44c3-afb1-757ef9dc2009",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "727facf0-6842-4cb3-87bb-8f3dc8775578",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "250481d9-9365-49e8-b486-7059f1621b35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8058ec56-105a-4be2-9c8d-c348dc08d406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48dcf492-406a-49be-a0a3-825cd431d7b8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "facea6c0-4871-4417-b9ab-1d08f5c55edc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce3b04da-b0bf-48ef-9569-e3e72e29eda4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "585896c9-0317-498c-9923-a7bfcbc62584",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "042daaa8-1777-435b-859c-5385798c22bb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d62e30a5-43b2-4615-830e-c3260313126a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "18be8fe4-c992-4abf-ad54-5a99e85bcbc7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9ff3be33-1c7b-480b-b8b6-499d14674a6b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "608a6cd2-21d7-4739-af23-8ea7014d5638"
            }
          }
        ]
      },
      {
        "id": "e00facf0-3000-4871-b0b9-4b78eccf6188",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0d246ab9-7bb0-4f2b-93b2-d32713076b6b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "35c647ac-32d4-4c2d-90cc-ee0d826f462f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "93493649-f8bd-438f-9617-2a6e4506a241",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e8f0d713-a5ce-4e4a-b0dd-0079478e0b82",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a33cba19-9549-4d6f-b422-b2399c354527",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 113.49236641221376,
      "responseMin": 15,
      "responseMax": 1138,
      "responseSd": 176.1007852990718,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1673138438914,
      "completed": 1673138481793
    },
    "executions": [
      {
        "id": "7dff4579-24d2-4793-bddb-e01d2a82a540",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e7015a70-ba23-4231-9fe2-9b7c3fd2d993",
          "httpRequestId": "8bd08d84-0f93-4e1b-bc51-efecd7696d8f"
        },
        "item": {
          "id": "7dff4579-24d2-4793-bddb-e01d2a82a540",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "171450b8-96f4-44e8-944d-bec3594b76eb",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 0
        }
      },
      {
        "id": "f7b751f6-8cf7-4bc0-84cb-06fb9aedfa14",
        "cursor": {
          "ref": "ab6c6a8a-675f-43e8-8638-988192c91e47",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "37831fc4-75f0-48fb-8bca-af74be4ee353"
        },
        "item": {
          "id": "f7b751f6-8cf7-4bc0-84cb-06fb9aedfa14",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "99b15dc1-cad6-43aa-af66-d6c3e00408fd",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 0
        }
      },
      {
        "id": "5835df62-80f8-496a-b6b6-2435b049f487",
        "cursor": {
          "ref": "631e7f56-2872-4897-b995-d14f3c5b3744",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d8e512f2-4c30-4cce-ac86-70d847c02713"
        },
        "item": {
          "id": "5835df62-80f8-496a-b6b6-2435b049f487",
          "name": "did_json"
        },
        "response": {
          "id": "6e8edcbe-a248-460c-9856-ef7392b240ab",
          "status": "OK",
          "code": 200,
          "responseTime": 167,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e74a813-5ddf-4ee9-ae73-3452bc84c00d",
        "cursor": {
          "ref": "b9c8dc93-e7bd-450c-8530-73a82d2ba01b",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "93f9bc0c-7df4-41bd-8835-a3a26002e3d5"
        },
        "item": {
          "id": "6e74a813-5ddf-4ee9-ae73-3452bc84c00d",
          "name": "did:invalid"
        },
        "response": {
          "id": "9aeabf88-d238-43ac-9f36-47cab39ef319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e74a813-5ddf-4ee9-ae73-3452bc84c00d",
        "cursor": {
          "ref": "b9c8dc93-e7bd-450c-8530-73a82d2ba01b",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "93f9bc0c-7df4-41bd-8835-a3a26002e3d5"
        },
        "item": {
          "id": "6e74a813-5ddf-4ee9-ae73-3452bc84c00d",
          "name": "did:invalid"
        },
        "response": {
          "id": "9aeabf88-d238-43ac-9f36-47cab39ef319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "364304a8-d2c1-457e-b9a2-d64b31ea8d0d",
        "cursor": {
          "ref": "3cde67ac-f8d8-4ace-a8b5-f1d4fcb3c10a",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "56ec0d17-c743-4560-b35a-87fd6bd5a2dd"
        },
        "item": {
          "id": "364304a8-d2c1-457e-b9a2-d64b31ea8d0d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "315b4445-da1f-4a31-9b26-62fd6d25f584",
          "status": "Not Found",
          "code": 404,
          "responseTime": 73,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79c00a2a-511f-43ea-a8ae-f38c4d0a8ff2",
        "cursor": {
          "ref": "73c12c20-9366-4b9a-af95-a5d287b81130",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0fde102c-2758-41d5-a347-613de7543ba1"
        },
        "item": {
          "id": "79c00a2a-511f-43ea-a8ae-f38c4d0a8ff2",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "9a82c075-0340-473e-bda2-dccd7aa0dc09",
          "status": "Not Found",
          "code": 404,
          "responseTime": 34,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "839d7988-f6fc-4fd8-bd8e-c5fa28ca4768",
        "cursor": {
          "ref": "178f2c45-8194-4347-9b6f-aa3bd04af272",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "125d892a-8aa3-4e98-aa18-00854c34c1f4"
        },
        "item": {
          "id": "839d7988-f6fc-4fd8-bd8e-c5fa28ca4768",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a36b43a0-598d-4b84-8671-fe7636403888",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27df2f71-6d0d-49f1-8695-602152f7ed7e",
        "cursor": {
          "ref": "efb882eb-56be-4390-bf23-f30ad104b1f5",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "caf4c0e0-b79a-47ac-a3dc-0e565580826b"
        },
        "item": {
          "id": "27df2f71-6d0d-49f1-8695-602152f7ed7e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "ef0f29bf-b0de-4608-ad50-b1bfdbe99c3d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 34,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27df2f71-6d0d-49f1-8695-602152f7ed7e",
        "cursor": {
          "ref": "efb882eb-56be-4390-bf23-f30ad104b1f5",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "caf4c0e0-b79a-47ac-a3dc-0e565580826b"
        },
        "item": {
          "id": "27df2f71-6d0d-49f1-8695-602152f7ed7e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "ef0f29bf-b0de-4608-ad50-b1bfdbe99c3d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 34,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93db8a8c-b0f7-4462-8031-526ba383e81c",
        "cursor": {
          "ref": "53d6950d-ae2a-447d-8fc5-e299c6c8ba57",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "bba3de7b-c43b-4904-8a54-e1dd2702f0e9"
        },
        "item": {
          "id": "93db8a8c-b0f7-4462-8031-526ba383e81c",
          "name": "identifiers"
        },
        "response": {
          "id": "89f459af-a6b8-4189-aa71-c622b9f8a157",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a724852-54b3-4cc8-8658-483656068bd3",
        "cursor": {
          "ref": "13bc8871-abf9-4ac3-b786-a4b7ce522818",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "26879f81-78f6-48d3-afd7-cfedc2354757"
        },
        "item": {
          "id": "7a724852-54b3-4cc8-8658-483656068bd3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "66d9c648-d19f-4bcc-8e57-f4b19a18ff1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a724852-54b3-4cc8-8658-483656068bd3",
        "cursor": {
          "ref": "13bc8871-abf9-4ac3-b786-a4b7ce522818",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "26879f81-78f6-48d3-afd7-cfedc2354757"
        },
        "item": {
          "id": "7a724852-54b3-4cc8-8658-483656068bd3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "66d9c648-d19f-4bcc-8e57-f4b19a18ff1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbef1bf7-1af5-4b8a-8c1c-aa481e4d69ab",
        "cursor": {
          "ref": "43cfa7b5-1813-4ddb-affa-734bfd471b1d",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3a517f35-6563-4986-9560-7a47b3d3a2f4"
        },
        "item": {
          "id": "cbef1bf7-1af5-4b8a-8c1c-aa481e4d69ab",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c424eb32-9cc9-4068-8135-3bc17a6598d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77144ac9-522b-4bed-b164-ded4745e798c",
        "cursor": {
          "ref": "f7ee5fdd-1521-40a9-b7d4-2d8480e18366",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1e718cfb-0de3-4e3e-baaa-79ecf6752def"
        },
        "item": {
          "id": "77144ac9-522b-4bed-b164-ded4745e798c",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "ff86935f-239b-4bf6-890e-299b8b4be1a7",
          "status": "Created",
          "code": 201,
          "responseTime": 1138,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "c6bdfad2-ea22-4e76-968d-e27bdce1263e",
        "cursor": {
          "ref": "f5d7dcd8-a391-4b5c-9278-888488eadbaa",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2b935eff-9c83-4970-ba03-37cc6597b552"
        },
        "item": {
          "id": "c6bdfad2-ea22-4e76-968d-e27bdce1263e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "8d551a0f-c236-4854-bfaa-928f24fe9aea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ad345ab-4f0e-4078-b176-c065b3d6c444",
        "cursor": {
          "ref": "6be8f750-efce-487f-b348-742f00cf9e63",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7ffe5eda-609e-404e-aec2-f428f39df099"
        },
        "item": {
          "id": "9ad345ab-4f0e-4078-b176-c065b3d6c444",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "779ca1ec-807d-4778-9af4-2ad10aea3f87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67734d75-5463-479c-abc4-00d490b0a0a3",
        "cursor": {
          "ref": "1a05f317-cc34-41bb-acf6-31074a4cfc32",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "057c0ae5-c354-4652-ab47-95ffe7921d1d"
        },
        "item": {
          "id": "67734d75-5463-479c-abc4-00d490b0a0a3",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "cd56c845-074d-4c6d-94b6-2f57baa05e28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f13631bf-3ea6-4a87-b41b-bf6401d38ea9",
        "cursor": {
          "ref": "66d8a68f-8949-4e9d-8160-bd9c669e2f8b",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d90473d9-7453-4c75-b9e4-ea390d532e76"
        },
        "item": {
          "id": "f13631bf-3ea6-4a87-b41b-bf6401d38ea9",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "004663ea-477d-4ac1-8ced-47127b50e943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f053176-91ea-4872-ba2c-d48b311134e6",
        "cursor": {
          "ref": "b44b3b4f-f530-41c2-a958-23fb3d32026b",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "2bbd0776-3d88-40e1-a8df-835ed88e893c"
        },
        "item": {
          "id": "3f053176-91ea-4872-ba2c-d48b311134e6",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "fd365950-5d86-42ba-be39-b0c27e345c85",
          "status": "Created",
          "code": 201,
          "responseTime": 508,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "c79a79ca-c6cb-44e2-b233-2359be4e3d33",
        "cursor": {
          "ref": "82240180-b3e7-4ed3-8771-66437bf17275",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9044199a-87d7-474d-acfb-32db82d8c124"
        },
        "item": {
          "id": "c79a79ca-c6cb-44e2-b233-2359be4e3d33",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "29ef066f-13fa-4d8d-8d20-adf96982930b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06030427-437c-475b-b13e-5fdd692fb7f6",
        "cursor": {
          "ref": "f846ef0e-cebc-49b3-8f56-f649ca30155d",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "247971c7-1e03-4d5d-a372-e0f8abe83712"
        },
        "item": {
          "id": "06030427-437c-475b-b13e-5fdd692fb7f6",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "25335935-758c-4765-8cd2-7b0977bdd34e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d859ff43-e962-45fb-9d0e-1822b2c49a43",
        "cursor": {
          "ref": "d077591b-7217-4d73-bae1-f1f9f0c59c44",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4918ba89-14f1-466e-a075-7f95d505c96d"
        },
        "item": {
          "id": "d859ff43-e962-45fb-9d0e-1822b2c49a43",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "533397ae-dd8a-420a-b1d4-0be8f97b0337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb6e11b-ec6c-4335-911d-ecdaf4e05224",
        "cursor": {
          "ref": "8276e821-1a84-4510-921b-19d242bcbe36",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3208ffbd-ac98-47b2-ba8f-03b1d0378f09"
        },
        "item": {
          "id": "fcb6e11b-ec6c-4335-911d-ecdaf4e05224",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "4f7a5fae-23e8-419a-9b30-419ebd3262b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "818fe9d9-8cfd-44d3-98e4-7d23ee57e083",
        "cursor": {
          "ref": "095d4a02-c8ed-44b8-88a3-c2846a2a559f",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "441bf3b8-c349-4de4-a1c7-f69336c64bb4"
        },
        "item": {
          "id": "818fe9d9-8cfd-44d3-98e4-7d23ee57e083",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "4aa12ce0-cc7c-40bf-a8bb-2c86d7669127",
          "status": "Created",
          "code": 201,
          "responseTime": 514,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "fd0c9116-e232-4262-8f8a-677776950097",
        "cursor": {
          "ref": "4014e592-7239-41cd-9b44-44dbeead22ad",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "774358b6-e961-4d01-b984-6c7776e509ca"
        },
        "item": {
          "id": "fd0c9116-e232-4262-8f8a-677776950097",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "f74a93e7-877b-4328-9ed3-f04c97f5854d",
          "status": "Created",
          "code": 201,
          "responseTime": 1077,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "a92714f7-d888-4a84-ab75-c6b33032f153",
        "cursor": {
          "ref": "f12d462b-60ec-448f-ba86-ca3622a5e0cf",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "58a49ddc-1999-47b8-8163-f789d531557b"
        },
        "item": {
          "id": "a92714f7-d888-4a84-ab75-c6b33032f153",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "87f84398-46e7-4599-923f-98063a9f6c29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85613b23-8416-4a11-926d-4365c9b189ac",
        "cursor": {
          "ref": "90cf4a02-d4d3-46d4-893b-ced8f8eaa4ed",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3f586a63-7def-472d-8030-6986050f0ffe"
        },
        "item": {
          "id": "85613b23-8416-4a11-926d-4365c9b189ac",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "29ec84ac-373d-49c1-a6c3-7f47dc107ce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4f2e54-ca21-4b20-8c8d-b386cfee6ec0",
        "cursor": {
          "ref": "d4860d52-42ac-4c80-a8d2-9089417863fa",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d50ef97b-0f4b-4fae-8782-50a56d9bc1d9"
        },
        "item": {
          "id": "bc4f2e54-ca21-4b20-8c8d-b386cfee6ec0",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "dc5d318d-cbf4-476a-8447-efaddf1d6edb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae46b6d1-c62c-47cb-a97a-6ac0143e2b50",
        "cursor": {
          "ref": "9448fe9c-60c5-4aae-82b2-5500c244c0f9",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ec963407-8925-4f66-b63c-f6198738d6e3"
        },
        "item": {
          "id": "ae46b6d1-c62c-47cb-a97a-6ac0143e2b50",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "d38703e8-e1d9-4d2c-9113-a6a6d6560b08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a9a9ddb-a702-46c3-9c62-a8a9c2383a22",
        "cursor": {
          "ref": "7d84dc81-5768-440c-a2be-69381052f3cb",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f235e0bb-0d2c-4ce5-b47f-3e589cc506eb"
        },
        "item": {
          "id": "5a9a9ddb-a702-46c3-9c62-a8a9c2383a22",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "08d30571-8223-4512-9150-30140d695bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac5c4200-112d-45a0-82de-c27f89985250",
        "cursor": {
          "ref": "32b62147-456c-40dc-8bd1-ad9feca34b8d",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "14be98b9-6120-427f-866d-a685a06e049a"
        },
        "item": {
          "id": "ac5c4200-112d-45a0-82de-c27f89985250",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ede6b007-4f75-4a57-bc3f-f1274f31c5a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b28e798-56a2-4c73-bed3-e4d561a17228",
        "cursor": {
          "ref": "0eb153b0-e129-40da-8026-b8702ffbaf72",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "4a093890-82f7-4098-80ef-def53efaae67"
        },
        "item": {
          "id": "1b28e798-56a2-4c73-bed3-e4d561a17228",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "8a66873a-400a-40a3-a48a-02bfc6bfcb36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f16abdbd-2af7-465b-9fdf-98e1a8b93b19",
        "cursor": {
          "ref": "8992224f-5094-4916-ac96-a22d51d76031",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "de4cf988-e5c8-45ac-8503-5a493ab676dc"
        },
        "item": {
          "id": "f16abdbd-2af7-465b-9fdf-98e1a8b93b19",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "fd9c8562-1cb8-4e5f-99f9-7e10e9ac9bd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "297b2e90-f1b3-4b5e-9ade-e79799fa97fc",
        "cursor": {
          "ref": "b9e75cb7-88aa-4042-9b77-5ac35b264707",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "5aadaac6-678e-4c05-8937-6f8f87781162"
        },
        "item": {
          "id": "297b2e90-f1b3-4b5e-9ade-e79799fa97fc",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a68c7cea-9775-4e0f-bfb2-73821225beb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29d95688-321f-4e43-9d97-88ffa37a3a6b",
        "cursor": {
          "ref": "3e39e333-b703-4599-8e28-6a6211018fee",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ca94badc-8a4d-4172-a9f9-e38df0e7dbe1"
        },
        "item": {
          "id": "29d95688-321f-4e43-9d97-88ffa37a3a6b",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "78d7424d-a6b7-4c31-a8c1-bffb0a00ad05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e907eff8-fc1a-4a6a-b4b9-c38fa2e83948",
        "cursor": {
          "ref": "4b2a6aff-5484-45eb-ac6b-c0f68ea52021",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "13e2f855-ed31-4d00-9bb3-fbcebb322737"
        },
        "item": {
          "id": "e907eff8-fc1a-4a6a-b4b9-c38fa2e83948",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "604880c3-be7f-452c-b41e-a012594790ef",
          "status": "Created",
          "code": 201,
          "responseTime": 699,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "7c7db907-d530-4cc1-9939-01a5c42771f5",
        "cursor": {
          "ref": "b57b4a54-c2e9-4fe5-b7d9-341246243431",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "76cdcefb-7863-42b3-b1a5-d62209e6f158"
        },
        "item": {
          "id": "7c7db907-d530-4cc1-9939-01a5c42771f5",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "14f6df0a-2ba9-415a-b67e-d8ca20cbe4a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03362b2b-134b-47b7-984b-1cf296a4e89d",
        "cursor": {
          "ref": "20a9fda3-3ed4-4f83-bff5-56fdcc63a924",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f40cc9cc-4b4c-449c-8d18-1d6ea683e70c"
        },
        "item": {
          "id": "03362b2b-134b-47b7-984b-1cf296a4e89d",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a726a723-a254-4baa-81c7-d3f3a03b65c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "973f9ea8-b5a2-4acc-8da0-32785c1655ca",
        "cursor": {
          "ref": "0233b022-e8c1-4e63-9d1f-094fedd1073b",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b067d8ae-f3cf-4c0a-b063-2c03790f3011"
        },
        "item": {
          "id": "973f9ea8-b5a2-4acc-8da0-32785c1655ca",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "94c41ce6-c3b2-49b0-9a76-861e89456765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c196300-70a5-4c9b-9411-429fbfdc44e5",
        "cursor": {
          "ref": "19454a96-44f6-4f27-875b-a98643323509",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "43ffc81c-375a-4d4e-a9d6-de8437e723ec"
        },
        "item": {
          "id": "4c196300-70a5-4c9b-9411-429fbfdc44e5",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "71c62b06-a12b-41a5-955f-96d16a9691ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc07b02-88bf-4bf1-9dfa-5b6bcc8488a5",
        "cursor": {
          "ref": "bf41e104-c521-40c1-97d2-9e5c0bcb7d1f",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "018ed2f2-67da-41c9-b151-ad1c888faaa6"
        },
        "item": {
          "id": "2cc07b02-88bf-4bf1-9dfa-5b6bcc8488a5",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "58739c45-4727-408e-a143-349efc5ade19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "644d4d87-068d-4b37-b67f-15ac83af180d",
        "cursor": {
          "ref": "f0ca036e-d9da-425f-95de-d69c85e29016",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d529bedc-5c81-4868-9131-b72441a22d72"
        },
        "item": {
          "id": "644d4d87-068d-4b37-b67f-15ac83af180d",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f4d61b2e-742c-42a7-be4c-fa682ea59847",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6123eb1-dd96-4cc9-b8c9-ae066f37f61a",
        "cursor": {
          "ref": "d4bd194c-1b52-41cf-a281-2b4d93f19ecf",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "171b544e-b477-443d-87e0-a20d106997d8"
        },
        "item": {
          "id": "c6123eb1-dd96-4cc9-b8c9-ae066f37f61a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b178feba-68db-4b05-bca4-a8c44014ac2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cfb14f8-20a0-4198-ad4a-235ec8148bb8",
        "cursor": {
          "ref": "02b92201-42f3-427b-929b-163ee75099ce",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8c9037fd-2905-4489-8c39-bf47ed2c353b"
        },
        "item": {
          "id": "5cfb14f8-20a0-4198-ad4a-235ec8148bb8",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "5419be3b-ea2c-4c93-8d1c-3864c54e3b18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2387b8f-0e9f-4b9c-b4e6-d7b76c0135ae",
        "cursor": {
          "ref": "8a9d1e4b-2f05-4180-9859-1ed754405951",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c8ff0330-36ba-41f9-926e-d2bee3f983f8"
        },
        "item": {
          "id": "b2387b8f-0e9f-4b9c-b4e6-d7b76c0135ae",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "dac3e924-f6f1-4d34-9809-4c5de2a95698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ed324cb-c412-4482-b63c-10d57ad518ed",
        "cursor": {
          "ref": "6f357806-6056-4f07-a3b4-b0a0d4242400",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2ff09399-07ca-4234-86f0-a47236d704f8"
        },
        "item": {
          "id": "3ed324cb-c412-4482-b63c-10d57ad518ed",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "328583b9-4b1a-4f6a-8b98-47f46d23a68f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7906a92-d88e-4957-b05b-4cbd4a576971",
        "cursor": {
          "ref": "88cccf9c-03f4-454e-becf-1313f255e983",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "dbdae902-5344-4ada-9ca5-d18baa3e3c77"
        },
        "item": {
          "id": "e7906a92-d88e-4957-b05b-4cbd4a576971",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5d2eedcf-e59f-489e-8166-30d2edf87f75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c710a9-cd85-4672-bef9-a2c7404f5407",
        "cursor": {
          "ref": "d5f5985b-eb72-4843-80b4-0af5c7b8af1c",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6a6909d0-575e-4d95-abd2-6fbbbdff589f"
        },
        "item": {
          "id": "72c710a9-cd85-4672-bef9-a2c7404f5407",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "eab3a5ca-0103-468d-b801-b20ed6573a42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "764995fe-419c-4c72-8358-f36abc46c90e",
        "cursor": {
          "ref": "344498f0-393c-44e6-b20b-05af42b4b16d",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ee8b698c-2076-40aa-a59a-f869e4c35a52"
        },
        "item": {
          "id": "764995fe-419c-4c72-8358-f36abc46c90e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3198a4a5-2a77-4e6f-bace-b5e7151a3e67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 340,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "511c8a00-125f-437d-802b-127ef4b47193",
        "cursor": {
          "ref": "73edbfa3-9a89-4130-865c-9713d1f10161",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "450b61d7-b945-4a5d-825a-b5d775f81b08"
        },
        "item": {
          "id": "511c8a00-125f-437d-802b-127ef4b47193",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "ea315204-dc99-447e-ba26-678a2bf34a15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c655619-6f22-4331-8d4e-aafb2ecf6a96",
        "cursor": {
          "ref": "c1c48735-e410-4f70-8fb2-73b593cd0754",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "00573183-719e-4c83-a35f-0bcdfac935b4"
        },
        "item": {
          "id": "3c655619-6f22-4331-8d4e-aafb2ecf6a96",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a1d3cc5f-e6f2-4549-bc5b-26ef53e45d14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31ad0b51-0f2c-454e-9df8-5cbe06811eec",
        "cursor": {
          "ref": "52ad7e3f-a20c-4cef-9c8f-1b5fb50ee810",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "bddcb32a-4404-420d-aeb9-bb843740f5b2"
        },
        "item": {
          "id": "31ad0b51-0f2c-454e-9df8-5cbe06811eec",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "27ea9510-89ee-4178-b455-00d0a6b18c61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1b7f8e7-1e62-4230-ab3c-43735a83204a",
        "cursor": {
          "ref": "6bc81505-fd12-4918-a02b-646ef2828a81",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "cf01df18-8432-49a1-b27c-285a670c4aa8"
        },
        "item": {
          "id": "c1b7f8e7-1e62-4230-ab3c-43735a83204a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "cfc1fb43-2861-4783-b13e-c642726d7ad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dde0519-e5dd-4164-a385-b594c8c5ce6e",
        "cursor": {
          "ref": "5f57df7b-b5cb-4e18-a2cf-2dcede9190e0",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "20b1dd86-c583-4efe-b521-98a57766e0e9"
        },
        "item": {
          "id": "6dde0519-e5dd-4164-a385-b594c8c5ce6e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "505f1331-461c-47b3-be46-17f0c7dbb390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c706a722-6576-4b7a-9cb3-5539f915ba14",
        "cursor": {
          "ref": "ad2ba9bc-ed99-44e4-b80c-36f4eb30382b",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b360c323-3f8d-484e-9a11-8735cf6fc778"
        },
        "item": {
          "id": "c706a722-6576-4b7a-9cb3-5539f915ba14",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "03c09972-f578-4186-9f70-83ce55afdea2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e728ba2e-6745-4183-ad0d-0c2d6f3bf149",
        "cursor": {
          "ref": "83662334-074b-4e4c-b67c-e590bf46d3a2",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "82ec7077-e019-47c4-9544-dabd52adc34f"
        },
        "item": {
          "id": "e728ba2e-6745-4183-ad0d-0c2d6f3bf149",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "620a0b12-18bb-4da9-9031-6b649fb8ef3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 355,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "eae4ff6a-baea-4b5f-84e9-56deb6356407",
        "cursor": {
          "ref": "9a2dbd4c-7e7e-407b-bc2f-21d57f1792d5",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e4d47461-dfd5-4b89-a28a-949b7bf20622"
        },
        "item": {
          "id": "eae4ff6a-baea-4b5f-84e9-56deb6356407",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "bd386678-7c1e-436b-992f-f98065393325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "723fe16b-6d50-4740-99d2-a91d0062f40f",
        "cursor": {
          "ref": "9a28bba7-eb3e-4267-92a3-250ad3447749",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "037ed129-12a4-463a-8bc1-57a33a227b88"
        },
        "item": {
          "id": "723fe16b-6d50-4740-99d2-a91d0062f40f",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "16816b30-be69-478d-8037-1ebb124997fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cfc5aea-dccb-4de3-b902-7da5b50aa956",
        "cursor": {
          "ref": "357cf12a-ec21-4c45-b0af-0cf963b32308",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "2de3624e-d9c9-41f6-8916-f1220034b2a7"
        },
        "item": {
          "id": "7cfc5aea-dccb-4de3-b902-7da5b50aa956",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "af9e3203-ef87-481b-9d91-b7021639fee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12324f07-3161-4b4c-91cb-11d31bbd968c",
        "cursor": {
          "ref": "d049dbaf-4275-4083-b15e-7522dd1b8ea1",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ade8298a-0342-4ba5-8e43-09f8863f8b33"
        },
        "item": {
          "id": "12324f07-3161-4b4c-91cb-11d31bbd968c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "879e8007-b664-4f9c-a0a2-bd7fd24a854b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a70d9b73-3438-44e6-9409-1c92088112ba",
        "cursor": {
          "ref": "5958028f-3df2-4a25-83fc-4fbb559b65fe",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "8caeb475-c2c2-4634-97ab-c3a5179769b6"
        },
        "item": {
          "id": "a70d9b73-3438-44e6-9409-1c92088112ba",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2c98990e-b07d-44c9-abf6-31d6d3bba0ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3856dff6-e98f-47e9-b568-409891548ad1",
        "cursor": {
          "ref": "2e366f53-f4fe-4359-aa31-d8e44ced0a0e",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "fd6e988a-41a2-4635-ad7b-e1c9adf17b3e"
        },
        "item": {
          "id": "3856dff6-e98f-47e9-b568-409891548ad1",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a97cb857-c2d8-4546-adb3-757437130cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a91d0790-39fc-4689-9958-c3af26808053",
        "cursor": {
          "ref": "ac95f00f-9dd0-4c0d-8a08-4e6b6c4127e8",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "634d98a0-52bf-4c85-ada6-024b1d1bc0a0"
        },
        "item": {
          "id": "a91d0790-39fc-4689-9958-c3af26808053",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f58b51f9-9158-4c9a-98f6-fffc1c576b67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55e9e952-6d8f-4088-b77a-e82da80b2491",
        "cursor": {
          "ref": "e0dffdc0-3292-4984-89d8-a11f20001bf3",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "bbd84724-2f33-4e6b-8ed3-68237a91157f"
        },
        "item": {
          "id": "55e9e952-6d8f-4088-b77a-e82da80b2491",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "9442eb60-9cf0-4edf-b843-bc14079db44b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd5e6891-4802-4dc8-87ba-e1b9bd749081",
        "cursor": {
          "ref": "c5461bf5-4b92-4eee-97e1-f715f8283c49",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8a76fcde-211c-4482-8a8c-b08059ef3bcb"
        },
        "item": {
          "id": "bd5e6891-4802-4dc8-87ba-e1b9bd749081",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "bacd648b-4ed2-4cc5-a124-932e03d5a152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a46eeb98-15f4-4b73-b053-5a23a7c35756",
        "cursor": {
          "ref": "6353d8a5-efb4-4227-a073-c2486fec0740",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "147e3411-a3ad-4fdd-8d70-2dee75893723"
        },
        "item": {
          "id": "a46eeb98-15f4-4b73-b053-5a23a7c35756",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "eae4a2c6-6e73-41a4-acfd-107909257102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7382575-1b14-4a54-a845-580c67b09343",
        "cursor": {
          "ref": "665e7643-be61-4705-9d10-6c17c000d8e6",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4b2f40dd-fdeb-434d-b3d3-a8f62eb40fd8"
        },
        "item": {
          "id": "e7382575-1b14-4a54-a845-580c67b09343",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "6d9bfb68-e6b7-4d2b-896f-2467a36de828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0356cca-245d-4fad-86fd-92f1e2d00612",
        "cursor": {
          "ref": "6522feb3-9bbc-4acf-8c02-6e9ef65caa78",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "9e732c03-e78f-4662-bccd-e1722384caa4"
        },
        "item": {
          "id": "c0356cca-245d-4fad-86fd-92f1e2d00612",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "4577ee52-5ceb-468f-a5a5-81ba49030fd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "335b0e9c-9081-4a23-8527-6721794e7469",
        "cursor": {
          "ref": "58578413-920a-4d33-8470-d6cb9ecdb06d",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e95e18e8-1b74-4c06-b01d-6a386f54b54d"
        },
        "item": {
          "id": "335b0e9c-9081-4a23-8527-6721794e7469",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "d7df3ddc-a002-42f3-a900-5b67a19b6a40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec836ac3-2c84-41cc-bae9-e82923df5c50",
        "cursor": {
          "ref": "b021c463-12eb-43bb-81d8-2395c05ebe1c",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "4fb6eb74-1241-4a68-b70f-83aa421921a3"
        },
        "item": {
          "id": "ec836ac3-2c84-41cc-bae9-e82923df5c50",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "ebf5bfec-d539-402b-9096-c66569cb67ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38a8f287-5c0e-4852-81d8-5ab364027774",
        "cursor": {
          "ref": "944ac0ae-ab1c-4867-b421-6440a95428f9",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "cd759a1d-aa2b-4ffd-b5b5-9a10e0c45888"
        },
        "item": {
          "id": "38a8f287-5c0e-4852-81d8-5ab364027774",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "35c89d9a-bc21-4c42-8acb-fd1d07efe7ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa2847a3-c4c6-4639-b1d8-3e4b4bfe45d4",
        "cursor": {
          "ref": "d019870d-bf27-413b-a436-273d7fc02c38",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "2c1a4965-fe5d-4489-b9dd-8f917308e8a2"
        },
        "item": {
          "id": "aa2847a3-c4c6-4639-b1d8-3e4b4bfe45d4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "3f1e299f-bb4e-4854-ba00-66f5ed78a9ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad02acd-c659-4c44-a13a-a43fe24775c9",
        "cursor": {
          "ref": "85e0b2ec-487f-45b2-a2c3-a9849e65cb3f",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "806de5b1-e547-4e27-93e8-9d2df3b48af7"
        },
        "item": {
          "id": "fad02acd-c659-4c44-a13a-a43fe24775c9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "f3c4ea03-64f4-42ad-8d99-00c45a4a44c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74614bb3-e18b-4c60-84db-43a43b776c36",
        "cursor": {
          "ref": "c9cb440a-84ab-4bb9-b50b-49a9e5244651",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "3f57c745-5122-4ab3-a9ed-365839ad9956"
        },
        "item": {
          "id": "74614bb3-e18b-4c60-84db-43a43b776c36",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "08752093-d85c-46da-936e-1be8a4527f5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b898d9a-9da8-4112-935b-78ec9e8449bf",
        "cursor": {
          "ref": "fe7edc21-25c3-40d3-97ba-ef3f8a945e99",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "8a4e4f20-6ec8-498f-bdef-f91a78c801ad"
        },
        "item": {
          "id": "4b898d9a-9da8-4112-935b-78ec9e8449bf",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "12d78ef2-6806-497c-8a05-ed08b4d067d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60e9beed-46bb-4e59-9872-5a78cf2e7cbd",
        "cursor": {
          "ref": "ea533916-2114-428f-ad89-22c03ce0d822",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "189b5560-631e-42d4-80a1-b342e9c3b1d0"
        },
        "item": {
          "id": "60e9beed-46bb-4e59-9872-5a78cf2e7cbd",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "9b16f75c-e63f-474d-8ff6-209ef14a43e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6055b4ee-8f65-4602-9b2b-e39b50d3f0cd",
        "cursor": {
          "ref": "e4beaa0f-3323-459d-96c1-21c70a5a2cc3",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "3c44d0ee-8327-4e77-b905-8a41932c603d"
        },
        "item": {
          "id": "6055b4ee-8f65-4602-9b2b-e39b50d3f0cd",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "097e8d2a-d4ca-43af-9a9a-9d223b98f856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "005651c4-f442-46b3-92ea-f1e30936ad2b",
        "cursor": {
          "ref": "890db743-0e51-4856-beb4-ea07dabc0bf0",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "70de7835-3de6-4c57-9593-eb05e40b5a20"
        },
        "item": {
          "id": "005651c4-f442-46b3-92ea-f1e30936ad2b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "9dc983ee-93a6-4bf2-9bee-93c586e8116a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "232308ac-85da-49ec-a9d6-a7cfc7ed9270",
        "cursor": {
          "ref": "aff0402c-39e9-43ae-9e1e-0305aa2ff70b",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "16ecfb5e-c342-4a8d-b166-c32253f0a514"
        },
        "item": {
          "id": "232308ac-85da-49ec-a9d6-a7cfc7ed9270",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "6a61775f-c5dc-473c-ace4-de260345d724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6101bc3-df1b-4507-ad21-f266a3af015c",
        "cursor": {
          "ref": "4c359b31-706b-43f7-a8e9-82f600630e77",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f46a0253-7916-404f-9aae-6558351d4315"
        },
        "item": {
          "id": "e6101bc3-df1b-4507-ad21-f266a3af015c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "0a8969d6-30fb-43d3-9a40-20a8bb5236d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d286349-218a-442d-9972-4acc5b934147",
        "cursor": {
          "ref": "f1d1b17c-0a17-4c14-98f3-d70b88ea728c",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5489c7b7-5a6d-473f-99dd-708380e05df2"
        },
        "item": {
          "id": "7d286349-218a-442d-9972-4acc5b934147",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d45f8ffb-1720-468b-b97c-e10a1e192a60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a473a9a-ffcd-4921-a1ed-1e74e6bf4d0b",
        "cursor": {
          "ref": "ec0ce89e-0839-4c3d-9850-bbdaa636a07c",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "69f5d4b1-c549-4521-9604-08b8af247df0"
        },
        "item": {
          "id": "8a473a9a-ffcd-4921-a1ed-1e74e6bf4d0b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9b3a6f89-e0dc-4aee-8663-e3e83756b647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77285d4e-6b46-4e1a-89c0-b0fe7df5cc86",
        "cursor": {
          "ref": "f4d4ad85-e951-4740-b540-30ab2a699745",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "112ec7a0-4e43-4b0b-a6f2-012525af71f3"
        },
        "item": {
          "id": "77285d4e-6b46-4e1a-89c0-b0fe7df5cc86",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "931108eb-9c47-4d01-af8b-2bdd1fae039b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ac4770f-b71a-4220-8d8d-5a681be9dea8",
        "cursor": {
          "ref": "f3692fe0-7539-4e70-8963-98f3756f803c",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "06846790-5ce5-4af7-8e52-b10ea39df8ab"
        },
        "item": {
          "id": "6ac4770f-b71a-4220-8d8d-5a681be9dea8",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e9d373a8-4b64-465c-8748-6d320ebef43a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6688fa7c-bddf-46ee-b9dd-7cefbce6bec7",
        "cursor": {
          "ref": "c9ebbcf9-6860-4aee-8a3a-28422a376e6f",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "fe3e34b7-5014-4ecf-a88f-9a5912b0c918"
        },
        "item": {
          "id": "6688fa7c-bddf-46ee-b9dd-7cefbce6bec7",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4c44670b-cacb-43df-bdcf-7ce64f8b93df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c58511a7-4cd9-4589-a246-c669cdb1735f",
        "cursor": {
          "ref": "4d8b4d3b-2565-47be-9ad1-9eefef30136e",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "6a533be7-379a-4a11-8249-a61596bdf9db"
        },
        "item": {
          "id": "c58511a7-4cd9-4589-a246-c669cdb1735f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "c59236bc-f212-44f4-a083-b93a419a62fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aa6cc30-e9eb-4a95-8d47-bd64c93d9915",
        "cursor": {
          "ref": "d1aafbb5-643a-469c-a00b-3f0a799e06e9",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "e2fc4644-c7ac-4e87-b698-40b88540aff6"
        },
        "item": {
          "id": "4aa6cc30-e9eb-4a95-8d47-bd64c93d9915",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4c33b8aa-eeaa-4904-bad8-ed195bff4b05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 351,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f80229-06c7-483b-8f83-adb58fd1d596",
        "cursor": {
          "ref": "87b000c6-4708-4dc1-967b-194f2e373d92",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "82bb1801-3f86-4a49-bb6e-095acd94ae08"
        },
        "item": {
          "id": "c4f80229-06c7-483b-8f83-adb58fd1d596",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "0dfce62f-743c-4cd7-8dab-a38815913eb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "017a1adb-b935-496c-ac48-fd26ab085b2a",
        "cursor": {
          "ref": "b673acf3-4b47-4790-81cc-2ecb1c398368",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "02913127-ff3e-4408-9256-07a482f06db9"
        },
        "item": {
          "id": "017a1adb-b935-496c-ac48-fd26ab085b2a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a7ac8b0f-2958-4204-b77a-e78c2c70d49f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adb46fab-d05e-4dce-a76a-2e4e0703f850",
        "cursor": {
          "ref": "61586ee8-a797-4d10-b565-7340ac21a1e4",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "735ac867-21e2-4b5d-abfa-d875106cd31e"
        },
        "item": {
          "id": "adb46fab-d05e-4dce-a76a-2e4e0703f850",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "1682fd98-d9f9-4983-97aa-f5d7b5748f81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "852b798d-377e-47e3-903a-63d85f4042e3",
        "cursor": {
          "ref": "f3a8a87c-99bd-400a-a21a-28120a772246",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "679b4875-6b14-4591-a718-635a41e9583f"
        },
        "item": {
          "id": "852b798d-377e-47e3-903a-63d85f4042e3",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "bd7aae82-1940-416b-a866-2ed2b1d95eb5",
          "status": "Created",
          "code": 201,
          "responseTime": 647,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "87ce1c4f-d76c-4f1b-b979-7a0e6dd59229",
        "cursor": {
          "ref": "05cd3e1e-c4b3-477a-a1d3-f52b73584585",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "904d34b7-f442-4199-a518-7272930538da"
        },
        "item": {
          "id": "87ce1c4f-d76c-4f1b-b979-7a0e6dd59229",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a6a9c748-89d9-4727-83bf-1d09022d9214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "083b0f9b-f12e-49a0-8af6-46c5220ab8f3",
        "cursor": {
          "ref": "b2fd2449-70ab-4f04-9f68-5f9237b8f6c2",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f156642b-592d-4da5-bb50-e3138397c237"
        },
        "item": {
          "id": "083b0f9b-f12e-49a0-8af6-46c5220ab8f3",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "ad3e4058-a9ca-4f43-a699-5f3ae25c88cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e0f7b1f-715e-4f61-b31c-c5f431047e0f",
        "cursor": {
          "ref": "7aff695b-f76c-4e60-9610-70c0c2dc5566",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "052caa57-f3c8-4ad6-a093-0c6d2ffa2c0d"
        },
        "item": {
          "id": "7e0f7b1f-715e-4f61-b31c-c5f431047e0f",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "0716451b-5f2d-4cec-95c0-b0016ab1660f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce105d8f-df5f-4510-81a4-8b3cddfb2486",
        "cursor": {
          "ref": "0ffbbe30-c9fa-4580-8eb2-34f2c51e6105",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1fa01dd7-82fc-411f-ab7f-5cd8fd5d91de"
        },
        "item": {
          "id": "ce105d8f-df5f-4510-81a4-8b3cddfb2486",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "eb940170-d823-494c-a50a-863b3fb66551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f9f3c11-ce48-490f-b177-e4810be8d685",
        "cursor": {
          "ref": "dfd6f921-86b6-4f8b-a689-e8b8ff67e49a",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "9577b151-e88c-48f9-898e-48350c65bdd8"
        },
        "item": {
          "id": "6f9f3c11-ce48-490f-b177-e4810be8d685",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "0b3a4df9-4cc0-47f9-99a9-aae5435cdd91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d72a638-1f07-42fb-8565-8e990942c6b5",
        "cursor": {
          "ref": "53c48389-6870-47d6-b4f3-46e37d2a02e8",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f211aa32-e269-4ccd-94cc-1233562b9e30"
        },
        "item": {
          "id": "0d72a638-1f07-42fb-8565-8e990942c6b5",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "3f43f494-e2f7-4513-aa70-780dc0d0f048",
          "status": "Created",
          "code": 201,
          "responseTime": 673,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "1353d282-6d9b-4020-96e9-d01866aba027",
        "cursor": {
          "ref": "d6cb88ca-e9fd-4c94-b160-e1932ba66aa6",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ca1000db-da80-4f2a-9706-165335c2468f"
        },
        "item": {
          "id": "1353d282-6d9b-4020-96e9-d01866aba027",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9f54fb93-e1b2-4c4a-a2e0-18f0ff2e8dd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e072d94-8dfb-437e-8869-40d6cc3f4cab",
        "cursor": {
          "ref": "3580458b-2264-4de9-bbc5-5da8f620640c",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ecbf7ec8-ad55-45ee-8773-9f8d5543e609"
        },
        "item": {
          "id": "1e072d94-8dfb-437e-8869-40d6cc3f4cab",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "298da229-7dd9-4aab-9a06-e32f0196efc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceba803c-be07-43c5-8d82-c5ddba7a2df9",
        "cursor": {
          "ref": "51c10a0b-7397-4e68-a30a-fbf7cb957aef",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ba18b7d4-565d-462f-a5f9-3b819cf180fd"
        },
        "item": {
          "id": "ceba803c-be07-43c5-8d82-c5ddba7a2df9",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "f77198cc-6f56-48f7-a3f6-ee38bb2d0ee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "421c1758-c38f-49f7-a17a-30a388b6304f",
        "cursor": {
          "ref": "9d138407-753f-4a78-aef1-9fb9e301638d",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "17c6a8f2-3793-4418-97b0-1fdea30b4eec"
        },
        "item": {
          "id": "421c1758-c38f-49f7-a17a-30a388b6304f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3977d01d-3ae0-4ac4-98f8-f3f766d0f613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c6266fe-0b6e-4669-aa6d-cbedff8ddc82",
        "cursor": {
          "ref": "7cb872bf-f993-4a35-bfad-dd8a9ee1787f",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "5286a465-accc-4b05-9db0-25266f1b168a"
        },
        "item": {
          "id": "2c6266fe-0b6e-4669-aa6d-cbedff8ddc82",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "07c12a44-6374-47e0-90ff-909ebd7f65f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f196fec-6134-44f8-844e-542206d2a3a2",
        "cursor": {
          "ref": "7f970148-8ffa-4757-9607-44c6e7d3a7d6",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "21652bfe-5490-4e4a-b1bf-9c4d66bedd42"
        },
        "item": {
          "id": "7f196fec-6134-44f8-844e-542206d2a3a2",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a44ea7ac-c7b5-4e12-b283-adc4e7eeffc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d01cb49-d9ef-4de7-bec5-7812ff2e5237",
        "cursor": {
          "ref": "38e41a94-48b5-44a7-a8d5-5f7a25862bf8",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "a3db3e37-a1e8-4bc7-b927-52f7133df50d"
        },
        "item": {
          "id": "4d01cb49-d9ef-4de7-bec5-7812ff2e5237",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "4177644d-c1be-4d0e-b907-8dabd901adb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5fd0247-065b-4839-8279-d65f72fab7f2",
        "cursor": {
          "ref": "cad29c15-605b-4f8b-bb63-8a0ed4039dcb",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d3378ab9-1442-410f-bdf2-6ec64aa5ce26"
        },
        "item": {
          "id": "f5fd0247-065b-4839-8279-d65f72fab7f2",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3779516e-c3b8-4e78-bc4f-7e613f65b5db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee0b89e-f86c-4ee1-aa6d-56ff73c0d70f",
        "cursor": {
          "ref": "5a4b5554-4682-4f81-8d7d-e461cc1252ce",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "5e7482fc-71e4-46d5-8855-75232b01f1ce"
        },
        "item": {
          "id": "eee0b89e-f86c-4ee1-aa6d-56ff73c0d70f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "355712fb-eac9-4fa1-b8b2-3f8b444ccc54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "b432cda6-bb5a-4b51-aec5-dd5edb2155cb",
        "cursor": {
          "ref": "ce3709ec-1f78-4c69-8fbd-b27ad795e866",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "c89e638d-9b78-4ae8-97e1-547b8657dcaf"
        },
        "item": {
          "id": "b432cda6-bb5a-4b51-aec5-dd5edb2155cb",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "31f71b0f-2424-49cc-ab0e-61d2b213d93b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "226b7fd5-887d-418d-8055-4de97079b951",
        "cursor": {
          "ref": "d0a943c8-1e4b-422d-8034-0418d2ca6b04",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "867cf60e-b1e8-443c-8468-5eefe3105bd5"
        },
        "item": {
          "id": "226b7fd5-887d-418d-8055-4de97079b951",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c3b34950-81bb-4b5a-b3d2-adaafeada28f",
          "status": "Created",
          "code": 201,
          "responseTime": 640,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfad51d4-8c8d-465c-b392-030dc6b2458c",
        "cursor": {
          "ref": "95366b84-00ac-4a57-9331-5382049102b8",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "9346c5e3-26af-4e3e-9734-ba38068f498c"
        },
        "item": {
          "id": "cfad51d4-8c8d-465c-b392-030dc6b2458c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e84113b7-a6ae-4dad-a794-d9dbe7969cfd",
          "status": "Created",
          "code": 201,
          "responseTime": 662,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a68beed-7805-49a2-bb55-31ffbf621b85",
        "cursor": {
          "ref": "cb5c7c9e-eb0b-4a57-b562-3ebcfed7b61e",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0f11b0b6-ab6b-4dcb-933b-872b16314f0b"
        },
        "item": {
          "id": "9a68beed-7805-49a2-bb55-31ffbf621b85",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "9b4064e5-99e5-4248-ae8e-44889a6cd6bd",
          "status": "Created",
          "code": 201,
          "responseTime": 679,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b983de1f-81ef-402c-88d3-4c03290f4fa1",
        "cursor": {
          "ref": "459b7d09-9905-45d5-8877-6f5e135cddd8",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "83724ca6-935c-4ebe-8b76-7eb088efdf09"
        },
        "item": {
          "id": "b983de1f-81ef-402c-88d3-4c03290f4fa1",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "e3524ddd-05bd-4ce6-aee8-d76db35f9804",
          "status": "Created",
          "code": 201,
          "responseTime": 654,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "894926b3-32fd-497c-8912-9e5eeb54225e",
        "cursor": {
          "ref": "62d72bf9-193f-4d2e-8777-b1da9263ae6a",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "50d32177-07c5-424f-855f-9ccb90748119"
        },
        "item": {
          "id": "894926b3-32fd-497c-8912-9e5eeb54225e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "48b6cf27-33d3-415f-bad9-0edfe19394d2",
          "status": "Created",
          "code": 201,
          "responseTime": 636,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "f276f3ec-fd40-4fc3-87c0-7969fa905f82",
        "cursor": {
          "ref": "6cf68ead-0ab7-4625-9ce3-417aa76006e6",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c6cba3be-8860-47e7-97a5-9dfde0db3938"
        },
        "item": {
          "id": "f276f3ec-fd40-4fc3-87c0-7969fa905f82",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "85ebe94c-c070-478b-a8ea-2c2cc639fe07",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "f276f3ec-fd40-4fc3-87c0-7969fa905f82",
        "cursor": {
          "ref": "6cf68ead-0ab7-4625-9ce3-417aa76006e6",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c6cba3be-8860-47e7-97a5-9dfde0db3938"
        },
        "item": {
          "id": "f276f3ec-fd40-4fc3-87c0-7969fa905f82",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "85ebe94c-c070-478b-a8ea-2c2cc639fe07",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "c949e1b7-db74-44cd-b971-0400cc87f357",
        "cursor": {
          "ref": "25a09d55-96b4-4871-9f3f-e42462d6ad96",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ad4370fe-1257-4d3f-ad34-1235dddbf192"
        },
        "item": {
          "id": "c949e1b7-db74-44cd-b971-0400cc87f357",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "29a10e4d-f8ac-4afd-bd3c-3120af3edf91",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "35031690-2983-4428-ab4f-c1a914cf6487",
        "cursor": {
          "ref": "777bdce2-b315-4b3f-9ad5-737998a6287d",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7d47f718-034d-41cd-8433-a15cacda89a6"
        },
        "item": {
          "id": "35031690-2983-4428-ab4f-c1a914cf6487",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "203936a1-bbca-4cd2-9f10-987ec9dd0c9a",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "1e340b48-0d20-4554-9093-993cff15ad10",
        "cursor": {
          "ref": "090989ed-c449-4710-9291-1dfd37f5494a",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c8748600-517f-4e9a-aee7-620e65444e0d"
        },
        "item": {
          "id": "1e340b48-0d20-4554-9093-993cff15ad10",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8399274c-4c7a-4a47-b5cf-a5a335c8458d",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "ecb68009-77b9-4307-a33f-42ae2ab10689",
        "cursor": {
          "ref": "c30dfb47-d9f2-4447-bdc7-dfe2a3430fcd",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a1c83c8b-5eae-4027-8ea4-aba94a120ac4"
        },
        "item": {
          "id": "ecb68009-77b9-4307-a33f-42ae2ab10689",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "4be1806a-1c58-4ea4-a6d7-ce8fdbe419de",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "32598c02-202b-4932-b4a0-dbf22bddf598",
        "cursor": {
          "ref": "e9747ca3-19ee-4a22-afce-9f32fa4e13e7",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "f4e26365-d397-4c26-b426-d5c0b2e75a25"
        },
        "item": {
          "id": "32598c02-202b-4932-b4a0-dbf22bddf598",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8862dc49-2425-4f81-9012-564376f0f54e",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "50f7dae8-be41-42ad-9668-499aae13daeb",
        "cursor": {
          "ref": "de8eb985-56e4-4738-b533-03037bed6e32",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7ee230ac-48b1-4c52-94ed-7e94c2b8920c"
        },
        "item": {
          "id": "50f7dae8-be41-42ad-9668-499aae13daeb",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "48d6efe0-92de-47a3-bc8c-8415955c959e",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "828e5fb1-0112-4adb-850f-c044cf2c18af",
        "cursor": {
          "ref": "400d2744-fd48-4002-8488-fb162159d60a",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7851ff99-1794-4c3b-8166-57b7d3e79793"
        },
        "item": {
          "id": "828e5fb1-0112-4adb-850f-c044cf2c18af",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1399a9b0-0b2f-46ec-8e88-39218cec1fe4",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "cf6c3c73-01ad-49e1-a281-f3920bcaeaca",
        "cursor": {
          "ref": "a21a1fc6-260a-4d58-8864-e58f1fa720c6",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "da8ab4de-65e1-4ce2-93eb-49ac9a29fe66"
        },
        "item": {
          "id": "cf6c3c73-01ad-49e1-a281-f3920bcaeaca",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8b43c931-8b1d-4af0-bb59-1e29c2fc4b9a",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "3c482d16-aec7-485c-ad9e-f1d19d21cada",
        "cursor": {
          "ref": "3f4acdb3-664d-491d-8e75-57c007dc77af",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "52320069-6457-46c1-8a62-5b1059003929"
        },
        "item": {
          "id": "3c482d16-aec7-485c-ad9e-f1d19d21cada",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1b33b228-c06f-4dbe-a189-dbfea486348a",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "2c251b36-0d56-4508-b3e6-62e2d0d33d0e",
        "cursor": {
          "ref": "c6ae9afa-6a51-4983-95b8-8ccb3a8ff99f",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1151373a-6318-4b1c-896a-4e31093c3f0e"
        },
        "item": {
          "id": "2c251b36-0d56-4508-b3e6-62e2d0d33d0e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e447b599-cd50-4f15-9491-33535ba786d2",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "1228215f-e810-47d6-846f-5d1db26dd16c",
        "cursor": {
          "ref": "6feaad1a-b962-40d3-8d73-6bfc57b5acc0",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e7b1048b-5700-4b2f-9f88-08c3a505f30e"
        },
        "item": {
          "id": "1228215f-e810-47d6-846f-5d1db26dd16c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "94c7fad2-8d7c-4687-b9df-50999daa26bb",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "710ab461-0ba4-4265-8d0d-fef552078a4f",
        "cursor": {
          "ref": "f4628f0e-0910-463e-8e81-c1a0ce82fb33",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "bbf2b28d-07e9-48cc-a9b2-ca39e26e13e1"
        },
        "item": {
          "id": "710ab461-0ba4-4265-8d0d-fef552078a4f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c3fd732b-50ea-42c2-869f-551109a3ba64",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "65644271-26c7-454f-8bc7-dd019392161e",
        "cursor": {
          "ref": "3937b410-c94d-4941-97ba-7943e600f010",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "65947233-22f9-42b2-b73f-27487399303f"
        },
        "item": {
          "id": "65644271-26c7-454f-8bc7-dd019392161e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "76c29e63-f0b0-422f-883a-32b6272cb9e9",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "e07c2b5f-e07b-4b4b-a3e1-14a17695088c",
        "cursor": {
          "ref": "8d7986c8-e998-4cbc-a76b-7f2b2e467884",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "cc1b3136-7b47-4982-866d-49f4f853a3c3"
        },
        "item": {
          "id": "e07c2b5f-e07b-4b4b-a3e1-14a17695088c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4401b2ce-d955-4f18-a963-7926d567e702",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "29327280-02ec-4b6a-b3e4-73144efd6218",
        "cursor": {
          "ref": "6785b33b-e15a-41dd-9da9-57df7d327b6c",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "e324c4b6-219e-479a-9b19-cfbc4ff75c3d"
        },
        "item": {
          "id": "29327280-02ec-4b6a-b3e4-73144efd6218",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c4061217-cfcd-4f9b-8927-1648ef8e222a",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "07a6046a-04de-4682-954d-13944ff90257",
        "cursor": {
          "ref": "a0a7b05f-c106-402e-b3c9-208d303478bc",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "50a09d56-42a3-4a29-a838-46363165a6cb"
        },
        "item": {
          "id": "07a6046a-04de-4682-954d-13944ff90257",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b5287c40-eebe-4a4f-b9f3-c9487d3f5ea8",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "af3f5427-4dd6-40be-b47a-c295f05f61e9",
        "cursor": {
          "ref": "6f05c35a-3f08-4839-a828-a62926961801",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "0d91dfa8-9cb4-4339-b501-f61f6190f042"
        },
        "item": {
          "id": "af3f5427-4dd6-40be-b47a-c295f05f61e9",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b2741ee5-8a7b-4848-b20b-2fb6f0976fbe",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "763c32c9-54a5-41f8-86fd-5365700d868e",
        "cursor": {
          "ref": "269e39af-238c-4e4a-88e7-179cb4152e00",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "d9fb79cc-1832-4ba7-bd7a-b17b932fe71c"
        },
        "item": {
          "id": "763c32c9-54a5-41f8-86fd-5365700d868e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "eccf5039-11c6-4f52-b4ca-13ec957dd8be",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "dfa67993-bcd0-437e-916e-be704d149b28",
        "cursor": {
          "ref": "c6cfc549-99d9-4399-90f0-79f5541c0373",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "384e29c1-1360-47fe-9019-4e008b7a350c"
        },
        "item": {
          "id": "dfa67993-bcd0-437e-916e-be704d149b28",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f926eeb8-e8d1-4476-9724-fc9ba3666b1c",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "663ca6c4-d060-4bee-aebf-6c0f1d70f3dd",
        "cursor": {
          "ref": "83d4e5b7-dad1-444c-9557-71174ef99e36",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "175ef048-88cf-4004-a6bf-31f2a5c15fac"
        },
        "item": {
          "id": "663ca6c4-d060-4bee-aebf-6c0f1d70f3dd",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "fe7e12c8-3030-4d7e-898c-100fed173355",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "486bfabe-c51f-4ce2-8a61-eedbc3bfe12f",
        "cursor": {
          "ref": "b66c07e0-9435-44c4-bd64-8caa1d039d12",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3fd67000-709f-4fe8-a2a5-2e7740258995"
        },
        "item": {
          "id": "486bfabe-c51f-4ce2-8a61-eedbc3bfe12f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "997c1d7b-09a5-42b8-b217-1803256e8147",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "8b624f9c-8760-47a2-bdd7-036afffe4600",
        "cursor": {
          "ref": "e9fe2f64-fb28-4510-bc61-8f98ad2c1d20",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "f94c6829-d3e6-439f-9e16-1a56de8a350d"
        },
        "item": {
          "id": "8b624f9c-8760-47a2-bdd7-036afffe4600",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "cf69648f-8bda-4a52-9d2c-bcb05e6c039c",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "733485aa-1393-4783-97f6-85069f6df559",
        "cursor": {
          "ref": "2d44b7a2-950f-477a-8fb0-06e7b73d2e20",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1b1faad0-dece-43b8-bb36-7108a4aba17f"
        },
        "item": {
          "id": "733485aa-1393-4783-97f6-85069f6df559",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ada37f76-672b-46b5-a491-b4c562b89509",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "f778d8c1-95bf-499c-a92b-3ac00bc95049",
        "cursor": {
          "ref": "62d4707f-d17a-4595-8091-ff9d0e6d66a1",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "5d0cd30d-8686-4b88-ba9e-2211f7dd6ed1"
        },
        "item": {
          "id": "f778d8c1-95bf-499c-a92b-3ac00bc95049",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "fc544c55-c080-47b6-b593-91dabc7d27ca",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "17af084e-9737-4129-8fd5-3f075c566893",
        "cursor": {
          "ref": "e992b7b0-4c42-4add-833d-aa8535fe12a4",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "3a41fcef-1726-4638-a37c-5435018844d0"
        },
        "item": {
          "id": "17af084e-9737-4129-8fd5-3f075c566893",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "33df41d5-bbfe-4fb1-905f-4b656cb771f6",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "9b101e7a-dd08-4e18-ab0a-e7ad434119b0",
        "cursor": {
          "ref": "9799a439-b6e4-4369-b6e0-0186ad526d2e",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "23818ce0-a60d-4f23-80f6-e700bd095988"
        },
        "item": {
          "id": "9b101e7a-dd08-4e18-ab0a-e7ad434119b0",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "eca0603e-7cfd-4834-99dd-2160e12b6a31",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "08f86e73-7c9b-4bd1-85a0-020fd5bc85d2",
        "cursor": {
          "ref": "53b32d63-9bea-4a5e-a9a7-0435869f5cf0",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "0f3dc618-ce9c-4e6a-968e-81ae24a65b8c"
        },
        "item": {
          "id": "08f86e73-7c9b-4bd1-85a0-020fd5bc85d2",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ad077c45-df4c-4afc-8c21-ccff7f2fc4e9",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "c6b89a2e-7b8b-47fa-bb5e-2e61d82ea1f1",
        "cursor": {
          "ref": "5e04e3c3-f3d8-4411-82ed-70ec9fd15262",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "2d9aa162-ee43-489f-95a3-f7de168254f5"
        },
        "item": {
          "id": "c6b89a2e-7b8b-47fa-bb5e-2e61d82ea1f1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ef3d7e92-9b62-45bd-98ca-0a521c2e9200",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "f34c25d9-2807-4739-b743-633d344c1935",
        "cursor": {
          "ref": "35a305ba-a7fa-43f2-8b86-413f09035025",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "cb582b43-4ac0-45db-8c3d-28ada382c86c"
        },
        "item": {
          "id": "f34c25d9-2807-4739-b743-633d344c1935",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "710f3934-15aa-4278-a460-ad0fc6ab9cd5",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "bd02af63-cf97-42ef-a5e3-d2d7f1b5ccbc",
        "cursor": {
          "ref": "954d402a-0eba-4da7-a928-f6f0baa3fe6d",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "8cbcf5b0-2b13-4c10-b472-bf904796d192"
        },
        "item": {
          "id": "bd02af63-cf97-42ef-a5e3-d2d7f1b5ccbc",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "31bf1040-ef18-4108-b54f-e3baf73e18c1",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "6dacf4a1-5996-4915-a4e3-281ba7134556",
        "cursor": {
          "ref": "8ec5428c-ff3c-4381-ab0c-dd2e9bdc8b5f",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "91e05420-fe48-4ba4-a0a4-77612ea1ca5f"
        },
        "item": {
          "id": "6dacf4a1-5996-4915-a4e3-281ba7134556",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "f8cd4c7b-b0be-4c1f-9cb2-4439bccf9b31",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "f82e97a4-6ba2-4cb8-9341-9cf19f5249b4",
        "cursor": {
          "ref": "ea191597-80c2-4559-b984-8ba093f38f26",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "910bb92a-c470-43d1-808d-ed320b6ef6c2"
        },
        "item": {
          "id": "f82e97a4-6ba2-4cb8-9341-9cf19f5249b4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9d4c2194-7ac3-4c7a-91fd-2c45cd558711",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b233ba4c-e522-4fea-890a-cd32e4d954ef",
        "cursor": {
          "ref": "50d3afae-32db-441f-9a4d-5a553f42f0a1",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6fe175e4-0c80-4581-886f-09260f6f16c0"
        },
        "item": {
          "id": "b233ba4c-e522-4fea-890a-cd32e4d954ef",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "bf419091-b8be-47b7-ad5e-c181c494ec53",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2b7d4f0-1710-4d6d-8dec-23da0f326274",
        "cursor": {
          "ref": "51297326-3373-48f9-973d-ea5812abc877",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "dde453e0-9853-4d44-b428-132dd6545281"
        },
        "item": {
          "id": "e2b7d4f0-1710-4d6d-8dec-23da0f326274",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "23dda3fb-7141-472a-b21c-524d9c57482b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2b7d4f0-1710-4d6d-8dec-23da0f326274",
        "cursor": {
          "ref": "51297326-3373-48f9-973d-ea5812abc877",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "dde453e0-9853-4d44-b428-132dd6545281"
        },
        "item": {
          "id": "e2b7d4f0-1710-4d6d-8dec-23da0f326274",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "23dda3fb-7141-472a-b21c-524d9c57482b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c28ac173-e04f-41c3-8fef-a58ac0f53d77",
        "cursor": {
          "ref": "a0d0d734-c5f8-46c8-bf34-a990ff38b0e2",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "1668baa7-1240-4770-91e7-a2aa959a6756"
        },
        "item": {
          "id": "c28ac173-e04f-41c3-8fef-a58ac0f53d77",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "72eb7bfb-2bb3-4baa-94ce-b40523096abe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0394a1d5-5be8-46e0-a776-1b9d00396926",
        "cursor": {
          "ref": "0915582c-3722-4ab2-be34-ce3f3a2b7a1b",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "1a16902e-e1ce-4715-a367-3edab802db86"
        },
        "item": {
          "id": "0394a1d5-5be8-46e0-a776-1b9d00396926",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3df60b20-fa22-4249-bdea-3e37f4944134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7750b5e-01e1-4058-bb45-1a8708620bda",
        "cursor": {
          "ref": "28263f2f-d3d0-4701-9f60-5eab71fda740",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "274f6074-5ba9-4539-9a48-25f30db7de30"
        },
        "item": {
          "id": "d7750b5e-01e1-4058-bb45-1a8708620bda",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "35ac97bc-80ac-44e5-8d24-aa71ff8c18ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c143c5a-b723-4dcc-9df6-67c021a8b39d",
        "cursor": {
          "ref": "06c809f4-b06f-4132-9a61-42594cdd3108",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a730b3ed-dcbc-49bf-8953-45f0aa3eadcd"
        },
        "item": {
          "id": "9c143c5a-b723-4dcc-9df6-67c021a8b39d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "31b4e479-1811-4835-bf4a-6fc0be7ae317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee31b635-76e8-4d52-991a-a93d8315cd64",
        "cursor": {
          "ref": "68078225-f93e-41fd-8495-59cdd6917efd",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "bac199ac-ea78-4175-a54b-2c3e0d9270d3"
        },
        "item": {
          "id": "ee31b635-76e8-4d52-991a-a93d8315cd64",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "def23eb6-1313-4478-b392-653dcd26cf66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3496cfa-6c4e-4625-a3a8-982071018952",
        "cursor": {
          "ref": "a1d67c89-2ab1-4a05-b27d-14b52b544be0",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4c42f3fe-5efd-4d04-8dca-4d4aee9d931f"
        },
        "item": {
          "id": "a3496cfa-6c4e-4625-a3a8-982071018952",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a2066c87-07d0-4117-a080-4d3adce0f617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a28eb060-55cf-43ca-ab8d-5aff5a048b27",
        "cursor": {
          "ref": "a0f7c547-8b23-46e3-98c6-7b662731773c",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d88c6b00-185a-4f80-ae46-510079427371"
        },
        "item": {
          "id": "a28eb060-55cf-43ca-ab8d-5aff5a048b27",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "66aa035a-93e7-46b6-865d-c9267531ca3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa1dd26d-f403-465e-ac4a-b72f31ebd8fa",
        "cursor": {
          "ref": "1cd9cc51-ffd2-4599-882f-935b5e9bafcb",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6c02647c-7b87-459a-a00b-214bfe9347e3"
        },
        "item": {
          "id": "fa1dd26d-f403-465e-ac4a-b72f31ebd8fa",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "a9d75425-e4e2-4952-bfb4-7dcff7280d88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4058225-82e8-4cf2-9242-c2cc54290324",
        "cursor": {
          "ref": "4a34978c-4216-4401-86b3-ce95fb49a4ce",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "17b82f71-0f2f-4271-aa7d-eb5fc1e8091e"
        },
        "item": {
          "id": "f4058225-82e8-4cf2-9242-c2cc54290324",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "331b1d9c-ee76-4462-8c31-4e2ab91d6b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b92b3513-7f09-4596-9a7f-e624dcc8c45f",
        "cursor": {
          "ref": "20223b4b-0703-4218-91f0-5786b0c8e42c",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "443cec54-844f-4a53-9d2d-4fb71dd205c3"
        },
        "item": {
          "id": "b92b3513-7f09-4596-9a7f-e624dcc8c45f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "7a4dc672-462d-4417-87b4-421eedf623bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0145c06c-3267-4881-8b32-905878e845cf",
        "cursor": {
          "ref": "db895f8f-2c16-4924-91d8-456b347e0c33",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "32d9f39e-0d3c-4b95-82f8-c4403951cf1b"
        },
        "item": {
          "id": "0145c06c-3267-4881-8b32-905878e845cf",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "0a99947d-e7e3-4e39-b7dd-ea55533ebad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b72f415e-ea1c-48fa-8207-b18b6a375f30",
        "cursor": {
          "ref": "1976df04-3218-49f3-9c93-cfb89e216e4a",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "fd4ec7a3-6a32-499f-84e0-0f3e4b1cccac"
        },
        "item": {
          "id": "b72f415e-ea1c-48fa-8207-b18b6a375f30",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f28ace8f-2c04-4a68-8abc-c0c7b9cd49bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfe6d6fd-5d7c-4614-a79a-ecfaf572d962",
        "cursor": {
          "ref": "33cb0859-3c60-4337-aad2-be89440b852e",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "f841fa08-ff4e-49f2-be15-b6754638541c"
        },
        "item": {
          "id": "dfe6d6fd-5d7c-4614-a79a-ecfaf572d962",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "20e8a2dd-2b6f-460b-ae64-4aa418eb7444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dbf6cd5-3b5f-48fa-918a-ec5bb21b3491",
        "cursor": {
          "ref": "fd874dfc-cca0-4be3-a9e4-4d370a123142",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "ecd941d0-3c78-408d-b8b8-9a2b70492a71"
        },
        "item": {
          "id": "5dbf6cd5-3b5f-48fa-918a-ec5bb21b3491",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2e0497af-5f5b-48ef-b39f-a61575ffa311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f902f780-9139-4731-a21f-0593179bd7a8",
        "cursor": {
          "ref": "64a6d11a-3dc4-4efe-b61a-c7753bc5e856",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "43114d5a-4d4b-4941-89f3-82748c57e403"
        },
        "item": {
          "id": "f902f780-9139-4731-a21f-0593179bd7a8",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "70649781-6cad-4b5b-98f0-85084ac2a332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1132f4df-b696-4978-8887-964cad380a57",
        "cursor": {
          "ref": "cd094649-0ba1-4225-b6e4-e2e2c1a5178f",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "2ed40b80-654c-4fc2-b0ed-2eb801068365"
        },
        "item": {
          "id": "1132f4df-b696-4978-8887-964cad380a57",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e492a8b2-deaf-4ae9-8b34-a7923a2857f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c0b997c-c9f2-42e5-8f30-8fa3d8090a4f",
        "cursor": {
          "ref": "b355d3d6-d69f-4821-8ed7-c109dc8937a3",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f591dcf4-dd63-4af9-8f12-a5c9c85d09ac"
        },
        "item": {
          "id": "3c0b997c-c9f2-42e5-8f30-8fa3d8090a4f",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "d5ae0fd5-5ada-4e1b-be14-6cf4ab2cd4c9",
          "status": "OK",
          "code": 200,
          "responseTime": 592,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "f741147f-570a-4cfb-9882-870142b5d0cf",
        "cursor": {
          "ref": "52803c7c-3c48-4f57-8c51-ab72f7253b06",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "d7f2af60-19f0-44df-bbe0-2a8dbc877ecc"
        },
        "item": {
          "id": "f741147f-570a-4cfb-9882-870142b5d0cf",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "bd650eea-bbd2-4640-94ea-f426bab40ac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5209aeac-5276-4558-a494-4029c1eb1397",
        "cursor": {
          "ref": "f455761b-d990-4cf6-a3c3-f1cccf2cf944",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "3ee68124-7b17-4c57-b446-0b1d581f610d"
        },
        "item": {
          "id": "5209aeac-5276-4558-a494-4029c1eb1397",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "480f3c73-d4b7-4a6d-9286-1212ecd91b03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 264,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98103c4c-a4f9-48fa-8e88-63a26c5eb0db",
        "cursor": {
          "ref": "1378b5ec-bb30-4d17-a019-305b88a9bf67",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "cf55a3b1-f50a-41db-bcba-ef193638eeff"
        },
        "item": {
          "id": "98103c4c-a4f9-48fa-8e88-63a26c5eb0db",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "da932314-9cba-4000-b834-ec74d137ec26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 265,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50c394a7-21dc-45f6-b098-47f3a01f7e74",
        "cursor": {
          "ref": "65d4cd3d-8ba1-4c5f-b6b4-86eb7eb22a98",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "38c79eee-7225-47be-a070-2d08632e4528"
        },
        "item": {
          "id": "50c394a7-21dc-45f6-b098-47f3a01f7e74",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "16a8aa57-7b6f-473a-a329-f2b32d636940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 276,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f449150-3850-4b5d-88de-a4718fcb78c1",
        "cursor": {
          "ref": "9d83f987-30fc-493b-be49-46365f7b3f20",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "30744a69-fc4f-45d5-8a67-ed07ef0c6878"
        },
        "item": {
          "id": "8f449150-3850-4b5d-88de-a4718fcb78c1",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "818e8a13-b4ed-46cf-9629-7516a056e12d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdc51245-7f17-45f1-a953-8832764eeaf5",
        "cursor": {
          "ref": "27807a82-ddbc-47f2-be55-4de03faeaa36",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "6b622826-1321-4ec3-aa6a-068a19707303"
        },
        "item": {
          "id": "cdc51245-7f17-45f1-a953-8832764eeaf5",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "7b63291f-ad13-4600-97c8-b1b6bccf75a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 275,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bec1374-0d85-4db0-b829-186c09088b1c",
        "cursor": {
          "ref": "2eff6992-a456-470f-8b14-85b05a06de46",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "6518311a-13ba-4d6c-b8e4-02a7f032cf22"
        },
        "item": {
          "id": "7bec1374-0d85-4db0-b829-186c09088b1c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "382370ab-8a8d-413a-b4bf-7d2aa6553df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f2aa806-d692-4248-9ee6-a871303ddf79",
        "cursor": {
          "ref": "7cf9fc4a-f1fc-4c28-ad6e-d3bf3c7c98b3",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "80368d98-941e-429b-a98c-e12879414219"
        },
        "item": {
          "id": "6f2aa806-d692-4248-9ee6-a871303ddf79",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d2a50f1d-ab84-481b-9093-a4badd5d7d28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e71b6a4-dfd7-46b8-977d-b69c328e2658",
        "cursor": {
          "ref": "f7b3cb0a-783f-4622-9f75-ffade749c77d",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "6547b831-203a-4199-9755-ad4d58dabd01"
        },
        "item": {
          "id": "4e71b6a4-dfd7-46b8-977d-b69c328e2658",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "0260cd83-fe1c-47af-a33b-b7e3698b69eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0da5976a-a61a-4fb1-b0ce-04232e047532",
        "cursor": {
          "ref": "4aac4ac8-926e-405f-8a9d-c508030f1e58",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ae053c50-facb-47a4-b109-3a9cac26d354"
        },
        "item": {
          "id": "0da5976a-a61a-4fb1-b0ce-04232e047532",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d90d679c-12df-4e41-a7aa-775c27a61f3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64c7027e-9667-4c82-a3ca-0c2e30418827",
        "cursor": {
          "ref": "7a87ecd7-14b5-470e-8220-fa7bded6fba9",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8510d483-ef96-42e9-a5cb-107cfe3af83f"
        },
        "item": {
          "id": "64c7027e-9667-4c82-a3ca-0c2e30418827",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "870490ac-91a6-43af-bf4b-fe94f20ea111",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b173380-adff-4428-a989-d842f8c1c619",
        "cursor": {
          "ref": "f5fc2b60-a2a0-455a-a169-7931e1eec3f1",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "9f414e28-af94-4400-90f9-3d9039dccf8f"
        },
        "item": {
          "id": "2b173380-adff-4428-a989-d842f8c1c619",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "34dcc607-709c-46f6-a865-957427e0c1b5",
          "status": "OK",
          "code": 200,
          "responseTime": 237,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "3c0cd447-bb14-41a9-8833-5e972691005a",
        "cursor": {
          "ref": "4565378b-2776-4ede-9f12-7ab0eba57cc3",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "920e3762-4e1f-4592-856f-ad290b8fa901"
        },
        "item": {
          "id": "3c0cd447-bb14-41a9-8833-5e972691005a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "46f9b8c7-236b-4ada-bddf-d66b5058d4e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce9171ed-b790-4d51-bab5-bc74f450d642",
        "cursor": {
          "ref": "3e64cddb-20be-449d-a6b1-bb06931ac33d",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "22be1d45-e126-45f7-80a3-12d219245ba2"
        },
        "item": {
          "id": "ce9171ed-b790-4d51-bab5-bc74f450d642",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "0b9fa205-db76-4374-ab2d-da6ddde41686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9af35777-775c-4bbc-b58b-c28560afffc6",
        "cursor": {
          "ref": "55fd5bec-e1e5-4903-bc0e-561530bf6b85",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "4bed45e2-e450-4684-af95-6ce28a573f54"
        },
        "item": {
          "id": "9af35777-775c-4bbc-b58b-c28560afffc6",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "79f60738-5fde-42c6-a7c5-aad23f003b0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88220208-cdf0-4b65-a82f-02d9a1e7e16c",
        "cursor": {
          "ref": "49384d51-d9ec-4c47-a64d-bcad171790dd",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d4c87038-0ca4-431f-aab3-c081cc3461bb"
        },
        "item": {
          "id": "88220208-cdf0-4b65-a82f-02d9a1e7e16c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "fa85f448-b2c5-41bc-a7d5-6c681fc381a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6283142-b644-4dc1-8db8-7574dac34cfb",
        "cursor": {
          "ref": "65fb149d-d230-4542-827e-36976f99e59c",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "d92ba377-6725-4cfd-bad9-30a9f3ba60a7"
        },
        "item": {
          "id": "a6283142-b644-4dc1-8db8-7574dac34cfb",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "61cfd974-9a2d-492f-83ea-cf82428cafe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65172f10-cfea-49d1-87ab-d6a65be6a91c",
        "cursor": {
          "ref": "aa016d36-61b6-4f59-8db3-a2ff600b6ef2",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d74fb754-fa1e-43b9-958e-7afad5a191b2"
        },
        "item": {
          "id": "65172f10-cfea-49d1-87ab-d6a65be6a91c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e5d5202b-e08d-44e8-92f5-ef9ee1b372ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97db68bd-385f-4e41-9eb9-59b54c70387d",
        "cursor": {
          "ref": "0110141a-65b3-46ea-985c-7f7e8d2de20e",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "49e61552-90f1-4d02-9071-40baf84d700e"
        },
        "item": {
          "id": "97db68bd-385f-4e41-9eb9-59b54c70387d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c67c6af5-b52e-4e8e-afa4-ae6c4e32667f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 276,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8a256b5-b309-4733-a917-a8610ee19c8d",
        "cursor": {
          "ref": "68fbc918-f951-4a77-b99e-5bdb8865ba33",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "68192000-59a0-4c3c-8acf-b8f868e19024"
        },
        "item": {
          "id": "a8a256b5-b309-4733-a917-a8610ee19c8d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "e04d9c84-98d2-406d-b0b2-5eead749aec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 265,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ae062d-6997-4f7f-ad2a-32a1bfcc1134",
        "cursor": {
          "ref": "badf0a97-c389-421a-8217-bf1ab627e4b1",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "a5154c0b-f599-45ab-8968-f68b73b1b3d7"
        },
        "item": {
          "id": "15ae062d-6997-4f7f-ad2a-32a1bfcc1134",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "45f4fd97-d846-404f-b4a1-659c3f69e5fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 277,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8cfdf8c-4b76-450a-9e3d-2b2496891848",
        "cursor": {
          "ref": "e540d194-eb83-4cda-8501-b59681e5517c",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "2eb5a319-abba-4292-8d64-7284dc5cc0c2"
        },
        "item": {
          "id": "d8cfdf8c-4b76-450a-9e3d-2b2496891848",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "7b5a7190-8a58-4dab-817f-c9a499d61d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 581,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29ff269a-0f9d-4f8f-bfdc-232c37883fa1",
        "cursor": {
          "ref": "e3119c20-8566-4f5c-9451-cbbec799a132",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "013d034c-8bc1-4a38-ab68-011f67c1640b"
        },
        "item": {
          "id": "29ff269a-0f9d-4f8f-bfdc-232c37883fa1",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e79d0832-0683-4ef4-b9a1-f25b3571b447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 316,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835a1a02-122d-4034-b120-a04e24b409e3",
        "cursor": {
          "ref": "ac6d0de8-5212-454a-90a4-933c7e13db45",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "ffda3c55-44b7-4bc6-bb51-fcd89565be13"
        },
        "item": {
          "id": "835a1a02-122d-4034-b120-a04e24b409e3",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b1b15f78-6c0d-4427-9c0f-4a0e82c99e69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 303,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d529f4c-1fd3-46d3-9a56-2669c970c05e",
        "cursor": {
          "ref": "e880bbfe-049b-470d-8296-346cb8a54ab7",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "1b73b9ba-e669-41b5-a666-06fb67d4ba1d"
        },
        "item": {
          "id": "1d529f4c-1fd3-46d3-9a56-2669c970c05e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "33b5f3e4-eff7-40a1-9199-10d687c1a99e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32482840-9ff3-47a7-9464-8e9e5568b3dc",
        "cursor": {
          "ref": "2c86317f-19f5-4524-ab22-c79372e32b14",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0f170dfd-72dd-496a-a6c4-7134ddf887f0"
        },
        "item": {
          "id": "32482840-9ff3-47a7-9464-8e9e5568b3dc",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a80d676c-1f99-4c62-b777-7fe748892d9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 296,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f0c5829-43c5-435a-b0c9-9cc8e9f2e3c0",
        "cursor": {
          "ref": "f4a64b20-b955-4457-bf19-694b625a7141",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "07d6dfcb-40ec-4562-9eb8-98391d4fc672"
        },
        "item": {
          "id": "2f0c5829-43c5-435a-b0c9-9cc8e9f2e3c0",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "739957d6-ba30-4126-b435-36b7db02e301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 293,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4de81bda-21d5-47fa-bd91-99d1b912a32d",
        "cursor": {
          "ref": "0ab6c99a-d8f2-47af-a3f9-3d7c38989a6d",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "4208d522-c976-47aa-80c7-153bd4cd1b47"
        },
        "item": {
          "id": "4de81bda-21d5-47fa-bd91-99d1b912a32d",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "dac45ef9-4f1e-4670-b15b-dbe35366c122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 301,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a0f936e-15a0-4a8c-a0f8-79476b0cb203",
        "cursor": {
          "ref": "6a44b175-5095-45cd-82db-0fcc49e4858c",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "0670172c-d1a5-48bc-9de8-4168b7541012"
        },
        "item": {
          "id": "4a0f936e-15a0-4a8c-a0f8-79476b0cb203",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "dfb6f58f-179c-4769-8a8f-d06b3bed3e14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb1c59aa-b6b7-48a6-a774-810258cc743f",
        "cursor": {
          "ref": "9127065a-4865-4e5d-8b14-a0d14e197a7f",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e5de3034-1666-4003-a67b-a523620ece8c"
        },
        "item": {
          "id": "eb1c59aa-b6b7-48a6-a774-810258cc743f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "43457712-e0ef-407e-8da7-2c4fe6fdac14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 311,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c28d12bb-dc3a-49e6-b6d8-b75577537d38",
        "cursor": {
          "ref": "929f4530-b578-4efe-a327-55a771289f14",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "30c46685-c71e-4a29-8a67-92e2ec301ee2"
        },
        "item": {
          "id": "c28d12bb-dc3a-49e6-b6d8-b75577537d38",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "0720b113-0c86-4dc2-86b7-e8383dfafb55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 297,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0429efae-3749-4550-9ffb-b35ab842bad9",
        "cursor": {
          "ref": "a8af404c-3f14-4d8e-8de0-49637517bf3d",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "30380452-9a16-42a9-94fc-c6b050b28049"
        },
        "item": {
          "id": "0429efae-3749-4550-9ffb-b35ab842bad9",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5911aec8-830c-4967-9742-53a3558f1f2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 297,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a16d976-2197-4b13-935d-c8aeb0a0b6f0",
        "cursor": {
          "ref": "e25fad02-213d-4061-85f4-1e3506c4179c",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "d55a034b-7b6e-424b-97ea-db005d5f22e3"
        },
        "item": {
          "id": "1a16d976-2197-4b13-935d-c8aeb0a0b6f0",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "c53e9dbf-c6d5-4623-8f6f-38baf0a74bf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 303,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e72d64e9-cb16-458c-b0be-7a614403e463",
        "cursor": {
          "ref": "a7cb855e-30ec-4d54-b1e8-88b18720dd96",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "9730ea46-4a01-4a8b-bad6-44625ef20145"
        },
        "item": {
          "id": "e72d64e9-cb16-458c-b0be-7a614403e463",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c880641d-9c43-43de-97fe-570ebcd01de4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 345,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dcfcfe9-3f17-41a2-9b85-83b4135236c5",
        "cursor": {
          "ref": "11459ddb-f2cd-4f89-aeb5-e1cd9ebbe38c",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a182d547-8d1a-4910-b77d-9766c9cdc5f9"
        },
        "item": {
          "id": "4dcfcfe9-3f17-41a2-9b85-83b4135236c5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7fbd089f-b32a-4035-86a8-257923246974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 294,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91d71b15-f3e7-4f54-8bf2-d2159b819090",
        "cursor": {
          "ref": "1085961a-7ac9-467c-989d-f9e7f9cf1ed2",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "2cc720b1-30d5-47c0-8a5c-655d6d061dbf"
        },
        "item": {
          "id": "91d71b15-f3e7-4f54-8bf2-d2159b819090",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "823f8754-087e-4930-b604-d7285cef2eac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 301,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdb294e6-9a74-49b4-99d4-4749478ffbdd",
        "cursor": {
          "ref": "a6a32d45-02aa-4508-8d29-8992ee36f455",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "7a826b23-8e5b-4b08-86a8-d1265f179306"
        },
        "item": {
          "id": "cdb294e6-9a74-49b4-99d4-4749478ffbdd",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "e11c551b-2e74-4250-8671-38c94a8e9180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba0e42fa-e704-46c5-bec8-fe6a1dbd00bf",
        "cursor": {
          "ref": "2a971e03-dc1b-46f1-9f41-370f2d9b28cf",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a63293ad-5f11-455f-a570-d9b131686473"
        },
        "item": {
          "id": "ba0e42fa-e704-46c5-bec8-fe6a1dbd00bf",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "22475201-af6e-484c-ada5-33289e920c7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ecd865b-e066-4103-a271-e29950ab7701",
        "cursor": {
          "ref": "1c813a68-349c-45ea-9206-d30fa32bf1f8",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b88fac09-5fa8-42bd-9871-b6b68258fad8"
        },
        "item": {
          "id": "2ecd865b-e066-4103-a271-e29950ab7701",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c5f69994-f15a-4ff5-bea6-05e82831bb0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53706866-b589-4ddc-82b1-410cae2b556f",
        "cursor": {
          "ref": "aed7b1c6-fa57-41eb-9b00-a978b193a357",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6441a72a-0033-42f8-8617-3391c3bfde07"
        },
        "item": {
          "id": "53706866-b589-4ddc-82b1-410cae2b556f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "b8233d81-0083-4be8-9ce5-7e2d3d3249dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8a302f3-b79c-49bf-9088-c51a601ffb1f",
        "cursor": {
          "ref": "9496898f-66dc-444d-96de-1e3e25e5458a",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "21a4501d-cde7-4946-beb9-6ac0191dcc91"
        },
        "item": {
          "id": "d8a302f3-b79c-49bf-9088-c51a601ffb1f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "5ed05b76-c10d-4e26-93b2-52bb99aff5e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fb6fd34-c64b-48bd-9f2c-cdaa97d0997c",
        "cursor": {
          "ref": "0e005f5f-ae0b-4d25-ae90-d45eeafd35a4",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "318d2b71-c1a7-4e9f-bb5b-a058a25d700c"
        },
        "item": {
          "id": "1fb6fd34-c64b-48bd-9f2c-cdaa97d0997c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "75217f5f-965a-42e9-9f8e-6e90d8ca6775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa721c05-d4ca-49a3-8c3e-79d06c5b6987",
        "cursor": {
          "ref": "468b1cd3-0d51-470a-afdb-4c45c63d0c67",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "30bdb427-5cd0-4699-8cf9-ce6a01269ce9"
        },
        "item": {
          "id": "aa721c05-d4ca-49a3-8c3e-79d06c5b6987",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9cb6e1af-7b01-4d33-9549-b7764d68631e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa39e9da-3051-48fe-b252-8dde099e44fa",
        "cursor": {
          "ref": "02f1c916-64fd-4a87-b1bd-894fc448ee6f",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c143237d-9518-4b8c-a2a3-29fa662b8441"
        },
        "item": {
          "id": "fa39e9da-3051-48fe-b252-8dde099e44fa",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "1c64b690-e9cf-4cc7-a614-96f188213755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "029bd68e-1ca9-441e-b273-c99781564b5b",
        "cursor": {
          "ref": "d45bcb70-0622-429d-9f74-b5b4be5370ab",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "116ef33f-cea2-4679-95fb-3769edc93640"
        },
        "item": {
          "id": "029bd68e-1ca9-441e-b273-c99781564b5b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "1327141c-0cfe-4c5d-b06f-34238771bf8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 336,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9dc1ecc-e855-4245-a735-a10a1d67e809",
        "cursor": {
          "ref": "f5449db1-d66f-4b23-91cd-fbb57e48f434",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "4940b9e3-83d7-48b8-ae06-6c5fd89c5bbc"
        },
        "item": {
          "id": "d9dc1ecc-e855-4245-a735-a10a1d67e809",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "18891d45-d96d-4bd7-b627-0c7246cff99e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "467b63b9-bf10-41b0-a8ec-02cfd525c973",
        "cursor": {
          "ref": "d24446e8-7eaa-4e25-8cad-a2fb450362df",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b148bf33-1fa3-44fb-aeef-ff2f0ca642f9"
        },
        "item": {
          "id": "467b63b9-bf10-41b0-a8ec-02cfd525c973",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2e581408-c017-4c75-be18-0b7c1786baeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32da3e0f-0bff-4e62-ba9e-552f1d25a0ec",
        "cursor": {
          "ref": "462d8ab2-1ce8-4ea7-9488-c6e027d061c9",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d710c623-ba1d-44b3-8ad1-2203c164bc05"
        },
        "item": {
          "id": "32da3e0f-0bff-4e62-ba9e-552f1d25a0ec",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2cf25cf0-ae3f-42fa-a378-a677d8e65dab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07dc11c2-0033-4cd7-a4a6-2ef50ef0035d",
        "cursor": {
          "ref": "6f7bd6fc-6b99-4efb-9bde-a65d20404906",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "1c6ae68a-d1c3-47ea-9fc1-1e18edfdcc1e"
        },
        "item": {
          "id": "07dc11c2-0033-4cd7-a4a6-2ef50ef0035d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "541039e9-da22-4c2e-b782-3bb5c56d4032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36065e71-d1fb-4ffa-a8c4-992fd6dbaba2",
        "cursor": {
          "ref": "22dd6e1f-62c9-401f-bb15-ff99b4ca7a6c",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "789b5eea-926f-4cb3-90a3-703f873c2072"
        },
        "item": {
          "id": "36065e71-d1fb-4ffa-a8c4-992fd6dbaba2",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5ca97ea2-efdc-4bb2-a87d-793794b74da8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5807ff0a-ea6a-46b8-b7e5-4a6ae6914838",
        "cursor": {
          "ref": "87efdf89-fd62-43aa-9fc6-a28f8b9bd61e",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b3cb66e8-ef92-453b-83b6-39fed569f173"
        },
        "item": {
          "id": "5807ff0a-ea6a-46b8-b7e5-4a6ae6914838",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "654d6a99-c17c-4f60-a059-628bc99e72fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e3ae57-f857-45d7-b7e9-ab0f1969c79b",
        "cursor": {
          "ref": "3285f0d6-6fd9-40ba-b230-70e2b6497da4",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "aac3144f-a61a-46ad-b37f-c18f984bc67d"
        },
        "item": {
          "id": "57e3ae57-f857-45d7-b7e9-ab0f1969c79b",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "fa4a852c-ed38-42ea-a82d-7d850bae08b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1ec2994-0f14-41fb-8efb-e32482b081ee",
        "cursor": {
          "ref": "4ad50866-7377-4f25-b648-bf70e6d44de8",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ddf9a578-f243-4ee1-80eb-3a46c09cb78b"
        },
        "item": {
          "id": "b1ec2994-0f14-41fb-8efb-e32482b081ee",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "93dcdbf9-4e31-4508-9538-a7bb902c6e2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f3d560-826b-4bf0-965a-a9596ec222d7",
        "cursor": {
          "ref": "988f2a23-5823-4824-9f16-6bf7f826194c",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "22cfca5e-af45-42fe-b99d-cfd84564b2c1"
        },
        "item": {
          "id": "98f3d560-826b-4bf0-965a-a9596ec222d7",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ad046bd6-3efc-4362-b57e-4192a4c3b142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae802f7-c522-44f2-8c69-0969866f58af",
        "cursor": {
          "ref": "e0e41f9e-b3a5-418a-8abe-f02be3013896",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5c800ca4-c826-4361-b9ca-02fac0f50fb4"
        },
        "item": {
          "id": "9ae802f7-c522-44f2-8c69-0969866f58af",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "d8e44094-bfd4-4ede-a6ff-7f6c7546d713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c1b8502-2f36-450c-9c89-cece60648e90",
        "cursor": {
          "ref": "49c13211-9e2a-464f-a4e7-8b9e4ff5d7e7",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "3ebc4b33-dcf9-4b4d-a795-d522c470604f"
        },
        "item": {
          "id": "3c1b8502-2f36-450c-9c89-cece60648e90",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e14ad265-b64c-4aa0-8e8f-dba7c75da2b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a9c3d4-ce74-4646-b31c-fd5bc2f93e7f",
        "cursor": {
          "ref": "a453571d-0de8-40b0-999e-eb9c6782a52a",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "7f26ba5e-d324-4fdb-a0ca-bb543df6d6f6"
        },
        "item": {
          "id": "b2a9c3d4-ce74-4646-b31c-fd5bc2f93e7f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "29d9fc04-c8b6-442f-b325-8fe62f16686e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a3a5e87-004e-42fd-af91-26e6b841e1bb",
        "cursor": {
          "ref": "518966f0-7808-4f8d-8a2f-d1c9011f9260",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3d5b25a1-79b1-4ff5-911e-f19b9965651a"
        },
        "item": {
          "id": "9a3a5e87-004e-42fd-af91-26e6b841e1bb",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f95ba31d-610c-4c13-8b40-dd743e118dca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae0682f6-fbf0-4d7c-bd92-da60c712a8c9",
        "cursor": {
          "ref": "aea81fa3-b633-4438-8a04-9d84a070858d",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "0caecb67-df32-4c87-9292-15c59bf03ba7"
        },
        "item": {
          "id": "ae0682f6-fbf0-4d7c-bd92-da60c712a8c9",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "9d628d12-321c-4f9c-9b66-6e996124fd79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fde4a70-3774-4cd7-ad6c-5e30f76ed7a8",
        "cursor": {
          "ref": "064c1f3c-3d13-44e0-8496-361b78d60ab6",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "5bfb4135-ebc7-499e-a7b2-2d40233a3066"
        },
        "item": {
          "id": "8fde4a70-3774-4cd7-ad6c-5e30f76ed7a8",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "bc4b6753-75c1-4ba8-9dbf-578e475b92f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2411f15c-6407-457d-9985-e00020d5198a",
        "cursor": {
          "ref": "aa58ac88-0aef-413f-bd04-6e36a110d16b",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "35ed0e70-0e2c-422a-8fb0-e7bafc2ff50a"
        },
        "item": {
          "id": "2411f15c-6407-457d-9985-e00020d5198a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b4ecf4db-5cb9-402e-9b96-47ef0556123f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f216c0-72ef-46b4-a524-967645a2fcad",
        "cursor": {
          "ref": "622f2b0d-1b1b-4aaa-8d3e-92b56134e149",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1158329f-cdcc-44ba-b0ab-e5a86cce5e7a"
        },
        "item": {
          "id": "d7f216c0-72ef-46b4-a524-967645a2fcad",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "fb6f078d-2003-4a5e-9d2d-252a3c85896b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d98c2397-809a-45bd-9980-4e35b9d7a2b5",
        "cursor": {
          "ref": "19ae11df-5892-4257-a92e-0eedda047716",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "c138cc6c-2ccc-461d-a0fe-a0dd7c4b71eb"
        },
        "item": {
          "id": "d98c2397-809a-45bd-9980-4e35b9d7a2b5",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0400c3a5-77a9-405c-80b4-97d8a1e88f5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b9b0431-1ada-4628-b928-ca68db3b7bc5",
        "cursor": {
          "ref": "efdab8b6-8c9d-4dbb-b4d0-963a0dede05d",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "064a7458-ee55-4676-b77b-ba2560154a56"
        },
        "item": {
          "id": "5b9b0431-1ada-4628-b928-ca68db3b7bc5",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "87451a2e-e1ef-485c-b089-6afd66ac576f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84f3dbed-371a-443f-af04-c836e0cfa96f",
        "cursor": {
          "ref": "d619095c-f94e-4831-a4a9-7ef2af43eefc",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "4e35b16c-3bbe-49b2-bdd3-4f306ed9af0b"
        },
        "item": {
          "id": "84f3dbed-371a-443f-af04-c836e0cfa96f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e6793365-14a5-4bef-b83f-c4567220ad79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aad13fd1-dd53-4df8-a8fd-408d1d18a824",
        "cursor": {
          "ref": "5e09f12f-55db-495d-8f13-fd596a2f703c",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "6c92aa39-a958-4a05-9b14-be2581bad804"
        },
        "item": {
          "id": "aad13fd1-dd53-4df8-a8fd-408d1d18a824",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f9acb0f4-f1c3-48f6-a561-0a2b5fa16e7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8746ff6d-9d93-48c8-be94-9bbb9831d457",
        "cursor": {
          "ref": "819913ee-d291-4bef-8469-048ce5447694",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "d6416fae-099f-42e6-83da-62bcb53b322a"
        },
        "item": {
          "id": "8746ff6d-9d93-48c8-be94-9bbb9831d457",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c8528307-6e4f-4e38-9445-942b45d8c013",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c562e385-109b-4ff4-87ba-40c675a720af",
        "cursor": {
          "ref": "6826cc3e-7ba4-4a9e-a88c-1b694db6dfda",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "232c35fd-435d-4f65-b9d6-76f463cf8485"
        },
        "item": {
          "id": "c562e385-109b-4ff4-87ba-40c675a720af",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "07eee457-aa3f-424d-96e4-9e7567a0f47b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdad152d-bff9-4226-bae0-36ba9d47fa4b",
        "cursor": {
          "ref": "e1c6f508-b178-4100-9171-39fbcd3e1cc8",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d87d10f8-a685-47e9-8e02-23ec40f4137e"
        },
        "item": {
          "id": "cdad152d-bff9-4226-bae0-36ba9d47fa4b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "47de3e61-761e-4c03-899b-b95fb0fff078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b841b82-00a6-4f14-91fc-6f129dd38dfa",
        "cursor": {
          "ref": "7b33375a-78df-4538-b4c9-35f953197501",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "2c154a2b-509c-4398-ad39-13ede730f84b"
        },
        "item": {
          "id": "4b841b82-00a6-4f14-91fc-6f129dd38dfa",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ea28310e-797a-473a-998f-47e58af448cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f7d6bb-c8ef-4485-876a-3c17d516216f",
        "cursor": {
          "ref": "fcd89a6f-2325-43ae-a3aa-02c73929e0ed",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "9a205458-2c68-4a1f-a42d-3f54eeb89da8"
        },
        "item": {
          "id": "35f7d6bb-c8ef-4485-876a-3c17d516216f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "594e00c0-c2c0-4081-8195-6f0f140ab4a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37af9088-9bd9-4daf-9009-d33aa2c584a2",
        "cursor": {
          "ref": "d4136cfe-2c41-41c9-98f3-2adf1c8e5832",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "00365d18-5f25-4db1-83a1-979c5b846d45"
        },
        "item": {
          "id": "37af9088-9bd9-4daf-9009-d33aa2c584a2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "95a5cd70-a13d-4ff1-8f92-9a020b01e711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6a4301-28dc-4eee-ab4b-8db37cd55538",
        "cursor": {
          "ref": "46b45247-bbd4-435c-b846-98a8978c69f5",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "33f06683-755b-4361-899c-d93ce077b0ef"
        },
        "item": {
          "id": "7b6a4301-28dc-4eee-ab4b-8db37cd55538",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "dac64a1c-88ae-41c9-b358-1edc470fa7ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58529191-81b7-4f39-9b90-f89562ba9671",
        "cursor": {
          "ref": "d47ac1b1-e68b-478f-93e2-9cb2038b5738",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "9a5f4c33-b171-4772-b518-26fb0247fa4a"
        },
        "item": {
          "id": "58529191-81b7-4f39-9b90-f89562ba9671",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "fe3e5a46-e509-4fc3-8a5f-e0699d122b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "119d59e9-caf3-4121-989f-0c617bbf4362",
        "cursor": {
          "ref": "50b6a47e-342d-4b27-b0c2-a5c31cdc33e7",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "60772aa8-e732-40cf-a82f-e74d1461bfe3"
        },
        "item": {
          "id": "119d59e9-caf3-4121-989f-0c617bbf4362",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "0f3138b8-9b92-4e9b-8a8f-74599369e458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ecd39e9-d262-4764-b9e1-ebb33bc494f2",
        "cursor": {
          "ref": "9a8565b0-d917-4770-94e0-35a51a863ca9",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "16bb2e95-4254-4d78-905c-455166a06fcb"
        },
        "item": {
          "id": "5ecd39e9-d262-4764-b9e1-ebb33bc494f2",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "b5c12bba-3e28-4d7f-8e91-b281a2200a6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "151fe7ea-ae3c-4c5b-bb84-b2560be53022",
        "cursor": {
          "ref": "8a2baf5c-62ca-454f-b419-c77184f4b994",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "864a5363-f446-4008-8a76-b384c8530945"
        },
        "item": {
          "id": "151fe7ea-ae3c-4c5b-bb84-b2560be53022",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6c231f7f-a644-4985-a3ed-206190878308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4187f54-f759-4f39-8681-4583204e7119",
        "cursor": {
          "ref": "9455dbdc-baa9-46c3-88dc-ff3fee4b7791",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "60241f68-dba8-4f6f-85c3-2a12eb6af184"
        },
        "item": {
          "id": "f4187f54-f759-4f39-8681-4583204e7119",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d9eff4d3-3744-4dd5-be43-aedf3a13bd52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96356c62-b4c6-453e-8b4e-7b7849f1b412",
        "cursor": {
          "ref": "3060f76b-cefa-4e5f-82df-388c5e4e7739",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "955f0262-8751-4a80-ae74-f78f9fe708ff"
        },
        "item": {
          "id": "96356c62-b4c6-453e-8b4e-7b7849f1b412",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "bb8bbff0-934a-4fd9-bcae-af801b1c4d82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1d2ec17-76b5-4d48-ab1b-2b67cbf46f0e",
        "cursor": {
          "ref": "ba017ee8-e37d-4cb1-b8b2-f137416ff109",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "99411f7b-a8dc-4cf6-bec8-b8c3661295cc"
        },
        "item": {
          "id": "f1d2ec17-76b5-4d48-ab1b-2b67cbf46f0e",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5a5e4902-69b4-425c-abb5-8ac750e30a2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ea64129-7888-4af9-a2e2-f60f63ca13fa",
        "cursor": {
          "ref": "cf55a040-f5e4-40e0-8354-8945337fad8b",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "20165b8f-4f85-489e-af06-462a9fc075e6"
        },
        "item": {
          "id": "8ea64129-7888-4af9-a2e2-f60f63ca13fa",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8faff696-815d-458d-a146-769c7e3abb6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ccd8524-2637-4167-8fe7-501dee96ff7a",
        "cursor": {
          "ref": "632cf129-6364-4d60-bc25-3bd48965ebde",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a023b283-c55a-46bf-9d8f-af8148f5d544"
        },
        "item": {
          "id": "4ccd8524-2637-4167-8fe7-501dee96ff7a",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "ac2e4cdb-90eb-4a6d-9861-f692782b5cf1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f269a15d-d9ac-4721-a759-79e183670592",
        "cursor": {
          "ref": "736fb7f1-114d-4704-96bd-f1a430d71bc1",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "db4e257b-8748-4869-86df-b9167d26be6e"
        },
        "item": {
          "id": "f269a15d-d9ac-4721-a759-79e183670592",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "6156adfa-cc0b-423f-861c-a0849c4a1757",
          "status": "OK",
          "code": 200,
          "responseTime": 269,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "3057fc76-bff3-47ef-9939-fefd60aaac51",
        "cursor": {
          "ref": "352aaf67-d4de-4187-b584-19793122d3f6",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "0799e756-eae7-48b7-99c8-4c8bf6332995"
        },
        "item": {
          "id": "3057fc76-bff3-47ef-9939-fefd60aaac51",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d08e2de8-f01b-42b5-99c4-c066d7cee9c7",
          "status": "OK",
          "code": 200,
          "responseTime": 635,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d84a3c80-4e93-4bb2-bb63-6efc9bcbbbbf",
        "cursor": {
          "ref": "867cf7c5-e8b6-4d33-9336-fb41f621d90b",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ca4048d1-cf4a-4634-8f9b-d55c2cb9d004"
        },
        "item": {
          "id": "d84a3c80-4e93-4bb2-bb63-6efc9bcbbbbf",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "733365a5-21cf-4557-bed7-1908dba89288",
          "status": "OK",
          "code": 200,
          "responseTime": 617,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eb4fe35-a1cd-45be-90c6-dd3f0aa8e9c6",
        "cursor": {
          "ref": "196547d1-0bac-4f11-9ade-41b52fd4bf18",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d57bc3c8-044a-4fec-92ef-63349f92c76e"
        },
        "item": {
          "id": "1eb4fe35-a1cd-45be-90c6-dd3f0aa8e9c6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a178e7c8-702b-437e-af6e-3414d85eff9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eb4fe35-a1cd-45be-90c6-dd3f0aa8e9c6",
        "cursor": {
          "ref": "196547d1-0bac-4f11-9ade-41b52fd4bf18",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d57bc3c8-044a-4fec-92ef-63349f92c76e"
        },
        "item": {
          "id": "1eb4fe35-a1cd-45be-90c6-dd3f0aa8e9c6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a178e7c8-702b-437e-af6e-3414d85eff9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eb4fe35-a1cd-45be-90c6-dd3f0aa8e9c6",
        "cursor": {
          "ref": "196547d1-0bac-4f11-9ade-41b52fd4bf18",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d57bc3c8-044a-4fec-92ef-63349f92c76e"
        },
        "item": {
          "id": "1eb4fe35-a1cd-45be-90c6-dd3f0aa8e9c6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a178e7c8-702b-437e-af6e-3414d85eff9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae1f5c4-c784-452a-a578-1ae2065d7e67",
        "cursor": {
          "ref": "1dd2da85-48c7-421b-ae32-df14326aa8f5",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "16f44382-1c50-4e27-b2cd-cbeb4509728c"
        },
        "item": {
          "id": "4ae1f5c4-c784-452a-a578-1ae2065d7e67",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "f17d200a-0d69-40f2-8631-a6f13aa34370",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaf8563c-8a74-404c-81be-6b56e20d5103",
        "cursor": {
          "ref": "c0127634-0030-4c92-aa38-7eeb00e3e503",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6f791756-9937-45be-9469-85952010fb58"
        },
        "item": {
          "id": "eaf8563c-8a74-404c-81be-6b56e20d5103",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "395afc7a-b02b-4a92-b6d0-25b65121995d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "eaf8563c-8a74-404c-81be-6b56e20d5103",
        "cursor": {
          "ref": "c0127634-0030-4c92-aa38-7eeb00e3e503",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6f791756-9937-45be-9469-85952010fb58"
        },
        "item": {
          "id": "eaf8563c-8a74-404c-81be-6b56e20d5103",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "395afc7a-b02b-4a92-b6d0-25b65121995d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "2d5e70cb-06c1-45e0-ade2-e905c6aed807",
        "cursor": {
          "ref": "0ff2796a-ee0a-4709-8edf-00334145abb0",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "20114c74-25ac-4b17-a113-94be32ffc966"
        },
        "item": {
          "id": "2d5e70cb-06c1-45e0-ade2-e905c6aed807",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "77256e95-fdab-4b8a-bb3b-4ca51a9fac1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "d8c353f3-9eac-4e33-9187-e5782970c071",
        "cursor": {
          "ref": "ebcf6a16-bee3-4616-a065-88d4267ae0e6",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "91902438-d03d-4d45-8bb0-fc98ffa9f643"
        },
        "item": {
          "id": "d8c353f3-9eac-4e33-9187-e5782970c071",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1f2361e8-23cc-4199-894e-98fc58cbc1e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "d8c353f3-9eac-4e33-9187-e5782970c071",
        "cursor": {
          "ref": "ebcf6a16-bee3-4616-a065-88d4267ae0e6",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "91902438-d03d-4d45-8bb0-fc98ffa9f643"
        },
        "item": {
          "id": "d8c353f3-9eac-4e33-9187-e5782970c071",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1f2361e8-23cc-4199-894e-98fc58cbc1e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "12c126ee-00c2-44c3-afb1-757ef9dc2009",
        "cursor": {
          "ref": "7abdb26f-d571-4a39-831b-b599482e2152",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "2796dac2-1fa7-4919-a125-d529c652dbc5"
        },
        "item": {
          "id": "12c126ee-00c2-44c3-afb1-757ef9dc2009",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "a2a22693-c6fa-4036-b69b-742ee2550d3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}