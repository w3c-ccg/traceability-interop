{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "93df712f-310f-440e-9e18-945b3705acc7",
        "name": "Clear Cache",
        "item": [
          {
            "id": "dff5cb9e-e028-43d0-898b-c9236b21364c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "db9b2756-5adb-460a-8203-b251d12eb6fb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3bd2fc6b-497f-4ae5-8008-37ec9958a6d3"
                }
              }
            ]
          },
          {
            "id": "4e9a6311-572d-478f-b0bf-c4d64cd5160a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "deb256ed-6b61-4ebf-8ccb-0b40cd0096f9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "85587373-edc8-49c4-8739-7f21152a352d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0eaa5b45-ce5a-4ad3-b5a8-38d788b06c34",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "69caa47a-389f-468d-bec7-0e3021a3bc48",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ded6e925-f857-455a-b4f9-426ef9924ea7",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb83a86c-e8c4-46a8-9244-7e2e30ca7ce7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8ecd7591-0acb-4d08-a4b6-1d030fa24861"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "32a2d37d-5723-4564-b3c3-94a479c9e524",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a0ee8bc9-a1df-4331-8d17-96cea353492d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0d931319-fa12-4d81-ae81-54947e63cedc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cc07a922-a6bd-46d7-9b92-81f226330fca"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ababa2a9-8cf7-4bc3-9ae5-068c81348d89",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0693fd66-2c73-405b-bdc7-3d1df9280f97"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d103873a-ec1e-4c32-9416-2c7a2216d880",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4d6fdb82-6331-4194-9e61-80a26a59f70c"
            }
          }
        ]
      },
      {
        "id": "3ec5cb43-9f2e-4657-a125-396e42824e0c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "b1b92b4a-63f0-4f17-bc26-5b9afa79f36a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7b309535-4e33-49dc-ad9d-b9b8af9c5366",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cebc0ebc-463b-4354-a4e5-eaf9d726a12f",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0ddea52-1ebd-43d7-9e5a-904305707320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "46be5489-f3a0-44b6-8ed2-d98173499ecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ac95ec-2893-4cd2-b004-b89be71cc550",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd7c035-f5c6-4b16-9544-fa2e0717f67e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "701d1d01-6e73-4fb0-9078-a2a9738f405c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50563986-f090-4580-a3f6-4a6ef2473495",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d03c00-979a-411f-9eb8-173f4bec09f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d60335c6-e676-44aa-a5f4-ea09acc4c2a8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a5b33a57-1022-47dc-9877-3f4ed25d5f0b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6bce116a-af3a-4cf3-8f8b-fd3bfa1ae629",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "868b0e53-3aa9-43bf-943d-4ab0784fa452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3c671cf3-9681-47d2-ab30-d9612e365b10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98e57929-e0e4-490e-ba49-fee727c6b388",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "916a7ee9-5a23-41a4-a829-15932099a44d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8e5815ee-ab76-4a1c-9d8a-0cd37e3cd8c9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "32db7ca9-0ec5-4611-8322-61e5cfa052d0",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eec42f17-899f-4379-a8ef-d454abd23fa6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "a9cbbd28-a363-42d0-980e-27ef6ca4ae9d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0e75f432-24b2-45dd-b20b-846695c9d63a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "437149ba-d4bb-4040-8950-28c03c584278"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9525b49e-7c65-41a1-aa55-a8b4f6b73a11",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c260e220-cb77-4900-bad3-9b9ac133e9e5"
            }
          }
        ]
      },
      {
        "id": "7ee3bfdc-206f-4d2e-821a-4070d9a5df23",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "bc53ed9d-c9b9-4f01-9dbc-6a0fc3a89c03",
            "name": "Negative Testing",
            "item": [
              {
                "id": "35f39a46-9ee2-4fc2-be4c-baff77cb6e5e",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e28d8f21-f6d2-4bf8-8a77-d73e722369ff",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "621ad74a-c82c-4e23-84bf-3d55fc0b10c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04cd005f-e60e-441f-9e5c-5ab6b4f9962e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a0fac9-1586-4817-9b78-176c9b68a5bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d0eb5eb1-9b4c-4b28-8413-604484707dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe96cc4-b966-4581-8245-d6a8bad57ef8",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ca54a0-897f-4a45-93be-1615a80b1da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "662e5fb8-e2ce-46d8-8f36-8653c368641e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57616b47-3a86-4560-be14-6d46e320ea77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1354cde1-264a-4f0e-9f66-57c35566d89f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c578c2-434e-4fea-ab8e-28b3adae29e9",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67314501-16f5-4260-b451-beba9787e907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f90dfb2-1c93-46c5-984a-284a4dd31c41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3295e506-6949-4953-b090-5f3d3260568f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64a6893a-812a-4be2-9f62-44eaa88e5c8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb53ff6-1b73-4227-91f0-060095e77275",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab9e728-84cd-4970-ad30-37e92846db1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ca2c574-69dc-471e-bd79-aab79d22d670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c7146a6-7149-4c8a-ac9e-fb8f9577089c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb62518b-ab49-4230-9045-eeef61205064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a39611-9e8c-43f5-a7f8-8db5a46b5ee3",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5297e43f-c66d-4f24-9092-5a53c7fc57a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4586e6ac-4a37-45cb-b1c2-de9964abbc0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dffb110-51e3-411c-a84f-423b47d9f6e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3eb66a9b-6cec-49e9-800f-0005256893de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b01c4d9c-b437-4c25-8bb8-943423d380bb",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a8a14f-e460-4f82-a615-6fd8323912b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9fb28f4-7f1c-4809-9661-421657db8354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcda50d1-018c-4b34-b129-5b7b7a1023d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ac9ad99-0ca2-4f05-87d8-e21878c2e1eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40b4da5d-b5f9-4d90-a98f-330f296a45ad",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b80c0c94-11eb-4cf4-91f4-79d9dce33efc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47629619-708e-48ce-8d4d-7d8e7d301053"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61943d93-8696-423a-8e04-d0a3dcfe2905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94b422a4-b44b-41bb-8920-f357a6a0dcbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbfc1e41-fc14-4433-acc2-d3bcdaa29dca",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93079ee4-673c-4a0f-b39b-6a01fcbb4a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26a7cdc5-a252-4640-b537-231c765b8906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aad06ee0-c9cb-4382-bd7b-b2afb33d3986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b92e076-6c48-4c25-a309-057ee932a186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d49cfbb0-c641-4697-95c6-bf3825b2408a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ca4d94-a827-47be-ae2a-3b2c000ccf73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94dbfafa-f18f-49d3-9fe6-142667d7756c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfcaa43c-c483-47ec-8606-396399b31aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb2e8e91-8ebd-4de6-b83e-9fc3314907c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed0a357-8ebd-4538-abd7-b277a334c39a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6ebaefa-f107-45a5-85aa-03d97f550eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86b1ba52-156e-4517-8074-cad5b96ec1e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa1c2af7-f2f8-4ac5-8048-fe24d3a5c110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b798864f-1bf7-40ac-8f57-60d3ec18beea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c194259b-ed52-42ec-8411-1b0932235e3f",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4bd2b4f-9a6a-4678-b19d-da8e4f6363e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51789d88-c72b-4e57-9b31-c1ecc6cdd066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58cb39cd-a9be-4859-9050-776b6a0ebe2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5539f835-4eaf-46cf-8607-cef505229ce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e202714e-e8c4-4622-b026-c63337c41c00",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa78432e-1fdc-4240-8fe1-c0661ff9c16f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1855985-2850-4bb6-b67c-2eedf829e748"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6445c056-1228-4826-b205-2c7e6c679809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82638f4a-4578-4af1-a572-8f8fa2724c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "353a9f03-2093-4245-8ffd-ca75cba17378",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b41070c6-039c-46f2-8e51-f95a8adce6d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5affad23-7910-4b9c-ae20-dc958d7d7f45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ee2b6c2-33c1-4408-9cb6-62575a714ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0aa3d8d2-a3cc-4c4f-9f7f-20c76080163c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c86dd44-ed25-42ba-a6ba-8172732be499",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "160b4fbe-f3f5-40d2-b583-35f5616540a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be5cfbd4-e3e9-42db-9ace-3b8e37a2488e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c677c5a-949c-4fc7-b1fa-94f357d084d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "70e120e4-c2c9-4361-a4d0-559115b3adee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d7b44f-507b-4c46-9967-a96fde7e95f3",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af497164-e39c-447f-bafc-0c2255fcc85e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60801e6b-1b11-4ef3-bb56-bfe11a8adb2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ac71889-c237-4b94-bfcd-ada8cbca3004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26b1b87f-c4e0-4546-91a2-9f76d34207aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "194c61c4-d7cd-4c47-b699-d710a3556870",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f1341b-02d3-43cd-a1ee-55bb61e696e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7457df5d-9418-406f-895d-190cb01e8901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "058ffc0c-dfef-4416-a8f5-0b674dd556ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "890732aa-35ee-441c-84be-4a48ea23052f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8bccbb9-290e-45d0-93d7-aef595b47467",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc47c9dd-29f4-4fa0-80b9-8e4fc4c08bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2c080ea-2f35-4871-a450-01ba0f5e427c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "597cabd2-6cec-48fe-878b-dc85570f0ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4be91c1c-2db1-43f2-ba8c-a7eaea89c912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b100478a-2217-4810-9d2d-ac36da327adc",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7671661b-c590-4fce-b6f3-8c3821588384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fa10048-0569-41fa-9a02-2afa3208c8f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa571a67-af78-4569-aa55-8e8dc53b26e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8b61675-e9ba-4298-baf9-4f843d5b73f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22861a42-1015-41de-b77b-718153edb47c",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd7d4454-1fee-4631-8e1c-e8d2f3a15331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "582086c7-4ef4-488d-b01a-78cea7666ecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d90ea2-b930-4124-8405-dca68b83293b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e0031cf-4ff5-4611-b5b4-5738b73008bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb4cfb7-c991-4881-9d9d-5ef26e1a0467",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e2a3224-e213-433d-bfe2-d51aee3d4852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ec767a7-07a2-4ac7-a431-addbcf5dd349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a6c6bee-aca5-4f42-96a6-ba79c87344cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb7d80f7-a070-4210-bfcc-5986b6f2ae49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd751e8d-b4d2-41db-a8ad-db898b719574",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d93087-ecd1-4545-8d9b-c1da2cadb328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e52a7e8-a2bf-426e-b500-dc2ff51f5e4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cbf91ad-b124-4197-b839-00a1d6f5612b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe0dafe3-cf2d-4d4a-a4b4-191c14b3fa3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c090ce8c-cd7c-401c-b194-94d053347c78",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63832898-b69f-435b-947b-8716ae378540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5d07053-d1f6-4822-a36d-27e183dd2f99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "496697d9-60f4-4e31-bd07-7e32d10cd325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3ca86cf-b999-49cd-b1db-e5c6cbf40760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c6d596b-3740-450c-b4fa-534161ab533f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a87e59a-369e-495e-9f04-57a64934e98b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebd38938-ec9a-48dd-82d7-9f8b352ee6e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b66c497b-8e48-4222-89dc-e12d1e7671f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7b5fbb84-2b4c-4214-9e85-6fe36ecd6e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f74711f-5c4f-40f4-bd7e-ff10d416de5c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb9e208-f830-4370-b715-871f6af9fc90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "005f31d8-a784-4e2e-8805-4fff2824f220"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec636d4f-ca57-4489-888e-f437eac01c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6faca7c-c3e6-4ab7-9895-2e49fac61423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85561c1e-7524-4d94-84ee-c28214351fae",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c72141d-56d1-4890-85af-c86ac80090f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87d1ae42-bfe3-4bc4-b14b-1d5044c4d440"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0f9fe6c-5eb5-4749-9579-13318d860ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "69b90bed-cc0a-497e-9b66-556805e4cd94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e3ab4b-70df-4c2f-9c77-70dbfdd97d5e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "828102b8-d0f8-43c3-94f2-a3882c0dcdf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc2093e1-3df1-41f8-8b96-c40481a6ed38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b427926c-85b2-421a-9e02-061c390aed57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d916b3c5-3cb1-4e14-92c6-5b9a354a1bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db051eff-e9aa-45e6-9f6f-3489e60089dd",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6692977-14de-4290-958e-a08adb8987cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea76a9ad-2fb8-46d0-94f7-8f926ed48a67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e6544b-24fe-4be4-a2d3-c648fa199b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "205dcd15-8374-48cd-94cb-d5b212191816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "843413a5-9051-4655-8d36-04c56c8b2efb",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee183db0-37dc-4464-8a5a-a15e8160d208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5878f9f9-7c31-438f-bf9b-88d9ef4ce4c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5297cf3-de06-4141-80bf-8858429db5f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfc56068-adfb-4814-8ed0-9b7fbb11a4e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ece7fafa-6734-461a-9715-1cac7059a8b0",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd8b1a44-fe96-4074-9e93-b912f0032471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56c33ff5-f7c3-4d94-8ece-577ea482a3ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff89bb8e-80d0-4cac-a753-79c45455adf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "14dc381e-34e3-4aa7-bd56-b8329c303972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4305d796-b90a-45b0-b8b3-94ce38cc60e0",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b54f7ec-132e-4c0f-ab1c-f6652feebd3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b221221-26c6-4dad-9a62-d96a11ff6b24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a4e1fc-10d6-4f9c-9af4-d41acf4a6fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "e788d793-e675-4eae-9278-5835ef0e95da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc2d0728-2b53-4da2-8568-f88c86a2d1de",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad242735-2ca5-4507-8ae5-a9c658e5f7dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13e391c4-9d26-4016-be68-36fe2a9e30e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26aace1e-fc2e-4ea3-8d2b-e876f315b700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "28adbb40-90b8-41f9-993c-91dc55f14c77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32a4c6f7-e214-4029-8def-ba29809b2b44",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03705eed-5f89-4a74-823b-7c19fcb415a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9504882a-cc90-4103-b73e-39f2b85c8a8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf97912-b1bb-411b-a6c1-5340c07b1c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd17669a-c564-442b-a9c8-237608a0881d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c82c99d-8cb5-403c-845f-2aa81c8a9c7d",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "916c9b1a-2840-4055-b322-4f46cf53c4fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df52267f-fd5b-423c-b722-cf5e118ecffc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2f7335a-c8ac-4391-a186-92dfe35ba40b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c3a5f4b-9551-4be4-8720-1ca9e81fc5fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71620eb5-e761-448f-84b6-3fdd4f68b31f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f582b0c3-953e-4c0b-93da-9158cdc24464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94fba0fa-be3e-4561-aa54-a049d56292f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddfdef32-1510-46e8-8f80-b1b2d5760fef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a105c14-cdd1-4557-9d35-65db9e00fa1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53adf03b-49ca-4dd6-9c6b-a5cb0d1878d0",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "792ab161-b7b0-495a-bdf4-a458d1234c85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "367b4bf7-ff95-41dc-be54-a03cc2aebaab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f7dbd11-1400-4a1a-b2b2-82b88527729b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c327e288-385a-4df4-af6a-96a5c7f18ad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aff03349-a7fd-41c5-866a-dd88a9246153",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61766e9f-4949-41ed-817d-c33050d94272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cca10c51-fa54-4f89-bb02-7c2aad2e5edf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "277e3240-a5dd-41e8-b9b8-86ef4817e635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "829f47bc-40c0-49f1-bf46-a98115dbfc85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f03097d-d301-4f10-b5e7-6e4c20733877",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a02a403c-298e-46e4-b207-eadd3034696f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "960a98d6-01fe-4284-87b1-5836ca5cea4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16de740b-9b4e-4c4b-ae64-2a9e308c62de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "59c4db3a-bda9-4ca3-bb6d-3a26a6962381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f57e9f-896b-44c6-9bd8-8113e4814f4b",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4825e22d-76cc-4f14-9f58-3f222d8ad6d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e420f47-a7c3-4922-891c-7b1217e6269d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e311152-e73b-4f43-a974-7a2aff502b23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f999f4ea-590f-4c51-b9e5-60616245d8ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a25a489-19a6-49b5-ba3b-ec2c38730792",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b49e30f-5848-4d91-91d6-828b4cdb6b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2972db0-5638-4ee5-b518-3646632d168a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6f2ecfb-c9e7-4b51-9f81-bcf68a87d743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "02cdfb06-61de-41e7-b164-54a373ecbb25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde53824-d8a3-421d-8a89-b99d8589afe3",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6faae360-2512-407a-8744-60f93329328b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af89e681-1cde-42bb-abdd-f9fa5581f951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4d51c6-7c2b-43c6-bfb3-5dfd98558417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1ea6ce0-1fac-4007-9421-5eee67555c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "218bb6a0-c7c8-4f81-83da-8ef31c437390",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0009c99b-7879-410c-8c2a-24e616109dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c2c1198-afa2-48fc-8fc0-1c127287592e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e67c5cc-3845-4583-b1fb-dda78130fd4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f9626a9-94c6-4f40-9fe4-228ceffe9111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf9bee2c-c2ac-48b3-b0c4-fa4807051ab9",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf9bebb-34fa-415e-a0ab-68b08e75e24d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1caa290-132c-4cff-9d04-3293f66442ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a3f7ae4-abb2-4148-b78c-7d09dbf2a157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b3eafbe6-2245-4834-a0c3-972c14fe015f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c16f89a-f9ed-4582-ab6a-80ee2b04f0ff",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c8aa814-2c10-4093-9560-d620390eb83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a272705-1692-4604-bfea-c04eac9f05ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d9b4a73-3a88-49e7-b666-f869c29aa2b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7cffb32-8549-47c0-9cb5-eddb8553bc37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b5c41ac-00fb-4ab1-9a4e-eeacfcacd9ba",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71a109ce-3822-46af-916d-2aeef38afc89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a42e5c17-c945-4f2d-aedd-a533664e426d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22461eca-e1d5-443e-bad4-138e03eb0075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "80491205-698d-4291-8f9c-e7a1df14f673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d3932c-7802-4918-ab69-a0b697d2aaff",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd4952e-ec7f-440f-9c47-f48ec35ec5ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90bc4fc0-5545-4434-8777-fdcb42fb55dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80fd99ec-dcbd-42b6-8159-a5a8c73ca8b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "339d56d9-12bb-4019-8da3-7de58c8a0d3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c44942a8-982f-4241-b040-6eb3ade0993c",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7459158-b105-4967-afcd-7f8c6658d57f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36bab723-e721-4a79-bef0-5402c60c0e21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a97159-5407-46df-bfe2-20605db60e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0ceef26-34b6-4b6b-9e61-de859100236f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5773b07-b12f-400b-911e-bf1ce01a6561",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f9ab69b-6670-4aaa-a0e6-844a8a053e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b290dd15-48fc-42da-9242-358a0a32661c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e672c86f-5f8d-4f0d-8fc3-dd3d153b9a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b2f2ebf-0439-45ac-a1f9-60fc9b4ac6e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2085e16-a4b1-4ad1-abaf-8279a059e14f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f18dbc1-ef91-4caa-a7e0-6e704aacfbd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3825323-1880-4d3a-9271-96188481a992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd4daf2f-e3d8-4510-a625-5866c93a27a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1161d167-b0c2-433e-8503-d321249c8a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0d7e29-a785-45d6-b8fb-debb099e8ef8",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ddff9c2-d763-461f-99b1-8b15d1567215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41a452ad-79be-4faf-bfb2-a25ee9feb34c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b563a0b-00bf-41cf-ad05-7938fa0d30bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "84237f98-6ec9-4bc9-bade-c236cbbc5599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78544711-a5c0-46c3-ba38-530852db3c0e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a6c776c-2bbd-4aa3-b52e-6567657fffbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "559e0a7d-aa7d-453c-bc69-e0a56033ed1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93dbaa1c-3ada-448d-a8d3-6cb1982ad33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "228703e0-4ed1-4912-82e9-809c4ab21aa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "143be0f8-9a1f-46e8-895b-9d49db0518f9",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31135ede-399c-457f-bcd9-fa60f9e18c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a73ecc9-6148-4ce2-9c9d-f6b4589a27f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df367ecf-f2d6-4e53-96da-549e476969e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "479f91d0-dd60-44ec-82c7-61d1fd311603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cec6a9cf-7168-4d34-991f-54d7f19dcfbb",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0875d67f-6650-4852-8707-cc57ce4131c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c3d560e-b444-4581-b827-cf884f8b9b78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91813466-02b7-47a8-b23e-ef41d9bb8699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8773ca41-dfc3-488e-9011-665df06a1863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14bc56e6-71dd-47c8-829e-646c05c8d3fa",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1c22a60-5143-4a32-a0dc-de19d5420661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "957f2c11-4024-4102-a78d-89c9b73eb9f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e88f4e4-a0f3-4522-ac47-cdb3254d2226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4bb5499-603f-46d6-8b52-f600fa6f52aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd14a6b-76c0-42c2-8369-3927bd7769ba",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adbbdf99-410e-4bcd-9488-7c5d6771e107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b94528e-9882-4c24-965f-2f34ff1ae339"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b0d2ba-c851-4aa0-9d58-db0cc77d8add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d87e2ea-8fc0-4ec4-83c8-85b600987272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a35ab5-dd2d-414f-a3de-3ec68ba42c93",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef928fb9-c008-4a5e-aecf-d47b4c1a7275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56223c3c-652b-4fec-8d65-da7cfda133c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bdb2e99-fe48-45f8-bd7a-227b5b3f3696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "78147909-a583-452e-86dc-dcd2b2e53e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9547cb-f8c5-4d23-887d-832619ece586",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1522d658-8266-4b92-9d76-00d594e6a5b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49a9c44d-103a-41eb-b66b-fde9829f2534"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54e9e101-2de7-4b3f-b3b6-e47860646b9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "56ee9161-ff2e-4e1a-8e73-fd61fb52cf8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89defcee-9330-4496-b4e2-2871e1f6add2",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "853d1492-75e1-4989-8632-f43d6d0f012b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deff7fc6-c0d5-4e1b-9f8e-46e7c4915c33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d1e6fc9-e1c3-4eaa-808a-cc3f1156b58f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d4b2e59-752b-40de-839e-88af722d28bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58a9c001-c751-4f06-96df-8368fd387de2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4e3dacf-1186-4505-8609-c597ab01a224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0abe0d76-bb00-4004-84c5-21e60ff83c35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "785e0c49-7be3-41f4-a9cd-7550cea12012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "73af15ec-6708-479f-8cc7-52ac50015418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28457c9-e4a4-41df-83d2-30f568a396cb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac3c89a-b400-449c-993d-5006e1865d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8d30f5a-8f4e-4ead-8668-1ccaec904a58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53239eac-cc54-4db3-8df5-024bdc05a190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a34897fc-e656-4cae-9965-325588eabc59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbf0cefb-a0c5-4fc2-bab8-ecc054941d70",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec0702e1-8274-49c8-82dc-533f7cd26913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fde902de-7fd8-402b-9cf0-6d05d6d2e653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f12e48-65af-4e85-9ec5-10990fbd9403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "90bc2e83-807c-460f-9d5f-61727cbab42e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10809939-6691-431d-b3d4-b7b5364dcb37",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c2f82dd-29de-4493-891f-cb3c61ee96d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e22df57-5147-4535-be1b-74311f7aacce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c62fc5a-bc5d-4bc8-93c3-e7413cc444c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "43e2f1db-497c-4bef-83b6-b35dc235910a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad842760-7725-4ede-8176-2ef9858f05d4",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b06411-6d34-4c04-b122-8ab03f4bb7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2f2acf7-0ffd-4e97-b76a-ce5a700abe3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2110d04-688b-4552-a28d-c310ad5b28c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "b88d7a3f-0381-4849-99bf-87cd424945d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aebffda-ee64-467c-b7e8-49bc13f10aa2",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4e418f-9505-4cc0-b4ec-3728edeef9f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d16b936-bcfe-454f-ad64-e08c8e9cf51d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab384c8-73ab-4408-ba1a-205522d862f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "94301f65-e2b7-403c-bc88-42dd0a420914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "026d6650-1172-46a5-9eed-66f50de51ad5",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "822c43f4-eebb-4e0f-a667-a5cb7e3c22b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00bd1dfd-10da-4652-a503-f28cef020089"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ede2fe92-9f05-47d3-89f5-425244e7f272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "82db65f3-1383-46d6-bf23-9fae54baeebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f087c26-901e-4cc4-83a2-dcc81c7b28e6",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "966cc1bb-1ef5-47be-97a5-390d14502aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4397392f-6d1e-4f9e-b9f6-32db2efe8d22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe8309f4-388c-4fa9-a9a7-1a81085b0f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d08b3db9-3543-4b99-a63e-37f9b05bfefe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b5a631-ba5e-44d5-ba23-514488797faa",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60d2137-9d10-4d21-b534-7f57e3b8228c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70a742f2-b586-4e64-8b89-77340065d000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f41940-e149-4a6a-86ae-fca3994c28ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b017ca05-f00e-42eb-934f-36ce6fd20fbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2cccdad-c59c-4ff5-ac78-e55e7e223017",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec554e4f-de63-452d-8911-09221992f89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fa7bc7d-20b8-4edb-a23d-fd574bc4076f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "386d1f37-a0a4-40ed-8633-12a317f160f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f1648228-cf17-467a-9d26-6c0ce32e9df9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bd23db3-cb83-4176-b9f6-0036be9572eb",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bafa8ec-5c65-4f41-b6c2-63b6ee11ab9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "768aa633-7beb-4974-ab25-7eebfe72f4bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9456684c-adb4-4150-a74d-ddb2b887d9ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "dee3c655-7953-4612-8107-7619aae7ec56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "891465bc-e427-4a21-b066-59901469c3f8",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8046ae9d-8f6a-4b4e-b2a1-df841528b0c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b70190ba-ab55-4411-80e9-3b17fa5a29d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a69d3ee1-7e87-45fa-b307-9070f018f841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ac50fa6-4144-4769-80b5-7c6a15be8e74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "901e374f-ed65-4176-ac9c-c48acd974407",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f556f4-395f-4eef-bf49-283d1950f656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23584c7c-f536-4a3e-ad65-c93f0af11647"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d58ab926-fd8a-4bfb-8c11-46e3a3204047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d003619-e53c-4535-bd40-fa549d4a056d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c5a210-1b07-47b1-9794-5c1b88932ab8",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "959badaf-19af-4428-be85-b9584d661eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1c1de43-7f51-4250-9131-eaa7504157f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7626d8bf-fdfa-4818-8a40-9134a1eecda7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c656ce1d-d619-4b15-a0b2-b2ab159e4677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a45bef9-e324-4b32-8139-21d63b61ded8",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8176c03b-5faf-460c-b530-02190efac362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92979917-361e-46ab-ae25-626f5fed9566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d765aac-1e07-4f2a-be44-df8154a07012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bcf245b-35e1-4db8-b5fb-48619a10cbd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef104eb8-f379-4c8f-9dd3-6f11de73d5f3",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf72508-7dd7-41cd-9572-df967673014e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2dd1156-7921-41d4-8f40-9e3c30916350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35536a3c-d1b5-40fe-adaa-0608ff44fa8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "61da7bac-eacf-4d90-bc3a-59c996672500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc9021ea-8b82-45b2-907a-3feb2f0da72c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e45f879a-4118-4136-bae7-764bb39fe8e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a3c5d59-dffb-4c49-94d7-202e22464eae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbbeb83b-67b1-4e15-951e-d60d7e09d7e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e15656ab-f946-48ed-9b92-645466ea3ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d45ae40-efa2-4e07-bdd1-38c84c3f1313",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51edbbd9-6632-496c-b282-32660f75cba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bdfff42-9c6d-44bf-a465-921c461cd6f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bccfe3e1-c258-4288-8c31-434e9300e35d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "68cef524-28f5-45c2-af0c-d169242a5ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e50f0091-5ffa-473e-b727-196dd4cf0cb0",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b4362c5-f749-4f1b-bcf6-0d6c1ab5b5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1f5cd80-68b7-4c6e-81ad-12e781dc871d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "208d38be-0d35-4822-88b0-d52bf2fd1e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e067740-ce04-4e4a-b9cc-b608d33baa30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0298733-05e1-4403-9141-775a6444da64",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8244a7ce-e7fc-4edf-b4f3-64469d4d0e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2169f41e-28aa-4edb-a368-dcafc71ba468"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48e07f96-bafa-4606-9a29-d5ad805dfe5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b787baa-f204-411d-a0e7-e06dafb50582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66b29a38-1502-4efc-be4f-5e8ad00db49f",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "579dc52d-674d-40e5-ac1a-17b1498e00de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32c3ad48-bdfc-4549-a6da-c4df8161b09a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b90ad41-7187-42f8-8a2a-3afd1ea8b334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "450b1134-f00d-444b-a3fa-bdfd49078231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af133e56-ea5c-4ca6-bbbf-e4d3773d1c12",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9596d41-1190-43d1-a941-adc006da1f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a40b93bd-d3c7-437b-9d58-2ca51c07c9c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e92baf2-3fb1-4517-8529-c08356020400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8fcf4ffa-76b6-4664-9b0d-4c5bd6219bc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df2f5ae-a69d-45ca-998c-3fac70d6bb83",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e59858d8-2912-4c99-a5b5-4f046781bad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83009306-34af-46df-9d54-eea2c401340d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a498ca31-e761-433c-b6b5-eb4bcec6e9a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "77ac35c4-3fc8-47fd-b3bc-8361f7502867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d138c5d8-a528-498f-93ba-1f63b7f7bb8e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91760ea4-5bd7-459a-b1bb-40fc51239fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90e325e1-6987-43e2-bc3c-84cf0a9ce189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01fed924-74ff-4324-95b0-5d0b2bba7a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c7e69b6-5273-4cd7-98c5-38c01dc82a53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e80a77c-729a-461e-8d54-54dd6c522a2a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adcc38c6-707d-467a-9982-fa01d6f8a4f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f19365c5-84d9-4ccc-95a6-85e06abfb03a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c59f1e5e-fa0d-4612-bfa6-60e1927306a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6ac61f4-657b-49b4-a505-68fcf8888546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae9d3aa1-908f-4105-a359-c5b3f095ae90",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d419e980-3c23-448a-b543-815de1ed0810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6a3fbdd-4dc3-4d38-bb12-68aba5907048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9725acc5-c192-4c80-9b7a-c4e1fe477309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "69c4dbd3-8e43-47ce-9e5f-1542ed82789e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "badf198f-4307-4c5d-b8d9-70b8a2ee8e30",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e3294d-02a6-4d0c-aa30-9570cf1f18c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b4e3d51-7b06-4958-a7f3-5bd13fb199ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ce2da5-faff-44ee-a1cd-0e2a69cfebbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbbc5e6e-ef7b-4884-bb8b-831cb680141e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e5ba11a-541c-4e99-b64a-b536e2dab16d",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d33eb93a-63ce-46b0-adaa-70eac3730a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44330042-51cb-449d-9fed-7e29bb6988cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "979b7076-cb49-496d-bdf4-761ea43a0a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ec3ea241-5eb2-4f29-bea8-d770f374b65d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9180827-04f9-4de4-80b1-36243d4d90c0",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75262ed1-aeba-46ff-bb61-54718c0f12a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "201fb0da-903c-4fc9-9cab-5503ebbed79c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50b030cb-5f57-42ad-bd74-bc5ac1216bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f125ae2e-3a0e-459e-9410-5662b8d9f672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c511fddd-c701-482d-9239-3d08ad4e173a",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8094955-979d-4449-ae29-1e0999832655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ede90c0b-609a-4e43-a970-9a8f1cb12540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da89640b-701f-40de-b00f-87685c8ce3dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e877ad08-7b12-4cd3-8e71-d694c455fd82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30bb8212-41d8-42a9-a4e5-73b34f4210c2",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2304c84-d9f7-489f-8bfa-cb07eb95237b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc89f4af-4003-46dd-af3c-b3f51745ac21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2532a390-eaa0-4134-aa46-c08ceccb58f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b3684d4-3b0f-4435-946f-e7ff1b9070bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6df6262-aa2b-4a99-a690-6977b0360707",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1f56a7-5fb4-44f9-a76b-2978aa93195c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ca88900-8566-40a7-b91d-f906ad3ff5e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95127e7b-d43a-40ef-896e-681b71e2988c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "895bab10-8d02-429f-aac3-82217989d7d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc49305-9d99-4932-96f7-ce172ae7e5dd",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b09f3ca-5bd3-43cd-aa1f-284db9c7f623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a12e6b0a-9854-447e-a92b-f48f943ed920"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02764a15-36a4-4b1c-acf4-260f39044cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5a06bb2-8f73-4a57-908f-4c26a70f41b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00af9c4e-bb88-487c-9fd5-49f968ea907c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75bd9759-19db-4c12-ba45-753686b6da6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be0eae58-a642-463d-b1ac-d8984672511c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7045590-e58f-4c7c-8598-fea62e748f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4e51902-4d96-489c-9c01-dbe6942aad33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5120c560-e603-4a43-b55d-c3ed6ffd57bf",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b2788b8-ee78-4e7a-ada4-4407be711c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f3c45381-a794-4192-a70f-f62098092ec4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d594077-ffd5-4895-914a-ed06fef6b501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "930b53e6-8881-435e-a70d-c63d3034b87e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "229e384c-7653-40c8-86b1-9c44f0547869",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "687cdd9f-f984-48e3-8ad3-f6e688c7d77c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ee9a5e1-32a4-4771-80ec-c28c9dc8bf80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d87e965c-e801-471f-9254-54e42ded1d0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8bdc59-23df-4de5-8969-833c13b804cf",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ff458e7-db1d-4be4-a979-468af3b4c446"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c124c1a3-f1d1-4e49-86b8-0dab527b4a4d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba5fda9c-33cd-4d08-8d53-60b15ad05b77"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "268922f8-1dab-48f3-9bc1-b8527bfe620c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7b7058a5-914c-4d5c-97cc-7cbd5235a188"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c8bc4a0e-38cd-4ca2-88ca-de70dcdf9253",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "458cc3f5-24f1-4365-9561-38759f2332eb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cec87399-575e-4c7f-9db4-f72053d7c061",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ed294668-3570-4fb5-bfbd-da9b6408f532"
                }
              }
            ]
          },
          {
            "id": "14b44ce9-ae91-49a8-a74e-a4671bfb24ac",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ecfa7ff7-a54d-4da7-ae2f-80f2a20c2781",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "927a9af6-6571-400f-bd2a-534fd04172b6",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9d83af2-ac18-420e-a801-a6ea6f2b8ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b0f0f42b-91f4-41a0-96bc-46510c020798"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcef4280-aea0-4a6d-b0c3-eb11fd656347",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5db075bc-102b-41d8-a574-df7cd1656ea3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ff095f35-0cee-4c70-9a54-fdd40755e0d5",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b8b2760b-8aaa-47b9-a438-953090cd8129",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8967b804-18c4-4612-868c-2915c72178f8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ebf39e85-71f5-4325-acb4-124516201171",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "657c8976-0ac4-499d-8d92-34e4e93fd184"
                    }
                  }
                ]
              },
              {
                "id": "8e968622-dfea-4058-80c0-d5b7c20e2f9d",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ab4d4d6-e424-4f81-a553-a5f6363da1cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "61dc212a-a550-4b2b-9d50-e7789cf63396"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c40ea71-dbba-45ce-b7b7-ee24578f66ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d7ee07ca-cd32-403b-a897-09c1ff85f208"
                    }
                  }
                ]
              },
              {
                "id": "5c58618b-0129-4dc2-9639-d26a7d2a32e7",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c427a534-2c68-4b01-aa62-1ab552e3a6b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "27ff2e1b-fff1-4e18-9739-09ebff2dcfe2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b1df6023-87ff-4d18-b2a7-48b87f0fe435",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bbf0a0ce-ce70-4353-9b7f-340031613b60"
                    }
                  }
                ]
              },
              {
                "id": "0896d1a7-1cad-4f4d-8066-58c8e554f420",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "64cad157-bb5e-4faa-9dea-bf4c40ef3fa8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0ed02a05-23eb-495d-966c-8649f786839f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd02977e-2fe3-4c43-9c5b-c34e3cf43a42",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "4d461014-6988-4f24-815a-c33487f6ec29"
                    }
                  }
                ]
              },
              {
                "id": "d6c3f110-fe6d-4098-9d06-31afdf2a28cc",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e0276fc8-7677-466f-a7f8-b3f014210ee4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d3bd1b8c-79b2-4068-b4cd-dcee3e6eded9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63e65e7b-c097-4cdb-bebb-c8f443059720",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "fb377efa-f293-4895-bff4-47f8aed03e13"
                    }
                  }
                ]
              },
              {
                "id": "95376816-b567-46e1-8122-1731bc066c9e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6de510de-3e92-429b-8a36-625e70f7e387",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2f9901ce-43d7-4bd7-889d-b812f4d3d104"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d3145b46-2ce8-4eab-9454-bcfa5763628c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "62f1f772-5045-401a-866e-9e0f9943fc52"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "397f9029-c61e-44b2-addb-abcaa00c446f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8149dda3-7c69-49f5-9c2d-7f095298282a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c8b1fe57-4e59-4951-90e2-e445a3b3906a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "08937c31-9a21-4a6e-9963-cbd5590a19d7"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "70912c0d-5f26-44d4-aa71-fc7329c7fb33",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "917ba03a-3037-4385-9082-988e06b38a67"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3028b70d-2dfe-47e5-9736-2fc2beb19856",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6e576369-586a-47e0-886f-150bc791ea8b"
            }
          }
        ]
      },
      {
        "id": "55fef1ef-51b6-4df4-9de8-c9fc10ceed22",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "6b40d0cc-c247-4159-808d-a54e4f3486be",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d4cc37df-5bcd-4748-b9d1-24572f9e4303",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e89f6161-f3fa-4030-9a8e-b0837bbdc63e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a275bc34-4038-4a30-936d-e5483f586198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0f8795f-346c-44fe-8dcc-dc188d938bd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30b3ffc9-6a58-4b4b-9988-9bf16f78e57c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "de24329b-6b63-4fba-a61a-ab8d104eba88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69adbc21-95aa-4c02-89ed-f2eb5a57539a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "313bf321-0cf0-4cca-876f-018cd4479130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78f90e0f-375b-4f06-890b-a3d09f5a2e0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3de11de-9f57-4158-845f-9dc1cc6a786b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "edea6f1e-09eb-48cc-a05b-bf0e623ddc5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b6a8b8c-520f-4de2-a873-996363f226e7",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcee11ac-284b-4e77-8118-b727f640512b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cd0df85-1ac9-4a2e-aba1-abfeeec4edbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb5e34f3-7a49-40e2-915c-31cd99e8132a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "322c6f51-c783-47b8-9034-bffede7cde7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6493a78c-dc20-4a1c-8261-ecde469e46d7",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "295488c6-e959-48b5-be71-0e0d0344ecc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bf2628b-cd3e-4a4b-89c0-35eba3aaa713"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f47d89c8-eaf2-4e56-be5d-29d2fe6075c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbe6425f-86f6-4b7e-aee0-eb3fe6129c36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d8235b8-5c2a-4ddd-a41e-6deb59b3788a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75cc732e-cbcf-406a-8503-03e9730159eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79d94fb1-bc67-4481-ab25-9ae982fffce2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b33c369a-b061-44f6-8d27-3f32e755a830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "753668b2-d15d-46f0-82a4-e361dd8e6e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18f85dbe-a2ca-4864-9e93-6854872a9c61",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a520be4-f7e9-4979-bcc3-b19042402bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48dab759-5851-4fc9-a8ad-0a2c7954f9cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "badd4c8d-c078-401b-8980-1d5b79c45e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1109adaa-b65f-4f51-8e72-3e6c52dcd413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f64c9b02-dee0-4540-a6e2-4b26b6c19bd0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81312e85-6677-41e1-9505-14a2a2a7744d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99e1f72a-4183-49b8-8308-b07a1d096fd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcbf6320-b8df-4d4c-9dcc-4565f0a15255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b33b5ef-6fbd-42b8-aa55-17f2925d833f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3294032c-d99b-4bbf-a5f3-c5df38936c84",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "517ffd61-8c6e-4e5b-9465-f2180f3063b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83a71ed0-2852-4dd9-b065-30b91a877c44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca56e87-1a9c-4310-8527-ee89e92d98ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d02af702-0319-453a-87bc-aad807ffeff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acbdf3dd-6975-499c-9ce1-91bc5675503a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c89b12c6-eaf8-417a-bb2e-fdbf500e3658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9976844-3964-4c96-88b2-ad4ea38223fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a2fefeb-cd12-4bcb-994b-007bff90b34f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2627e474-0f59-430c-8e99-f519dd9edb50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd1e18ed-3751-43d8-b8e4-a89bd66bedb2",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f15afddc-2ac2-4477-892c-b595f8700935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06e86a53-3f93-4125-886c-d85179c93f88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e0b1d1-ec09-4c7b-896c-d8502623e0dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "952970ee-e5f4-4c86-a6f8-95c03c4a1df6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84290a01-5fd2-46cb-821f-efe8059a9b15",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99bb1cfa-5877-48b2-bdba-7025587dcdcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b99fe88-8d70-4ad6-a338-5ef18cbd9efb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca564e4a-41c8-495f-9138-602c6706649c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "eee1e544-a0a5-4b3e-808f-d3dfb6f14714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a0d48e-dd6a-4111-bb3e-c21d35153e34",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "797d7b08-6a54-470d-aa31-74ac03bc1cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c0f4f25-0dc9-4c30-817d-da621f35fdd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d439a388-1936-4f64-99b9-9fdb3605d04a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9f0de95f-fa5d-4280-8115-2e888cd10875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb7b05fe-3639-47d0-ae06-950ced130f7f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbc9dc20-088c-4de6-91c6-3d578c615e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c7c6231-2a66-4a93-abfe-7903995615cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "859619b9-5671-4b36-ac51-9e16a060a75b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "93cb5c07-3dba-4fb3-b532-4b2e127b2b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e60e24-c830-476e-a6f7-9e34a9f81f46",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba9f8b19-9dd4-42e4-8354-59afe92651d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56efcfe0-edec-4c56-bd74-274d2ddf1dc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "465f7a6e-4308-497f-a4d1-945fe6a823e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c49dbed9-47b3-453a-b993-eb86e50664e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae15a654-3828-413e-8ccb-a3d1a8798159",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eda66a4b-5003-4c18-84a8-370715cbd762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "367e0148-98a1-458f-bf68-b2e0770b33c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b363320e-c928-4541-92b9-adf962218e16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "573ac1e5-8a15-49b6-b500-c3d601d84779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbfcb3c9-1d09-4624-91b2-5912955e37a6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "831d4453-335a-4e3f-8826-8f8bbf444eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a85e8bd-708d-4b7a-9930-06615dfc4155"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac864c0e-7af5-4f96-8380-aa260058562e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "336247c0-3da9-4edb-baec-d83d7ab58b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "595b880d-273a-4e2c-acdd-fa19961b0cc5",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb51c244-5b31-4046-afac-7eea750e90ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7db706a1-92f4-4109-96aa-78e06945e373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fbb6fbb-eea6-4a63-973a-482e624ff12b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ad2fb8c-0178-44a7-a7e1-9f54ce800991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac8dbba-b0ed-4f99-8ac3-240f840b3ac1",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68eac32f-ff94-4de9-93f2-94c714275d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97fffff4-2658-4bdc-8f04-8f84f0d1b0da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d13a65-6c32-42b4-94c7-a11b1b893709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1982cb6b-eeb3-4751-899b-76352ba9a755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "604e27dd-5017-40a8-9358-bf210ae29430",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11bec6cc-d84a-4a9d-b077-91db96a9ad8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3c9a46d-2583-40c3-93fb-f9580c85465b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee520ffc-e819-4a0d-892a-0139a5dc624b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "585ec33a-2193-4c93-a868-677546118305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a76e4707-6e66-4598-9bcc-3300d8286d7a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5596983-1cee-4e43-9cce-1a8d57ec4836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f720e9bd-d526-4a29-acc1-303e066c91ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f4b0507-6cf6-44c7-ab3a-3fa8c762e37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "879864fd-e504-448b-924f-010f7e1c33e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6402ddfd-1118-4f65-bec0-c44e4239e6e1",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f8a249-42ea-4ddd-b100-42d8cc04a21f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a139cf00-15b8-4435-8896-333b68101f39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c380a0f-eea9-4ee3-ad92-b5fc85d74ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c88803f-5d5b-45ba-988c-c3f3066aca75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef3bb5bc-aeb1-45b8-882e-a759a21802e7",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c84e62-c1e2-43ad-a250-08f558e879c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efde7bda-8405-4cc6-a3c2-fe401ec605e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b30ebecf-801a-41fe-a194-3a1106422392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7ddf5c1-9ab6-4ab8-89a7-04fb8d5305cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9545d593-98b4-4bd0-b3ca-12f8a0c420b8",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9ea5069-0e2d-4cc4-a282-9f2b86cab513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6019bb80-2aef-47f0-b9bb-c9efb4fcf6f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9729b27b-a0b6-44b5-b6e9-21acaaeb81ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f49af38f-b52a-4250-af81-459590075561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83b50dde-426c-43c2-867f-59af53c97557",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "302b37ec-f77f-4974-a6d4-af0988f768e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1583d074-6554-462f-92bf-72e81f13798c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f6fb79c-1d26-4843-9591-bd7dc82aad63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "944d12ac-81e9-4b0f-93b2-0af7f10bfbad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7253913d-bc2a-4cce-906c-e7fd9aa69948",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c98ef2-4eb5-4b0c-b876-1cecee8fe6a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fa1ce4b-4f61-446b-8fe3-17329bd59455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7c144f1-8e9a-4eea-af8d-a8b31fefb7c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed6923f1-682e-463d-8d10-3d07b42b0d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c9acc96-2d90-407c-ba78-7a0b07380cf2",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "973859c7-cd48-4cab-87c1-1fa7f6975dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d040828-0211-4cf5-b72d-32d99f23f478"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4aaf026-cca3-49ff-9807-fafac1bef4dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b76a4822-60e5-478c-8b17-3056d9aa080f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97700952-ab89-4e4a-859f-8c0cd774f5b1",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39363a87-feb8-4c39-8c85-d2218d9640d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e4bc3ea-6a64-42e2-bbf8-93411d78efa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bad92583-9a99-4d31-9502-6a292aaa503e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8eb8436-d332-4bad-a9da-9833e3a9fffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9055272e-7a46-4caf-8866-9c8e40f046fa",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b5fedb3-5f61-4cec-926b-52e0436332db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a1fa093-67f1-4319-a81e-415715eec64a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8c70cf-6a00-43d3-b891-cdfa95812166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80277099-c8a8-4b8a-85e3-ae93406549c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb0748e-008a-412d-90ba-6bebb174be13",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bfa2ff4-15e7-4898-bafa-d49ac9d6c7ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9d5d6ca-8a6f-4db8-bc77-d4f61f94475a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e842999-23e6-4775-ab82-2d90c75e659e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb9aee95-abb5-4fbf-946f-2f92fb2550fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a212776-6118-4fc1-a62d-349101928a47",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ac83f5-17ec-49b1-b3c3-a2258abc8c7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d3bc66d-c86a-4dd4-8343-e7ed7baffbf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc71f985-0844-48a7-a27f-27bfff34bf26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4818f4ae-2103-4b13-8805-0ec374cd657f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a958c94d-0506-4e53-bb00-1b59aa25603c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b8a363-40ea-437e-a8bc-4977c7d9d757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9284c1f8-672d-41fe-9811-a0642b7c78b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "927138b2-f326-4426-a484-5dbaea286752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c0cf990-9cc1-45bb-9bfb-8eeb698f6749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97259358-8a94-4c99-8086-afc751eee057",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca26bf5-9d0b-4a15-89e4-e0da73249d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91ad3d9f-d709-4786-8077-8443ed5509f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e0f678f-6b06-4105-bf30-6746c9875d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94c46519-af82-43e1-971f-b890d8ab68e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3694131-4b4e-4602-bc03-316e8e8aec28",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00860d24-bd64-4794-b1b5-321c1909eb8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "086fd65e-21a9-4bb7-9436-36ac4e12d8ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f794b93d-fbf1-46a9-8202-9e685f0c94b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e18471d4-6611-4f78-97d7-e6ff9181b746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f111f67-b70b-4d7e-9701-ada5394db485",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "308c9ea3-9d34-4532-8bb2-2221ff4fb21b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f9ce47e-2631-4448-a748-157d2cd4e063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbf54d40-6c8e-44db-9200-f8be4fef2b38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "379e31f9-2850-41c4-ac7f-a490c734d7df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b739d490-979e-450a-9baf-9ed36cfe3d17",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4506ad8-73f0-478c-b0ec-844016515131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e4f629b-aa9b-4a34-90c3-c5197e7c5831"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0780aa11-39f1-4f12-ba65-6bf176769b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1828892-267c-47ce-8eba-2ffb670b6857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1bdcbb8-4f33-4dff-9585-493dce28c860",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cfcd4df-88e1-41f1-be5c-8db80cb59e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45eef920-ef59-4f9b-bce5-66756e153936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d24a2a41-9a5f-40f4-83b1-0e46cf046c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bc7083d-e0ed-49e1-a52e-3e9b4f024572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8113b75-a1e8-413b-9f57-3ef4f53dbf54",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31dac5af-b570-4713-bedc-53f8f4e47623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddf4ca5c-6cda-413b-961f-8c4e31fc44eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c09fa342-482a-4ce9-a529-f673f5ef57e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f343e208-8511-444a-bb1c-554b78239058"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "91193eb3-78da-4f0e-b42e-5a0e09822d84",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "db38f400-0e15-49b4-abb4-d0e18719e152",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c829db02-bce8-4ed6-8b04-8c2a5c5519a8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "024059ce-16e5-455f-8976-2313c28961ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe92544b-f299-4d2a-847e-5cf27b2f0808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ed8d378-8335-4c19-ae43-92cef85fd26d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d9c62f49-24ef-4f65-a11e-fbf053de99bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "34acb192-b2eb-414c-875f-02d8eeb7b261"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ac0d3ec-0765-47c1-93a4-73332c2b7f93",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe33365d-a752-4ecb-82fd-1ae95b26484a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "29a525b2-a2bc-4830-85a7-9c2b2f844f5a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d821657f-1ead-4aa6-9b4d-6358fe03018f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4bf201be-2371-40ff-a8dd-99a764882396",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6ae94a9e-855f-4950-97ad-c291e43f94ad"
            }
          }
        ]
      },
      {
        "id": "b4914e38-ec5d-41a3-aeaa-84e875e4b530",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c729bdc0-bb92-49b2-bbf9-c3ed4d210b6c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "385345ff-dd16-4ec0-af9c-bfc0348603ed",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4e3bc0c2-8427-4ef7-9cd0-f7aa8e7d5a62",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "878a41b8-5cf4-4bd9-8989-4b881403e485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07e8ecea-97d8-4791-b1cc-5032c057897d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2277397d-380e-4494-95ea-abd0f2f7db90",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d26a89a0-ae48-4517-9755-ffe96798ba92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75386787-cfc5-4db6-bc8d-c65c700d2e9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c76f44-5a48-42b1-aadc-6229c1c05f37",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de0f0963-ed3b-47d2-bb09-fcdc02fae4d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b5039bb-b192-436a-b9fe-c26ab9442027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8330715-5203-41d5-b89f-fb7fb46dd37d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c831b09c-4e71-4b63-9d15-9cce885aeca1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a00fb3c-6cca-4ba3-9cf5-530c73bfeb9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e83d558-156e-4e51-9b81-3591c0212b8d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c28c635f-209b-4eb1-b145-006fff06969b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d2f6713-40a3-49ef-8d9d-18b6a1b5b78d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb8f945-663f-4369-8673-6548766393b0",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e93940df-cec6-4ba2-a111-988e96acc578",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ead4fad-3adf-4368-a460-7f65b4791fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fafd3ad8-9bf2-4daf-8e7c-da431e8bbc5b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7aed433-ed35-42ad-9954-3a0c6c30f7fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "813ffdd6-15ab-4f2a-8012-3302b1cccbd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15c27062-f4a3-4f30-a1bb-63b861f2e38a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e65d97b8-f95b-4c8f-bcae-8e9b5f2dcaa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53561085-61bb-467c-9276-3f3651a4a4ee",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d3bafb3-96b8-4834-ac55-631ed7d198f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cd2aaad-f8c1-4ba5-9671-79f6bc984829"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aca4aff0-68d3-4b68-b784-69da222e6578",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8856d4c6-7c85-430f-96fa-afba1cde2ae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0273baf-9af7-43af-ac5f-ce121aece18d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c83f4d9c-bd57-4c89-a40a-dad045a24b82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c05eba16-f04a-438d-a008-b46d08a77347"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "967902cf-1af0-4c61-8846-356e83472ea8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c99952da-03f7-4fcd-9718-1deb555f5295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f22c5a-1bce-499e-ac51-48c3c772e91e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a3ef7bb-8124-4c52-ad4b-adced345da9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "459aa08f-dc38-4db4-af4f-cf841d5e6c56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ea1b07-ebb8-48bf-9ec7-ff8b469b7aab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b70999c-d72f-430b-b691-22291c66d637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "919cb3ae-d44e-46b3-9dd8-8b2d8e3536bd",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd6ddacf-e657-4647-982f-16a837ef0cac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b52919e7-a2b9-43cd-b876-2721d4133880"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "650fe9f2-6138-4948-9347-f0952e79ec00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23c89e9e-fb26-44c1-a222-5721e2cef0fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf826862-1ff7-4874-a39e-41ccf7f2a836",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "383c75c0-58aa-41fb-ba9b-90597b383074",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cca0f15-b24d-43f4-95c3-3e3cf55711f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a2dc288-17f5-4da0-9621-3ff8ab059586",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "099ebd13-2a91-40da-898a-b54280124fb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8044c4e9-bca5-4df1-8689-0a390a153a7c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5f1ec5b-3bb7-495c-ba6c-76deb5cf215f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0769ea7d-c634-4428-8f64-3b250bc70c5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1f40664-90fc-4a23-a5b7-ab1cd85118fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "094278bc-e35e-4787-96c9-cba223baeb4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e7bcc7-78fb-47e0-8ed7-906399022698",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a07df993-1d45-4640-8450-f03e2d957a03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb39ea3d-8d5f-47cb-8bd6-58459f36ca49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc2c628a-45de-4d3b-8cdf-72be1342e986",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5437626-6dec-43f9-9ad5-bfdd5ef5e0e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62fd941a-0e38-4987-aa8f-cb481129a3ad",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc0cfb20-b3b5-4666-9ca2-1538fa38d6f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ac9013b-bb52-4e25-b7b1-847fc70deb7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d6c3f3-a726-4d29-a846-f6bb647a433c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a342b3fa-7816-4d2a-bda8-d98eab351669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "563ec2e7-1c33-495f-bd94-42f45378cf91",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8339f60d-dba2-4934-a11a-6b0140c023a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c1ae7f7-0565-4f39-88c5-ee89c4475a2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb46acf-fc21-422d-8a09-4f0be349ea75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7c02869-472e-4cb4-bcaa-5408399f4c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8798a0a8-5e5d-4ef5-87b5-f14c252a566c",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0281ddfe-a000-4481-a23f-acb2ad95364c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ef3aeef-da82-40f7-b08b-7b1c77135472"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be80ecd0-a5d6-46f9-aa1e-a99fd2f2b29f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b1b013b-e8e6-469c-958d-ed96713dd492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1d2f21e-8300-419c-aaf0-4255bff6a418",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "756ed2df-394e-41d8-927a-9ae25b2b6772",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "644084b5-783d-4326-ac7d-2d264fe66fbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de4837ea-62dc-4c17-9e0b-272432f3ae9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "735494fd-1857-49e2-baa5-a8794cbc407b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7434a447-aed4-425d-a8b4-2b3a4dc92932",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9349faa3-f3ad-4d35-9adc-5a96d281c5ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a0edb24-f7b3-4814-8c98-65f9372b7703"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3a13be-4818-431d-b050-2e3c58da4daf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2399c4e-2720-4be4-b62a-2a2d9ed36575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2d99011-4666-45aa-b481-cd08e2062b33",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23dd9a7c-0836-4da1-b04f-2b76657b18b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ec5d8b9-9f47-4f3c-9d1a-e6970529eeea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf25084a-3d86-433c-8ec4-97558605c0f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40a5ec61-8f79-4b84-9957-76bc99630f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee3ac20-b4f5-4962-bb9c-4a97630eeefc",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cf0287e-da57-4a81-9b57-0b7be4b823d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58042fe5-eb76-427d-bd25-bd98573eba0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a9cf16-7dd3-4427-8464-f7dc7207884a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d10b60c-0a9a-4670-9d82-f968e135faee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf31be89-e20f-4589-8c03-d2fd86279e9d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d5247a7-c42f-4df0-ab77-7f66621a782e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "532b4623-0b19-4b69-aed4-03424acbfeb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19e6a83-5ce7-40c5-8923-dfc80deffcb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ae2ad95-a603-495f-ba01-dd0a6351b6d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "721509aa-0a9d-4881-b344-bc47dc44bbc3",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "193eb7ac-f533-4055-aa87-3b768444e5be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01dec102-bbf8-4996-a69e-fd95ff2cb3c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab5360aa-9e47-4b3b-a88b-741bee2ec888",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cf79b59-a1d9-4ce9-869e-c357dbef73c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "981ef3fb-b50d-424c-b415-cd7dfb53ea46",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b3b410-34df-44e5-a00b-c90be2c167fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43eefe2f-05a9-4879-a2bc-f6633d3c7baf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70894de-7a0f-49e7-afea-4aea3988bd24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea16f991-c3ef-42ae-a02e-eef605bf16ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d350a08c-1c8b-4637-b64d-6e75d0a5322f",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c0fd8f1-46cd-4f56-a62c-9accb221f6b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c78d4ec1-d789-4da1-9661-2d3ad0d8ace3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d47edf-5b5f-4115-b5f8-75c9d92fcef7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ada43e2-34cf-4ba7-8a3c-e14822149430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c59323-1f75-45e1-8969-faf8f2e9d0e1",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb6b44e7-f8fc-44f7-9cc0-78a8a90311ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "787d8290-4374-47c5-80c4-3b60918da696"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec092b9f-c467-4b11-b466-e72be026eb3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "160c9101-72e7-465f-98d0-c53b5e48119d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e08e7af-05a8-4fa6-9e66-6eff10d3f572",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d6fb2a1-f998-4d25-a246-20bee3d83c46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbd4fe11-4cf1-43e2-9130-71be1336cc07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fe60278-80c8-4079-847b-fe9a9dade2d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dca87dd1-c615-4df1-a356-c319c4b110ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b58266f-234a-4d48-8207-e23deeae9a8b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c224bbd-2ebb-4c6e-913c-e250df3386cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cac69765-ffca-4610-bc0f-b78b77846fca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90abc94b-e3f1-4ae4-840a-d6954377fcdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53bb4925-65df-4b8e-8a36-cf9b4c7f1aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c32690b0-a1f4-48c9-af60-b721253b121d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4334e587-634d-4df5-9395-5d02f0f22bbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2466822c-4597-450c-907f-3e044218a4c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73cdb74d-252c-45a0-9879-ba479b3475bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba5f162c-5dfa-46b7-aac8-32bffc80e6c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d8a2fbe-a0fe-4b1b-9492-3682828a69d5",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe202527-9812-42d3-8ff1-4a51bb60cf8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b230896e-618f-4017-ae00-8dadcca4c14e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7354cfd8-62b8-4fa0-9224-f5f30fbfffbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "504e6393-40ba-42f2-9364-d9ee9ec491bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22b9dd9f-f1f7-4aa0-9793-9e56c710953c",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23513426-5b1f-45e9-81e9-006789b21c32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afb5a1c1-02dc-40e4-b489-3839855f5821"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae16cbd-851d-468c-b8fb-e6b577787224",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bedc88c-e847-48a3-b868-75f85bb954d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae9a3045-e401-451f-bdca-e82d408dbbdf",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "030043e4-5f8d-4263-b243-47accb0822e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b4c3eb2-a672-40d9-b4a7-7256b36d0a07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "032bd371-e6ee-4137-9c71-d1f5b6bf11f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "890ce8d2-2078-4541-bb45-09c59afc3c26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9cef09b-5262-4b0a-8b14-66ed269f5c52",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd2e97ba-1ffa-427b-8f7d-fc85c31c5196",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2f348d1-2aa6-4494-a9f6-1558d5c58db4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db32e4f1-920b-447f-828f-1ab6abd9be8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "590e05c4-b625-4b79-9ea7-88e5b7cc10da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "674328e2-6a6d-424c-8a10-dfe90266e5ec",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e8b60c1-fd6a-43fc-ac11-b343b7f5a84a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4d3f68c-747a-474b-8051-75ae399a5488"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "823989e4-53c5-4b1e-97ca-7506bd264f6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bdeceb0-7cbb-4da9-9d4d-4923aaf2cd69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24fddad0-e218-4d73-a592-7deb91a77e4b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddc02440-cf65-4532-b50f-e62dd498f26f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f1ada7e-642f-496a-80f2-d69b1df3dedf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ca6ff7-391f-4839-8a51-6e1872d62e24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0240e15e-7f3c-4147-aabd-9453cc1f583b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65fede57-79f5-405f-aa55-b32bbfd206f3",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b17ec1b4-11c1-4eda-9a03-48b28920953e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aa42572-1c09-4536-9f9f-ed82cda8bdc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b3724d-623e-48f7-9026-c0407902e4d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cbabe85-a60d-4018-9789-4a1d69674be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94605fcb-824d-4bfa-bae2-38f99823a8e2",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ddb0ac1-921a-426e-9914-ec8266239eff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53aa7ffc-b36a-4a6e-abd1-db2b25dbad0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc28a538-d365-4e31-85b8-eed648fbaae4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73ea84ec-b810-4c86-a764-4498e266f290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4228242-05ce-4510-93f5-83bcf2d88ae1",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb070ab-a089-4bde-b813-0748292d7aec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b86e8121-4d29-4aee-804b-8bb9a5d3fbfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f67e042e-3761-4db3-bcf3-8ba34423510e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90c4e968-f738-4470-8d08-43be086b6bbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41d0b3f-d7ab-4407-a55a-cebead5ad07f",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e139d22-20fc-4c8e-9e36-6cf434c71da0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e54221f5-3889-4d2b-96f1-c39737676da9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4963e074-93bb-4e31-9f06-b31a9e0f1d54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28b16d59-48d9-48f1-bff3-700839d2ed49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abc10b21-c08f-4f70-9739-80751bddfba3",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d7862be-82cc-4a00-9d52-0e19204edba7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1d2b516-43e7-464c-bc4a-f463e582b551"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "837af8e5-74c2-4320-a7ae-10faa5c73d3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd1244b8-7ade-48dd-b6f6-f09f4d8a6ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f37f03f-1887-4a53-b01a-5058b97d4765",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb0682ef-28a7-4ec7-a451-ef62295d378d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0360ae56-05c6-494d-a065-c6d2e0870c04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f6304e9-c25e-45b4-8761-3c18855f0d12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f596e4c7-1577-4f0c-aaf6-95419c6b687c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c68a78-6549-4e8f-a06d-6d87dcd07203",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bbb2613-1032-4b21-8ea8-66f9bd2071fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01217a56-6988-4a59-a786-59844059a781"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "825da2cf-acbe-4843-9d1d-49f8cc10ed3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20b7645e-202d-4b94-ac18-b9f345dd5610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9347a873-b33c-4168-9abf-8a29b26e45ed",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fbd34d7-5968-4eb9-b368-c4139a09e99b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53e24b68-cf99-4d31-80e0-5a0a80331045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88edf06c-3007-40f0-b1b7-92a5ed88d4cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f76f528-512b-4bc0-8ac2-4d18a415cd7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba1f3510-fbeb-4bf4-a29d-5bc392f1d533",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1596751b-9c31-4149-aba5-4fd9c13e090b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfd003e0-ceb5-46ee-83c0-1a4e4e724c1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92d3377a-c169-4e7e-b5f2-0f2679a79e90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9f345d0-c797-4881-8573-17c6293291c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "556cedc3-44d6-4da2-94f4-3dd36bc8e0fc",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11cd79ab-3063-4715-9aed-883a49612837",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f35a2ce-c6e7-4df0-83b8-189cdb3ecbaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f13022-9db1-4a3a-a9e7-486d870ca1ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fc304aa-cff3-4b2a-99a4-c6d141205ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ea4841-817c-4969-9cbb-efc10ffe30f0",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af019da-d880-471b-b37d-d97b17ba6c1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0f59560-7435-4d34-b3fa-69cc54bd2d91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae8ef951-9621-45c2-a205-5140a5de96be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1bcee2e-d32e-4e49-a52a-f22e0efb199d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eefb2bbb-b20f-4443-aefe-f1e1b14ddb7b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e196ee-9fc5-48a4-b799-855802244658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dc53e90-b79b-49fe-a29d-445b4c5cdb2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e94af483-fa55-4f44-ba8f-5f19b4af9cfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "279e5741-a4bb-4e20-9f52-8bca43679962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14ec2814-92b1-4334-aaed-9a528b299303",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c57cfc5-a3bf-484a-8aa5-390f6e15ff7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83926f6f-dbc7-4789-9eb6-81eb77c15f89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a919d26-67c8-4fec-a439-2b57b0f123b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "760a0a9e-cb02-4cb8-ac6e-a6cfa2743cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c6ba3a1-bf58-4137-b65c-ce3e1a7c562a",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab1c48a-5933-4a6e-82c7-11d8992c957b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52a51aa2-536c-4ec1-b863-674380e123b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbb65ab3-f677-4557-91f9-4e47e2f94209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb7430c5-7564-4fc6-b85f-76bb9f2893f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c68164f6-9d43-40f7-9eab-572f6b9eaabc",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8694748c-d2c4-4712-a576-40182ba6f766",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed309622-f16c-4a46-bfe7-f764f433fa7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79687c7d-97aa-4c96-82c9-296f2a8ce142",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0984a4e7-5d88-416d-8f46-03bc2e24c6d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82033265-c471-4d89-8641-0261fc256c4c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf30386b-5cd4-4483-be72-89e7f5951e82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7271112-8ae6-4c18-b98f-448a62c382f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c3a6dc1-476e-45f8-9bbe-c8855904b877",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f5c5074-28d7-46ac-9650-45da7159e2f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15371f0c-0f49-41ab-842f-de115a424096",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f63f4daa-293e-47a0-bc3a-d9326b69321c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfc91296-2c1f-467f-ad98-f9a8cb481e8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "015db7da-0d17-481f-b16e-3d499947dcab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc03eb1b-4dff-410e-896e-fcab416351a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5d39c6b-f0d0-482b-95e4-0f863ab16c9c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79946d64-5f98-494f-b123-353bded896aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f171440-3cbb-40d4-a004-ca7d77aee111"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41bdb381-bfa6-4e04-ad50-92981f17b456",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cfe4522-1f71-45ee-9466-aae83855c6b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90198a2f-2515-4578-a12e-a385f4588549",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cebcfcb-b1a0-40df-acaf-8bf3a1d07aeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c85352b-aa23-4dec-9ac9-1b41364898b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2881a6b8-63f4-4cfa-a040-9f80b0effec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfc4b7eb-ee19-4bb6-ab5b-a70888d679b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "071e6692-26ac-42cb-8d82-3f1dc38a030a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8768242-ab95-439d-a74f-d9b806ad0946",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a50f1b5-6fe1-4153-954f-a012822b06e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46d4b583-34ed-4155-8d8d-1ccc1ca94f76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9635c965-3330-4448-abf3-88bc30a3dbef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7992e039-cced-4757-850f-d594153496c4",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dbc696f-820f-4644-91ee-9797f36a3126",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfadeafb-4106-4d22-9539-37421c676d33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87467384-47d0-4379-a3ef-7619ece07e7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "414a0b3d-48e8-4d96-ada5-312cca053615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051def2b-456e-4be4-904c-c001f41321d8",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d545957-4b0c-40d5-844a-442ddc1ea277",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cc627de-4d00-43ed-8f91-17e63ad1e7a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48b4cbcf-2b9d-4969-ba7b-c30e51bf5847",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf7eb466-c955-4b63-b186-1676d27aba15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ba98950-7ba5-4f75-a7d8-e6e39a07f026",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33198a9c-5635-4eac-afcb-2bd617b5aca7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83223a39-6460-4837-9ef6-09016a16b025"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d642cdd-9764-43d8-b8b7-5e68e6b43007",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc8a55aa-9b3f-4bf3-9e53-04aeb4e56c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "110d5cbd-bbbb-4600-93fb-07c28a64e4ab",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cfcce7c-a256-4c5a-84e0-5a895e2ed934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa40ab3b-4f0a-4b0f-a1f0-37702d30e616"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d3b3118-87ad-44dd-b482-9af3e1b217a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66552a9a-a9d9-42f8-8350-0916b7f3cfa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "331705c4-e6c7-40f6-bbdd-280b0cfd952a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fbaf104-d02a-41a5-91a4-641fa2baec47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fcb11ce-cba4-426f-8578-280d3e7316de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f21df3-977b-4259-b8b0-6e552c381c69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b272e245-e231-4842-b840-70aa05b76277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a79f4eb-a6c4-49b3-aea2-c9eb9c2aa8c7",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85653e94-1adc-472c-bb81-f5e4ae1c27f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "294de7ac-f828-4c78-afbe-c6b681b049db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b46c5032-0ff5-43d0-a636-3f336c7fc67a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5ba60eb-28a5-4b17-932c-e022cf396b76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbd3c25a-5fcc-415e-a519-69f3edc5fdc5",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1625ac-1c65-42ed-bf86-8c97398a5c31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e82a2df2-5405-45bc-ad2c-9919a9bb06d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "361463f5-21c8-4f70-ac3d-239cab5bc2e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edad3350-295e-40e8-86e2-787a930c7c1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb28e35-060f-4687-8d09-2831ddd6bc13",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8308d43f-a61a-4ebe-81c6-112100167f42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bf4c073-16bd-4d44-bdb1-263f36df1660"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1115c650-c4dc-41dd-9836-0f5caaaaa298",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a6b4219-e394-409f-9146-d5fc53a42dff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863b2ddd-bc28-43bc-a381-b3b2e52eb1b1",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5308877b-f5ea-46c7-b601-e16eb815c00e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63938199-b2ed-455c-b7c3-409f282723c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c9399e-177c-4be2-9124-d262f823e4de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86162b8a-72c0-4876-966d-09b22995f997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c656d5d-953e-4911-a77b-9905be534360",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1638bdfe-5435-49d2-a107-e5480dd6d34b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0a6db53-77ad-4eca-b399-dfcd3893f244"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "005d84b7-b812-4c72-9ff8-07764d6cd6da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11fa46ff-c3bb-4433-8ceb-dce4cc1e676c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b448e17a-84be-41d5-aafd-3f95c34d04c9",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f7435d-73ad-43d9-99bd-678d3b6d3bad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ceab6d03-b58d-496b-be30-0fa662010418"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92e63ad6-55b1-4b94-9818-0973777803f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3406e09f-2b12-4ace-b601-e30210e29332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "145259b1-9e95-44f5-9f51-1315af7c4391",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a1766ff-92ae-430a-bfb0-a83eee7f295a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb99d14f-3d3b-47da-b311-9012cb749c3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6871059f-a05d-4428-a456-1d40f2b6a984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18cac53c-4e6e-4f5b-8875-1dd3b5f748c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e89c2f2-8c00-4776-b06e-afdd53887857",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c85dafd6-2b64-4f17-8237-e59cfa016570",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21be4c15-e924-43d3-befc-034f28a26cb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9edda66-3d7f-404c-a690-5d22f6ee7d8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f83e56a9-1666-4365-9ba6-7c8f027de79e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86756f68-2dff-42cd-adab-42505234a001",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f7f0a00-32ce-4249-8784-79b7c6300ed3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6688cc37-c9e7-4b55-ac8a-e6ca13c2543e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e5ee108-6e3c-4fdd-8eca-0b65f9afdcd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3bd1520-149f-4513-afbc-7a81a4fc94fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77d5a13c-55c7-40dc-b2a8-bf089ff35489",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60221564-67b3-48a5-80a9-95d85afd9a34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75821706-d3c0-461b-8dca-8f9d5dfc3d71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5adad27e-78e1-4bc2-824b-08ed9969cb3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e45aa59c-4de6-4b42-8c77-82ac8dec5f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a5c57ea-d08b-4817-85bc-87e15d3b9b50",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94b46698-0095-419a-aad8-2aa7b675f752",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73cd7d5d-96f6-49ad-b361-35d515d988a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f43f2d9-e5c5-403c-8e11-7f5389ded2a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb3df945-1b1f-4018-88d6-2b404c4db0b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c0ae9d-668d-4c75-a678-b4bf763094c8",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "362d9b97-a774-49fb-8070-faea02ce53f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4ce4a2f-f74a-4cd8-bf28-5c604204812a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93ea4c36-0dae-4ae5-ad0e-788a07d69398",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf2f2b38-687f-46b7-b098-e97c113540be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45496581-3ecc-4f6e-85a2-a5cd58ffe08d",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a913577-7a21-4e48-aebd-79bd20b1fa6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc9f1bf6-287f-49b5-888a-48ad014da588"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "585cbafb-5075-4723-8392-485febb6584e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "759c2bbb-40b7-41a7-a732-00a27afb0f0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9df7ff-8506-4ea2-8d09-ea05f1068e8d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee247416-4390-4316-b193-67d6428f1dec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58c79826-65e3-423e-8979-fe5db98b9317"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41d184fd-62fe-4366-aa63-248af3011958",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e54c2f2-4f5e-4e05-978c-5d5f9972255f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d20d75e-f92e-4ebc-905d-17cd7ba1a772",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a007da6-9d93-47b9-9710-675e509efd62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf24e0ba-0f2b-4cba-9e91-ffe3ca14bbee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0180af62-f48c-4ac2-94a6-0bc62eb8906e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41d912c1-9d9a-4682-8af0-bcf41dc4c0fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca77c7b-0d55-4acc-ae28-bb2414cf6e1c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de0f9bb-0160-4ad9-b823-2431ab91a6c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1aaa26f7-4709-4a96-9ab3-19cdbfdc7e01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "292bdfa7-77f2-4d8e-b07a-839a89412a01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73f33c45-146b-4a87-8d96-f126545db484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "612b6704-ef01-4cd4-b0a6-e63530ebc41e",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "766fa5e3-31c9-404f-9fe4-48bacb6e4bf5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff930094-a149-4889-96ae-1d53486fa7c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a256b0-5dde-4910-b743-2ad59d5a7d94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41d5d3f5-4f17-4b36-9b19-f2a7508aa10f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f45e4f29-0ca4-4f60-b096-1fbd1976fb08",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4411de-47ce-40f4-9494-590fee4fbee3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05f4670c-1eda-43a4-9fbf-7b2682d438c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24ea6fa3-88b8-468e-bfba-fa94c333df17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1df8807-f9ca-4d07-a30f-e1068540efaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0aee59-d01a-412a-a360-b3d4e5f210c6",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a5c0476-a4e2-4e3d-a44e-97d57def3d75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd5fa6d5-c540-46f4-84ac-5c150f8d4c9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a571eb27-7cb2-4ffb-90be-559f1ce190fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14529ca0-30a9-4262-944a-8c32e078456f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d60a4b03-981a-4f9b-a087-637e61f47e22",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4112635c-3e0f-43f9-a019-6fd788d2bbc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5b196b9-ac5a-4b76-a53e-23ae219c18c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7e91629-5d2f-4361-bb88-b189a6be8bd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74a68a9b-f4a0-454a-90db-2199698e0f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc30cb65-cf55-495e-b3bf-ed7148783f6c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "316cccce-aa6d-4b48-9623-59d98a8ccdd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc5d883d-5e01-4a6e-b492-45cc15f54e92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba4cc9a9-acfb-49c7-a884-efbd8ce218d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "984a4c98-0e86-4453-94ec-85d7f90cd406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1823d21f-6a14-4b43-a98a-8f9321160e1b",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "842217ef-f726-4b7d-b3d1-19045244cd38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45d5867b-4e63-45dd-89a2-134399736532"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad523bbb-7c0c-487a-bf61-e843bc63af60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d17947b-ee40-4331-9f02-ea29e98416f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a9e5c5a-46fa-4f62-840b-5e1b54fa3eaa",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa3d887-de14-4e93-9195-d6e95fadc96e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd1d2aee-f406-47e8-a767-07a86a057f63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa7123b-23df-406b-a60b-f91f2e672936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4cafd1c-66b8-4cef-93f8-fc776c23c512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edbb12cb-99cc-407f-b7d6-dc65ee8cb9e1",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b13e0c2e-fd01-4b60-b045-3b604da135f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c5105b8-b7ef-4a86-8913-ebbf5220c437"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a494762-dad5-4768-a065-73b8736a4080",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d45155e4-7988-4508-ab0c-b87d9fdb69f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da0380dd-6c90-436f-a78a-590fb1c3442c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec4bada-24a7-43a1-beeb-014c035b2c82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec347ec5-9bf7-4c52-998b-9a76682f3d27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e4a73df-6831-4cc0-a2fa-9cb901f8cdaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "596e6e5a-ed84-40a6-9437-ac2c6d45e453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "218cbbfd-6e97-496a-b94a-e2c3691f7aac",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f0a04a8-d41b-4ccf-a225-f0e24bd166da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "213cfab2-e1cd-4f08-a481-9ce1e2ddf4d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4587ae8-b591-4f9a-a8b1-46b1f50208f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cc1fff0-a391-4300-a6ce-bf2248f6d41d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00b06210-13e9-49e8-8008-62c467c57296",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "572298fb-9693-42da-b84f-c13eed97ddda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98b85c46-95e5-4d62-922d-3a1bdf96fed2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e2bc801-f6aa-42f3-8ea5-fcae0b63e9ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9fa86ab-e178-441c-93c6-156ffdb2abde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7f4fb08-255a-43bd-85c0-df0df40242c9",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f63902-3c2d-4aa2-a531-95274ea1520f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a853bf05-37f5-4dd9-ad9f-3204f798d1c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "960bb8f9-53e6-4810-9d12-356c1d3b5ca4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acd9de9b-58fb-42ab-8ba7-2dbc36852349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c58c70b-f539-4c84-a2e6-31be917f6692",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc3d03e8-a5e9-4052-8558-e0d254daa2c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64b7f029-a9c7-4143-9678-af7f5332a6f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe032778-1841-435a-8cbc-65a79c39f207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "395f6562-b608-41c5-80e2-88d46e5274c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29ecd735-de79-4b21-9a5a-400a73a8da85",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b520fb-7db9-48cb-bf0a-2cb40e9849d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30ffa50e-6ca9-448d-81a7-cfab1df62ec9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4a76da8-8c91-4e77-a910-0cca4e6ebd0d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0d01c1f-2bb6-4898-acd6-0a1c657022d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71c3ed73-ee3b-48a5-b38c-b2dfbd624337",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a32de788-60e9-4b05-a966-e822d1e00e13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "561390c9-7328-4b3a-b99c-a46d1c4f9f2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d241b97c-891f-4a75-8ad4-0292f7256e4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ba6a089-2ee0-47ab-9ca5-d16f769439b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "440d4d93-7f9b-4a28-bff4-8a4fcc8d7978",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b634f1c6-c654-4465-9c79-b6f1df552cd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e895031a-1a5d-454a-866e-f0b5d2e5149f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a38f60b4-e16b-4025-89f0-a78b02b7377b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b14c9aa-dd40-4f19-8d63-202568bb7aaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e40a38-a0b7-4b69-9481-02d2b222ff4c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f1f4d7d-1335-429a-9e87-45ada1829ed8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7460161d-9bfb-4a7f-9cee-f4c81f7f9284"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e75855-912e-4f90-a700-2d1f991b973d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64cfe435-872e-4f8c-ba68-ed824e42dd1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b70bfec9-504d-497e-b854-4ae09ffcff7b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c22e726-e1d9-4b79-bfad-44717508e4a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2828cef-0e11-4c95-8133-0e82a90186f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da52f6c-3748-4ca8-863e-f787612b6583",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d607915-612c-4425-8c78-b7faef50cfa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ac7758-897c-4107-9208-9ef4687dd4a7",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e0c1fec-dd1c-4b73-b12e-6cb66c7a0933",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b378f6f-a056-45a2-9dfe-b3ed40dbc877"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b343c4b-8bb0-485e-9d9a-d39dfd26102f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3428c296-43d7-4555-90f1-d7815245339e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b80fdfc7-f558-4dda-8547-db15e9d19c39",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92ce5408-48aa-407c-b603-a90a4282186d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27eabdd5-33ec-4a20-87ad-815432dd91a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be054c1e-c142-44bb-883f-6e09384803cc",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8533e28f-8099-471a-9a2f-baeaacc5cc85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f3fd7c9-508f-499e-9b7f-e96c9ff42791",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e105094-505c-4c63-849d-ebeb20110dd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54d30830-61e8-48ee-942e-9d9bd1fc4f34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9449cef7-6ee9-43a9-bbcc-360f588362bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac4c1b3c-dbde-438c-be7f-c627b8d62dea"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ff1f581-6d87-497c-8c62-7a70cf4f8a9b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8813add4-064d-4efe-ab48-91c7f6f03dd2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8c4f786-c9fb-4ffd-90f4-29586044cd88",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6ef4ce6d-8012-4cfc-baaf-ba917ce23476"
                    }
                  }
                ]
              },
              {
                "id": "87b56b81-04b6-49ec-9bc3-a2ccdf2aef22",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cc1441e4-9dea-45b6-a6c8-b488c8901bbe",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d13d6d29-b556-49ae-adb9-eec7f886527c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "72821d7f-655f-4444-806d-1abd9165c76c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e77e275-ef2e-4baa-8d10-26cfbb8794ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8a219615-9099-4fb4-90c1-70d5060110d3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ba4de49-2ffc-4f3d-bdf9-22fdf8fb29f4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "844d0c7c-0d20-488b-88e6-eb2a7c46735d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "46f2697d-f40d-4854-b6d6-6317ca1b949f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "29c6d7b7-cd8e-4e5d-ba89-26c62cc43250"
                    }
                  }
                ]
              },
              {
                "id": "0d4df4f3-0698-4369-8173-0a5bf3e088ed",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "e16e0e58-dc27-46d4-a104-2f2d8ff210b0",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b4248d2-b6fe-4328-ae6c-096d489b72c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "74490ae3-3437-4319-b8ce-cd542fee5b28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e3cba54-3870-411a-b6ef-c7b696e1fdb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "befdc66a-742a-4aa2-95c2-427400e6d544"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c47464ce-2e2c-43cf-b77a-4fe3f838b1c7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4e2cbd1d-2039-489b-8105-538254c07bca",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "174a0e62-7868-494f-a65a-6cb47fe3fec5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "035c9465-a106-4d78-bbdf-27608ea4b6d7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b023e222-8140-47f3-a510-dfe53ae03869",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2fcab7cd-8a22-48d3-a476-7f2e47e35a65"
                    }
                  }
                ]
              },
              {
                "id": "f0e143ad-cb9b-4ac1-8fd0-cae596d37e8b",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8cbf29d0-f890-4d09-bf5f-1bb8ae3838c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0c7ce10d-34be-49eb-9f49-06dfeafc5de7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "39e5d12c-dfc0-44ef-8e8d-d16848c823fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "52868b90-7f23-4abf-b9df-6429514361e5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aa76402e-3af9-40db-b640-becf48889345",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c95420c1-f1c1-41c0-8bf4-eae7ef2ae211"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bc5c3b7f-1090-48ad-be82-2738664b43c7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7735adbc-4f22-4c63-b0e6-db961be87aa4"
            }
          }
        ]
      },
      {
        "id": "6a0a56f6-176b-4fe9-b603-ad1f42584c9b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "2332aedd-e259-450f-a0ca-99eec7d2b07a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1e32116c-984e-461a-86b4-af269ffb6948",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f0f3fc77-3444-4624-bea2-f50ea70ca1db",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5893ea2-8778-43ec-b4c3-4e7ed80861f0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9295ab2a-5f2d-4229-a208-e39c04b0a0d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ac242f-7d8c-4b05-87e4-93c7cd8387fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c62b16fe-ba19-4099-81fc-bc74c6942a91"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13bfa1b2-2151-4acb-b75a-0f2d70f7c185",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe0aa39b-df57-4984-b919-ec1d88b3764a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ce330f4-8253-4494-980e-3d79838cc394",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e947288f-501c-4d6f-a5e8-860dd3987e36"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "08a76d30-acb1-4056-875c-4c5396454f3a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d8799659-6831-41b5-8051-ac413f23a5bf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ccb82d9d-8423-4dbe-afcb-504729f43c78",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fcf0038b-991a-4db5-9aca-5699a4bc69ed"
            }
          }
        ]
      },
      {
        "id": "8c4563b0-d410-4144-b8a5-dec7e5c77e92",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "b106f606-828f-4000-b59d-81b07bd3f04e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1ad2c7a7-3317-440d-8d5f-7ab08c5a82fc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f66fa7f4-6585-441c-8e18-1def647f4646",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60c1624a-cac0-48f5-ae84-63cd76516e9f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7fa03d2c-4596-4d69-9c8f-4faa686d9e00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f32b709f-3ec6-419c-a644-45da4000b5de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4340bf7e-06e9-4d85-a945-9305357ead10"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c39cf1b7-fc4c-417c-a7c0-c39f0f2269b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ee0c1f1-218f-4829-90d4-84fad8409c69"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c62c132c-6441-4a02-8302-82caa2a82281",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cce580a6-f5ef-4d43-9322-174fd4a3a1f1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9698eb6e-0cad-4493-b3a1-76bd83d934c7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d7d592af-adc8-4f89-a568-c567b0763f6d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3756ebd9-b18a-421d-bb79-403980bcb142",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0b866276-024c-4092-877a-d16728f2c575"
            }
          }
        ]
      },
      {
        "id": "43d6b36e-5f30-4752-baf9-01fbc9f15fb8",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "57ab84e3-1540-4858-a9bd-6660e31a7d65",
            "name": "Negative Testing",
            "item": [
              {
                "id": "099b0274-768d-4f86-8fc4-b4cde531cf1a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b9bb5169-8539-4924-9495-5567f93b8dbf",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7b75889-0546-4630-810d-9b4124ab014d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "113526b6-1d07-4837-9e1e-beacbc940896"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "953d9746-5f40-4756-9de6-5437b99e346a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ecd4d16-2cfd-469e-8615-dbf2ccd7ffda"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa2e63c2-21d4-480f-8a8d-6eb00b682c70",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6b368b4a-8c04-49af-85af-072e45126a2e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e60e5d7d-ace5-4e54-aeef-25407d3b0d9b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "271d0307-f18f-46dd-b30c-93ed9c7d954a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "43a1cef1-b3ec-4322-86ef-cf7685c7212e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9dd558e2-02b3-4cf8-b29b-ef1c0eb75839"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "77b811e1-645c-46f6-9846-b415cf40a52e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e3f10ebb-cbd9-48c4-9fc7-f6de62ba5677"
            }
          }
        ]
      },
      {
        "id": "e69d159b-0604-4a4b-8979-343542019214",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "481dd250-078f-438b-b9a8-7c534d68ab6d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b8306671-4cff-46d1-97c3-296686812ea2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e7ce7fa6-bc8b-4c2b-ac43-8c5b783b4712",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9204236c-6616-4e8d-beb4-f173f6f2b17d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "319e7014-95c8-473a-b354-7347e2952cf4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 65.77777777777781,
      "responseMin": 11,
      "responseMax": 697,
      "responseSd": 80.3762371983961,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1717979975109,
      "completed": 1717980000414
    },
    "executions": [
      {
        "id": "dff5cb9e-e028-43d0-898b-c9236b21364c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7aea18ec-b6f3-43ef-941a-12551d4b136d",
          "httpRequestId": "9129d0c7-cc5d-4681-b22d-ce55e98840ba"
        },
        "item": {
          "id": "dff5cb9e-e028-43d0-898b-c9236b21364c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "69deb83b-2f97-4a4e-8fd5-b3880e6da2d0",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 0
        }
      },
      {
        "id": "4e9a6311-572d-478f-b0bf-c4d64cd5160a",
        "cursor": {
          "ref": "839c0d44-49e0-44d1-a732-a2b5e9716ad3",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "12f69ad4-e9d9-4d39-aa7b-956519e5f8ce"
        },
        "item": {
          "id": "4e9a6311-572d-478f-b0bf-c4d64cd5160a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "4fc1e699-aa2c-4f7d-9f0e-4a37e9496612",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "ded6e925-f857-455a-b4f9-426ef9924ea7",
        "cursor": {
          "ref": "a682482b-b366-479c-ac44-09f5b1b8189b",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1c8a70d6-14db-4c2a-a778-d27c24f4ab56"
        },
        "item": {
          "id": "ded6e925-f857-455a-b4f9-426ef9924ea7",
          "name": "did_json"
        },
        "response": {
          "id": "20160158-e8b4-4f86-bb8c-4d2dca18a386",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cebc0ebc-463b-4354-a4e5-eaf9d726a12f",
        "cursor": {
          "ref": "263e46ee-e110-4639-9077-e9784ddf62d5",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "970cea5e-ea3e-45cd-93a5-ab5093cd005f"
        },
        "item": {
          "id": "cebc0ebc-463b-4354-a4e5-eaf9d726a12f",
          "name": "did:invalid"
        },
        "response": {
          "id": "4088b397-11ba-459c-823a-72f9bc8f3c21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cebc0ebc-463b-4354-a4e5-eaf9d726a12f",
        "cursor": {
          "ref": "263e46ee-e110-4639-9077-e9784ddf62d5",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "970cea5e-ea3e-45cd-93a5-ab5093cd005f"
        },
        "item": {
          "id": "cebc0ebc-463b-4354-a4e5-eaf9d726a12f",
          "name": "did:invalid"
        },
        "response": {
          "id": "4088b397-11ba-459c-823a-72f9bc8f3c21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4ac95ec-2893-4cd2-b004-b89be71cc550",
        "cursor": {
          "ref": "0800bcfd-750c-4dfc-94c9-02794acaa1fe",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b5b75287-0962-49d7-a1b4-a52e23e738bf"
        },
        "item": {
          "id": "d4ac95ec-2893-4cd2-b004-b89be71cc550",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "560ceed0-b19a-4d14-bd24-1e55e4f5f51e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 321,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50563986-f090-4580-a3f6-4a6ef2473495",
        "cursor": {
          "ref": "7380febe-a487-4934-a590-7e21ed950b35",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9644e95e-fb3a-4e5a-82d9-fa84457c6d36"
        },
        "item": {
          "id": "50563986-f090-4580-a3f6-4a6ef2473495",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d86c1432-44c9-46fa-9742-eee20cadd7d6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bce116a-af3a-4cf3-8f8b-fd3bfa1ae629",
        "cursor": {
          "ref": "69c35173-bd98-4c76-80d0-de4328e85ab1",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8301dd26-d417-4cdd-946b-4faab91c9f71"
        },
        "item": {
          "id": "6bce116a-af3a-4cf3-8f8b-fd3bfa1ae629",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f862a155-5133-4123-b106-c4070874962d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32db7ca9-0ec5-4611-8322-61e5cfa052d0",
        "cursor": {
          "ref": "fc794419-9924-4393-a6b0-19358ff7464e",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0b5dd506-93d2-4a04-958e-bcad55e0ab64"
        },
        "item": {
          "id": "32db7ca9-0ec5-4611-8322-61e5cfa052d0",
          "name": "identifiers"
        },
        "response": {
          "id": "de6807ef-a075-4f2a-9502-1137d993d474",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e28d8f21-f6d2-4bf8-8a77-d73e722369ff",
        "cursor": {
          "ref": "4d41adb7-29af-4f03-afef-be917453959a",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3d83dbd5-72a2-4c45-bec7-6aeb4f8b302f"
        },
        "item": {
          "id": "e28d8f21-f6d2-4bf8-8a77-d73e722369ff",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "966de62f-99eb-47b4-bc0c-cd8ad465c7bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe96cc4-b966-4581-8245-d6a8bad57ef8",
        "cursor": {
          "ref": "544d1eaa-7c6e-4765-94ae-aa28b4692c74",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c7723bcd-be47-4b28-999d-8d1c3618a030"
        },
        "item": {
          "id": "1fe96cc4-b966-4581-8245-d6a8bad57ef8",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "fe88cfe2-89eb-4471-b263-a7b88e6342f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c578c2-434e-4fea-ab8e-28b3adae29e9",
        "cursor": {
          "ref": "40789071-27c2-465d-9f74-4e6a7b880ca5",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "37bc940b-4c9f-4321-84c6-ed27755c515e"
        },
        "item": {
          "id": "b2c578c2-434e-4fea-ab8e-28b3adae29e9",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e174543e-1b53-4d49-83c6-ea7f34e7b2ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb53ff6-1b73-4227-91f0-060095e77275",
        "cursor": {
          "ref": "17241d81-ed25-4cef-816e-239a23974ed8",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f2d9bfc3-bfe1-430e-8500-314b1ba97b7b"
        },
        "item": {
          "id": "efb53ff6-1b73-4227-91f0-060095e77275",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "af597fcf-75f0-4db4-af5b-54324811aa87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23a39611-9e8c-43f5-a7f8-8db5a46b5ee3",
        "cursor": {
          "ref": "648e0545-b62f-48b2-8410-3c1a9069717f",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "abfc2aeb-3b5a-444a-8b74-b6f6f8c45fc3"
        },
        "item": {
          "id": "23a39611-9e8c-43f5-a7f8-8db5a46b5ee3",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "dc3b4b21-b601-47b1-b33b-845e41be1439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b01c4d9c-b437-4c25-8bb8-943423d380bb",
        "cursor": {
          "ref": "d58e3e90-0b77-4a99-bbf0-2acf79f3d562",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "846087fe-e3c2-4ff5-9b03-7ccd6c205db3"
        },
        "item": {
          "id": "b01c4d9c-b437-4c25-8bb8-943423d380bb",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "29559574-0cbc-4da3-ba0a-7d63bc1f2215",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40b4da5d-b5f9-4d90-a98f-330f296a45ad",
        "cursor": {
          "ref": "325df452-feb0-4611-b5ce-5e542d913764",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "011b7f6a-c77b-40a6-854f-24001b08fd9f"
        },
        "item": {
          "id": "40b4da5d-b5f9-4d90-a98f-330f296a45ad",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "33780d66-37c1-432f-9842-3be72763a5d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbfc1e41-fc14-4433-acc2-d3bcdaa29dca",
        "cursor": {
          "ref": "aaa866d0-4bb5-406b-92c3-a13b719b6ccf",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "e5613d58-313b-40f5-b54c-7d4d340e0001"
        },
        "item": {
          "id": "dbfc1e41-fc14-4433-acc2-d3bcdaa29dca",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f8ad736c-0da5-4203-ba73-8ad816f3dc58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d49cfbb0-c641-4697-95c6-bf3825b2408a",
        "cursor": {
          "ref": "1c9a060e-1856-4660-b2dc-0e9f6d1ed189",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "641301f6-f38e-4ac1-aa4b-e5892104eced"
        },
        "item": {
          "id": "d49cfbb0-c641-4697-95c6-bf3825b2408a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "de36c095-aa2e-4b15-80a2-62297111c877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ed0a357-8ebd-4538-abd7-b277a334c39a",
        "cursor": {
          "ref": "be1a9733-af8c-41bf-a6f3-e394c8fabc52",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0365ba7e-0568-4a05-9a0c-5eed82b4eccb"
        },
        "item": {
          "id": "7ed0a357-8ebd-4538-abd7-b277a334c39a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "4b9952a0-4291-48ae-8483-b595c4e1706f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c194259b-ed52-42ec-8411-1b0932235e3f",
        "cursor": {
          "ref": "c5760666-f5d5-48f1-ad66-dc929aa02e60",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "de08417b-1d6f-477b-a844-277a29d402d4"
        },
        "item": {
          "id": "c194259b-ed52-42ec-8411-1b0932235e3f",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "addd2153-1a7e-4f3c-84f2-279ac1e13de8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e202714e-e8c4-4622-b026-c63337c41c00",
        "cursor": {
          "ref": "f1d0a6eb-ca84-4110-9179-042f7e37c298",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ba77b8c0-c52c-408a-b6d8-df028ed9810a"
        },
        "item": {
          "id": "e202714e-e8c4-4622-b026-c63337c41c00",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "5fb215c4-dd21-42c3-b3bc-ccd03936cbaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "353a9f03-2093-4245-8ffd-ca75cba17378",
        "cursor": {
          "ref": "6324f784-85e8-46f9-95f3-e6f6533652f4",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b9948c82-19e8-4742-8cd4-c769b3a18787"
        },
        "item": {
          "id": "353a9f03-2093-4245-8ffd-ca75cba17378",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "7913f34f-0c36-496c-89d6-850c8a09682c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c86dd44-ed25-42ba-a6ba-8172732be499",
        "cursor": {
          "ref": "d1d3f8d1-0808-41f1-8aa0-18fb856b99d5",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "eb7c07dd-829f-4462-b73a-cf028c0c3483"
        },
        "item": {
          "id": "6c86dd44-ed25-42ba-a6ba-8172732be499",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "08842bb9-69f7-4877-ac05-0412b77c83bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82d7b44f-507b-4c46-9967-a96fde7e95f3",
        "cursor": {
          "ref": "51afbfd2-a96b-4205-b59e-a0a697c65523",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2b8f64cd-c404-49df-b882-1b9caa29d26e"
        },
        "item": {
          "id": "82d7b44f-507b-4c46-9967-a96fde7e95f3",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "24b8f9dd-0209-4933-9400-ab08ef4bf395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "194c61c4-d7cd-4c47-b699-d710a3556870",
        "cursor": {
          "ref": "293be765-7712-42e7-b75f-a43271ba6054",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c7845605-a22e-494e-bd06-04f4de94a097"
        },
        "item": {
          "id": "194c61c4-d7cd-4c47-b699-d710a3556870",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b2857276-f8c4-42af-b81f-22b2040e440f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8bccbb9-290e-45d0-93d7-aef595b47467",
        "cursor": {
          "ref": "5aa0a4c4-c25c-42c4-8146-bd7744d682ca",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e5b32687-297e-498e-946d-d3bc6d350b38"
        },
        "item": {
          "id": "d8bccbb9-290e-45d0-93d7-aef595b47467",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "97ea25d6-c2ae-4342-a045-907d328d1829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b100478a-2217-4810-9d2d-ac36da327adc",
        "cursor": {
          "ref": "033c2655-212b-435d-aee3-46660df03864",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c8425232-d23f-47a7-99b8-ef0ea8f9a1d7"
        },
        "item": {
          "id": "b100478a-2217-4810-9d2d-ac36da327adc",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a607c9e2-b202-484c-97ce-0714b68e8225",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22861a42-1015-41de-b77b-718153edb47c",
        "cursor": {
          "ref": "0cf82d06-adb7-4c06-859f-168e3f245582",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e847ff6d-9335-4692-824c-ee6aeabf1f4f"
        },
        "item": {
          "id": "22861a42-1015-41de-b77b-718153edb47c",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b9262ef7-f5cd-48be-b07a-44397c7954d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb4cfb7-c991-4881-9d9d-5ef26e1a0467",
        "cursor": {
          "ref": "5dffb671-edbc-4757-b79c-2433105e51c5",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "3623982e-add7-4516-97f2-746d5bbff0da"
        },
        "item": {
          "id": "eeb4cfb7-c991-4881-9d9d-5ef26e1a0467",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "172b7da3-396c-4f2c-acfc-56e08e1c3c3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd751e8d-b4d2-41db-a8ad-db898b719574",
        "cursor": {
          "ref": "b97a319d-3ad0-471b-8100-74259869fef9",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3720a14c-2214-4bd0-9d99-91b7df434a19"
        },
        "item": {
          "id": "cd751e8d-b4d2-41db-a8ad-db898b719574",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "248d094d-2755-4978-88dd-56a466612c65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c090ce8c-cd7c-401c-b194-94d053347c78",
        "cursor": {
          "ref": "94e6e3a0-cf68-4668-a4c5-bf2fde289798",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b8ddaf70-dea0-468f-8741-85be855bfacf"
        },
        "item": {
          "id": "c090ce8c-cd7c-401c-b194-94d053347c78",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "5e19016f-f705-4f4e-8e18-c2352e5cd365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c6d596b-3740-450c-b4fa-534161ab533f",
        "cursor": {
          "ref": "651c58ce-4404-4860-8e70-00ced961fff6",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "3dd7c51d-6655-44e9-a842-529c789c1bb6"
        },
        "item": {
          "id": "4c6d596b-3740-450c-b4fa-534161ab533f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "acc1e898-d59a-4563-9412-163fcd6ce80d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f74711f-5c4f-40f4-bd7e-ff10d416de5c",
        "cursor": {
          "ref": "c795f333-c0e4-400a-87c4-12a119e0085b",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "345f5404-6cb9-4bb6-b486-c9eda58d4ded"
        },
        "item": {
          "id": "5f74711f-5c4f-40f4-bd7e-ff10d416de5c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "5f4d8ddc-f10f-4470-992f-6713edb1d73f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85561c1e-7524-4d94-84ee-c28214351fae",
        "cursor": {
          "ref": "bbaf029f-054a-43f8-a50a-cddd7a34c0a5",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "45f9302f-e26b-42b7-91fd-78d942a9eb2f"
        },
        "item": {
          "id": "85561c1e-7524-4d94-84ee-c28214351fae",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5a006146-7c81-4d64-a99b-34a638776ed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e3ab4b-70df-4c2f-9c77-70dbfdd97d5e",
        "cursor": {
          "ref": "60b67145-5586-4936-8e69-fb9461d82fe1",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "63fd8f28-3469-41f5-a9b9-54faa59a0e73"
        },
        "item": {
          "id": "47e3ab4b-70df-4c2f-9c77-70dbfdd97d5e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b7d981a9-d7ec-4f8c-ab62-f869d40690a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db051eff-e9aa-45e6-9f6f-3489e60089dd",
        "cursor": {
          "ref": "5e8b7181-5085-43dd-9ad2-3c20d5e7d911",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "2f4c7059-6b64-4dc2-a183-294a64153925"
        },
        "item": {
          "id": "db051eff-e9aa-45e6-9f6f-3489e60089dd",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "e83e7f72-e870-47fa-8eba-143021788620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "843413a5-9051-4655-8d36-04c56c8b2efb",
        "cursor": {
          "ref": "a45e72eb-f3a3-4693-b066-b5ce2f760c40",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "148ee5e0-a45a-474a-8209-4a4bd2149b39"
        },
        "item": {
          "id": "843413a5-9051-4655-8d36-04c56c8b2efb",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e8d807ff-13a6-41d8-b82b-d3e81cbe5660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ece7fafa-6734-461a-9715-1cac7059a8b0",
        "cursor": {
          "ref": "95fb540a-0fd4-4bf4-ab32-d8fdc7074da5",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "1cdb6b9b-38ef-43c7-bfa5-b878a2d4cbb8"
        },
        "item": {
          "id": "ece7fafa-6734-461a-9715-1cac7059a8b0",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "47818bcf-9a04-4128-a4c1-6cf828dfc1a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4305d796-b90a-45b0-b8b3-94ce38cc60e0",
        "cursor": {
          "ref": "0dab6282-db31-4353-ad64-b819fd607cf5",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c299b9b3-7fea-458a-967a-688497e3731b"
        },
        "item": {
          "id": "4305d796-b90a-45b0-b8b3-94ce38cc60e0",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "352ab067-2bc2-425f-9727-3476ecc841f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc2d0728-2b53-4da2-8568-f88c86a2d1de",
        "cursor": {
          "ref": "b60fb4f7-74ae-403b-841f-e5b9daef0d00",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "8b90fa10-c23c-4122-93a1-dc232e9ed633"
        },
        "item": {
          "id": "bc2d0728-2b53-4da2-8568-f88c86a2d1de",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "92303131-bc60-4ae5-ac41-e68944bb8a3e",
          "status": "Created",
          "code": 201,
          "responseTime": 697,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "32a4c6f7-e214-4029-8def-ba29809b2b44",
        "cursor": {
          "ref": "6348d3f9-db8f-4082-8bae-9acf164a4ce8",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "30e6ec47-a2b7-4972-a7ff-82666e6bad05"
        },
        "item": {
          "id": "32a4c6f7-e214-4029-8def-ba29809b2b44",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "52517910-9cb3-408a-bf21-c3de55856249",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "4c82c99d-8cb5-403c-845f-2aa81c8a9c7d",
        "cursor": {
          "ref": "3c4120cd-ea81-400f-b856-a3238ac6e4b9",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3e46a200-b059-4b98-8bce-480dfd3b56d6"
        },
        "item": {
          "id": "4c82c99d-8cb5-403c-845f-2aa81c8a9c7d",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "334de17c-7441-4ea3-adc5-23c25e81cc2e",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "71620eb5-e761-448f-84b6-3fdd4f68b31f",
        "cursor": {
          "ref": "274ebac5-62c6-404f-b179-1f80d9e451e6",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "07ef626c-4cf3-4896-8f6d-bf0986cb89b8"
        },
        "item": {
          "id": "71620eb5-e761-448f-84b6-3fdd4f68b31f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "a54256ac-82d7-4a9b-9199-4b4dcbc21fc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53adf03b-49ca-4dd6-9c6b-a5cb0d1878d0",
        "cursor": {
          "ref": "cbe44278-42c0-43bd-90a4-2b7d7029e6eb",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "744421b5-4d5f-412f-8f14-87c02eec5913"
        },
        "item": {
          "id": "53adf03b-49ca-4dd6-9c6b-a5cb0d1878d0",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1acbfff6-cf94-4edf-9361-1eb0cb155684",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "aff03349-a7fd-41c5-866a-dd88a9246153",
        "cursor": {
          "ref": "f999a465-8dd7-4381-a62c-a780679d1751",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "4b1734e5-5bc1-4da1-bce2-6d147eba33cc"
        },
        "item": {
          "id": "aff03349-a7fd-41c5-866a-dd88a9246153",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "9a8e55d7-ab93-42ba-a2ba-056db420fe13",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "3f03097d-d301-4f10-b5e7-6e4c20733877",
        "cursor": {
          "ref": "5e429b06-32ae-4ee5-a3c2-73bf034f576b",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "694aef87-4d3c-4194-86a9-99004f055368"
        },
        "item": {
          "id": "3f03097d-d301-4f10-b5e7-6e4c20733877",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "75169c52-be36-43d2-81b3-1120e89eada1",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "d2f57e9f-896b-44c6-9bd8-8113e4814f4b",
        "cursor": {
          "ref": "5e3794a6-7c0b-4ed1-8a3c-19352d2f2a14",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3a64586d-c16d-447c-887e-8caadf1da714"
        },
        "item": {
          "id": "d2f57e9f-896b-44c6-9bd8-8113e4814f4b",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "2e9a871f-8f48-423a-9ecb-737dd7bc8d1e",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "5a25a489-19a6-49b5-ba3b-ec2c38730792",
        "cursor": {
          "ref": "1710b4ee-5e02-475b-81e8-acb0114c33e3",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7a5cce51-4117-45cf-9f7c-93f79d16b3f6"
        },
        "item": {
          "id": "5a25a489-19a6-49b5-ba3b-ec2c38730792",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "788a176c-63aa-4b5c-8fa3-ea12f38ada0d",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "dde53824-d8a3-421d-8a89-b99d8589afe3",
        "cursor": {
          "ref": "173a93cc-d7bf-4796-845a-a2c1c2a431d0",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "e6725bd3-bd99-4792-9ddd-da3ee2830e2b"
        },
        "item": {
          "id": "dde53824-d8a3-421d-8a89-b99d8589afe3",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "7e3b513a-b966-483d-af72-27db5cd82ca8",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "218bb6a0-c7c8-4f81-83da-8ef31c437390",
        "cursor": {
          "ref": "021a1c72-e482-4bda-980c-fe3a6690338b",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ad5798d4-3726-4d0d-950a-28aa5ed4426d"
        },
        "item": {
          "id": "218bb6a0-c7c8-4f81-83da-8ef31c437390",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "f7852458-a373-4d12-9db9-f5b661c2b553",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "bf9bee2c-c2ac-48b3-b0c4-fa4807051ab9",
        "cursor": {
          "ref": "3867c150-7f7c-46af-b9d1-7418538bc66e",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "121e4376-292c-4ab5-a28f-e6b81c52d57e"
        },
        "item": {
          "id": "bf9bee2c-c2ac-48b3-b0c4-fa4807051ab9",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "333e914d-b962-48f3-bc5c-74c9f639c5ef",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "6c16f89a-f9ed-4582-ab6a-80ee2b04f0ff",
        "cursor": {
          "ref": "0954e834-0bd4-4cdd-bdf9-f7d7d5380af0",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6fc6679d-95dd-439b-bb4b-7b84ab61b0e3"
        },
        "item": {
          "id": "6c16f89a-f9ed-4582-ab6a-80ee2b04f0ff",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f5da55e6-e191-420c-be88-65742ad43266",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "7b5c41ac-00fb-4ab1-9a4e-eeacfcacd9ba",
        "cursor": {
          "ref": "a40dfba9-8388-4570-b7ff-f7f0686def0c",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "408a01e0-9151-479e-be67-f42e1a205e46"
        },
        "item": {
          "id": "7b5c41ac-00fb-4ab1-9a4e-eeacfcacd9ba",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "0a7283e0-1683-4b32-9df6-914599252d68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d3932c-7802-4918-ab69-a0b697d2aaff",
        "cursor": {
          "ref": "7371aece-6685-43e9-a7f1-8c757e69d0a1",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "bcd53a86-38f8-4c24-859d-a34f98cf93a3"
        },
        "item": {
          "id": "85d3932c-7802-4918-ab69-a0b697d2aaff",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b956e888-6492-4749-bb12-b6668000f765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c44942a8-982f-4241-b040-6eb3ade0993c",
        "cursor": {
          "ref": "c316feca-a2b7-46d3-a9e6-31ba8d17979b",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ff6fa473-e574-45f0-8ab2-deeec38d6fd6"
        },
        "item": {
          "id": "c44942a8-982f-4241-b040-6eb3ade0993c",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7f2c11ce-23ad-48cf-9df3-0aba99ffa32c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5773b07-b12f-400b-911e-bf1ce01a6561",
        "cursor": {
          "ref": "27aa8921-cc83-4d11-99a3-1b239a753ae9",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "58e469bf-1282-4e62-a4dc-c2dc305b17b8"
        },
        "item": {
          "id": "d5773b07-b12f-400b-911e-bf1ce01a6561",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "2e331c3d-8010-4856-a665-affbf425b4a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2085e16-a4b1-4ad1-abaf-8279a059e14f",
        "cursor": {
          "ref": "fdf2f965-0dcd-4e04-b52f-241caddb8273",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "91297246-eb7a-4964-b0e8-c728df0b47b6"
        },
        "item": {
          "id": "e2085e16-a4b1-4ad1-abaf-8279a059e14f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "005eb48d-5696-46d7-b520-a9ff79b0882c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0d7e29-a785-45d6-b8fb-debb099e8ef8",
        "cursor": {
          "ref": "e7fdc4f6-1b74-4a27-bda8-ebf882a81170",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "7d95f4d6-b69f-4406-84d2-0aeecc356c83"
        },
        "item": {
          "id": "6d0d7e29-a785-45d6-b8fb-debb099e8ef8",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f7e2e237-84a6-40a3-b69c-fb4579575a63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78544711-a5c0-46c3-ba38-530852db3c0e",
        "cursor": {
          "ref": "3ead4419-2e60-41a3-8918-54118abb3eb9",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "52248ebc-1556-48aa-84e4-37c6cb8eefa4"
        },
        "item": {
          "id": "78544711-a5c0-46c3-ba38-530852db3c0e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "38d614cc-f4fd-4d3c-97b8-59847667f059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "143be0f8-9a1f-46e8-895b-9d49db0518f9",
        "cursor": {
          "ref": "b8efaf70-3ac7-4b6d-bc54-17452be41bee",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d3dc876c-37e6-402b-b837-6eab6e29be31"
        },
        "item": {
          "id": "143be0f8-9a1f-46e8-895b-9d49db0518f9",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "b56c726e-4a6a-4807-848e-a7e8565fe7c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cec6a9cf-7168-4d34-991f-54d7f19dcfbb",
        "cursor": {
          "ref": "285ff2c7-190a-4afa-a664-e6c8950d1acb",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "41aa3294-d754-4d2d-ab71-2adab4bae374"
        },
        "item": {
          "id": "cec6a9cf-7168-4d34-991f-54d7f19dcfbb",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "df324d73-780f-40eb-88d9-8ce3336998a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14bc56e6-71dd-47c8-829e-646c05c8d3fa",
        "cursor": {
          "ref": "f6afc4f1-54cd-4352-8c1e-e4bbe11b8c0c",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "988b0fc5-770d-4dbe-9a6d-6d95fa0c73b5"
        },
        "item": {
          "id": "14bc56e6-71dd-47c8-829e-646c05c8d3fa",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "145ad88d-c17d-4e4b-9a65-2d8303c063b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acd14a6b-76c0-42c2-8369-3927bd7769ba",
        "cursor": {
          "ref": "cc059985-ddfc-4f48-af87-924ce65d8894",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "97aeaa15-13e9-4b66-bd1c-040d051ee286"
        },
        "item": {
          "id": "acd14a6b-76c0-42c2-8369-3927bd7769ba",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "8ef869c6-33c3-4ed1-bb4a-775186d4f86f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a35ab5-dd2d-414f-a3de-3ec68ba42c93",
        "cursor": {
          "ref": "27ff1de8-4ac7-414e-8295-3bb827ff398b",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c118f8af-8ac2-4614-ab00-7e78ee3db7f5"
        },
        "item": {
          "id": "80a35ab5-dd2d-414f-a3de-3ec68ba42c93",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "64b494e1-0fe7-446d-a8a3-edb71efafe90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9547cb-f8c5-4d23-887d-832619ece586",
        "cursor": {
          "ref": "7c041dad-699a-4a60-936b-8be796785e33",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b2686552-ca81-4869-86c0-59c971c0ddb6"
        },
        "item": {
          "id": "cd9547cb-f8c5-4d23-887d-832619ece586",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e7447f1e-717f-42cd-af28-cfa24ba47c11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89defcee-9330-4496-b4e2-2871e1f6add2",
        "cursor": {
          "ref": "ba267a52-e49c-4c25-ba1d-c47119cfb43a",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "69b8f7b9-c21e-4226-84df-5808ab02b958"
        },
        "item": {
          "id": "89defcee-9330-4496-b4e2-2871e1f6add2",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "2211aeb7-9cab-4352-8989-f04406cbef83",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "58a9c001-c751-4f06-96df-8368fd387de2",
        "cursor": {
          "ref": "8f94d263-5a0d-4f02-8714-e048dff7a12a",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "96b8bd67-6c50-45ac-be4f-e4da14c54dcb"
        },
        "item": {
          "id": "58a9c001-c751-4f06-96df-8368fd387de2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "677b266c-119f-4850-9e94-5fd95b5157f4",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "e28457c9-e4a4-41df-83d2-30f568a396cb",
        "cursor": {
          "ref": "060cd224-3efd-4d0f-8808-ba4761dfb30e",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "3c6f24cf-5c35-4fbc-b647-9540d78e31ec"
        },
        "item": {
          "id": "e28457c9-e4a4-41df-83d2-30f568a396cb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "12171f3c-1575-4b77-9ae2-93222f54b6e4",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "dbf0cefb-a0c5-4fc2-bab8-ecc054941d70",
        "cursor": {
          "ref": "43a7b4a0-088f-4c72-89a9-e9efb861ef78",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "dc46a34b-9d5e-44a9-a2db-28f8a0731c9a"
        },
        "item": {
          "id": "dbf0cefb-a0c5-4fc2-bab8-ecc054941d70",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "431fedc3-b083-4299-aa4e-685aee43c9f7",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "10809939-6691-431d-b3d4-b7b5364dcb37",
        "cursor": {
          "ref": "a342f764-52ef-45b5-897d-d2847fea7d92",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "45ea8709-daa4-44af-9060-78d5aa95062c"
        },
        "item": {
          "id": "10809939-6691-431d-b3d4-b7b5364dcb37",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "b3625a11-53c3-467e-8b17-2cacf53a2516",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "ad842760-7725-4ede-8176-2ef9858f05d4",
        "cursor": {
          "ref": "6851dab3-0a7a-4080-b46f-d7ffefdb93f8",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a6681ecf-d7bc-4020-868c-37e8c83e78c1"
        },
        "item": {
          "id": "ad842760-7725-4ede-8176-2ef9858f05d4",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "fd56a90e-6fad-479b-9c42-aa3521fdd081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aebffda-ee64-467c-b7e8-49bc13f10aa2",
        "cursor": {
          "ref": "4929ccf9-a920-45e5-972b-b949043846dc",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "224f7121-eb37-4308-a558-af271526b502"
        },
        "item": {
          "id": "2aebffda-ee64-467c-b7e8-49bc13f10aa2",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "1d7e18fe-da99-4370-93a4-0dfd98b37020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "026d6650-1172-46a5-9eed-66f50de51ad5",
        "cursor": {
          "ref": "2ab99c29-074f-45bc-a74c-ff2a90499c20",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "8865bfd7-7cec-4427-a9fc-2c4ea0c81dae"
        },
        "item": {
          "id": "026d6650-1172-46a5-9eed-66f50de51ad5",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "0ff907ef-cfd0-4224-87ac-fb19d9bec54e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f087c26-901e-4cc4-83a2-dcc81c7b28e6",
        "cursor": {
          "ref": "9e516e24-2a5e-4ea5-a07e-d94729499b00",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "1c424aff-2fac-443f-8a4c-3c35c865cd41"
        },
        "item": {
          "id": "2f087c26-901e-4cc4-83a2-dcc81c7b28e6",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a9022787-4060-4315-91ad-89750d1dcdaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7b5a631-ba5e-44d5-ba23-514488797faa",
        "cursor": {
          "ref": "ba0fd5ca-8e32-4a75-ba84-86121977191c",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "23fec4f1-7a5c-4de5-8425-bc4742430642"
        },
        "item": {
          "id": "c7b5a631-ba5e-44d5-ba23-514488797faa",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d4fe538e-572c-4eb5-888a-0247bf484b7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2cccdad-c59c-4ff5-ac78-e55e7e223017",
        "cursor": {
          "ref": "e94ec852-ccdd-46e3-a7fc-def62e9562b5",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "77d52fe0-c653-4e41-b184-91d8f7a36634"
        },
        "item": {
          "id": "e2cccdad-c59c-4ff5-ac78-e55e7e223017",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2f5ba79f-9686-4e7c-b469-51315ea4e625",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bd23db3-cb83-4176-b9f6-0036be9572eb",
        "cursor": {
          "ref": "a2dfc7c1-5c01-4d42-992b-a0753828aafd",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "db3ae052-540d-4e07-a185-b902f2186e01"
        },
        "item": {
          "id": "7bd23db3-cb83-4176-b9f6-0036be9572eb",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f11496ed-6105-4312-b29c-1cf4279c0bd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "891465bc-e427-4a21-b066-59901469c3f8",
        "cursor": {
          "ref": "b145ffd1-a6dd-4d19-bc42-04ceebe22de7",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "0515b33c-b68c-42e2-8748-1070a033dd25"
        },
        "item": {
          "id": "891465bc-e427-4a21-b066-59901469c3f8",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "126c6267-e110-4457-b70f-bac8d84fa161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "901e374f-ed65-4176-ac9c-c48acd974407",
        "cursor": {
          "ref": "c39e0e5b-917e-45ff-8796-c50d817db4c9",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "89667cba-498b-44fb-8a13-61cf62d08be2"
        },
        "item": {
          "id": "901e374f-ed65-4176-ac9c-c48acd974407",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "eabf888a-bf86-4469-87d9-dda278806204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c5a210-1b07-47b1-9794-5c1b88932ab8",
        "cursor": {
          "ref": "3f0a0d35-e317-4116-b655-779f4b6dc255",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "9ffa64ca-58d9-452c-8266-95ca39620e92"
        },
        "item": {
          "id": "30c5a210-1b07-47b1-9794-5c1b88932ab8",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "daca2a2f-7c05-4bbc-b97e-09248050fe67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a45bef9-e324-4b32-8139-21d63b61ded8",
        "cursor": {
          "ref": "951bf246-4536-4f0a-865a-55dd18435711",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "e5827c03-dc03-47b3-9e84-c3b3947ceee1"
        },
        "item": {
          "id": "7a45bef9-e324-4b32-8139-21d63b61ded8",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "8a8bd8c0-7bd6-4e20-b33c-e0f761ed5dd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef104eb8-f379-4c8f-9dd3-6f11de73d5f3",
        "cursor": {
          "ref": "06793b52-2f41-4c19-93be-7b98b3b53ac5",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "206b4a41-96c9-43e0-9dca-df333568647c"
        },
        "item": {
          "id": "ef104eb8-f379-4c8f-9dd3-6f11de73d5f3",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "89fac70e-06a1-4fa4-ad16-3f99cf357a8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc9021ea-8b82-45b2-907a-3feb2f0da72c",
        "cursor": {
          "ref": "798355d0-e87d-452d-abad-a4e4e4a1aadf",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "5eee1502-0cf7-4cd6-977d-545539cde859"
        },
        "item": {
          "id": "bc9021ea-8b82-45b2-907a-3feb2f0da72c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "59891491-fe0c-48d6-b3fb-6e80a6a607f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d45ae40-efa2-4e07-bdd1-38c84c3f1313",
        "cursor": {
          "ref": "42c116f2-b5af-406a-b3b1-4e92a8f783ab",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "bff6c0df-70b4-4005-a1d0-190e8e5a0ec7"
        },
        "item": {
          "id": "3d45ae40-efa2-4e07-bdd1-38c84c3f1313",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "483211e7-a5b6-49e3-a4ae-46b713b3f64a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e50f0091-5ffa-473e-b727-196dd4cf0cb0",
        "cursor": {
          "ref": "675bf19e-aef8-4186-aaa2-01e5ede98ec9",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "dfc5652e-e970-43f0-8180-28b344de952c"
        },
        "item": {
          "id": "e50f0091-5ffa-473e-b727-196dd4cf0cb0",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "cedb4766-f779-4dea-97e5-af3f01319b73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0298733-05e1-4403-9141-775a6444da64",
        "cursor": {
          "ref": "1d025f01-1874-4ed4-9a08-18f69b4e5cbe",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4a858e67-7432-4f36-821e-4014a55c9887"
        },
        "item": {
          "id": "e0298733-05e1-4403-9141-775a6444da64",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ccc0561b-ea67-426f-8635-405ef1a5e0be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66b29a38-1502-4efc-be4f-5e8ad00db49f",
        "cursor": {
          "ref": "5a19531c-0568-4be2-9530-7d824e8f72c2",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "56a59625-d4aa-4d6a-af7e-68e4033dc134"
        },
        "item": {
          "id": "66b29a38-1502-4efc-be4f-5e8ad00db49f",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "988d4f69-3470-4c44-985b-7be0125337e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af133e56-ea5c-4ca6-bbbf-e4d3773d1c12",
        "cursor": {
          "ref": "296783d7-4039-490d-9fb3-81498ada0a67",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "02d2b8b1-f32c-4dfd-9547-4f600058b0fe"
        },
        "item": {
          "id": "af133e56-ea5c-4ca6-bbbf-e4d3773d1c12",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "87e7d43d-3a97-4767-ac35-00b19a8a99a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df2f5ae-a69d-45ca-998c-3fac70d6bb83",
        "cursor": {
          "ref": "070896a9-a688-4717-a37b-feb49fb33a8f",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "0a550959-a5a3-4964-b8d0-778c22118999"
        },
        "item": {
          "id": "8df2f5ae-a69d-45ca-998c-3fac70d6bb83",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "da7f1a01-2d53-44ed-b503-451aaccdd340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d138c5d8-a528-498f-93ba-1f63b7f7bb8e",
        "cursor": {
          "ref": "8db187bb-48ad-4a57-af50-bb8126c230db",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "459edabc-bcb4-4c86-b5c4-2389801e7e15"
        },
        "item": {
          "id": "d138c5d8-a528-498f-93ba-1f63b7f7bb8e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "18f0e353-0272-4d17-9832-1e656e504fca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e80a77c-729a-461e-8d54-54dd6c522a2a",
        "cursor": {
          "ref": "d4eded4e-efe9-4e1b-8662-82065f60c190",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "65d9f9bf-0395-4fe5-82c8-6ef46954f169"
        },
        "item": {
          "id": "8e80a77c-729a-461e-8d54-54dd6c522a2a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "91b1dc60-a892-4816-99be-ebe01a2f0d8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae9d3aa1-908f-4105-a359-c5b3f095ae90",
        "cursor": {
          "ref": "9058392c-b8f0-4b44-8694-001809270f8b",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "061599d2-0509-4c82-90fd-19a2dd2e43cc"
        },
        "item": {
          "id": "ae9d3aa1-908f-4105-a359-c5b3f095ae90",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5ba7c1d5-8869-4389-8c15-66fc4a506c9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "badf198f-4307-4c5d-b8d9-70b8a2ee8e30",
        "cursor": {
          "ref": "8dbc83f1-1311-4d39-8647-255c62f16885",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a9f7c428-8551-4b31-9238-7768955739ec"
        },
        "item": {
          "id": "badf198f-4307-4c5d-b8d9-70b8a2ee8e30",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "e13ee98d-9c7f-411e-8a80-7e29dec0a971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e5ba11a-541c-4e99-b64a-b536e2dab16d",
        "cursor": {
          "ref": "9cff3079-0b9c-453f-9584-dbd3170e17e2",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "5cd43825-dbcf-408a-a476-34ad58f8f3bf"
        },
        "item": {
          "id": "9e5ba11a-541c-4e99-b64a-b536e2dab16d",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "1f3ee053-8cde-4a91-927b-5c63bc3598c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9180827-04f9-4de4-80b1-36243d4d90c0",
        "cursor": {
          "ref": "58e5edba-3ece-41df-8640-7571937f5b61",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "85e20e5d-ea54-482a-be56-03cd31460231"
        },
        "item": {
          "id": "a9180827-04f9-4de4-80b1-36243d4d90c0",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a29e04aa-ee88-4729-8e4a-626fdab028cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c511fddd-c701-482d-9239-3d08ad4e173a",
        "cursor": {
          "ref": "e9a5a066-5485-48e4-bd90-96e304acc454",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "738169ac-936c-4551-9363-1c7955a95f39"
        },
        "item": {
          "id": "c511fddd-c701-482d-9239-3d08ad4e173a",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "608d09c3-7f48-4ba8-9613-b73b43adf971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30bb8212-41d8-42a9-a4e5-73b34f4210c2",
        "cursor": {
          "ref": "9658a418-dbc9-456c-b40c-4f78cd646b87",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "5557850d-0ae5-45e3-8fa1-7c111d61ab63"
        },
        "item": {
          "id": "30bb8212-41d8-42a9-a4e5-73b34f4210c2",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "6969a79d-0ba2-4b37-93c2-54e59b04b6ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6df6262-aa2b-4a99-a690-6977b0360707",
        "cursor": {
          "ref": "9105840a-b4e1-4e27-b13c-e7cd5ca805da",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "dbb58804-56ea-4899-8089-6c7fcf8e6339"
        },
        "item": {
          "id": "e6df6262-aa2b-4a99-a690-6977b0360707",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f7069a00-411c-4221-96ec-88620105211e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc49305-9d99-4932-96f7-ce172ae7e5dd",
        "cursor": {
          "ref": "4bbd97f0-b62a-462e-a42b-3c68aef207a0",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "39e8f896-9aa2-48a0-9e34-ed01fb4fb243"
        },
        "item": {
          "id": "8fc49305-9d99-4932-96f7-ce172ae7e5dd",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "9c1e55c0-105c-4f80-bb2f-1f4d8bd2695d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00af9c4e-bb88-487c-9fd5-49f968ea907c",
        "cursor": {
          "ref": "0fd25b47-1d46-42bc-bcbe-d5cdaa63cc36",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "18c332fb-5440-4af6-a4f2-4a75fbd4caed"
        },
        "item": {
          "id": "00af9c4e-bb88-487c-9fd5-49f968ea907c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "9ee4f6a8-0735-4120-bdf4-382d56adc949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5120c560-e603-4a43-b55d-c3ed6ffd57bf",
        "cursor": {
          "ref": "157ed2da-9204-4f06-9c9f-24c56f49a10b",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f86b8e4b-7c32-472e-a85f-db8e8b681f68"
        },
        "item": {
          "id": "5120c560-e603-4a43-b55d-c3ed6ffd57bf",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c9914d65-1210-4d82-a8ee-ef1b8c065221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "687cdd9f-f984-48e3-8ad3-f6e688c7d77c",
        "cursor": {
          "ref": "e0d003da-2af4-4a0c-b1ca-d97425fdfee5",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7a26a622-f7e5-478b-bc92-6d9b49704479"
        },
        "item": {
          "id": "687cdd9f-f984-48e3-8ad3-f6e688c7d77c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "8d2ed3c1-994f-4085-88e0-9c1dc0567761",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "927a9af6-6571-400f-bd2a-534fd04172b6",
        "cursor": {
          "ref": "a8828ed6-f23d-4a9e-bc7a-598ee8a4e5f3",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "17d90f16-af8a-4234-8149-3b6d6ac109a9"
        },
        "item": {
          "id": "927a9af6-6571-400f-bd2a-534fd04172b6",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "ea45454e-27fd-45a6-b41b-7eb419c1e80f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "ff095f35-0cee-4c70-9a54-fdd40755e0d5",
        "cursor": {
          "ref": "959ad23a-c306-4ba2-8187-63608360de05",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "1bd9c1ce-72df-4ec0-a009-2f4292e9ad1e"
        },
        "item": {
          "id": "ff095f35-0cee-4c70-9a54-fdd40755e0d5",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f91b0b38-719f-4c04-af49-5b9fef4584da",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e968622-dfea-4058-80c0-d5b7c20e2f9d",
        "cursor": {
          "ref": "87b37e34-7182-4c48-a270-27174dc51ada",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "05048a34-d083-4e95-94c4-843210c4067f"
        },
        "item": {
          "id": "8e968622-dfea-4058-80c0-d5b7c20e2f9d",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "38325210-e83c-4d25-86a8-ac2740150fcc",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c58618b-0129-4dc2-9639-d26a7d2a32e7",
        "cursor": {
          "ref": "2cf8add8-5619-4849-ad7d-382f17668edf",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7ff855d2-362c-472e-9111-b83fd9801810"
        },
        "item": {
          "id": "5c58618b-0129-4dc2-9639-d26a7d2a32e7",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0aeba62b-ed94-4cfd-bbd2-8953718101a4",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0896d1a7-1cad-4f4d-8066-58c8e554f420",
        "cursor": {
          "ref": "618e614f-35cb-46b4-b9e2-08a03e6d6aa2",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "050fb2a5-cb60-4e52-b504-6043ad1ff393"
        },
        "item": {
          "id": "0896d1a7-1cad-4f4d-8066-58c8e554f420",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "abb1c755-9256-484d-86a6-798a6dd273e4",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c3f110-fe6d-4098-9d06-31afdf2a28cc",
        "cursor": {
          "ref": "54427ece-fd7a-498f-b877-8ddcd6ae1986",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "13d1ddab-6e73-48b4-bcf7-095a387857d8"
        },
        "item": {
          "id": "d6c3f110-fe6d-4098-9d06-31afdf2a28cc",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "70b9493e-6e57-4225-bf36-45f48c350c23",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-10T00:39:49.077Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-10T00:39:49.077Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "95376816-b567-46e1-8122-1731bc066c9e",
        "cursor": {
          "ref": "77cc0407-b493-448c-93ef-209de6b8b54b",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "eb326ab8-e2dd-4492-9407-a7753479f9c4"
        },
        "item": {
          "id": "95376816-b567-46e1-8122-1731bc066c9e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a2b8eab7-bbd3-4bf7-a47e-01a9dd96850c",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e89f6161-f3fa-4030-9a8e-b0837bbdc63e",
        "cursor": {
          "ref": "6d3c4799-a5c5-429f-be25-486d171e37f1",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "5cacb900-e1e5-48c5-b00c-48ec183ed9d7"
        },
        "item": {
          "id": "e89f6161-f3fa-4030-9a8e-b0837bbdc63e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "57c5204c-4152-40fe-97ae-d47b443044aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69adbc21-95aa-4c02-89ed-f2eb5a57539a",
        "cursor": {
          "ref": "cbd4e2ef-39e1-467d-9d2e-46798c9c91bf",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a9b35a1a-52f4-4a00-a6fb-3d0279d0dfa6"
        },
        "item": {
          "id": "69adbc21-95aa-4c02-89ed-f2eb5a57539a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7269dc44-f078-4d6a-8d74-4da594e74559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b6a8b8c-520f-4de2-a873-996363f226e7",
        "cursor": {
          "ref": "231576ce-121a-4b67-a77c-733b1b91f19f",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ae2ab63f-1cb8-466f-9536-e459e47ca7d1"
        },
        "item": {
          "id": "4b6a8b8c-520f-4de2-a873-996363f226e7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "bdc9c8b5-d3e6-4ee5-8512-a08e3291ef7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6493a78c-dc20-4a1c-8261-ecde469e46d7",
        "cursor": {
          "ref": "f662c2d8-f8b4-4411-82d2-e28401074ba1",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e4531ea0-ee1c-4839-bd48-e789224d675b"
        },
        "item": {
          "id": "6493a78c-dc20-4a1c-8261-ecde469e46d7",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8c16bb16-4c5f-40b7-a65b-1ff4c378b81c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d8235b8-5c2a-4ddd-a41e-6deb59b3788a",
        "cursor": {
          "ref": "117792db-21ab-485b-b1ec-350ddb4443c0",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "88fb94d2-0dd6-467f-abe7-e9c250eff550"
        },
        "item": {
          "id": "3d8235b8-5c2a-4ddd-a41e-6deb59b3788a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8155d6ab-6a27-4601-8e9c-be0476ad7693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18f85dbe-a2ca-4864-9e93-6854872a9c61",
        "cursor": {
          "ref": "f948a028-2101-43e6-9143-17efea8d619e",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f7efd7c0-8210-428f-ab79-d524f94484b7"
        },
        "item": {
          "id": "18f85dbe-a2ca-4864-9e93-6854872a9c61",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "26386624-3320-402d-8146-afa709a32ba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f64c9b02-dee0-4540-a6e2-4b26b6c19bd0",
        "cursor": {
          "ref": "c9b46282-7cc5-47f7-abb8-b8c5574c38e6",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "be40b4a6-5cc5-481f-92f3-34493d1d3ca4"
        },
        "item": {
          "id": "f64c9b02-dee0-4540-a6e2-4b26b6c19bd0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a815a3b3-27ea-46ce-8f1b-25d52ff5f5eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3294032c-d99b-4bbf-a5f3-c5df38936c84",
        "cursor": {
          "ref": "9998c500-df05-4f74-8b65-af0dc7e22b2a",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "0704c353-9aee-47e8-a7aa-13e6c1b0f521"
        },
        "item": {
          "id": "3294032c-d99b-4bbf-a5f3-c5df38936c84",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0ebcb515-8d2e-4b7f-8665-831554208337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acbdf3dd-6975-499c-9ce1-91bc5675503a",
        "cursor": {
          "ref": "dee66c12-02bb-41e7-8533-083bf158973e",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f21a2d41-1c1b-413d-87c6-759cd691ee4b"
        },
        "item": {
          "id": "acbdf3dd-6975-499c-9ce1-91bc5675503a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9cb39480-3835-4c47-9ece-b7c4d732ebd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd1e18ed-3751-43d8-b8e4-a89bd66bedb2",
        "cursor": {
          "ref": "543df836-643c-4756-8688-207c28375fb0",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f6b43f3b-dd7d-466f-ba64-4ae402a99c6f"
        },
        "item": {
          "id": "cd1e18ed-3751-43d8-b8e4-a89bd66bedb2",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5ba1b769-4f53-4c10-9618-199514430a0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84290a01-5fd2-46cb-821f-efe8059a9b15",
        "cursor": {
          "ref": "c8ec31f2-9f7a-4318-98ed-53c82841ddf6",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "9a00e149-c02f-4f29-afc8-f19c17f06643"
        },
        "item": {
          "id": "84290a01-5fd2-46cb-821f-efe8059a9b15",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4384dfe9-fd10-4220-a4e7-177e65f5aa40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a0d48e-dd6a-4111-bb3e-c21d35153e34",
        "cursor": {
          "ref": "0d249886-b6d1-44c5-a8bc-e56dac80463f",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a8ea7c14-d82b-4f13-bd2f-0c8381beb601"
        },
        "item": {
          "id": "c2a0d48e-dd6a-4111-bb3e-c21d35153e34",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2742387d-8e43-4fd9-83b2-d2651b1d05e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb7b05fe-3639-47d0-ae06-950ced130f7f",
        "cursor": {
          "ref": "6d29edff-23ee-420b-8ca4-8d67d9447abc",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a20739a9-fac4-4ec9-970e-2bfb757c8db7"
        },
        "item": {
          "id": "fb7b05fe-3639-47d0-ae06-950ced130f7f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "fa6cc7fd-0045-419b-9284-52b840a25638",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40e60e24-c830-476e-a6f7-9e34a9f81f46",
        "cursor": {
          "ref": "5cf62231-b7a4-4663-88a9-4eeb7ae1aca1",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "1de2feac-f2ff-4803-9711-fda15e4ca2f1"
        },
        "item": {
          "id": "40e60e24-c830-476e-a6f7-9e34a9f81f46",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0121640b-18f6-41dc-af38-7e69af7ac0f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "ae15a654-3828-413e-8ccb-a3d1a8798159",
        "cursor": {
          "ref": "67f7ec98-7ed9-407f-935c-879032f6935c",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6154a8f5-0cda-4465-94f0-00f66bd2aa04"
        },
        "item": {
          "id": "ae15a654-3828-413e-8ccb-a3d1a8798159",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9a74de85-b20f-4a95-96df-1f483953f173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbfcb3c9-1d09-4624-91b2-5912955e37a6",
        "cursor": {
          "ref": "9687425a-615e-4a3e-8777-38a6d75939f7",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4ab2ef1c-e6df-48a7-bd74-e93f5f5657b5"
        },
        "item": {
          "id": "dbfcb3c9-1d09-4624-91b2-5912955e37a6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "edeadd2c-e18f-460d-bce0-72aaaab3f864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "595b880d-273a-4e2c-acdd-fa19961b0cc5",
        "cursor": {
          "ref": "05b5739c-fb45-4730-9e87-e00ceb3f43c4",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "d7320140-8da8-4c13-8614-3812e70f1513"
        },
        "item": {
          "id": "595b880d-273a-4e2c-acdd-fa19961b0cc5",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6b789ac7-169c-4d78-81d3-6d39918539d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac8dbba-b0ed-4f99-8ac3-240f840b3ac1",
        "cursor": {
          "ref": "3776d25a-6540-4059-943d-877e1b85662d",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1918d59c-e7f7-4969-8e19-cb6d87d26977"
        },
        "item": {
          "id": "8ac8dbba-b0ed-4f99-8ac3-240f840b3ac1",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "87fefca2-c63b-48dc-a62e-6711fa91db1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "604e27dd-5017-40a8-9358-bf210ae29430",
        "cursor": {
          "ref": "6727a8aa-e886-4435-9662-b4cf4ad2a269",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "19d10729-de40-4b16-80b0-8e89cfbec875"
        },
        "item": {
          "id": "604e27dd-5017-40a8-9358-bf210ae29430",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a84641dc-f4e4-4e16-bb01-1853e02df7c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a76e4707-6e66-4598-9bcc-3300d8286d7a",
        "cursor": {
          "ref": "473c6987-c72a-401b-8ba9-8c004f02a041",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f52f1821-42b5-47e6-a747-705dbbbc5f2d"
        },
        "item": {
          "id": "a76e4707-6e66-4598-9bcc-3300d8286d7a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8c4b1426-5228-4125-99a1-c5f6433a2561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6402ddfd-1118-4f65-bec0-c44e4239e6e1",
        "cursor": {
          "ref": "0a974c55-a8d8-4dda-a6f8-0da5243771aa",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f39686cd-817d-4fbc-88b3-a8371cad1e22"
        },
        "item": {
          "id": "6402ddfd-1118-4f65-bec0-c44e4239e6e1",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4dd0563e-2b60-4216-9dc1-c2abb52259c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef3bb5bc-aeb1-45b8-882e-a759a21802e7",
        "cursor": {
          "ref": "bd21f5da-e354-4db0-b9de-e6d330622992",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f4d46f60-826c-4e2e-bf0b-05b25f3a968c"
        },
        "item": {
          "id": "ef3bb5bc-aeb1-45b8-882e-a759a21802e7",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "48b70c63-ca21-40f0-bebb-b76015768964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9545d593-98b4-4bd0-b3ca-12f8a0c420b8",
        "cursor": {
          "ref": "53cc4be8-13e6-4ce7-99e0-7454dc3871a7",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "51c38ed3-7a0b-4dbe-9f41-6ae4b21d0a9d"
        },
        "item": {
          "id": "9545d593-98b4-4bd0-b3ca-12f8a0c420b8",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "46b0a2ed-87b8-4c26-b0c2-ae7a235887bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83b50dde-426c-43c2-867f-59af53c97557",
        "cursor": {
          "ref": "392a9803-88ae-4517-b727-2e58b4cdb5dd",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f960c337-2eb8-4d7a-a8c3-d664d9995085"
        },
        "item": {
          "id": "83b50dde-426c-43c2-867f-59af53c97557",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e81c34c9-e510-404b-a1ff-0422985c405b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7253913d-bc2a-4cce-906c-e7fd9aa69948",
        "cursor": {
          "ref": "7a1e0eff-a1eb-4771-9859-0bda5568a476",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d687c454-29fb-4a01-b0c8-a328de3e5d0c"
        },
        "item": {
          "id": "7253913d-bc2a-4cce-906c-e7fd9aa69948",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ea247482-55ea-4806-b3e7-2524ac073879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c9acc96-2d90-407c-ba78-7a0b07380cf2",
        "cursor": {
          "ref": "6fb724af-9961-4750-958e-ec3db4437fad",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "dd0f2bf8-f053-4502-98ed-e243cbcf0263"
        },
        "item": {
          "id": "1c9acc96-2d90-407c-ba78-7a0b07380cf2",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e0e7e96b-d26f-4434-aa68-827f6b886a86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97700952-ab89-4e4a-859f-8c0cd774f5b1",
        "cursor": {
          "ref": "c1f3c42b-c702-4a54-aaba-3f9a006231a1",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1a46bd3b-8488-49a0-97fb-c0e780af5601"
        },
        "item": {
          "id": "97700952-ab89-4e4a-859f-8c0cd774f5b1",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a70101d7-4e8d-44d7-b3ce-8b73a00e68f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9055272e-7a46-4caf-8866-9c8e40f046fa",
        "cursor": {
          "ref": "f565071f-9c11-4d7f-ae8b-1e8bc642c8c5",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d2c48167-5cd1-4cf2-b1a3-ac112d49467c"
        },
        "item": {
          "id": "9055272e-7a46-4caf-8866-9c8e40f046fa",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "bc63c3bd-2b5e-43f0-a1e6-0cc6d2afee15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb0748e-008a-412d-90ba-6bebb174be13",
        "cursor": {
          "ref": "026f4ba5-1025-4815-8879-e2308494ab7b",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "de10ff5f-5a6b-4308-b0cd-38dfda28dd1a"
        },
        "item": {
          "id": "7eb0748e-008a-412d-90ba-6bebb174be13",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "89fe0065-2296-456e-9c7d-e791ffe43ad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a212776-6118-4fc1-a62d-349101928a47",
        "cursor": {
          "ref": "adb9cd3d-9927-4142-9fe5-627ce689a738",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "a9f19962-d45b-4622-afac-d43376618d38"
        },
        "item": {
          "id": "6a212776-6118-4fc1-a62d-349101928a47",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9b95e66c-6229-4ecd-8ce9-280c3ad24256",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a958c94d-0506-4e53-bb00-1b59aa25603c",
        "cursor": {
          "ref": "a1ed668c-831e-4815-9c1b-cf1d7e8b7ef3",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "402295c4-c909-4424-a005-fc0b6998a808"
        },
        "item": {
          "id": "a958c94d-0506-4e53-bb00-1b59aa25603c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0bb3148b-3e85-439a-8155-97317309e1e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97259358-8a94-4c99-8086-afc751eee057",
        "cursor": {
          "ref": "d4459685-44df-41ab-a04e-cdae57c9bcff",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "7ae4431d-aae7-40f3-8cdd-febd0eb563c1"
        },
        "item": {
          "id": "97259358-8a94-4c99-8086-afc751eee057",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "82d5e3e9-0835-481f-a0cf-b4976d10f63e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3694131-4b4e-4602-bc03-316e8e8aec28",
        "cursor": {
          "ref": "de202963-c3be-4f2f-8ba5-b4262caeed4c",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "8a5b906b-2e85-4bad-9c2e-e0edd8ed4c9c"
        },
        "item": {
          "id": "e3694131-4b4e-4602-bc03-316e8e8aec28",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "8747f333-57aa-4397-9ce7-f23015cf46ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f111f67-b70b-4d7e-9701-ada5394db485",
        "cursor": {
          "ref": "22a160ad-8b17-44c7-aefc-9eda52e0dcf9",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ed398c8f-c619-4517-ae1c-5e01dc593195"
        },
        "item": {
          "id": "9f111f67-b70b-4d7e-9701-ada5394db485",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "83771ab9-b9d8-4cda-bd8e-c2f681a26011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b739d490-979e-450a-9baf-9ed36cfe3d17",
        "cursor": {
          "ref": "1a0ed209-03e8-4c5c-b6ff-677ea3be1634",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "73fc4619-f242-4f73-b37a-1a465cc04c2b"
        },
        "item": {
          "id": "b739d490-979e-450a-9baf-9ed36cfe3d17",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "6ca86ba5-4a49-4717-8235-2ab7aa3a5000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1bdcbb8-4f33-4dff-9585-493dce28c860",
        "cursor": {
          "ref": "9db5419e-b082-4dd0-820a-da80db62b4e3",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "665b4f4a-5bed-41b1-93a4-fc03ef4b6ec3"
        },
        "item": {
          "id": "a1bdcbb8-4f33-4dff-9585-493dce28c860",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "67a0de03-fc76-421b-810e-2c57c09fb372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8113b75-a1e8-413b-9f57-3ef4f53dbf54",
        "cursor": {
          "ref": "5795743f-e029-4f93-8bc9-c6b09c7dbe11",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "33e6e688-5dcb-4a82-9a82-271f2caed0a1"
        },
        "item": {
          "id": "f8113b75-a1e8-413b-9f57-3ef4f53dbf54",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "e186e040-7605-40ea-b125-26dc266583d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db38f400-0e15-49b4-abb4-d0e18719e152",
        "cursor": {
          "ref": "0008d188-ba3b-49ab-9992-760fe292d71d",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "0358d441-ef1c-4a07-b9dc-f97094634c7c"
        },
        "item": {
          "id": "db38f400-0e15-49b4-abb4-d0e18719e152",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "045e1f8a-e7c1-46c9-9fc4-aa3bb7fde7ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e3bc0c2-8427-4ef7-9cd0-f7aa8e7d5a62",
        "cursor": {
          "ref": "738e1543-c3af-4052-9e29-28623005185c",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "804c3f59-9d91-44fe-9121-ac50d03a3e96"
        },
        "item": {
          "id": "4e3bc0c2-8427-4ef7-9cd0-f7aa8e7d5a62",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "af5c5ab3-9485-4e27-85dc-96ed9ffcdfda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2277397d-380e-4494-95ea-abd0f2f7db90",
        "cursor": {
          "ref": "12980b35-9052-4542-a519-96d957f017c8",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "45bceea1-b502-445a-a7e8-37b567a780a4"
        },
        "item": {
          "id": "2277397d-380e-4494-95ea-abd0f2f7db90",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "72afcc62-58ec-468a-91a6-777c840e67f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75c76f44-5a48-42b1-aadc-6229c1c05f37",
        "cursor": {
          "ref": "799b807a-df0e-4523-b339-8655fcd98c98",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "1bb98bfa-4290-479f-bf05-af9862559429"
        },
        "item": {
          "id": "75c76f44-5a48-42b1-aadc-6229c1c05f37",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "7856df59-4636-4931-80ee-2fa541b897b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8330715-5203-41d5-b89f-fb7fb46dd37d",
        "cursor": {
          "ref": "5d552ead-fd6e-4b9f-923d-0bfd9d69664e",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e38eab1d-832f-429f-808d-1d87d7d39bce"
        },
        "item": {
          "id": "a8330715-5203-41d5-b89f-fb7fb46dd37d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5f74300a-f5f0-49af-8787-c2be06de41e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e83d558-156e-4e51-9b81-3591c0212b8d",
        "cursor": {
          "ref": "0f60d1eb-3e7d-42f1-a398-21b2dc8d4085",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "6a171872-c591-4a9a-8f1e-22cde578aeb4"
        },
        "item": {
          "id": "5e83d558-156e-4e51-9b81-3591c0212b8d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "4b3acb89-3e51-47c4-af2d-8e67ba3fd0aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb8f945-663f-4369-8673-6548766393b0",
        "cursor": {
          "ref": "e0117012-faf8-4a48-8e0b-69e25dee33ec",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "8531d944-fd7e-4067-98a5-2ddcd7628f1f"
        },
        "item": {
          "id": "deb8f945-663f-4369-8673-6548766393b0",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "cf97eb2a-29ec-422e-a4dc-9a8545d658bf",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "fafd3ad8-9bf2-4daf-8e7c-da431e8bbc5b",
        "cursor": {
          "ref": "f49e2a20-5c5c-496e-a399-fc7b1beb5862",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0f6ffbdc-66f2-4f2b-8bf8-c92aea2f5565"
        },
        "item": {
          "id": "fafd3ad8-9bf2-4daf-8e7c-da431e8bbc5b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "44283554-3cfa-474b-9797-be26f74e2a91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53561085-61bb-467c-9276-3f3651a4a4ee",
        "cursor": {
          "ref": "d4869f41-fd0f-455b-b950-1a24a488cc5d",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "cd9b8c86-2ca5-4b55-a34f-4cad631bc787"
        },
        "item": {
          "id": "53561085-61bb-467c-9276-3f3651a4a4ee",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "697fc27b-6e41-4ab0-9544-92d423079967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0273baf-9af7-43af-ac5f-ce121aece18d",
        "cursor": {
          "ref": "3ea7f0da-804c-4ed0-ab6f-e81ffca9190a",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d4cee8ce-157d-4569-b969-4473ec518708"
        },
        "item": {
          "id": "d0273baf-9af7-43af-ac5f-ce121aece18d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ebdc9bac-735d-4998-9875-a62d284a90f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1f22c5a-1bce-499e-ac51-48c3c772e91e",
        "cursor": {
          "ref": "eda392f3-29b2-422e-b2fb-f5088e7994db",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c766c479-9c49-46cc-9a14-453c2f33d882"
        },
        "item": {
          "id": "b1f22c5a-1bce-499e-ac51-48c3c772e91e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "744ce7f1-11b9-4f3c-b18b-2c4fac93ac95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "919cb3ae-d44e-46b3-9dd8-8b2d8e3536bd",
        "cursor": {
          "ref": "baba63e2-464a-455b-8ced-b530205a6f59",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "ba70b941-451e-443b-a371-c11a327312e3"
        },
        "item": {
          "id": "919cb3ae-d44e-46b3-9dd8-8b2d8e3536bd",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "ae3e202e-9c42-4643-b129-1a4c25000c96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf826862-1ff7-4874-a39e-41ccf7f2a836",
        "cursor": {
          "ref": "01559add-1485-4e06-b71e-7ba98a3c54ab",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ded16f84-3b87-4924-b826-8f4638c39fb5"
        },
        "item": {
          "id": "bf826862-1ff7-4874-a39e-41ccf7f2a836",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c92f52ce-fc55-404a-8807-401131ae6657",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8044c4e9-bca5-4df1-8689-0a390a153a7c",
        "cursor": {
          "ref": "fb54fbae-72fa-4de2-9063-e72358168b1e",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "2a97ee90-3a22-4774-8331-f648f6e30200"
        },
        "item": {
          "id": "8044c4e9-bca5-4df1-8689-0a390a153a7c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "bbc06fb1-c8c2-476e-bdca-6e80c729f328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59e7bcc7-78fb-47e0-8ed7-906399022698",
        "cursor": {
          "ref": "2387781d-390f-4362-a963-6cab679b3278",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c2c79de1-7d8d-4b9a-847c-b605b6464a2d"
        },
        "item": {
          "id": "59e7bcc7-78fb-47e0-8ed7-906399022698",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b0639ebf-d920-4c0a-b074-792ee22818a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62fd941a-0e38-4987-aa8f-cb481129a3ad",
        "cursor": {
          "ref": "9538228f-394d-41b2-a292-89937501e201",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d6773e7a-a6b3-46d7-a649-a3908d65b75e"
        },
        "item": {
          "id": "62fd941a-0e38-4987-aa8f-cb481129a3ad",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2e4d2057-f556-4ee6-a0d4-847a017259fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "563ec2e7-1c33-495f-bd94-42f45378cf91",
        "cursor": {
          "ref": "094756bd-4dd9-41ab-8d35-58397bc779b0",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d015816f-5dec-47a9-b0cc-e3e55b422158"
        },
        "item": {
          "id": "563ec2e7-1c33-495f-bd94-42f45378cf91",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "80fd629c-4307-4c7e-9f77-030a879d5cb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8798a0a8-5e5d-4ef5-87b5-f14c252a566c",
        "cursor": {
          "ref": "de7cb73f-1d09-4d1a-8a00-16fc729ced59",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5026b854-5aca-4407-b457-b7b3689eb815"
        },
        "item": {
          "id": "8798a0a8-5e5d-4ef5-87b5-f14c252a566c",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "23e77d41-d602-4fd7-a6a5-4fbfe2a7bbcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1d2f21e-8300-419c-aaf0-4255bff6a418",
        "cursor": {
          "ref": "3010b5c2-919a-4470-8e5d-8aa1f175fe8c",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "0a44a75f-d547-4172-9587-dc7bd78445e2"
        },
        "item": {
          "id": "f1d2f21e-8300-419c-aaf0-4255bff6a418",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "311a4cd9-7722-4ffd-a5e4-c79143d2bff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7434a447-aed4-425d-a8b4-2b3a4dc92932",
        "cursor": {
          "ref": "466f6912-de0c-42b2-8042-6cda8ced6b8e",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8c8211f5-b6a4-4131-8c83-9bf7b4a06e69"
        },
        "item": {
          "id": "7434a447-aed4-425d-a8b4-2b3a4dc92932",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f2eab926-75fe-4590-808e-647583814bf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2d99011-4666-45aa-b481-cd08e2062b33",
        "cursor": {
          "ref": "248aed20-bee0-4b7b-9a6a-ac18a4654b24",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "4f5b7dda-92ee-4987-bdc8-f0ae271e0c68"
        },
        "item": {
          "id": "b2d99011-4666-45aa-b481-cd08e2062b33",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6a6b4a59-f85e-40d1-9d6b-c88e97760ebd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ee3ac20-b4f5-4962-bb9c-4a97630eeefc",
        "cursor": {
          "ref": "669ba5e4-a309-4931-8c8f-b0bf318c9ffd",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "2e19add3-4e34-4774-9d77-f5f971a23e5d"
        },
        "item": {
          "id": "9ee3ac20-b4f5-4962-bb9c-4a97630eeefc",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "8009c64a-1ffe-430f-bcc1-407e4f7757a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf31be89-e20f-4589-8c03-d2fd86279e9d",
        "cursor": {
          "ref": "6bac1715-71a3-491f-a577-99d8fb9d264a",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5e0068c9-7c9e-4967-87f8-d8797c982e69"
        },
        "item": {
          "id": "bf31be89-e20f-4589-8c03-d2fd86279e9d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "bea74c37-849f-49d5-b7cb-588a9915484c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "721509aa-0a9d-4881-b344-bc47dc44bbc3",
        "cursor": {
          "ref": "6a1b86a7-d0bb-48c6-896a-df080ddf791f",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "7d9ec1ea-37e3-43b4-ae98-3cbe99a49890"
        },
        "item": {
          "id": "721509aa-0a9d-4881-b344-bc47dc44bbc3",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "ba8a26ff-36aa-4661-a6d5-969fc8cda40e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "981ef3fb-b50d-424c-b415-cd7dfb53ea46",
        "cursor": {
          "ref": "a2c2d139-5fdf-4424-85df-bd617c32e804",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "5fe25719-c5ff-4510-aa92-0e62173494f3"
        },
        "item": {
          "id": "981ef3fb-b50d-424c-b415-cd7dfb53ea46",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "13223489-f376-4241-ae51-b5904ad2738c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d350a08c-1c8b-4637-b64d-6e75d0a5322f",
        "cursor": {
          "ref": "09ccd8d6-d790-40e7-8b0c-a6354e74d92a",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "963274cf-38c1-432c-9f72-e7149e213be9"
        },
        "item": {
          "id": "d350a08c-1c8b-4637-b64d-6e75d0a5322f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "70c5fc3c-de21-493d-9d6a-7d4b0f293699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7c59323-1f75-45e1-8969-faf8f2e9d0e1",
        "cursor": {
          "ref": "84552472-45c5-40ec-a664-b804aa0cb867",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d3b6dec1-5fb8-4dfa-bfd3-ba03310434f7"
        },
        "item": {
          "id": "c7c59323-1f75-45e1-8969-faf8f2e9d0e1",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6e5f01dd-e5c5-49aa-b76a-b4fc5e4bbca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e08e7af-05a8-4fa6-9e66-6eff10d3f572",
        "cursor": {
          "ref": "e8ed5c0f-84fc-4a48-94db-d255efb2e3c8",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f555d80e-49bb-4483-afd0-dedc892ad73d"
        },
        "item": {
          "id": "4e08e7af-05a8-4fa6-9e66-6eff10d3f572",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "a226c8cf-a1c0-41ec-b308-1750cc1ea573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b58266f-234a-4d48-8207-e23deeae9a8b",
        "cursor": {
          "ref": "f88bc60f-ae2c-44e9-b844-aec17eea9f9f",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "f1897155-1a82-4d8c-bb46-07c3ac9813c1"
        },
        "item": {
          "id": "9b58266f-234a-4d48-8207-e23deeae9a8b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "27f5d71a-d504-4060-aa5e-67dec3afd098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c32690b0-a1f4-48c9-af60-b721253b121d",
        "cursor": {
          "ref": "b08aad75-d34c-4e31-ac98-b42a2067ad83",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "7acd3628-6f3e-472e-b4c0-3ae7d01c6f2b"
        },
        "item": {
          "id": "c32690b0-a1f4-48c9-af60-b721253b121d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "39f36a85-a7f6-4ad7-928a-25ec028e2797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d8a2fbe-a0fe-4b1b-9492-3682828a69d5",
        "cursor": {
          "ref": "de60d204-9693-45ff-ae14-328d05c7df6e",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "ce413aff-9688-4175-a364-d49e0ca2650d"
        },
        "item": {
          "id": "9d8a2fbe-a0fe-4b1b-9492-3682828a69d5",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "8975add8-6fec-4944-a25c-5f119f02a0f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22b9dd9f-f1f7-4aa0-9793-9e56c710953c",
        "cursor": {
          "ref": "cb5baacb-ebca-4985-a6ca-a02afbe4c7d3",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "ee06191f-f040-4cd2-9b44-5524f27be6bd"
        },
        "item": {
          "id": "22b9dd9f-f1f7-4aa0-9793-9e56c710953c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "282b01c8-1146-4b4f-8502-3e4ea7800b9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae9a3045-e401-451f-bdca-e82d408dbbdf",
        "cursor": {
          "ref": "3d3ce54a-a330-46ed-93e3-1b897564b086",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "04ddaa08-a9d6-48f9-8805-929b682a0915"
        },
        "item": {
          "id": "ae9a3045-e401-451f-bdca-e82d408dbbdf",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6e8639b0-1bcf-4f4b-bbe6-e7f60f606246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9cef09b-5262-4b0a-8b14-66ed269f5c52",
        "cursor": {
          "ref": "63cdf4d4-08bc-4e33-9f62-b132ad69b5d3",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f1c080d5-1a5c-422f-b7a2-330bcc22303b"
        },
        "item": {
          "id": "a9cef09b-5262-4b0a-8b14-66ed269f5c52",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d5221064-d96f-4f0a-a1e9-bb6edf92dcd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "674328e2-6a6d-424c-8a10-dfe90266e5ec",
        "cursor": {
          "ref": "f227b96e-daeb-4ecf-90b7-4fa022345ab0",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "5b545330-1eb7-420c-856e-d7c62589c69b"
        },
        "item": {
          "id": "674328e2-6a6d-424c-8a10-dfe90266e5ec",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a69928f7-df46-40bd-87ef-502938ab8dc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24fddad0-e218-4d73-a592-7deb91a77e4b",
        "cursor": {
          "ref": "dc18fbed-698d-4505-b98c-da773d547259",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d2bc37ce-ce2e-43f1-8752-bc6927f42a48"
        },
        "item": {
          "id": "24fddad0-e218-4d73-a592-7deb91a77e4b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "6101bcfa-ef65-4a3a-a5c2-24e0b2827f8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65fede57-79f5-405f-aa55-b32bbfd206f3",
        "cursor": {
          "ref": "df862273-df77-4bb2-92ad-f30d3eb9360b",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "8e5b1d0e-b4ec-4784-aef3-67df773cc300"
        },
        "item": {
          "id": "65fede57-79f5-405f-aa55-b32bbfd206f3",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "593444a2-e9fb-4335-88c1-4d5a950905b5",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "94605fcb-824d-4bfa-bae2-38f99823a8e2",
        "cursor": {
          "ref": "61d88c17-dbeb-464a-bb18-3d80bbd57e46",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "533cab3a-5e52-43e3-9343-a754d190e4ea"
        },
        "item": {
          "id": "94605fcb-824d-4bfa-bae2-38f99823a8e2",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "f46d20f6-d968-462f-9002-f7bb4aeb0214",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "e4228242-05ce-4510-93f5-83bcf2d88ae1",
        "cursor": {
          "ref": "00709460-40e7-4145-8d2c-f3d9aa0da118",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "e1b91f03-3669-4874-a40d-9051fd7477cc"
        },
        "item": {
          "id": "e4228242-05ce-4510-93f5-83bcf2d88ae1",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "709a8eaa-0d38-4fb4-b6ea-b68b64118d23",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "d41d0b3f-d7ab-4407-a55a-cebead5ad07f",
        "cursor": {
          "ref": "63d168a1-72ba-4ec5-8bd6-e7325c7feee6",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c52b96a8-792d-4753-99fe-1910b31de704"
        },
        "item": {
          "id": "d41d0b3f-d7ab-4407-a55a-cebead5ad07f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "4de883e8-18c5-4e6e-b9f6-4ff3370f66da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abc10b21-c08f-4f70-9739-80751bddfba3",
        "cursor": {
          "ref": "aab02c83-54e4-4208-bf3d-67f479f63400",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d334a4c2-dd4e-48d3-adca-1ce36cbfff10"
        },
        "item": {
          "id": "abc10b21-c08f-4f70-9739-80751bddfba3",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "bf6f9180-fd31-4aa2-a914-a3954d687c3e",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "2f37f03f-1887-4a53-b01a-5058b97d4765",
        "cursor": {
          "ref": "1d528253-5c50-4617-96ea-084b11199e32",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "fda65abd-4242-4b0f-ba8a-89c52641a249"
        },
        "item": {
          "id": "2f37f03f-1887-4a53-b01a-5058b97d4765",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "e94d3ffa-9e27-41a9-a8a2-971646881576",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "e4c68a78-6549-4e8f-a06d-6d87dcd07203",
        "cursor": {
          "ref": "d8907803-7ab9-4344-a2ec-746f4457f168",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "438aa22f-8c17-4733-8bf9-8b47b9112c0c"
        },
        "item": {
          "id": "e4c68a78-6549-4e8f-a06d-6d87dcd07203",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "53b7d8be-ed0e-4352-91f4-7a10356490c5",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "9347a873-b33c-4168-9abf-8a29b26e45ed",
        "cursor": {
          "ref": "6782fb62-2739-4061-8a62-ccda72e6d09e",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ac5103ea-72c4-4eed-a5a4-32a80d90afe4"
        },
        "item": {
          "id": "9347a873-b33c-4168-9abf-8a29b26e45ed",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "9bd99867-4103-471f-b4a9-ac00ba59aba7",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "ba1f3510-fbeb-4bf4-a29d-5bc392f1d533",
        "cursor": {
          "ref": "745e2d26-1b9e-4320-8f43-6c88425b1bc0",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "b78a3a33-ee6a-4878-9fe5-f03463f6d542"
        },
        "item": {
          "id": "ba1f3510-fbeb-4bf4-a29d-5bc392f1d533",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "26428694-5ead-436a-9f78-83ed3739addf",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "556cedc3-44d6-4da2-94f4-3dd36bc8e0fc",
        "cursor": {
          "ref": "c4d8d8ac-fbfd-48e0-8b23-e6c90aa54ea3",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "6d303c82-49d6-4059-b0bb-57c697f99c0e"
        },
        "item": {
          "id": "556cedc3-44d6-4da2-94f4-3dd36bc8e0fc",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "248b6cc4-a9b4-4f18-b8f3-dfabe9b17b15",
          "status": "OK",
          "code": 200,
          "responseTime": 208,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "d5ea4841-817c-4969-9cbb-efc10ffe30f0",
        "cursor": {
          "ref": "38a1f246-499d-4afc-bf5a-d3d9588f9229",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d79fa26c-e969-4cf6-8951-91abe3ee8b1b"
        },
        "item": {
          "id": "d5ea4841-817c-4969-9cbb-efc10ffe30f0",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "12fba439-ac7c-46b6-9bb5-f5502b42788d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eefb2bbb-b20f-4443-aefe-f1e1b14ddb7b",
        "cursor": {
          "ref": "a8d10939-aa5a-450a-935a-7ba0c8a3a4e1",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "48a0d494-f296-42fc-b7d4-47edcc8897b5"
        },
        "item": {
          "id": "eefb2bbb-b20f-4443-aefe-f1e1b14ddb7b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f7782b46-36d3-4f31-b48b-83e242a9fdef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ec2814-92b1-4334-aaed-9a528b299303",
        "cursor": {
          "ref": "2eed45c0-78cc-40d3-8b08-246828c3fb7c",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "959f1b31-f959-4797-b173-88ede16b44e1"
        },
        "item": {
          "id": "14ec2814-92b1-4334-aaed-9a528b299303",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "7b370d30-9baa-40f1-ad74-8d189cb98c17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c6ba3a1-bf58-4137-b65c-ce3e1a7c562a",
        "cursor": {
          "ref": "cf59b9aa-053c-4789-bc5d-558b067e37dd",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e68466b9-738c-4349-b882-1cfeb42e2f63"
        },
        "item": {
          "id": "5c6ba3a1-bf58-4137-b65c-ce3e1a7c562a",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "50de2391-1fda-4d32-a9a3-afa8be1b94dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c68164f6-9d43-40f7-9eab-572f6b9eaabc",
        "cursor": {
          "ref": "ee14bea0-eb70-4cda-aa8b-76b104ae88f3",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "35249d29-3c02-4329-90e6-60631b2b020d"
        },
        "item": {
          "id": "c68164f6-9d43-40f7-9eab-572f6b9eaabc",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "5de9ead4-6236-4885-b5fc-9ceb0f9192f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82033265-c471-4d89-8641-0261fc256c4c",
        "cursor": {
          "ref": "7493fa0f-d413-42a7-95dc-8762e9992cbb",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "37b09704-6c45-415f-9e2b-b48c10ec58f3"
        },
        "item": {
          "id": "82033265-c471-4d89-8641-0261fc256c4c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "9870f128-c7af-43b4-ad47-91670ae3e2f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15371f0c-0f49-41ab-842f-de115a424096",
        "cursor": {
          "ref": "739d3bea-1c66-4e6f-a965-2d99b5e473e5",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c5c84715-4905-4f7b-bf5e-6fe66e2d2e12"
        },
        "item": {
          "id": "15371f0c-0f49-41ab-842f-de115a424096",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2f7f14a8-c569-4bd3-85fb-94e5fd1c2d2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5d39c6b-f0d0-482b-95e4-0f863ab16c9c",
        "cursor": {
          "ref": "404c02f5-2031-422e-ae8e-f24705f94cd5",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "cb09626e-d798-4124-b5c0-3c9d5e8b4477"
        },
        "item": {
          "id": "d5d39c6b-f0d0-482b-95e4-0f863ab16c9c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c554f018-2204-45d8-b562-02e79b50662a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90198a2f-2515-4578-a12e-a385f4588549",
        "cursor": {
          "ref": "cf7ef074-bbf3-4283-b010-aa80a7d33d8f",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e83be72f-8f17-48e1-b555-ea9f2d715d68"
        },
        "item": {
          "id": "90198a2f-2515-4578-a12e-a385f4588549",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a1983e72-c3e4-41c7-91da-87481ebd8464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "071e6692-26ac-42cb-8d82-3f1dc38a030a",
        "cursor": {
          "ref": "4958c85b-5d3e-4423-a5b7-2a3f228a0990",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e5cadcfd-e6c9-499d-aa19-7242cc172380"
        },
        "item": {
          "id": "071e6692-26ac-42cb-8d82-3f1dc38a030a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "d11e3bbc-dd25-4e0c-97e8-0b93549b4cef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7992e039-cced-4757-850f-d594153496c4",
        "cursor": {
          "ref": "0440c172-a90b-4f54-ab10-2bc7fad45b3d",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "dd785037-5060-418c-b710-adb4745164d5"
        },
        "item": {
          "id": "7992e039-cced-4757-850f-d594153496c4",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "de3c829a-5ccb-4bf0-9ec6-945d3ca6f4af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "051def2b-456e-4be4-904c-c001f41321d8",
        "cursor": {
          "ref": "8bb4ac40-9aa8-438e-9ec7-b186ab8f024e",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b3538036-2c97-4cb5-87e0-7f0af8994e69"
        },
        "item": {
          "id": "051def2b-456e-4be4-904c-c001f41321d8",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a02616ba-bb0f-4612-bd73-b8bf22e36579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ba98950-7ba5-4f75-a7d8-e6e39a07f026",
        "cursor": {
          "ref": "0236c44a-d282-4d34-90b0-aef2cbd587ac",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "2c2bdb75-b388-4049-a5da-bcd5c4345d0d"
        },
        "item": {
          "id": "7ba98950-7ba5-4f75-a7d8-e6e39a07f026",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "8d4c18be-c41b-46e8-8ecc-d7176d94fab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "110d5cbd-bbbb-4600-93fb-07c28a64e4ab",
        "cursor": {
          "ref": "da48eb5c-c3cb-4e4c-a4b8-5f9ce33b180d",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "fe837e81-1018-419b-8301-6e2267508b89"
        },
        "item": {
          "id": "110d5cbd-bbbb-4600-93fb-07c28a64e4ab",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "1f383df2-4581-4f66-8ffd-027391951b11",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "331705c4-e6c7-40f6-bbdd-280b0cfd952a",
        "cursor": {
          "ref": "d7d0e558-ffbb-4999-887f-bd3b6eed3c9e",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c44dcc51-67dd-4925-9b99-83196e4ed034"
        },
        "item": {
          "id": "331705c4-e6c7-40f6-bbdd-280b0cfd952a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9bd10147-1620-4804-a4e7-04734600ca54",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "8a79f4eb-a6c4-49b3-aea2-c9eb9c2aa8c7",
        "cursor": {
          "ref": "77d6ea3b-b432-47a1-b081-e3342ae767f5",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "418ac4a7-169b-4c46-8dcd-a188d2785c0b"
        },
        "item": {
          "id": "8a79f4eb-a6c4-49b3-aea2-c9eb9c2aa8c7",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "0ac23770-6470-48b9-883b-1a998d38882a",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "bbd3c25a-5fcc-415e-a519-69f3edc5fdc5",
        "cursor": {
          "ref": "49433843-7b8b-4faf-a6d3-975907e4ed3b",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e5525c77-7df8-4927-9367-f702163e699a"
        },
        "item": {
          "id": "bbd3c25a-5fcc-415e-a519-69f3edc5fdc5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "154a6990-117a-4a60-882c-ab271e07d246",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "4eb28e35-060f-4687-8d09-2831ddd6bc13",
        "cursor": {
          "ref": "40251056-8fe2-48af-bc82-f5ea7ca2e908",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "9a9891d2-3458-44dd-89a8-96cbe18e8394"
        },
        "item": {
          "id": "4eb28e35-060f-4687-8d09-2831ddd6bc13",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "39a67ab8-6d88-4352-8189-9b1db1753fab",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "863b2ddd-bc28-43bc-a381-b3b2e52eb1b1",
        "cursor": {
          "ref": "3ce8f950-62c7-4f12-bd20-938302c9be92",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "f6ddf340-b0f3-480b-912d-e9ca336b002e"
        },
        "item": {
          "id": "863b2ddd-bc28-43bc-a381-b3b2e52eb1b1",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "302bf497-b798-4f38-abc9-8374635eab86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c656d5d-953e-4911-a77b-9905be534360",
        "cursor": {
          "ref": "08f6f996-afa6-4479-9488-d63620c2ca6a",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "761a0495-a875-4ca6-8f2e-0097db524e92"
        },
        "item": {
          "id": "8c656d5d-953e-4911-a77b-9905be534360",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "73c4fdf5-4b4b-494b-b536-8ca3b36d9004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b448e17a-84be-41d5-aafd-3f95c34d04c9",
        "cursor": {
          "ref": "3b09cfed-db6c-4ad8-9954-cb51608983d4",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "0d4cb24e-f30f-4fcc-8432-d3d9ba89c4b8"
        },
        "item": {
          "id": "b448e17a-84be-41d5-aafd-3f95c34d04c9",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "479c085b-a10e-421b-8873-d0557bf9df6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "145259b1-9e95-44f5-9f51-1315af7c4391",
        "cursor": {
          "ref": "b9a48e27-4283-40f8-a0dc-4b5c17a2cba8",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "783685eb-77ef-4662-8255-4e90c1ff1459"
        },
        "item": {
          "id": "145259b1-9e95-44f5-9f51-1315af7c4391",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "32d4f9ea-3f49-43f8-9a89-845c83fb3ae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e89c2f2-8c00-4776-b06e-afdd53887857",
        "cursor": {
          "ref": "9054bd5f-74d9-4c02-97a0-ac584e5b7f5c",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "98d1f835-865f-443a-94fb-eca3b4eeac5e"
        },
        "item": {
          "id": "9e89c2f2-8c00-4776-b06e-afdd53887857",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "273ff603-c320-4842-9c57-c3170b4b4a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86756f68-2dff-42cd-adab-42505234a001",
        "cursor": {
          "ref": "5c1c8f57-3310-4801-b2ad-8f9f1e83517f",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "7143e76b-f11b-4314-b769-358130725850"
        },
        "item": {
          "id": "86756f68-2dff-42cd-adab-42505234a001",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "0c710f5a-6093-41c6-88b7-e8d69c02adcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77d5a13c-55c7-40dc-b2a8-bf089ff35489",
        "cursor": {
          "ref": "bcf097c6-cfdb-45a7-bb89-b148f68910c2",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "35e0814a-09ea-435c-b9a5-ec9c7b3286ae"
        },
        "item": {
          "id": "77d5a13c-55c7-40dc-b2a8-bf089ff35489",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "34b4195b-b172-46fc-abbb-413956faf33a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a5c57ea-d08b-4817-85bc-87e15d3b9b50",
        "cursor": {
          "ref": "b00e9645-dc82-4ad9-9191-74bd5be3fd68",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7d182a00-b460-4543-ba55-65e8ed32c83d"
        },
        "item": {
          "id": "3a5c57ea-d08b-4817-85bc-87e15d3b9b50",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "5fe4a150-1338-417a-95d1-68736a26aa2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c0ae9d-668d-4c75-a678-b4bf763094c8",
        "cursor": {
          "ref": "0425a269-5a67-4b1e-bd3a-62a648b57575",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "4ec12827-8971-4f76-a622-c336750adf4c"
        },
        "item": {
          "id": "20c0ae9d-668d-4c75-a678-b4bf763094c8",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "949c8333-5417-427d-ab81-250192596415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45496581-3ecc-4f6e-85a2-a5cd58ffe08d",
        "cursor": {
          "ref": "bc3dd612-46c2-4294-952f-e00f10dac1dc",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a1d24ea3-1309-41cf-8714-dd5e250f840e"
        },
        "item": {
          "id": "45496581-3ecc-4f6e-85a2-a5cd58ffe08d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "6f40ed33-72c0-4dc4-9dbb-ad738fbbec13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9df7ff-8506-4ea2-8d09-ea05f1068e8d",
        "cursor": {
          "ref": "0bc5dcf7-f4d2-46ae-9064-d271d3c6aaf5",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "be21b0ec-ff59-4434-ad18-e18501075997"
        },
        "item": {
          "id": "cd9df7ff-8506-4ea2-8d09-ea05f1068e8d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3555256a-6fbe-4ad4-8be2-755353ade7da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d20d75e-f92e-4ebc-905d-17cd7ba1a772",
        "cursor": {
          "ref": "82bca110-1eae-4c3f-bb39-36318555039f",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "e5bf87dc-af51-45e3-96cd-443b4cb9e144"
        },
        "item": {
          "id": "5d20d75e-f92e-4ebc-905d-17cd7ba1a772",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d07cea70-3165-4dd3-b2d2-5274a04c2b23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca77c7b-0d55-4acc-ae28-bb2414cf6e1c",
        "cursor": {
          "ref": "26972b22-5cd7-4523-8581-4ceff7d5cd89",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "521b775e-cfb8-449d-a376-3814a2a189c7"
        },
        "item": {
          "id": "eca77c7b-0d55-4acc-ae28-bb2414cf6e1c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e877c2eb-1df9-41b8-a486-ac88f52b1599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "612b6704-ef01-4cd4-b0a6-e63530ebc41e",
        "cursor": {
          "ref": "90344843-91ab-4ad7-8147-810c908d5fc0",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "6c02139a-ba03-4f32-926b-16562d150d81"
        },
        "item": {
          "id": "612b6704-ef01-4cd4-b0a6-e63530ebc41e",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c670a31a-ab92-4428-ba74-94909ee5b18b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f45e4f29-0ca4-4f60-b096-1fbd1976fb08",
        "cursor": {
          "ref": "51f09327-8900-4d4e-8094-b0438ec4cd41",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "444d78e4-b193-48c3-a610-a0f05d49464c"
        },
        "item": {
          "id": "f45e4f29-0ca4-4f60-b096-1fbd1976fb08",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "df220cc3-8f18-4b60-8814-c7f4fe5e05f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e0aee59-d01a-412a-a360-b3d4e5f210c6",
        "cursor": {
          "ref": "43503aad-233e-4ad5-8d7c-d0b4abcd29a7",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3fba6f62-ed0d-48fb-969c-4e6d03824610"
        },
        "item": {
          "id": "6e0aee59-d01a-412a-a360-b3d4e5f210c6",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "6a91b7e3-72ff-4376-bad9-abf8443c9781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d60a4b03-981a-4f9b-a087-637e61f47e22",
        "cursor": {
          "ref": "d157af62-6f94-4fb1-b283-22bc8afda133",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "3a085147-ae9f-4d3c-a82e-5060f7ff80e5"
        },
        "item": {
          "id": "d60a4b03-981a-4f9b-a087-637e61f47e22",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "16d2a7e0-54c7-4c37-a4a6-473c85df11a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc30cb65-cf55-495e-b3bf-ed7148783f6c",
        "cursor": {
          "ref": "0d3d8ec8-6e02-4cfe-835d-9764ac90e7d6",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3370b174-5523-4b8e-a893-40b4ce75f4e4"
        },
        "item": {
          "id": "bc30cb65-cf55-495e-b3bf-ed7148783f6c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ccd46e1d-9405-4b8d-b5c0-b86e0a8db407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1823d21f-6a14-4b43-a98a-8f9321160e1b",
        "cursor": {
          "ref": "830879a0-5bc2-4bb0-ba40-b69852951f0a",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "82d2386d-e9d9-45b5-b028-1460083df7c8"
        },
        "item": {
          "id": "1823d21f-6a14-4b43-a98a-8f9321160e1b",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ac2a8e42-c58f-4628-9fde-ff9f1c75a87e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a9e5c5a-46fa-4f62-840b-5e1b54fa3eaa",
        "cursor": {
          "ref": "2a822119-a241-45e0-ab40-f9fada43a747",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "fb4936d0-2dec-44f6-a7e2-fb712adec795"
        },
        "item": {
          "id": "5a9e5c5a-46fa-4f62-840b-5e1b54fa3eaa",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "604607dd-dff6-4a3b-9859-6d68f6af0a80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edbb12cb-99cc-407f-b7d6-dc65ee8cb9e1",
        "cursor": {
          "ref": "c05f036d-0e81-4e34-8749-4fade1616b5f",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "06746d6c-496d-47f1-b285-d1791057a901"
        },
        "item": {
          "id": "edbb12cb-99cc-407f-b7d6-dc65ee8cb9e1",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "7e468d37-3cbf-4e5b-9310-c1249da32232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da0380dd-6c90-436f-a78a-590fb1c3442c",
        "cursor": {
          "ref": "ed0c4323-2806-4d3e-87d6-962502f80200",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "8cdd7126-eacb-4fed-aa23-2d4a13760cf6"
        },
        "item": {
          "id": "da0380dd-6c90-436f-a78a-590fb1c3442c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "3f4efcc9-8d40-4572-9958-e99e2aac5bd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "218cbbfd-6e97-496a-b94a-e2c3691f7aac",
        "cursor": {
          "ref": "f1de15c0-3271-41da-aabd-430268b31236",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "8de7cbd6-1a8b-4fce-a379-edf2bfe164b3"
        },
        "item": {
          "id": "218cbbfd-6e97-496a-b94a-e2c3691f7aac",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d20128c9-0a7c-46dc-a1f8-aed041c7edbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00b06210-13e9-49e8-8008-62c467c57296",
        "cursor": {
          "ref": "12ff87b7-8a94-4cbd-aad9-fac733b93f49",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "bf471d71-626f-416b-ab24-2e30901dbdf9"
        },
        "item": {
          "id": "00b06210-13e9-49e8-8008-62c467c57296",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a6b29500-7e94-45ac-a97d-2252efba1df8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7f4fb08-255a-43bd-85c0-df0df40242c9",
        "cursor": {
          "ref": "bc7707c0-2020-4b6c-bcce-865720aa73d1",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "87fcaad2-6390-42fc-bf64-1c61407b0faf"
        },
        "item": {
          "id": "b7f4fb08-255a-43bd-85c0-df0df40242c9",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "10c97952-ccd4-4188-9377-5335205b5e1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c58c70b-f539-4c84-a2e6-31be917f6692",
        "cursor": {
          "ref": "077c339c-1155-48e5-9631-02905ef63c75",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "1e87af6a-df7c-4fce-a375-3816df00ec94"
        },
        "item": {
          "id": "5c58c70b-f539-4c84-a2e6-31be917f6692",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "176603b4-f2c3-4710-960f-119c55076ff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29ecd735-de79-4b21-9a5a-400a73a8da85",
        "cursor": {
          "ref": "d72188b8-f8d4-4e57-a58d-08cf60a8088d",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "bf83c83b-36f0-4ad5-a637-84a9c6ac2132"
        },
        "item": {
          "id": "29ecd735-de79-4b21-9a5a-400a73a8da85",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "5a828443-0dfb-4eb2-8b6f-1bc2e7fea116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71c3ed73-ee3b-48a5-b38c-b2dfbd624337",
        "cursor": {
          "ref": "a1ace43c-d1ca-401c-b9e8-bb65ddc8594c",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c10156d5-c653-4619-8c8d-0b1ab566cfff"
        },
        "item": {
          "id": "71c3ed73-ee3b-48a5-b38c-b2dfbd624337",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a8eab3b4-cfa8-4ce5-a688-882d3a1fce1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "440d4d93-7f9b-4a28-bff4-8a4fcc8d7978",
        "cursor": {
          "ref": "1609b8de-822e-41e3-996f-be65b572d494",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "7cd56fd8-d75c-4c9e-8bfd-99ccb9dc690b"
        },
        "item": {
          "id": "440d4d93-7f9b-4a28-bff4-8a4fcc8d7978",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f6c01e08-7267-4e48-9ab0-1289af9feaa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e40a38-a0b7-4b69-9481-02d2b222ff4c",
        "cursor": {
          "ref": "7dd19604-c4e2-4497-9de1-c8351cd0c420",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f45c8760-b244-49d1-89bb-8b58f7510326"
        },
        "item": {
          "id": "20e40a38-a0b7-4b69-9481-02d2b222ff4c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "c33bf2ca-a0e1-4d67-ada7-eebedefbb103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b70bfec9-504d-497e-b854-4ae09ffcff7b",
        "cursor": {
          "ref": "ed1d098b-c169-46f6-9fa5-9d5d9e00ca70",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "2c3c5cbe-c742-4d07-a794-9c3107dbd2b4"
        },
        "item": {
          "id": "b70bfec9-504d-497e-b854-4ae09ffcff7b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "8af35dfe-bbec-42ff-a08f-d7b0a34b5522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ac7758-897c-4107-9208-9ef4687dd4a7",
        "cursor": {
          "ref": "c746622e-1486-44df-a046-c1500617fe59",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "9b23e0e2-676a-4793-8648-c76a8d99f0ea"
        },
        "item": {
          "id": "e5ac7758-897c-4107-9208-9ef4687dd4a7",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "e5c854c4-a120-4fc4-a3d2-4e4c6c7e697b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b80fdfc7-f558-4dda-8547-db15e9d19c39",
        "cursor": {
          "ref": "0ecf6277-8df9-46f7-9e65-f3130ddf5433",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "873db0f4-b1e8-4b15-9b17-3aa8f60b3125"
        },
        "item": {
          "id": "b80fdfc7-f558-4dda-8547-db15e9d19c39",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "edcb3109-d781-452e-9f51-4248a4d5eea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f3fd7c9-508f-499e-9b7f-e96c9ff42791",
        "cursor": {
          "ref": "a8fdea0f-b7f7-4db5-b044-21fdb1e6ec83",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "dc1c2592-6244-4af1-9063-ff2bcd59fa79"
        },
        "item": {
          "id": "1f3fd7c9-508f-499e-9b7f-e96c9ff42791",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "b42d0562-0a41-4e1a-b113-3ac22c835862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc1441e4-9dea-45b6-a6c8-b488c8901bbe",
        "cursor": {
          "ref": "0a124ced-dc43-42e5-9080-85ceb3ff01a2",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "eb1dccbb-63ee-4618-9fb3-e34bd574fdca"
        },
        "item": {
          "id": "cc1441e4-9dea-45b6-a6c8-b488c8901bbe",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f4953327-e322-4a36-bc68-8d24fd5d765a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e16e0e58-dc27-46d4-a104-2f2d8ff210b0",
        "cursor": {
          "ref": "e5456baa-94c7-4d79-8c4f-471aaf1977c7",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7f918b89-0a09-404e-8fc3-4d20f627245f"
        },
        "item": {
          "id": "e16e0e58-dc27-46d4-a104-2f2d8ff210b0",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "8b8efa21-a96f-4768-9969-6620c2b40dff",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "4e2cbd1d-2039-489b-8105-538254c07bca",
        "cursor": {
          "ref": "fbe9e338-a7b0-46f9-9ab0-534f408d3170",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "bf117ab5-8cd4-4b33-aefb-a3d434ef27c8"
        },
        "item": {
          "id": "4e2cbd1d-2039-489b-8105-538254c07bca",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ad73821d-6755-49db-87b0-9070b565e4e1",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0e143ad-cb9b-4ac1-8fd0-cae596d37e8b",
        "cursor": {
          "ref": "29f048e4-091c-456e-ba1f-3971b54cdd75",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "81d8d884-bafd-4a36-b7dd-23a23300b8da"
        },
        "item": {
          "id": "f0e143ad-cb9b-4ac1-8fd0-cae596d37e8b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "bf9a956d-8b14-4a9d-bcd8-18ca94e5a8ef",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0f3fc77-3444-4624-bea2-f50ea70ca1db",
        "cursor": {
          "ref": "9ae071d4-c483-4e50-a897-400d78e43947",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "27cae51a-17ec-46fa-ad1a-4cb1811cd5c0"
        },
        "item": {
          "id": "f0f3fc77-3444-4624-bea2-f50ea70ca1db",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ae85e12a-836d-46e2-9167-1ce59cabab6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0f3fc77-3444-4624-bea2-f50ea70ca1db",
        "cursor": {
          "ref": "9ae071d4-c483-4e50-a897-400d78e43947",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "27cae51a-17ec-46fa-ad1a-4cb1811cd5c0"
        },
        "item": {
          "id": "f0f3fc77-3444-4624-bea2-f50ea70ca1db",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ae85e12a-836d-46e2-9167-1ce59cabab6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f66fa7f4-6585-441c-8e18-1def647f4646",
        "cursor": {
          "ref": "9e5100a1-d7f3-4736-8984-c401461aa25d",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c409a854-ed51-4f46-9ccd-d3a18276ca5c"
        },
        "item": {
          "id": "f66fa7f4-6585-441c-8e18-1def647f4646",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4a89cd09-9df1-4c7d-80e2-ecdadb190c8b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9bb5169-8539-4924-9495-5567f93b8dbf",
        "cursor": {
          "ref": "fa738b82-7617-44e9-87dd-2779ba636c59",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "d5504535-5734-4359-b981-e28497cac4db"
        },
        "item": {
          "id": "b9bb5169-8539-4924-9495-5567f93b8dbf",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "87168246-9b68-4cdd-b299-8049ebc482e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}