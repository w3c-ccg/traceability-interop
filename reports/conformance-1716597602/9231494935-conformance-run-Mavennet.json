{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ff4e39c3-ce68-4363-8347-4747c4089ba1",
        "name": "Clear Cache",
        "item": [
          {
            "id": "20496ccc-9257-4f53-b97b-a74daaf50fa5",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0b03ee08-cbc7-4140-9d6f-874d4adc5f80",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "808e92ba-3159-49b1-bde9-0316224033d8"
                }
              }
            ]
          },
          {
            "id": "de185381-a9b6-42f8-82ad-2e64363f5e0a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0e8fb362-8e1b-4779-a7ef-fac8fe4c0d32",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "960c52ca-4ae6-41ff-848a-16065649b721"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e124a84e-2c11-4a96-815d-ddf07f517548",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1208934d-9984-41b7-b678-98a191457ebe",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e3794e91-3cfe-4e5d-bd6d-6e4fbc791121",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "751ba077-c71c-4208-bb4c-4a65303b681f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8e523931-779c-4aa0-943f-eec955e5d0cc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a661216a-08e2-4be0-887c-1da3fc4318b4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "baf87c30-d49a-474b-a2e6-f71b047bdfb7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7226644a-733d-4f5e-9c35-daf7e0c231b7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a1f6b3f1-436c-479b-82e8-d08e79b3d4cc"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d904b0f2-f748-4ee5-8b06-47a5c81c2eae",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "50998ac9-a15b-42a7-8538-214dbc9a7634"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "884fff6f-49c9-4bd2-a35f-e5880d737aa2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bce9e6aa-d6ca-4ab4-9e26-2d880e2743d6"
            }
          }
        ]
      },
      {
        "id": "fb8c922f-21ae-4654-9f48-ce135cee7141",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "a9c82bcc-36c2-4ad7-906f-4364faa382fd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ea497bc5-7726-4000-8c3f-1e7a3bd31b95",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ec6f6142-2d52-45d0-8285-99115d3357ce",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab2fa5de-46a1-4192-b1a0-0d7920f4452c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a206dbc0-130e-448a-a2ee-46998fa62e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b8d597-1387-4636-8b80-f3053c0130a1",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b107ade9-63ab-4af4-b417-dba87a121b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "24fad331-9f20-4723-b26d-aaa0a39e2a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf9d393-beab-426e-9cd7-784e686991ed",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "202e0c46-ec70-40c8-9113-887b61dbc755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c1b53fcb-1b2b-4bcb-aa5b-56326bc70525"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ab7b7bc4-9e97-4b4e-84ee-9ab5edaf1567",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7ead6065-6753-4cb3-b4b6-28db86b17626",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4f4271b-6ecd-4f71-9c15-84a993898aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0eee0d9d-05c3-43bd-a59b-c470532b9507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f6d54e7-00a2-4392-a925-6b0ad36e9b4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6228b201-fc74-4628-8b71-2ac8cb10b03e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c09dbee1-c14d-4698-9f57-fa4b2f19bb8d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e0e2eb39-d4d7-4880-afa3-4158bfbea726",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3057758f-e140-4144-aa6b-d5179d93a905",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "84ba5357-569d-4de1-a3bc-c630ed051cd1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "69756e14-f89f-43fc-8a7e-29635b11b95b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "a2a86205-db21-402c-b134-8e2c8e739768"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e713ba02-f3e7-4f62-aebf-f558b3b89f0b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8b053439-067f-4d69-b63e-db18342cde7e"
            }
          }
        ]
      },
      {
        "id": "6140815a-737a-474b-8c20-f5b38fee350e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "94962dc0-85a0-4d48-a163-bb07ec113f9f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8eb1c7d0-69d5-4512-abeb-6e39453ad524",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "d6bd77e0-a879-49b0-8b52-f6aed1d992c9",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe5f2b7-ceb4-49f3-bab2-2a38c2a72d50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be736187-6bfc-4d2b-bd64-479464defa9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df21d5e9-fba0-40d8-a604-85a4686c67fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "35e17172-a066-4c7a-ab53-8391fde69adb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a100ba77-73d5-4249-9823-c59cc5e074c2",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9023e392-6319-4058-911b-91819f360279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "507ec5ce-2889-4671-b388-8ca11b2eaf45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a1cdb61-78de-4bcd-a43e-c10ae74907e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "44bfa6b5-990e-4d67-8ead-110754ada446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40d5779c-1654-4486-9358-f040f4f48c2a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "041bcb96-c23b-4705-972b-033e1552b9ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9359a685-5ba6-4fd4-9be2-7f738ffa3203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8548ae3c-640b-415f-8cdc-65554dac8837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83d5784d-2370-48f8-9aae-568a0662b873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4bbe02-e746-434b-b2dc-89b81141403e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d36e386-709b-4a86-9fa9-502564fe6da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9654696c-a0ab-4523-b5b3-561957fb9bec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c40f01-cc5e-4789-9766-751eb7cf1e74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92fb33ae-2902-45d1-b293-2334deae5887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "197f3fe4-2c1c-49fe-9de0-a8a73fe29e57",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9c29872-c025-48eb-ace7-eeda8cd56e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a8931e4-24da-4112-aeda-d2b286746fd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a180bbe6-c34b-42e7-a484-36d3570fb9fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "226198be-3cb6-43ac-a65d-3f1b81916cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "071022e6-9368-4f94-a75f-856777a353e8",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39eba9eb-a578-424e-90f2-8e5bae4e09ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "016ad169-13be-4416-a3d1-539e57e1508d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deec1148-bdf7-4f42-a6d6-7b1b65d74b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0672ff66-44dc-4d49-ac13-4ba3a0753eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b51d3711-8238-45c2-9d39-c73983472e30",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6fa7e90-cffe-42e4-8cbc-7ffcc02c77b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a1380aa-ccae-431a-8415-09ccf292d390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77ad8526-fdc4-4561-888d-8255e11e54b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b26e42d0-5aab-4d3e-924b-0dc8c384ad0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c1b71af-4221-49c4-91fd-f1ea59e8a2a0",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc9e14ca-03a9-4925-85e6-7c5def02f795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86c23915-c3c1-40b0-89fa-0ac59941c6f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b9dcb69-3364-4144-871c-c2c455e942d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e77666a0-f44a-43d9-994b-afca9898805f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef19d608-41f7-48e8-ab6a-13b0d88d263c",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cfe9632-6c2d-47bd-b85a-7cc2203ec6d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff66cd9a-b02f-45f1-94f4-6174f360190c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2861c313-24b0-4c53-9127-25b8217d589f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9a6854ed-1d93-41d3-92f8-d23e35750ec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5aa6ee-0f0d-499a-a745-fb19c05e8637",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72402986-a783-4c29-82eb-c18cb8c91376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7e33aa7-7421-47b0-a286-17c1271fcc92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a85a37f-b295-4dcd-9d2b-3b07fb310695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c819d97-ca49-47cb-b03d-9e274fe4c91d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a6ad920-385f-4abe-afa1-5fa55b2358e1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "609274d4-566c-41d5-a29b-a6e4b4317e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d8fadc3-5adb-400b-867e-33ec9b862bc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdb79560-ff27-414c-b563-c55e73391cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "320e3e43-6fcc-4dc7-9bec-dcae69ad4bd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41671c48-771c-48d5-b8b9-3ad8138cc904",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c32867c5-1e23-43ad-966c-15a42cefcad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49409ad6-185b-45a5-949e-96342c9d8e11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cab3e0c1-053a-42b0-acbe-e0ce99eb34e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c827cfba-95ea-47a3-bd0e-37ea0b06302f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39795e32-cbcc-4566-b09e-267a6ae0f140",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af9d25f8-b781-4515-ae19-6130e1cbee77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c54eb66-8380-4cc2-bcb5-46a753da1418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86cca5d2-9e53-4824-a7f4-f77f69fe70ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54358e74-c161-4632-ae85-a65a50aa1668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bce2a879-ef46-49e3-9c53-f6ca70099c26",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "370ff2b4-6961-4a6b-a274-e16aa6221c50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be5c8e8b-4d00-494a-94a6-4963d276a607"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba6a7aa-8a4f-419d-b5ad-4b339580071f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db275a85-cadc-4d88-a69a-51016b098a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fedb1b6-d0a7-4a12-ba9c-88dce0342d2b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "465057fb-5f17-4ab5-a4dd-ffe314c6a5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5fdf64c-874b-41bc-8709-d30cac88c922"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5039f58f-37f5-4e72-b0f6-20da501a91e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ebd9508-b7d0-4c8c-a74d-24a345679411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "888b76ee-2aab-4105-b332-61252e87fb24",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54368be6-ae86-4ff3-8e4d-6ac8201b6126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23f320df-cdef-478d-a43b-4b6c095a3729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d2cc8f4-77bb-4afe-a812-7e724e766e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea3f45b2-1336-4045-b67f-f8cb1be24043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f286b1b9-e502-4c65-a551-d592d28f0f82",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a4de42-ae38-4035-89a6-744d86b685a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ff61d78-5a33-4247-b160-bf1e09296b86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02471cf5-1acc-49b1-85e7-7c21c3707592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3bd82076-546b-4111-a320-52f7e0c081e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d899818b-4ff6-4d5b-bd44-15646833e8ac",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30ab6196-0752-4083-8e66-defb1c2f9a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f002bff-ae8d-414b-89bc-b6bc172ada4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda2904b-fa85-4990-9d62-1c4f37635de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "73cccd3e-fe69-434a-bff3-ed2cb3f46a8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "397e6174-b3e8-446b-b1c5-aae3bd1bc014",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2306c5a-8ca1-420e-b396-3e052b8856b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "246e506e-65c4-45a6-af50-7292effa607c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87da341e-c880-493c-a46f-ceb46446dd29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8072eaf-1907-4a8e-a0f1-ba34b9167ec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec8d1954-438d-4736-9979-be636065c50c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f06a1679-c6ec-4229-a106-6476a7729a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dedc80c-a4c8-45b8-a345-64d592e18ad0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "431d16fe-dc4e-421d-9eb2-c2f2580780f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b79f9b30-29a3-4397-aeed-4213772afd15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6390df6-f22a-4473-bad6-607100a56521",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "160c0363-1e46-47bb-9b4f-924eeab9e675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14a4a4d4-5fe1-4542-95c5-a9c288c44a4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eea35d6-9d98-4598-a558-192180c83952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "57ee9580-92a2-4b9f-81dd-4e19c7bfae70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa03834c-d886-4f46-8449-3bf7f9b36d7c",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff316641-685f-433d-8ab4-b18a4ca5d21a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba13d8e4-3c1a-48a5-aab8-5c4f3ffdb028"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95f0a563-f9e8-4e06-b5a8-8cec2e15909b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "34379dfc-e95e-4fd8-afb5-f8aa93140292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e4e1bc-1254-442d-bfa4-6d8201ec827e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cab54597-4597-4d58-8180-9db84e48579d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "add364f8-613b-4c26-8de5-0272f1367e31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20134a96-70c5-48ad-8c78-6479b458388d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "21fcff7a-c9d0-4322-8de3-fc898c523165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ec82a9-bfca-4aaa-a004-f65c12562a6b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75753ae4-7aff-4843-a746-a49baaed72e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c6df19f-525d-41b4-bf15-28814d6ed4f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a89f51c-b752-4fa5-8308-d6451cf1feb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "67ecdefc-e55b-4f11-92cb-186d3e96cd11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e293df6-e0ea-4d03-9a6c-2090bb8829f0",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db130613-0b95-4f9b-91bb-9aedbd7ae429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb026106-e557-42a0-8f63-80a2156c5bae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f18ef0-a11e-46dd-9aa9-3e48b1b53cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "32870a9b-e8b8-4bdf-b3eb-0966b1f5a4ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d18f2e1-20ca-4ac6-9cbb-f81fc2e569ae",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba9dcbd-efae-4e06-bd58-f121193b35bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44fdb168-d942-402e-954d-474faf06f8a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2f1a4ca-17d1-477b-bb37-d61337060971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3b81388-a966-4730-a5f5-51e8ccc3d1b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6366ee3f-1f5f-4547-b625-c387d1f3534a",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6822040b-5d78-4e1d-ba6b-0de37072a247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c9f3f2c-7f2b-4dfc-b9c2-09d8eee57758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62622930-a6f1-46a1-973a-e6848d050e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cad1052a-ae38-4263-b4a8-73638283d26e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "153216e0-752f-4a03-9625-251b7a127504",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b5c8a98-d905-42bd-ae55-17d25ef9c467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "616c70f9-5a4c-446c-a26c-e6d57818c8d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f760cd-884a-4fc9-9a73-a58517af7855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "56f6c3d0-9687-4a61-97c9-4b7cb5cfbfd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d00937-9f71-425d-b698-a186b83c8216",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d2b8467-056b-4807-836b-11ba364879f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c985a7a3-d4d4-4661-8ad5-c2a50ab5a788"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f69eae3-926e-4bdd-8ca7-2cf0033b2962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "38e576a8-6646-45b0-b571-a4b18c4f62b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b28b514-33a1-4f41-a554-1c1fe53d1fd9",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2db024c-b418-40dd-b4e1-b59bd80063b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a83a602a-de7b-4add-a06e-621c815fcb33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a626da-339f-4eea-95f1-77a0031668c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d044973-22e5-4813-bb51-23b04133b623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f891b4a-c985-4153-a3e8-d287d67534f8",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1650c6e2-b2a0-46af-9da7-dabd41e15a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ba1f528-6989-41d8-8e9f-d7dac034e6db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44f089e-53c7-42cf-8315-895fa613ca63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe2ceccc-74a0-4e0f-b2ef-e4ed9b57b426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa3cf153-e730-4a1f-bcb5-718cfc283ccf",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba378ab5-94d4-4b24-a8d8-213ed18fcce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "193598ed-7465-49fb-ae6b-c63abce85a33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35c65b0f-091e-4f5a-862b-691762339c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0767868e-cd8a-429c-a3de-0e4437246336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "892dec08-72b5-4a7a-8866-c70cb2c00718",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4747dfb-9a62-453b-b396-8a2678122d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "681ca79d-8a72-401e-a277-2807bf67d6c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1265056-3702-4e6f-a04d-0773edcf3905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "783f3bf3-83e6-41a2-b208-cafcafe049f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a90888-8a8f-4387-aead-107b9c5d9847",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ae5476-9fac-4fd9-b3b1-4de295b44a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bb50378-351b-4a7f-a833-e4f470ca6a6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "503dcfd9-9265-4051-acb8-ccb4ea97b5c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b7519bb-1dd5-4455-84f5-f9991fdcf3d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b714274f-58e7-4f46-8692-530783011ef4",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ece6dbb-b73b-45e4-a7cd-76a16fc45d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b90a2ac7-741c-46ee-973d-41ed51629da4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2341b355-ee37-4b3a-b20c-28b90cbc915f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "9902a818-ce13-4838-a5a4-6d9cee14d22a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f249d22f-ae6b-45e4-bf3f-356f44be4c50",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbf64ec1-b80c-4555-bb25-b4f2b90dad13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "78493db7-3ff0-478e-969d-b18831b9f027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e1aecd-fe0e-4c6f-9a18-a71830d21b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ad250c32-c0ae-4eb4-96a6-63ad3181bb6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ae06e4-6050-4ee2-b6d0-19f63a33b55f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da11909c-093a-4643-99ae-9884f1ef6e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc7b773a-d7e4-4f12-95b8-77e59fb56584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc1850f7-7099-490d-bdb4-191d265beabd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "82f58db5-4b4b-4529-8a15-af4f31ff5422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b227f49a-da8c-4059-8be2-52254f87a0d8",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2da64851-4c93-4337-a822-e50ee1cf5ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d33a8688-5e6c-43ec-b32b-425020e9b39b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a57db3-8a8e-4949-a171-c7b5caa4e0f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a71977f-9568-41ae-833f-d21d36654159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ee6b3c0-6440-42a5-bfbe-9e08490fb3d3",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05ffe26-fdde-46af-ad7d-c8097fe41123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fba0a839-0d0d-4e02-8ccd-acfa8d56738b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d39a8d-245c-49ad-a607-d87b0c5efc7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3bb8f2b-834f-4913-9e0d-331c0a49ac15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21f2b877-916e-4320-bd4b-b695abbf0e3e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "746217fd-e0df-4356-8ff9-e462149b8f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "889f9ad8-c38b-4ff6-ac9f-d53358bcfd1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91fd6009-dfde-4cee-8d4d-565211e488f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "510e0d2a-b866-4600-a7ba-90246207bf9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7be13258-0073-41d1-afe5-ad0320dd238e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abcb131b-9032-4838-a09b-958cfd5a5966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35e43b8f-5014-42c0-a80c-b826284c50ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2731f762-9e72-4f87-8120-e58b6235a770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "69b281d2-45f2-43ec-93a7-573c95634dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b45dba3-563e-426a-8bb4-d53de81182d3",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd6c8fc-9dfb-4f18-80b2-ebc70ddd3223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c398884-3240-43da-b55d-c8280ac220b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca0991cf-1119-44e1-a767-f8d4f7d3e3d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "eee2b9b9-4554-47c7-a1ba-d4fcded9a92e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1330b0bc-9e8d-4e59-9d38-7b80ef1024e2",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b243989-ca30-412f-b2f0-c7fc846fa104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92988024-5f16-4ab2-8ca9-f51013d28a31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1590ad5b-c1a7-4190-8589-85e42c9e2663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "74cf5ea2-fdf8-4578-af92-c2cbe6ed3bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f5e31c-132a-4c89-b39f-899718972581",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb077488-6ed4-4717-86e1-445038451085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea3a22e7-f803-41a7-9934-3b21a02b0fd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a7555d-8f75-4a4b-b509-77c24228c848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a8d7ba5-24f5-44a2-8829-0aafbe965d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf15fa0b-52e6-483f-9daf-66e27a513ede",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "656b2bb9-0d24-40ca-8f68-7f970e463dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1613135d-9da4-41d7-804e-371d70069c79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a957c34-1d77-4bb8-afcc-f8e43ccdf5ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa68546f-39e2-49c4-b7c8-5fad30da0870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "639efc40-0cf1-426e-b403-cfad6cd46ec9",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a220138-3ba7-4723-b40c-4d46c292a9d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79b0a7c4-f714-4bd2-b8b6-fbe241c43187"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d363385a-92e5-40d4-b264-4d54faf72046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "96cfe97f-c4e2-4750-ba50-ed12b27f5994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfc3a8bc-8df0-43ed-a7a3-29db2a9e92b5",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73d94b59-5dcd-469e-9438-f7920e92fb83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5477be05-f8de-408f-b337-7e554e70b3c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3209bbf-8cbb-4d46-a3e4-95d7d748ad44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa1f70a5-05e6-44f2-8249-1fe630e17688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "422fd3c6-9571-4142-bfb5-81e8e6d55e48",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8e75fa-b5d2-4ed0-be27-d185b085c027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09449d3a-6f00-4d29-8d54-f4d6d6348da6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83dd0fc8-1f8f-466e-aff1-9d7008193782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6e4872c-a9b8-460d-ac69-952df16cd528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb1a9b5a-d1d5-4b32-aa8c-34a3b027bd9c",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e35bad4-f2fb-4e50-970b-46af8ddd3b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe64b4de-c748-45c7-848b-e6061b9d9962"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abbd7b91-eef5-4b85-903e-ea554f4076e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3273cbf0-f45c-4d80-8cc1-ee6e8c965acc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e7495f4-5146-4db6-884e-2855986ea72f",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4cbe93-c655-461d-9dbf-564849e5970c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "283b83e4-acd7-47b1-8686-660a050feab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ced2e104-6f0c-419a-916c-a4e9beae149a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cb0ea038-a5d0-450c-9fde-d68339e2ca0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1001ba-3f7c-4da7-b1b8-d2e306fc31f6",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e66f0bc1-a99a-40f2-b90b-e68afc3df057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a304b20-5777-4e3f-879d-568455a11fa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb1d4f9a-62d1-46f8-b752-e530004a0985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "41a30bf3-5b95-42f2-ac35-a521b2bfc8a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31286816-88c3-41ca-ab9a-86f3cbbfac54",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63819620-ad9e-4350-829b-64bab8c88cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa6d5d80-7e88-4ac6-8918-9dcecf8e52b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2205e419-b448-4c33-b244-6d699d3ce47f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d426685b-85b7-4e5c-a222-4ded3279c602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e3eddd-2fd9-48c9-9da4-2130add84ec2",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "218a6ba8-4342-4950-b6d0-12d7f13c1163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "506073b2-8595-467e-ab5d-113be65337f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01be7933-649e-468b-8637-61bbd9ac579c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "119c0bf7-bde4-453c-8157-71918d3a2320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d44bde9-3455-4b67-879c-542939203122",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3649b827-84f3-403d-81e0-3870906063f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8182bdc4-0138-4f73-9558-dff43843a523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f8f4aa3-2d91-412f-b1ae-9fe3f9b2bdc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e54c8d6-3f0d-4edd-ad22-977c7fc1f895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca26c787-7a96-4f27-b193-5eab702e12a8",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73546dff-5a98-49be-95e2-fe433c13f6cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d4bd865-68bf-4431-9151-52e19e80e83c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60de0531-82aa-463d-87d7-094f03346d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d7d7e74-5770-4d2d-802b-1a7d66216ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d88f5cc8-8373-42a5-ba80-6b3bb409d284",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11791c99-6909-4858-b2d9-86447a4ffd5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8d5818f-dd3d-4f29-8dd9-a9c559853363"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a61406-c56a-4d58-acc0-f63f65386119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "83d5ed55-00a0-4e52-8ede-3718a6ca2bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8523ff8b-a66d-4768-8b2a-662850eb26a8",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7133cd33-10ed-4f25-a371-1c310b381423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58cf36d7-08a5-4923-8905-22507529b51d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "764d522f-1f97-4402-9e29-695037236819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6240300c-d1bc-4337-bc6b-f72415959bc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4825082c-8e29-44c5-bed0-4fbf53cf449c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e639095-fc1c-4472-a7aa-84391b62fa51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfa60d54-2c0f-4cf9-b736-096cf79fbd15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b28a53ea-d40e-42fe-acc1-4ae8b5a9f125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3780a693-6c2a-494a-af17-dce761888aef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6311e118-ad81-4838-b5dc-a958da714cb7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d748f88-4d9e-4755-b004-7d551b73a251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "514e8c1e-6d66-492b-9d70-d70f5510f7da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e500283-7d1e-4344-b73f-c340f4059653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "507855b0-18f7-4dee-ace9-ddeba73b531d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "965804c9-2f09-4412-ae7e-03de33b280f3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb02979-5cdc-4c16-86a4-3aea438896cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb785901-0cf9-4042-b50c-32e413d024d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed3bf6a-74bc-4d41-9835-d67a4d8b36f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d0cea96-d8dc-47f3-a771-901d32f8648b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d73d8c1f-ff86-4c6b-8bbf-a57ba00958f8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f12cbda-1a85-479d-8111-d3556854edf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc295c49-da1b-42c7-9640-c8248d604bf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7845ebc-b0df-4c8d-8718-135fcb27b968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d4755dc-3d3e-47c0-b79d-d675acb3c70c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a45fd49-7a84-4ce2-8f26-e0d1decb037c",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "308d7ffc-b12f-4b8b-a1fc-49836ee8a9cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fafa0ad-bf73-4e49-8dee-1913a54387d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18c03831-87b5-4cfd-b73a-60cee31d605f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d79c596-e958-4c01-b7bf-e844920b8664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c651f59-2808-41e1-955e-d71cde729515",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b2b6fe-eff9-4ea1-8444-dba6af9e614b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30050cd9-cfec-4dc3-9d32-b76d8c31714b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d65760-89a1-464d-8441-a2e6f31dccc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "17b73b50-d0b7-4720-b65f-c0b64ae84544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "771707f8-5630-4609-81ad-753496198397",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b78a50f9-e91f-4a56-b833-29b3853eeab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c408610-1c4c-4a50-b328-6558c59cb096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc45e3e-1674-4c32-96a6-90eeb0ead35d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd6b06c1-673a-4a5f-a254-9ff122697c05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55bdcdad-9df8-4861-b463-908e3c05a291",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15afc7c7-da0c-4c20-9206-5ea6c084e360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab70ebf0-b957-4159-a6c2-3109dd3a292f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b383f89-bc8b-4498-ae2e-10d4a344ccad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c50b490-8df1-42b9-b440-04ffc4959a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaf591b2-b174-4555-af36-835d7ca64c71",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47df6644-a0c2-48a4-ba5a-49647edf3cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1219889-9dfe-487c-bbce-c56852a921f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc3c19cf-6fd9-4881-af9a-0d5668cf820a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "68cbf97e-a4b8-43ca-ba1f-fc80aa64230a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e75d52f3-7620-43e6-bf3e-0c75a4d598b2",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b74c0081-ea84-4fd1-8d84-66ce6eeb8726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4c60b9c-3147-4d8e-9b34-63789e736709"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8cbb242-b911-447c-8eb5-582af8add543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4b8e282e-c2ab-4320-aed8-65d01bda3c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b9c6e3-85cb-4570-8ca7-c4d553d63147",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4145cca6-cc19-47eb-9c90-22967ac2898b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "552042e0-0d8e-4520-84c6-74fcdd684569"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cdcb618-369b-4668-9c3c-146be5b332cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6264ceb-21b0-482e-a927-66a8ee16ea8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34c49040-6212-4c40-84b8-4f0eead55369",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c4db2b8-98ef-4f8d-a061-7153f145d26c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1f3badc-3e1a-4eff-ae94-38930d217946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c324d05-5ca8-462c-ab1d-9cf77a7b1ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd3f10d1-af50-4d79-af3d-53c998f16872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "980101d4-f0e2-496f-986b-7bc1ad388346",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88b6e7ec-651d-41a0-9e6f-4a5aaef3ea12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6c7d10c-3aec-4435-a957-35823b14b594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c651c75-ebba-40df-8991-36d46a6bb903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "97fdb409-3dba-428e-8920-ccb5b08be0e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d3f1803-6d3c-483d-b719-5d8322a17cd5",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0145f8f-a1e0-4b5f-b295-4b1c0e8a2f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65988b62-8b5b-4a60-9198-783b96f9d2a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f525bba-28d0-456f-9a82-f8b0a2d68299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4205628d-8a3e-4172-bd28-8851e533f5a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba12dbe2-759a-487e-a424-ce057d4612bf",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73b8e58-9dfc-4c21-a738-a6697e3f05d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "062f8383-0683-4b67-9d48-a6118f347b3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "169d3fb7-4f2d-4de6-b901-5ef522db70dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "00cc5fd6-fb02-4c77-a0ab-b99a9470a8fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a074f7-4c82-43a0-a62c-5dd7d1dd0839",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "664cecd6-4d3a-4952-9d3e-eae4446e2d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2c82b01-ee5e-48ea-954c-eac7f686153e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f945780-d451-49fe-b3aa-77e1233f1e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7821b5b8-1547-4708-aa82-696cd7ce8eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d9d9181-e852-485e-a6b5-84ad4aed6c43",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec46918f-afb3-463a-881e-eb9273069270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91cf3ac2-caa1-483e-87f2-04871d80ed14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c885ded4-0eca-4e40-93e8-507c2f545846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5baedc71-f084-45ba-a499-c25b6b109e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e87786c-9430-40fc-a3d3-c2f0367ad498",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4595dd40-73f2-4dcd-a45f-171af2f4f1b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f57e29e-07d0-4f4f-839d-96405ce5053d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52faecee-6f51-42ef-9b66-6afc60f5af97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "00a2431d-335e-42d7-9449-c10647bd38fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61700010-17fa-4f1a-b255-4ba0279d36f7",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09afbfe6-891e-4e7a-860a-7007d45eaa4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2873bb7-7488-4833-a21e-d27aedd125e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b79537f5-d7ff-423e-b942-92855c081001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "51a715d2-9c2a-41ec-a3f0-3289c4da2685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be08c5bd-73ae-44cf-abce-61bf29888370",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa711981-5d38-421d-b679-4c5449639264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb2ed442-49bd-47c8-ad9a-5939d806ffe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81544162-989f-4518-ab5c-1ff913bd7337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "234d8d78-7e4f-4039-896f-f1a0de3a5663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ebb01c6-217a-4460-9b58-757f1ed50468",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ad8fe0-0bc1-4284-9ba4-36adf0895254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6cadf5e-35b8-4b93-a860-8709d58e5b52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e038d248-c026-4665-a093-e6fc92a46d26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b847abb-9128-4e90-a380-7cfd08194e69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "602cd97c-6ace-4055-9f2f-0ce90f510db9",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f6259fa-91e4-4165-8b93-c14cb992447d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e9db617-7b52-4609-8c4e-56c1a17b972b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5da18726-063b-4658-9fc8-2dc006825085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ea09bfb-6ab4-40da-b718-9f28d75c60d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0f52748-fd26-4b15-97a8-3847a3e3585e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e58e5b1d-4ced-4503-846c-1aef04d87c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bc43edc-718c-4e17-9db3-9d750be1e2fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a20ba6ec-30a6-4c91-b60e-27bcba34b975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a3ead38c-d7f6-4e96-a2fa-5ba7e74913c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e874121d-bea5-4d75-b66c-a11f52e0c6c1",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7196069-01db-4e37-b5ad-275e55a3c2ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80078598-9a88-434d-9b59-3e2ef8e18740"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a35c0eff-8d6c-485a-a186-bdbdef6ca880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bf6e437-770c-4914-8a58-c55594d26a9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d26807-341b-4e1a-bfdf-8ab09175ad08",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e2572f-21c7-4104-934c-6be8d3cd7071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25b3f23c-8da7-4fea-91b7-cf06688d648e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3023dbe8-c65e-46a2-81a5-4e5a5660a746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e12075d-4165-444e-9254-98f08c2cfb41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eee6bfd-9efb-4a2d-9cb3-b2480c266677",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d812fb4-94d8-4be7-8821-3f5a45f3a820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cc2760e-09aa-42f2-86f6-b1b17a6d0b7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c71a78f-3c35-4d64-88c9-59270b4022a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd822030-e98c-471d-aba6-ddb3401d7449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c86c190-d067-4ff5-b48c-6102a73c7ef2",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15060e3a-d2e7-4d59-a85b-65a5ff0083b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "031bc216-693a-4bc2-a33e-e3a5dd98bbac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a0d74ec-676e-43de-a8bc-a26f3e5fbbc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca549537-19f9-4846-afa4-148361f2ec5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61dd4b88-2468-42ea-a0c1-330f806e3f00",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb6638b1-55a6-44f0-acea-46a7c5463cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cd1e123-1bd2-4fb8-8e7b-ed18482fed20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae178970-bf95-4e02-ab44-7701d822bd83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8aaf7e19-d268-4bf3-b774-9342697db29c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58fe1b17-243c-4042-8427-7d72fac2c009",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8dd15f-3dab-47dc-9a52-b00032b8f537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4876674-35a6-48fb-85d0-cfcdbbd7a154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8eb84d-a546-44a5-98c2-f840e81feb3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf15aa99-877e-4fd1-8d59-aff0065e6879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b053306-99d9-4787-8ac8-1dff1ff2f5e4",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b9cd833-e52d-4ef6-8c3b-be157e0f29bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ad97b19-fb18-4fef-b6ac-9a608351642c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a519a71-6ff2-402b-aafd-12462615ad7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5b7dfed-dbf3-410e-a18b-1a954c9aa1ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d09f5835-ed66-48b2-82d7-22003e9d64a3",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f54b22-e795-4cff-9a0f-05143f78f87e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1cdcf56-c713-4b37-9c65-7bb8db9165e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8382f9bb-72d2-405e-820c-6349a696d796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "da1d17a1-38f2-424c-bda2-7375b8b47d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff2fe7b-a7d8-4a95-9243-abfcec400457",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad6b5453-a905-49fa-9011-aec866522025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64e195c2-4666-4117-ba28-977654afa260"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c42e1a6-8731-48b8-b006-a321ef9b2ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc96cf09-b2dd-46a8-bde1-7db60102c0fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19b2817f-985a-485d-b385-dfdb8c691b8d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1035f3c-792b-446c-a239-4a05bfc14179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e366719-9a4d-4b5d-b0ae-e7e4dc049e8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "513b82c5-aff3-426e-a90a-74c9db931898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2cc513ca-909a-412c-a1c6-99fce672d7e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f819d776-e720-4fd2-82ad-b9615ea46649",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f04b4c5-68a3-440c-a6cc-d6fbcb6c90b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99f76469-e5d1-4275-b59d-1a694e090228"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d79740-9e4b-4cc0-b5b8-d3610b3159ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e9bcb9c-96e0-4407-917f-6396e99931e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14850e09-e42d-44f9-93c9-e5ead4ade2cb",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba293a82-07e7-4f07-8e3f-d94696463405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "51b9db98-1908-44fb-a858-74f82b07b691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd31073-da7b-43dc-acd6-baa3f042af7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e158a04f-d441-444c-98fe-9746e05cfabe"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "db0af653-398b-4397-9d52-0d2060f36598",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "482dc9b1-d70d-4057-8476-3be50fe10cd0",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "863a5ca1-1df8-4757-9d3e-c648b5a599b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b2a116d4-1066-4de8-9ab2-801c5db443d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "946cd7e1-c6c8-4bde-bf64-c9a2bc67bc8c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8df4d686-65c8-4561-bb4e-4e6134edae49"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb84ed58-4290-4579-a706-051ad4a5f99a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5780a3f-c3a5-4828-8f6a-e58b9d9b7ea5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d533d11c-432d-41a3-90be-d2af3375c708",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ac45177-d8b0-47d9-98db-af7244dfc7d9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7534cfcd-251c-4486-82c2-0c11cb12318d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "02d75e42-7028-477e-98b7-9b8f13a7192c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "433c1f55-9038-4946-8253-ec357c1f2fc5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7537ae00-4db8-4cc0-806a-3804f465628e"
                }
              }
            ]
          },
          {
            "id": "9f4bf5ca-db9c-4d00-adec-57e8df9a0eee",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ba5860b5-6c71-446c-9c3e-b9ea5f7a8d21",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "b4948857-3410-4cc0-87d8-ea978865554d",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d58eb3f1-507e-4e89-9ccc-b2a814ccab1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "37d3b209-fbc3-473c-b08b-f42382eb805d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc3dd97-9fe2-4b93-a9fb-c911894dd3a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4453581-0b7d-4b9d-9544-5500efe2233d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "286f66a7-6a28-4186-9abb-44d89579bb05",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a902974d-69af-42fa-8081-b6737f62ab2f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3a909bae-3b4c-4907-b74c-bf7c9d4ddce4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d074e69-f9e7-4c81-acab-5debbb19de96",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e65dbf09-18a3-47ce-b0c1-e21f7dd74b11"
                    }
                  }
                ]
              },
              {
                "id": "e9af80fe-575f-4881-bc6e-a3d037d07cf5",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f86b3e4-bb26-4a6b-aaec-5c5c3639665b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "20e763e5-6acf-4f16-9d83-586e95fd8fb2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36172429-b8dd-4740-9327-ec2b69902374",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f79e7059-1ec5-4713-9f18-e40a63316ef0"
                    }
                  }
                ]
              },
              {
                "id": "804c1519-171f-4b70-bc5e-b0ca24958c95",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b99aef82-5350-49ec-9c32-9a8ab38a62e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dc55f727-3a76-416e-8c8a-74dc02cf682d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f16ef2b6-c74f-4890-82b6-d8abc11519de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "87987c65-de84-4817-bf81-0bbcb0a83bd4"
                    }
                  }
                ]
              },
              {
                "id": "410f1e36-dd81-41c6-8962-efb249c2fc08",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "18820717-ee20-4e0b-9df1-ff95072a49b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "26f7ee2a-2989-4f84-92e3-2882b01c9b28"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f5a0adc-bbb9-4f73-b519-bfa2504bc30e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b82a3bb5-c489-4437-b759-b9a209817c13"
                    }
                  }
                ]
              },
              {
                "id": "86e2cdb4-1e15-4192-b869-4ab4d50ecf30",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ee8d6c4-7cb8-43bd-9ba3-b42bd6c66081",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1881857b-bf1e-4229-9abb-29c25c4861aa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b26e588a-126f-415d-b3b7-8139ef5e92b6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "f8f0a8ba-68c9-4d75-ae43-0f1238397310"
                    }
                  }
                ]
              },
              {
                "id": "60b7d85e-e666-4e7f-9ece-fe230f222398",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ea5f72c-521b-4f91-a409-6f948a880088",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "135f4c42-6985-4653-b5d3-61affb6fb2d3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1c2a44da-7e9b-4c77-a6f4-cccd9a4553fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fd5f9dc4-eaec-4bb4-a90f-0e1127ccfc50"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e6785771-84f4-4907-9973-79ad40c9de20",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "10105368-8fb6-4449-9948-8d83d4a57ae0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d27dee7e-e969-4b53-ae5e-91026528f651",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7c9898c6-7520-4c7c-b8eb-9b257ec0b03a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "218b5cbf-e241-4c8e-a2dc-f66871e14ead",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "18c72002-c753-4b64-8bc2-36e84820c982"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f94acd31-402b-45c9-934b-3959ece984cb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d3454fd1-7b02-4e59-a145-385047acd3c0"
            }
          }
        ]
      },
      {
        "id": "78c24578-e644-4dc9-adbf-4d64ddf71fd1",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "910cbc8d-49b0-4862-b87a-736cd867f350",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d93d2b19-23d1-42f0-ba05-fe082ed43a64",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a9cd5170-5c9e-4945-bdfc-d2ad1e3d04dd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1ad6bb-ec3a-4812-aeb6-e15f2c6be94a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9fdd8fa-5d21-46b1-9508-cf19132c2903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "278d2116-56db-4fc6-ab9e-1d5332417c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ea2d307-5eb7-4c85-a2d9-624958fee5fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f0a54f-e242-4923-b925-c73a7856facc",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d67ddc-e8f4-4b2a-9120-ab798e8ed6ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aa7d348-ba2f-42d0-829d-008a236c706f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8572741-1988-4acf-b960-e982f2a48c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "173c5e6f-e854-4918-abfd-3bbb42edaa41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92b8649e-c399-4ddc-ad13-cd38245cb237",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db5b457a-0b5c-4144-992d-252f982754a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ac61805-8044-4e9c-b6d6-6a7b6ceaa409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baab5ac8-f6a1-40d7-b7ae-4a5c4f176d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4fcf73a1-4f30-456f-a664-93405e6ee779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0a61136-402b-4d48-a3e3-df7de043ef9e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "904fd91b-b22d-4cef-91f1-c477f00556d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e338827-4b90-41e9-a219-3c022fc09e90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee62aa29-02c1-4e83-8066-13e7d924b2df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "96bcf8fd-0c82-4904-977f-cf3efadd0694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5314fcce-7b07-4bab-b673-2a991c56cba7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4d5faf-17e8-4150-bf0f-8ac0e42ea7be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "492574b3-1c26-469a-8abb-05a16e7679e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d75bd8b2-debc-4168-882d-82243593de43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "23c1b11a-2758-4d9a-ae3d-8b2d17e34bcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c47d03eb-5def-4cb7-8457-4999a112184b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6985ec0-eebd-4103-9096-8742e5fe30e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f6721b8-8715-474a-b296-408ca27a2473"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b15552e-0350-4b6a-bbfc-5f157c58a81d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d27d4b41-d3d8-4454-b54f-f4447eadd42c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20b9919d-e284-4b9b-99af-19e234d0f33a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caef0d0d-79f1-4993-ae64-ca4e50b6fa51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afe7a55e-1170-4060-a2d2-1a108bbc484d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4297018e-7998-404b-88cb-6e60c5ffb1d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "763d8bc2-ec74-4c48-ad54-2a6c6da19362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3935a881-ee22-4ee6-9138-2031852368cc",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f1e6ea8-053d-4ced-9d1f-93e04e777037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d831fe9c-0cbc-4c1a-811d-aeb0c6c37fc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e961e5-caa1-46cf-ba21-890867229b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0b925be-eb31-44ec-b90c-6df9f7198891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fe09b13-c096-47cc-b9a2-4a189814c97c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f81e80-e9d6-4539-a705-8124528a1289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a50d771d-ab3f-47ef-bba0-7303b996cff6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf1afe53-66c1-436e-9f3f-5f9f359ea797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4728c586-8884-4707-b39b-96aa615295b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d9f91b5-f62a-4ae5-b041-deb4d6bf44d8",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a9f54df-909e-4837-8939-0e797bed45ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "814e67bd-30fc-41a8-aea2-7b23c50b061f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4cbf4c0-3769-4481-a66f-c80c0de3c8f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbc09cff-71d0-4079-9033-933ff962db2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9b9137e-903a-456c-a2ce-24630b7976a3",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0955b09-66c5-465e-887a-0487f225e403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57423409-4d92-4797-8639-12c5645f38e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "529d927b-8ade-4b42-aa81-250f78363dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "76f61716-f302-46ca-b310-4a2423ea2313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f9660c5-d444-40ad-9a14-72c0c4c37876",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a11958-e044-43ff-9606-7330f4844e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dac9ac20-c680-4e00-9518-a1775076e9a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07baff11-4615-4ef4-ae5a-9bb27a259806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e00f117f-0015-4954-abf4-4e353262a5a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e79451e-e733-4d0b-8375-a645160573de",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fbbe99b-70cd-4bc8-9e90-ef5d42fd8a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2deb1026-c96b-4b8e-8c62-feb97c01d52e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "566edb79-d7a5-44b2-9ad0-ed311ba619cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "24776e76-087a-4fdf-81b9-33b918104382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32e642a0-e200-4462-9569-411891f05768",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a8f1eaa-3ddc-4838-8a2f-0b31a9582557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3c97e87-6fdf-4ee7-9b5c-9f5dd76f3584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e90ae570-e47e-4545-8f4a-0d91661194e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "23e2dabe-ff9d-4bc4-91bf-8ba6ccf3aef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf2ded8c-e508-432d-860e-286e6f718fea",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0519c26b-aa94-46b1-bd9e-707542ab47c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43d67522-e0d8-4798-a250-05fb88cb4293"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d6682b8-5bd6-4a29-9cb9-e2e405abdc35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a376c60f-d038-4e9c-a05e-e1689e14ced1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03b49930-54f4-493d-9bfe-17e31516b3fa",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "499929e6-93fc-4723-a722-53855e82084b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f016c5e-9c72-414e-bf85-0fced681fd6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fffc1d56-7d8a-4dbf-b508-d4aef4a130b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "21d4eb9f-c399-4679-9b0f-20c0f3505e69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b42358-e22a-4351-aac9-5409752d4f4f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca8e019-2a19-4c9e-9baf-62af24eac241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9615429f-4bcf-4d7e-aa46-9ad2b798dac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6013787a-0a02-4a10-b69e-fe54e8a9edf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "16ccd654-fee6-4cac-96f3-544f8cc8b206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "826633fa-406c-497b-87fc-d71e213c378d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "145064be-f0e4-4545-9d51-dffd449b6961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b441e125-7b50-4fd5-9a00-fde628be6587"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4493cb6-5bef-455b-8bb5-8ab1d68f673c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "598a422c-8cca-4fb1-8301-dbf086ead75f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f854be53-d337-4e92-9a6b-800ed4b485a3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e94fa95-cdf5-4cc2-97f2-46eea64362d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f6af933-a0b6-4c02-9ed8-9be32981604e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a7d4bca-f693-4274-8041-446b10b6f37f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "307dc76b-432f-4e17-baf4-e654c6750089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a6f22cd-c921-42c5-a1b6-5080945f3317",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57c3d6d5-176d-44ed-a545-6811d1f0e945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d99bfff-130d-41c4-b2ea-19332fe9d5f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6516360f-572a-4c05-a637-e5a50b613617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf140237-b773-4017-a0fd-1060090502d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2396b4e2-455d-49cb-a0f4-81cd447e197f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ad2e99-51b9-4902-bf8c-e7b7c35b6998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba43ada8-2184-4fdd-873b-c8e8894d857e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c144d494-5d25-483c-a1c6-73cbf1a54848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f13d4ba-152a-466e-8f87-e049b1fa41d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50da662-a4f0-483e-a94f-52a8cd4b4825",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa3b4c70-9f21-404c-9f9b-918bfc1471fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c372d731-6e55-41a8-ae50-99d34dd5a55a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f69301-cc9f-49d9-9f9d-1a019028df39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9defa35-cae6-4991-bf42-b5a7199e3ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a0f489-8268-4419-8214-16633e96cbac",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "214121fc-c02e-4838-96b0-2fdf9795160e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8108d259-9a84-4a36-b039-f483727f82a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af5c9e5-5ed8-4b21-90db-cd2819eabf96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83d29645-cd75-4e39-9f8d-77bedc107ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ffff9b2-d5da-4544-a691-45371350a2b8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce69673-fe87-4686-a191-8acb9b480752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33a74669-431f-4318-bbc1-44b34272cab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9fec682-a9b1-47ae-8dfd-535746d41ee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57ac2f81-44f2-4f80-9207-7f2356d1d508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e47f528f-ae6d-4666-9ee0-3551483c8537",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3f7fcde-c2d0-42fa-b0cd-a082d8dfaa04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd86682e-58ab-469f-a5ee-d31770c112fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d3f2b07-860b-4573-a970-607f88f8aa9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ceb7e6e3-4880-4cf7-86a2-cffe33cc7fb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d4b4858-c088-49a2-888a-26de8b6b937a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "380e0417-b7a0-48bd-8c16-91ba9d3ec089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f19b45b-cbe3-4785-b76a-b24d82324783"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37616ba8-e2fa-4cad-8837-d1ee4a272f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2eb8369a-5886-4b36-ae97-340209e65749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e5adf99-1fce-4f37-854c-e5f8d16a05a8",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c3de9c-046a-4687-a626-8b755af51661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50399a62-5502-453b-a941-a33b539e2d6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdac5f20-ac7c-49a7-bf90-1d96b392a39e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "702e8d43-4a15-4037-acf5-aa3e23afcc41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b159b4b0-ab47-4cb3-8f8c-e30aec552cd9",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e1cc21-be27-4581-bb7a-10d2d9ec65a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1c9464c-0b0f-4691-b61d-3c13d9b13334"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6ffe60a-5305-4bc2-99b6-961a93f50bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3b931a9-c1fa-4de5-8741-be840904eed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccca07aa-6f47-4753-9b1a-2605f3cc048a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "668cae27-10c7-433e-9f21-c15fae088fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d96fa7a7-2bad-4185-a611-d05de17cf38a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "799edc33-1e87-4f56-a200-0b18b4e739cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18304c1f-5ca5-4e88-a930-8d06d0a0aafa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a340f76-1cf6-443a-8118-cac76b43984a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cddaa5c2-da2b-437e-a487-998f7782f982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "224c337e-23e7-46d6-a121-0825e5b0ddb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f0c5ad7-65c2-48a7-917f-bb49909d6d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7de272f6-ed35-4be7-9e9e-8fbcd8156dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f250857-3477-4ba6-83c1-737b0366c5da",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3113cd5-e283-4189-8c7a-71b0e7bfbe1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f426835-63ee-4c8d-8461-13a739f3d877"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "680f5546-f838-4857-8ebe-728218693cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "912c10a0-5c8f-447d-b5ac-7a2cf266938a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc7d4c2-bf49-4874-a70c-44733840a49b",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f5b9174-ac07-443e-b1c8-22137c258368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a370959-126c-467f-87ff-e36a68064116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "301455b1-8aed-4aa2-baae-5e0eaa62d261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70528375-fede-4014-b889-150b81991bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6263de53-85af-44f2-b809-ab9453cfe6b5",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1629a393-950f-4075-849e-51af355546a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3d7f09b-0207-4478-9091-babe2c557197"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e018a8-a7cb-4f7b-a1b7-6224e833f2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad046fc6-4d42-4617-ba38-8e049459e64e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15d12a03-2f75-496a-abdf-55c687d4680d",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c972a45a-44cd-4e05-b47b-da7c63f56797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61716299-3ae6-4de0-b480-bd7a6cbe2ff6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a9b58a-bb85-4759-b379-a3448ebed8ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cde46f62-1499-4e04-86b6-b60391ba6f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d917722e-6eba-48b7-90cd-d37972ee9ba3",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd3b632-4ab1-4450-a48e-732d94a380c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "420f15ef-641a-45d8-9f1b-7fe660378b29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f96ed2-b853-4e55-89b4-f226af448853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2005515c-9be4-4caa-9cde-80656f76ffab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d37084-b9e4-488b-9cc7-5d7c36365344",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67aa9352-b947-4051-919a-1c8232ef24e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5ac52e9-613a-42e4-b235-daeb3f9032e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f621d80-9fb4-4ebc-819e-cfb9a376a4b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b568ef5-7855-4094-a9e8-3ad668c4f2bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c39b7615-3120-4020-81f3-dffc7cb3e4ce",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63cc233d-6584-4eac-8bab-0ecb70837b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38baa8f5-cc8e-4a4f-8cfd-6379076ef0db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa82461b-500d-4569-804c-6368a68e97ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31182a98-3ebb-4e3c-beab-e5f974365c24"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1801fa73-8249-4fe4-ae4b-2a9176db5895",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "97f29e3c-e63e-4e15-aa44-37c1813dcbfd",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40353c5b-2fbb-4118-967a-1218ac7ba6e7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c34ff5db-0d5e-40ed-a017-394004e27fc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90079be6-d546-454b-9241-85811ce62071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b96174e3-3fa2-4952-bf86-6482daf124dc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c1b6dfee-c062-4ed1-af7c-151a29775c27",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10b30a5a-4212-49cc-b085-39db15ab9cd2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b628a14b-1736-42b3-bbad-5545a0b006b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0bb6e822-2dec-4866-92e9-dc2fb2fb1155"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "123313e1-0451-40ad-992f-459b10d68da4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6df25ce5-419e-480d-ab79-46d0df752ecf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bb533438-6a8c-4f06-a20a-8409d5e39fb7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a2d3fb90-b099-494c-a78b-b244e3585507"
            }
          }
        ]
      },
      {
        "id": "580665d9-7358-4956-bf0f-3f51fc54f842",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0c47e2e9-170e-42de-a862-0783f46bb4ce",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e05e7cf5-808a-4976-bfa6-ca27aa43acfe",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c76cd09f-f520-415d-ab26-bc869ca2f04d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a5dd0b2-1ed6-49ca-a02d-590c304997ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7a8d682-7dfb-44e3-9c10-98e1e1b791f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df36f3ca-b532-457c-8846-d59ae58d86e3",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a63117ce-3faa-4da3-8beb-228fd15076f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f43e7f2d-997c-4b2b-b54e-e51f1d7ec4df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f42601c-1062-476d-a822-1256d50cbce8",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2147d0a-8d39-4799-9176-78c42da1f152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9b3d64f-25bf-43d1-ab73-5afba5f83f44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "642fd8eb-a899-4ccc-a46a-7fb5ed0d4396",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17323230-b842-4c10-9f99-762d0743d142",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "928e9d1d-6d36-4a7d-b56e-2f2c5c5797f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "604f4e91-06ba-4014-8773-4fd04d125c24",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91bb4eec-7845-45f8-940c-0a1497c81480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d68fb07d-fe2e-4b1c-9b26-8e0e4f2d9742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcca8cb0-9d7f-47cb-b128-d165d06b0652",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b36f5578-e825-4404-bdbe-71759c441108",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9f7df68-1642-4019-80f9-cc8344a3ea5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa35143f-7670-4338-bd04-5fd009e5c014",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "923c176f-d0f4-4cf7-898c-bb1bcfd93239",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2cc78b6-3dde-4013-8ae9-b6ba32637061"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fca9aa4f-2015-4b3c-89a1-3e65b8a7f967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68df7591-c6a2-4d9e-aae6-40a0d9cb901e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f23d7c0-f601-4821-9a21-82565f75247e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc021d5b-43df-4c6c-b0c5-4e206812fc9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54782d07-6ab1-477d-b5e1-6c60d0c41244"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af7c7a7a-5abf-4417-8915-0955301584de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8706736a-de67-4819-81c4-9f4fc87c476c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66a02cb5-95e2-49cb-a548-d98bb7ced5be",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d506347c-a626-448c-90bf-7065db44afe2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a4e1e0e-2348-4e19-8692-897c60b9dbaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "679d3cc2-177a-45b9-b92e-b8cdbef4307d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6affb571-add4-4924-9768-802e7dd1f38e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfc5d43a-b23c-4d86-a5d3-9454524940b1",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec5d5dee-432a-46ca-bb40-c8e2c18d91ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a7caf8b-4513-4f99-a8ff-d252c60b8f5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44bd8eb5-1ad0-489d-b606-5e699ac8b259",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "420c0893-0019-4f5d-898a-ec37c8dccb48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "457ea6d6-bf76-4f6d-a481-8210cd3edd7e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc08c11d-e9f3-4e6f-a36a-f329b11f129a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "becd6009-7b7e-4cab-a200-6267bb1d1ca0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea5464ff-0e01-4ebe-8ae2-2a6fc8044204",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23ce42f6-02ab-4df2-b921-b41efee19796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faabb18f-d6c7-4c63-8436-58ebdf67c1d5",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5698d5a-d24d-480f-9fa6-2b35db8918dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dbfba1b-f327-4e5c-be65-c35b2adfa8a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b88067-369b-40dc-a874-d4e1e63a355b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f2b6828-c8c6-4ece-b81f-9c3f11e856ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c84e399-956d-4a50-8fb5-4b8c186059f9",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e80b59cd-c2ec-4c2b-a642-2ebd45a716c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b53f4e8-2b76-4d60-b64b-62b40da6fd62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce76308-eef0-4358-8cc8-97a0ac8dc8d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c144eaa9-cf79-404d-90b3-a6565200f740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d59cc551-c95a-40b9-9b16-f762806ec93f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36505c99-41af-46a9-ada1-410721fbfaca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9ae5480-9d5b-46b6-b8d6-20421ab35d71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b18ca27-b591-49d8-b0dd-b0bdb025c448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67d074a6-f5e3-42b3-8407-3354eb82a2c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4052f0c4-9712-4369-9359-a4b2fd29753f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "457980a0-39c2-4357-b3ac-f55276e57792",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e50e8ae-1a44-4bf5-a74c-0333096951be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e5c8515-2207-4726-a9c6-7c14c965b604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cae47ea-6e80-41d1-89b8-6a966f1668b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e1fda6-e170-4516-9ca6-2520a818bcf3",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98c3601f-0ce2-498c-b932-e6694b921744",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "547f4a67-7679-495f-9668-18e18a1996b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c7ebfec-765a-4ffa-97ef-e3005e1cf8e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d80a1c4-d40b-40e7-9805-d3fe98b49457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48819c2e-8cb5-4ad5-ac8d-b93086cf00b5",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c0692c5-fd81-4218-a921-872fc25a84db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef5c5a1d-7e3d-4b01-afdd-4c93f12276bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "570241b3-31fd-4874-8dac-76ce0a568c4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb95cdb3-9d54-4510-9b5a-ad22edfe3020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f21b6da8-cec1-4bb7-b63e-892844a4f0b9",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f4e80c-b3e2-4315-8d0d-652e97ef9c6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "153652f5-f617-4fc3-9537-21cd9dc00432"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baad0491-af1c-42fd-9e64-75bad92ae885",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "001064d4-1d10-4e2c-83a9-43e21156f123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20fe79e8-ee83-40b9-9380-30155c4f0dda",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "616badf1-c4af-4f14-a0ba-188f26b14fcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fc87cc2-5a31-433a-bec5-5d165237556a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dd29763-04b7-4822-80c9-c14d70de0706",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16394b12-ae69-45e7-8153-308911f444ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b77057da-f61a-4d2b-90af-3c6fd3771255",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a48782a-9cb3-45bd-b38c-023c8f6f0110",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3adc37fb-d109-4b53-829a-8ddc647d2c9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "814cd6b3-8482-4f45-9bb1-d9d41e951743",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0cbbc40-702c-4724-9b77-d4cdf37c8c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8172c6d8-dbfd-4c72-935b-fa0beb4b509a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "697f06e0-7432-4eb1-a296-931995764a4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12765559-a829-463c-9c88-be9647f70cb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "103b2049-b5bb-43a3-a947-7ee75e31efaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dcf0e57-3f90-4475-9906-9fbeffcf9855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc727fc9-b1fc-400c-a67c-2d648e2ece85",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0440f368-6992-4852-a98d-5da74d3f1144",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9294ae50-b2e6-4acc-b9ac-2369825f3071"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c5a3e5f-a590-47db-b9df-d77da136d51e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74ab227c-e076-4e11-bdf3-1e81efd297fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "585dbcc5-2435-4a83-bb03-04f954aef6d1",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fd6389e-aaf5-4b02-9347-1d389b5dddd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ba20492-ea3d-4d6d-8e4e-5d14d612ba52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dcb180f-4bdc-41f2-97b7-9bcddcbc4b5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a93db6f-45cd-4867-997e-0f919b447cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0842edf1-44b2-4c3d-9b5f-fc811396fed2",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5836cef-9e3a-4bb7-a251-6eb1f1602022",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c17c4a5-3e41-4de1-95c0-97570a611e47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa948de1-443b-4e60-8724-ccabab1de118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a398b32-d61f-4cef-94bf-772ec40d9535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17d4ae0c-d4f2-4d13-b117-4b55caa2b08b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ec340f-2d6a-44ad-8111-aaa654b02a2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad84eb04-bca0-4df1-b44e-b4296bada778"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d9eadd2-b8ff-4292-baa4-c2236cd764dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c02e0fa-bc90-4e0d-b9c1-dcdb1c2e09e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a69042-760c-4b71-a945-dcc8a4d8fcd6",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "970ecb4c-a0ba-4550-9a80-df048b238feb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b1a65ae-e2cb-4ac7-a8e6-70e661b4f8a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17573010-a9a2-44fd-b1e2-41e14b959be3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7c506ad-a0a3-4a09-a8c2-9026d43634ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "669bbae0-b921-407e-9487-9207a1f16f0a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db3e42a0-9ed9-4653-b52b-139a632bdb57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "873853ec-31c7-4d8c-a0bf-cc4f719bc224"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe808216-ccf7-40c3-880f-887e537d455e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67416a1c-612f-4107-8dad-473bb9e76230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94af55d4-8f2d-4c50-9f3e-0f43300decef",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c107f44-ab0e-4c27-a54d-d5a86db0ae86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67f5d8d4-196f-4787-a5bd-fff2d3c1e555"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc26688a-fb0d-4c5c-a63f-a00cfb875f6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5550e46d-e576-4e2d-9951-357a0fe13d81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a5ca0f-853a-4982-a510-b450c3e948ec",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b7e405f-7ce4-4d62-904c-0dd36c7fdd52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "281769cd-b5b0-49df-a2e8-b9a1e74d8cbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3348b6c9-1680-4317-817b-16fab730b546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06e874bf-8bce-43aa-8691-02ef354d227e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa897f72-cf4c-4846-9d7d-c2efe49ad8bd",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b24eb1c-aa04-4bbe-9a7b-b159dbec2b3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e0f5063-6a0b-468d-aecb-de26b3e2de8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f07d6c-bc02-4327-978f-e14600db831b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5bb80f6-7969-4ac3-a95b-a7a7c056c839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e8c7d5d-4345-4d6b-bc46-aa9f7f7ed3ad",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4f57a8-7b35-4d8f-9368-1e470a379228",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b6a9dd3-0627-4d1d-8887-419a5d4d175b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71b5849f-2cbb-409a-9796-1aea33444c00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65c5fe52-943c-4f90-8701-a1c484330146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d7db68-7ef6-435f-8259-73f08efe6b94",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f50a93d-b139-488a-834d-610472aebd62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e76bcd8a-64a0-4f1b-b719-a0d220bef4e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7614bd2-a4d5-4638-92d3-9b99fee1e03a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be900605-fc6e-4e22-964d-5d0631518831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "015d28f3-3562-4b76-9a7e-3077193d2019",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "884fd3cc-04ed-4708-8ac5-a07e7205b332",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4282c85b-3289-4d9f-833c-2f48f323f3dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27eeb324-917d-4f61-b0f2-5be3f4a78e83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6406654d-5cc1-457d-a575-476e95e888e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "685dcef7-8b21-4dbb-a0a3-8459b5bc64da",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b079bf-7754-4bc0-8821-3e7363556cb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff3534b7-8a76-413e-b666-badc21281bd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f020d05d-c9f6-464e-8fd1-ab93bf5c17c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12707684-7614-4a75-8304-a2f69530fe5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d9ef998-c8c7-48c4-878a-4c93fa58cb5a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc11a659-bac5-43b7-86ed-21ca3608c94e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee8a2791-a727-49a6-bfe8-b74b1c6fbc24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a13d33a-4eed-4936-b2ac-3ba5d74f525c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "873f6584-e9ad-4a42-903b-6ab2c75fdd96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86f95a04-eb3f-4c06-929a-699745d2514e",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1a60822-0948-476c-b997-8c015c9e38da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29e8180f-ca9f-4dab-8db7-6ddc8dbbd220"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49643e9e-66c9-4c7f-bf06-1667b31d0c7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "347a9584-d02a-42d4-bae5-41323d7c11b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08b3aa63-5beb-4e1a-8c6f-846049a81e86",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3877274-f700-4fed-995a-de60edf16a5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3142bafc-d930-4f32-9c1b-2b585331aec2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed439cdd-6c67-489c-884b-e4dcd3b60d6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78280366-98ad-4198-975b-82ccf28a7e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9899cbaf-c5f8-4d0d-b00c-fb8551b4bd8d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb860f3-feb9-4a5f-acd4-daf06c5272b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5617a599-6492-42e1-aeec-6c0bb3c51409"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "404c2028-1a7e-40bb-8ced-19227bc28983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60ff0826-0578-415d-b621-ff0a5368eefd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34fdc980-50d4-48fa-8c66-bd76f77311c5",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3940176-15e9-484e-8ae5-c0be21d79ebf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b12f7d3f-1175-45af-9af3-01ce91be2085"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b882c2f-4786-4664-b4cd-6942119faa3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54a0cdc5-2a6c-4b9c-91b4-16df9170d79e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46034d01-b8b3-43bb-92a1-9b70062cf77a",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7776276a-3629-4d16-97b6-4d3d78733407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "205d24d7-cad6-4189-915c-1d77134efab1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e459212-bb32-4a2c-9731-78febb506988",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81df3765-ca80-42c8-afcc-ae1ca4d99a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "759534d1-1e12-437f-a2ec-6c0e678db568",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2805c76-035d-4ded-96db-94c648cdb33b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26b000da-180b-4b63-8718-e7074d7455fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c87fda8e-d0a8-417d-90e8-499e3e970859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f48c65e2-1b48-4259-9720-3b4d46ad9f79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e64a6cf-8a8a-4821-b2bf-ef68bda2f65e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f098d1-4aa2-460e-868e-cd66a0eb7c9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "374cb49a-1a89-4cb6-93ed-76cbb2522618"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48705e8e-66e8-4c93-b07b-c478c14e9a50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54274a99-b55c-4c3b-8e5a-6f8d6f2e28f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7510c223-7659-4d05-9963-9be09b75a114",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a3948e-6486-4c5b-a443-a70f607a3d70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c7945a8-5bd4-40e8-ab78-6e2239a824cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c1e339d-aa68-4921-9426-3c85ba1607ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b3f2614-0be5-40ab-876d-7c60cab2396c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b10631d0-48e6-4873-af53-b503b7c9548d",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa7b1cdd-4717-4c61-974f-f1d5a71df399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "276537b3-4e48-4ef4-b344-7aec059f1308"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "134bc051-42ad-49e6-b861-7279dbe2caf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04e9b9eb-35a8-4b70-84ef-ea823f04b870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9983cb80-6547-4e12-ae5f-4d5944d39274",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11cc2a3f-ff0d-4b40-b058-53a5c05b4a25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "623f966b-236a-42ec-98ee-f700bfa803f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a953bb1-b0e4-4bd9-bc1c-cd4052a5d230",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43eb7be6-e1ad-47b6-b5b7-f24bd5546793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce0dbec9-67c5-40a8-a63a-76a69431e1ed",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d49bb4d-272b-4771-bdf9-875d703d2d90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71f870ce-6298-4a60-95d6-ad21d8cd41c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a5f2917-f176-4d06-b9a3-70f21d4e1330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d68f601d-467a-45bd-b3e9-e291184e3a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa3a337a-5e67-4206-ad27-54051154da7f",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aebca5ed-61fd-4f76-a0fa-f87a3f3c0305",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57ae789b-c08e-433a-b294-abe2a8d51a95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "723a6cf7-bc31-4981-b779-45edd30d0240",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eba50d65-15d7-478f-ade4-e1d43e72161a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c562cb-8556-42e7-9dec-709dfc1100d3",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f9aa5b-16a1-457a-b7d6-245d3eda04f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43449583-b272-4201-9fa4-3725bd8f0da6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c96b12a-1f40-4305-a1ec-7cbb7cc99344",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "530d58f7-75fc-4bfc-a384-8040e2d0a40d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29c660f1-2f48-4b72-a921-20b4645a17f3",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a75500cd-f86d-47a6-872b-94ac11f9a071",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c0e1292-144d-46f6-8c55-0a1c221eadb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "719152a7-030f-42a3-8db8-a2e24f9d2535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21d7950b-d2cd-465b-8cea-81b712510f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bcbef34-aeb3-4e36-b8da-ab4ee4f310c5",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0018535-5706-472b-b358-f60f95b8c73b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "364dc314-2250-4de6-8fd4-a9003a0fe1de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14aad384-1886-48f8-982a-860c890a9d31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f883975-c831-4233-9560-b7fac2d3f68c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c61b5f72-f745-4992-bad3-42c767ed1b3f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3726e3f6-1530-44a3-ad9b-50c5a0f992b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75e0024a-e700-4ee6-b1ad-7cef7a20fb1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03563ca8-66c6-4466-ab16-4ae571f75b7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc39bc74-a2a9-4c26-a1c0-8c4650265b5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02be1532-444b-4ee6-bba9-39d24ba8043e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38899aca-ba57-4962-8dac-57a1140f89a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68ff4cc2-cccb-4367-bf0e-5201d208277f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38613aef-2040-47cc-9e36-bcfdda058e56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed8d4276-50cc-4aa7-8f2a-f3dd5de7afd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6d21c69-c9bf-409c-9c61-df353ac13cd9",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29003622-411e-47ba-9f68-e3c8b96b0591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "325c8cf3-4ad8-427d-b367-a6ee8025ba95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e432914d-dea0-4c64-adaa-4c28e73bfa55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f93aafca-f4b0-4dc1-8fbb-8c5d37b72954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cb8ff46-9bac-421b-b781-d80d78cb418c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6a7fee4-1e2c-4c0b-8a34-d2b7ec1bc1eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ab414c4-cf12-476f-bc33-4be6de1d9235"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dfe267a-0bec-4aeb-93fe-71930a1c4358",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "825de3a4-7824-4375-a0bd-f07af0051b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "599b1395-1f6a-45c1-85f6-b89df6e58e48",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "917c175b-840b-4c69-9d3e-327b726bddab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5adfbf6c-31c3-452e-819c-7e2820423381"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07903b43-b6bd-41cb-b25f-f699331adb85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b2822cd-d2d0-490a-a213-284cc5fd702f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19e1d884-c48b-4451-b5a5-b7b42db46731",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83156718-da51-4c71-8995-eeb8e0c2bdf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "154beccd-f488-40fe-bb42-8fe11afb9be6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a736ee-51ac-486e-9f44-3051eea739ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b5622b2-dc00-4faf-be56-616f2c212538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b20b04f-bdfa-433b-9449-5b38e6bf766c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "176a760b-4611-48db-abb1-c4627b881917",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc89557b-94e4-4b60-85b2-921ebc20f7c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e811aa81-b476-4501-a93c-f0cee171e31a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16a8c331-68bd-4b3c-b307-5277d6ae2908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d89937e-e54f-400c-98d7-9377a3720486",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0ecde59-24df-4f33-be6a-8169f2ed59b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2336f8f-c4f0-419a-9419-d1c3dc7ea59e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fa3da74-4b40-4956-928a-463f7658e641",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af29dc99-bbfe-4c8a-8de2-62116c3b243a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5e16941-31b4-41f1-a700-56aac060bc01",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0c5c057-187f-4965-aa6c-fa4b2d422153",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4532b9e3-f649-4790-a8f5-1126c9a84bd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a006af00-972c-4d6e-b0c3-dd0715d933c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc9b6cd9-3e64-436e-8a9a-0fe86f32cba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbf3cbd5-b989-43e6-a5d8-9e4dec752b2a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d24d44-c871-4e95-94ab-1e6752596977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "463be9f7-94f0-4902-8773-5b3359270133"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d68f8bb-d7f7-4bc8-ab09-6c76dcc2e8cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed91f895-4d7c-4c70-9ee2-92fd2e8e04de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e7925d-553c-486d-a075-2e4855587016",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8faae78-142c-470f-8835-e06fd5dcb18e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a58bf8b9-a61e-4620-9b1b-dea8954c2e04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28601ce-3314-4804-897e-0541b93253d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2ab7d86-0d3e-473e-8906-380e96e24c62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4360d98-8b21-48bf-9c7d-5de1ea5abc52",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07981614-f4ae-49e8-ac56-454a80c1727b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "921907e9-e0dc-4628-9c76-33b4050fe553"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c33d77a-f95b-4e84-9ab2-5604ba0f7061",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38160c7a-6246-4699-ab55-8cdb630d53d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbdde684-be62-49d3-a710-5e0d77482f05",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad50a82-41d6-4edc-b6f2-387787f340a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edcc2770-3b21-46f4-9dbe-08e99af998c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe0df0f-9793-4d7c-bf08-dd17e9a6b8af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "946c2ec5-7d1e-400f-be02-da4fe8656660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d98bfc3-68f3-414a-8351-ab6f9241b7b9",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c16c63dc-2362-4c2e-b8bc-6ebd341c1dfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbe9a8f9-e18a-439b-9ad4-825bc72012d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8117c003-471c-4491-8fac-7c9f67a05fa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcda4776-b704-460f-8702-1e2cdbeb12c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88834a95-393f-473f-825e-349c87f958d7",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b544d32b-7002-40b6-a12b-b37d26099411",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf8dcc45-27fd-451b-b442-303bc36d36af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c360c9a-a08f-4dc1-8735-a6e65493790f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7442ac5-fad4-46ff-88d8-f77206cb251b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc1a4ff-22f2-4a46-adbd-b823efc7b4dd",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4eef8e0-ceb5-418e-b57d-d78543ca6311",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6fcc108-1424-4efd-a768-8013bfef4e58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22ebb71a-4955-4aaf-bae2-d35337ae83dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df007229-1260-4ea9-a329-295ca366b51f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2beabb9-1b90-43f0-8434-f08bd87f783e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38684a28-9ee1-4644-a70c-7700fcb61f9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c41667c-95f7-43ae-bc78-c524238b0d86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f88266-7397-4c1f-9d77-239bf1db2b73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85eefd48-9c16-4e37-a341-e382ae83b4f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6186c146-5ef9-4373-9cfd-a88193712131",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5e5b796-3385-4ff4-94d3-0bbbfb8f89fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0303b97-42c2-4dd9-b768-fe12a33e748d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9588e85-1b35-40f3-8ba3-108a14b6a679",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "764d9539-5d38-41a7-a8c2-f20a03b571d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fab371c3-7e03-4ca2-855c-563dc0287040",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c75a511-120e-4f07-8ee6-bac88f0acec3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f29a1224-cb16-4119-8467-61799e0971e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "577596ce-1ce5-431a-b0a8-1f7b088003cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b60025d-60a4-4aca-a49a-ed177521f38e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9bcb14a-878a-4883-b25c-40b7694f833b",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a08fc51d-3488-4dc8-b405-26f5bbc22afd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49abd26f-e277-4514-a930-604dd49475cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3896b543-fbbe-44e6-b620-02488526505b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be7e403a-3294-43a5-ad54-c79d07244c28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f12fa5d-ccb5-46ed-9960-b5d52c90b54b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a09eef-f5de-4f9e-966b-e5062e2feb05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbf078e1-a557-45b1-8681-bdc1a228bd8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf79114-69db-4ea4-8d9b-f3c73c16023e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d11e1cf0-95be-41a2-a84a-a20fb88135a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28ed41b-2b88-48b9-ad97-fc0308f3158e",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "185140ff-6980-4ad5-a2d4-3f4e65393f61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45e62243-c205-45ed-ba5d-d73aaaff7d9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ce526b-588a-41e8-8a6a-fc409db04c23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2c5011d-3ca9-4120-a50b-e4cac7c602e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76206e16-fd81-4b29-af89-9d10fb296181",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d88518bb-01df-4142-a06e-dd35c5cdfafb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1652e15-1d93-46bd-ae77-89d323419820"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "946c46ef-1116-49ac-ae3f-01d36ea97f93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ba933b9-690d-478a-b687-9ddb8877172a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a7b6bd7-f3d8-4fa7-aec1-cc1aad3f86b4",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de5b646-ecf6-4b79-a996-c136822764ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f87e81fb-d207-4559-84d7-cb64cf0c0353"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "690285f7-7e56-4553-b98f-8b0ec652d8ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "390932cf-4b7b-4abe-a00c-8ac9a31c82d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97e11637-29ad-42b0-a0c3-975a1dfe32d0",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc29694d-660b-4372-8ad9-ba1f1141c122",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fb1930a-5a38-452d-a297-5ff1255fd211"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53803db3-343e-48e4-9b7c-b83f5135b8b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86ff75ee-e9e5-4342-ba16-c05c5516e0f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a039fe-e796-4441-b9c1-e681341bcedc",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "735f41d4-aa23-48f6-9a06-a3da9cc1b433",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2efdbd9f-ee17-4e36-9e1a-f32eeabb4717"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8144381-ac79-4d23-9ddf-98a642ffafae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56bbac99-3554-4af3-aa29-123a50a35ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1503c5ca-f5a4-45c4-9735-2bd17ff4353d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1ace79-7947-46c1-823f-a8fa23774d63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c05eb80-9cc4-4a33-990d-1c993729a7f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c37efda-30d0-4b5c-981d-ab71c46a8bca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d18ff179-439a-48f3-904b-b3061ce24781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a1bc482-bb47-4bfc-8aa3-74d01f9eab02",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ec9cccb-95ae-4da3-bcc7-609c0e79156e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ca235b7-d92a-4ff7-be38-6e22b7644efe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e94375-ac0e-4182-8a91-a50c7480761c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37340b68-2a0d-4798-bc16-4b99ad459b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e682501a-fe09-4b65-a863-39eeb34a4ef1",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be6634b0-a5e6-479e-9e69-f231f5dda529",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09063837-2463-4e13-885b-acdcc455766f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f27ce55d-82fc-4a5c-9f53-a6c3a4b5e1cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9b9e632-aa01-4b9c-aac7-b2c7ab7ccf6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76aef43f-2eba-4c0f-bd50-7f476c4ed4cc",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3cf097-ac40-476b-9192-1b5f6d3902c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb25a298-9e48-4f96-ac56-17f5f3a7bf86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "871ad807-c05a-4025-9574-884abfa27e5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b56149d-0f10-487d-abb8-471733b8bd08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "748af2df-e0f4-475a-ab0e-fdc71b0e4484",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fd8ad1f-4b4a-42b7-bdaa-6bf834249056",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5251dda4-be39-48bb-a077-f3d6b0314252"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba8f18b0-823b-476c-8447-031cc187bdf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39e36ade-8bee-4b9b-ab07-4efd45b90f70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73afe0fd-69b1-4835-a9f0-63bfd4f08ef7",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e35364c-2983-466f-b78f-a393cc658ba3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e01bb88-68ec-492a-8871-c41b4edd3260"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00238eba-849b-4597-8118-b7c420a69865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "920278a4-71ed-4ff5-bf27-4c5a9911f494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1324fbc5-ca8c-49a3-b0f3-59b9ebbc3908",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe64dcf2-2907-47c3-a44a-fe775c04e35a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "456462ea-4bcd-4d56-9560-118377f6bea1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81f8b978-3519-4f93-9bc8-079c5d7f328e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bf3cec5-7c90-4943-af11-91b851cc19c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed94b902-fcf4-4579-ae62-f6f266ae561f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6051f2a2-1bf1-4008-8a98-12affc414326",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "605ece34-567c-4fa5-949d-cb5c12111273"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "239a4376-0d42-4e72-86fd-41d450a25d78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a20728b0-66ad-4628-94e8-74841f02fa52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fda0a40-9c12-4c27-9282-686a58858a57",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91c0a31-e839-41df-8207-2efea1a5b80d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7584241-31fe-4536-a9d4-8f037821cf08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d0d5f2-fb32-4f3f-9518-057b68a32acd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a4a7270-aeda-4e27-bff1-816ecc366fd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff06537-dcb2-4b2e-ae00-3715d095086c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90d55fc5-6c59-4d58-a1af-cdce97aa8a40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce8346ba-c6ea-4df5-9ccd-5bde7b94dae7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec0a95f-71fe-42c5-a5d1-95ab7a92651c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6187050-724e-402b-8b5f-066b532b8df1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91cbcdf7-f2f7-4570-b0a1-d8348a8f3c5e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d629438-5de6-4c7d-815d-ab07870d83e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e128ea22-4c3a-4961-b571-c46320397056"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd327bb3-3f91-4eaf-9a59-dce467a431a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac666bce-1884-4a8d-b82a-5afdc9246356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f2ec83-0885-47fd-bfa1-5f2bf58e65df",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a277f6dc-25cc-458f-b923-634541d2c3fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e71c38dd-d412-429f-9c73-c2c2e6514c28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b490a15-9e41-496c-8000-49946c87e0be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8960608-a1cd-4089-9535-f21e303f7faf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16fc156f-e85f-4970-ac54-410a515781db",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "966f256b-5857-43a3-a88b-c71e08341800",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d878b8bc-3523-4429-8106-983ee7995b1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de3ab1ba-a60a-4420-89ba-fa8f71a8ab88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "764a26a6-6c47-435b-b9e4-9c4e0447f79d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9a2c33f-f12a-487d-aa56-9c9cdf7a0667",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c16304d-f559-480b-b92f-bb0354838499",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9779cb45-2830-46e5-9254-1d6523baa0cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f072131b-d994-466b-80c5-cbbb1fd9040e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9a0787d-e6e6-40d6-9a3a-61ddaf055006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ba89df-797d-423c-8e0f-5963fbdc1fef",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84772437-0067-44f7-a272-48da1c56a594",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6ee1286-afbf-433c-9928-3aabe6ef2d7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3464b85d-ebdf-4ea8-9bf1-5fb5e0e14564",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc851f6b-c2d0-4165-8a0d-d63d9d792d99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "646af1f7-79c9-49f1-ae21-0348257dae14",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99e0a27-c430-48be-b6b3-ca657478ae6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99c94c2f-87b0-44cf-bdcf-efe4d4f58264"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d97adad6-0833-4b05-bbce-ccbd8afd410a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d36142d4-b7cb-434d-8472-c2a0da0b296a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "116b25f0-ca57-4bdb-9c3e-5c747cb1be83",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df9382b-e07c-423f-a01b-00523cc539a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb1d9a11-edd0-4498-a0ec-552abd0e7631"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be65429c-b22f-4c75-9db8-ffafd5d6cb0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b16447e-c2e0-4f4d-9128-11c6faa49e3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ab15f70-ddb1-4a07-a546-ef718d6782f4",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da480ef0-80ce-4bd3-911d-7ab7745d4ab5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52515126-2d1c-429e-acce-a73f48095049"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c2016b6-90af-4e0e-b2c0-b6607bb4dc78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4abb5d0d-9260-4c8b-9e09-d5307325c99f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44f5fb6f-ad78-4b98-8f68-56ce4f70a5e5",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33be3ece-feaa-40b7-81f7-063f41fd063f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f6ad736-5279-47df-88f7-dceb26579b49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "714bbec2-bf70-46ce-8af5-59ceda9afeb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fafce0ee-d521-4fb5-abdc-2523a59aea19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f7d82e-67da-42e3-9dad-f91ad5278320",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eef3dd9-5d01-44a3-b96c-f0756b02e0b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c186eaa3-3307-4ec7-b0b4-9f9b6d5959e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb742076-9f49-4785-9d98-94a1d4cbce62",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ab5513b-f0e7-4ede-b103-de081b382df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c64c965-490a-4c4a-aaf5-ce17de23aa98",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "775e57b5-4cd0-4d75-8de5-321d1a526312",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9095dee-4298-4fb3-b6c8-16e98a054322"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f3af026-340b-41de-8cb6-4136c8aa4d50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de3242d4-ab66-44ca-9a26-780aaed891f2"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c38c948c-dba7-49d6-a270-8d795ebc4648",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f58a16ef-b8ec-4277-95dd-e4d0a3a5f981"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0f2fcf1-3338-4d6c-969f-5f00b132853e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4b4f9f3a-a6f5-4be5-aff5-3f0d128ee9a1"
                    }
                  }
                ]
              },
              {
                "id": "1faf04d6-9fea-4d5a-969a-feb5c28fd571",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c1c1e099-0235-4490-851d-a271febd4659",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8495cc16-7587-4040-a074-b45f8b85ce44",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d10a533c-89ab-44e8-9d24-d17a9600815c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66cc9854-607c-48ee-8855-13c5374539e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0c34176f-f477-4632-895b-9c46ee688c4c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9f2853f-8c20-4d97-a821-a78f1c50e3f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c47816d-d3dc-4f8a-a0d9-f0b2b0486907"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "37da79da-7569-430f-b8e5-dee406a41c0a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78b7ad79-d29e-4905-974f-c9a357962927"
                    }
                  }
                ]
              },
              {
                "id": "4eb3d118-6bdc-46b8-83a6-ed1bc6b9812a",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6d6d8423-5b98-4bcd-9955-b75344f3bf7d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a219ee9-be28-4e17-b897-7f3d25b37b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "7baa8dd6-7f96-4168-9923-02cd9f5971ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d209a106-cd68-464a-bb63-82a4605bedfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "204aeca4-3981-4d8e-98df-5cbc7d5b1d56"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "70c09e8c-4171-49cf-affd-47e8a69bdfdd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c77d1d39-4f68-44e0-8910-484b1da0a084",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7093599b-5328-42df-a8e4-eb13e8da5afd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "96655307-7f34-473b-a4e9-4665c5c1e611"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b29d76aa-0cf9-47ad-9ca2-f2b963111424",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c89efd95-15fc-4526-b739-ec452e2dcb45"
                    }
                  }
                ]
              },
              {
                "id": "f9fccc3d-5a70-45c6-964b-dcd845ee503c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ffd62c83-0d6b-4e4b-ae1d-82a904733bfe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9961ffc9-5364-4fed-af3d-6e7636543712"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8eb2a901-b10b-48ae-8335-6bffe5f7c763",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3ee13a68-eefc-4ffa-9c0b-6409d3b0637c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d1a23ae1-0444-4545-8bbc-a2cd98375d85",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "44287ffb-d062-4b41-a7ee-49e251c4c88c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "612c7ff7-fe20-4e4b-976c-ac1c29f9a227",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6ba0a7fe-8065-4dac-83f6-e07dae868d7f"
            }
          }
        ]
      },
      {
        "id": "1f267770-46b8-449d-b922-307c428ce3d0",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "d2564f8b-6d1d-49bf-8cf9-0d76a8002a13",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4ca59e31-aa83-4886-ae84-7f1eb9802459",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1a938b48-bfe6-49b7-aed5-466f74fa1bf8",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff777db-5e9c-4fff-b916-98d1ff53c2d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8ef719f0-2d5e-47a0-9f94-e4dd1a1df7e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cca8390-4366-4a24-b6d0-a14896eb84ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e4ab7dba-83bb-4a90-93b6-e61c1a89f5c1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ce14bda-6dde-414b-8650-68d8e5cf44c8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b318546a-14ce-4960-8e29-8b22036a9f1c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0aa904a4-4441-479b-bd1f-d3489d4d6482",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0c99affc-63d8-4654-86e9-4de1cecaf9a7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "10f630ea-3837-441a-9c4d-6553b1cab714",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "65cc7acc-03f6-433e-8908-044a02fde382"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3cd4e14f-3d82-4f45-88a9-4cb16372901e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fda9d32f-a58b-45f1-8428-9c84341adb22"
            }
          }
        ]
      },
      {
        "id": "0dcb0268-4cb6-4bfe-9d57-a707d2385f6f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c02e01ea-d123-4a76-b2ef-bf26308c65bf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "49b121e0-e91a-4b7e-b9fe-7119a752d340",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "87cc5ee4-badf-4a7e-a223-6cdb32ce1fbb",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6319a900-c965-49fe-bf06-1e837b73db31",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e72b6d2a-d1b0-436b-b2b9-023041d67bc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f815cedb-574c-4bee-ae79-287d2520382a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cf4801bc-b7a9-4920-a1d5-35fb751f0637"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4614ca4c-c0b6-4e68-9673-9a88be88d418",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7428a3b-17f0-4fe3-9fdf-d1ee68630a85"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d9161c1-3d47-40bd-a73a-ef5387038197",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6cc38bff-40c2-467d-86c1-602ef9674fbd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0af5d412-2fc1-46ef-b469-ae072643feea",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "af93927d-9ead-4c04-831a-90f541432635"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d6415f3b-9c55-4f5a-b4d6-57e46d15b685",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0159fce8-a4d5-49a0-8511-b464198c9b88"
            }
          }
        ]
      },
      {
        "id": "84ca1530-a0d8-4e29-886b-d61a6d1ce59e",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "38278fdf-b4f7-4eb7-9724-79ba0588c033",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fae0b0de-319b-4f03-9daa-4a4a17eff385",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0aa08b7d-721d-40c3-a10a-b58a69eed8da",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2cb7f79-1e00-496a-91a6-7fad474991b6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9a3e52a-d5fe-4a4b-ab39-3f1e981b40f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "223b14e4-96d1-4436-b147-22ea84e80aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e348ce24-fe1c-4043-8238-8cc0bd7fd3d7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "40597435-6573-49ae-9398-21a651201591",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d913cd5-356e-4430-9161-718b55a48474"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "618b1e0d-2425-4917-8933-cf5e79cabe66",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cce78636-f217-43ec-bebb-f3c889a47db5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7ecb8b9d-3c82-4e6d-b6b5-4b150f63f434",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "092df663-3f1e-4954-b068-e8829eb2a2c8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "698a62fc-575b-45cb-818e-830ac064394a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ee588cbc-4157-4eb3-998e-e805210bfb80"
            }
          }
        ]
      },
      {
        "id": "0310e5da-a385-4d0f-af1e-0eb586394520",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0d6094fb-9091-47ea-a921-d762ef548521",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a9e3089-7640-4929-a538-9ca3c6c08bf2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6d0309f4-4f14-4590-871a-56380f827bf2",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b943178-4c99-4561-bf71-3a78e225b168",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f22ba74a-f579-4c9f-af9a-89efb6b10f0e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 101.23809523809523,
      "responseMin": 46,
      "responseMax": 711,
      "responseSd": 81.9308098115225,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1716597354294,
      "completed": 1716597388216
    },
    "executions": [
      {
        "id": "20496ccc-9257-4f53-b97b-a74daaf50fa5",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c35371e3-e693-4633-a6d5-bfd267ea68f1",
          "httpRequestId": "76c8910d-3662-4449-aea4-6ade0f8f6a36"
        },
        "item": {
          "id": "20496ccc-9257-4f53-b97b-a74daaf50fa5",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "13177d38-98e9-4053-82b3-faeba1d51c33",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 0
        }
      },
      {
        "id": "de185381-a9b6-42f8-82ad-2e64363f5e0a",
        "cursor": {
          "ref": "645d5b51-8252-4feb-8c42-5be39bf23a52",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "46221d14-8760-474f-8625-623ffcbb6a1e"
        },
        "item": {
          "id": "de185381-a9b6-42f8-82ad-2e64363f5e0a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "a8e6fcee-d7f8-4d23-8b2b-d96ae5b379f6",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 0
        }
      },
      {
        "id": "e3794e91-3cfe-4e5d-bd6d-6e4fbc791121",
        "cursor": {
          "ref": "1c2e8160-7336-4a43-b0fd-6007c8ab9f9b",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ae1d16fc-3076-498e-9030-e67e26262093"
        },
        "item": {
          "id": "e3794e91-3cfe-4e5d-bd6d-6e4fbc791121",
          "name": "did_json"
        },
        "response": {
          "id": "cced95c9-6c81-4fb7-8da1-6a8936237dec",
          "status": "OK",
          "code": 200,
          "responseTime": 326,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec6f6142-2d52-45d0-8285-99115d3357ce",
        "cursor": {
          "ref": "add052cf-3db6-459c-b081-0ef8051744b4",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6c3c9d30-bfe0-4bc1-a917-cdcfb8ec7d83"
        },
        "item": {
          "id": "ec6f6142-2d52-45d0-8285-99115d3357ce",
          "name": "did:invalid"
        },
        "response": {
          "id": "464abbb4-73c0-4b86-b64f-b2ecb8be96ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec6f6142-2d52-45d0-8285-99115d3357ce",
        "cursor": {
          "ref": "add052cf-3db6-459c-b081-0ef8051744b4",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6c3c9d30-bfe0-4bc1-a917-cdcfb8ec7d83"
        },
        "item": {
          "id": "ec6f6142-2d52-45d0-8285-99115d3357ce",
          "name": "did:invalid"
        },
        "response": {
          "id": "464abbb4-73c0-4b86-b64f-b2ecb8be96ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b8d597-1387-4636-8b80-f3053c0130a1",
        "cursor": {
          "ref": "d58cffeb-2add-4ca5-a26c-ba948e79362d",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3da4d1a9-56f0-4ba8-8849-defd44945d7f"
        },
        "item": {
          "id": "63b8d597-1387-4636-8b80-f3053c0130a1",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "48b04362-050f-4f52-8df7-0498fcada455",
          "status": "Not Found",
          "code": 404,
          "responseTime": 352,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf9d393-beab-426e-9cd7-784e686991ed",
        "cursor": {
          "ref": "cd8d5f78-817d-42f0-beab-4003524da6d8",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "b876ac3c-0d90-46dd-95e2-96587841155c"
        },
        "item": {
          "id": "cdf9d393-beab-426e-9cd7-784e686991ed",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "60ccb62e-4ce8-4683-a526-e4965f273918",
          "status": "Not Found",
          "code": 404,
          "responseTime": 78,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ead6065-6753-4cb3-b4b6-28db86b17626",
        "cursor": {
          "ref": "f3ad435a-ef6d-43a0-b4e2-5f9fc4b651e8",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "bf68baf0-9fb0-493a-a323-7fe04f0fb114"
        },
        "item": {
          "id": "7ead6065-6753-4cb3-b4b6-28db86b17626",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "4976e32c-8b2e-4ad4-a86c-bc2f995dd72e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0e2eb39-d4d7-4880-afa3-4158bfbea726",
        "cursor": {
          "ref": "658e2a67-bb2a-49cc-b81f-43d67570afe1",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "29abd9c1-28ec-408a-8158-aa5c812ffa1d"
        },
        "item": {
          "id": "e0e2eb39-d4d7-4880-afa3-4158bfbea726",
          "name": "identifiers"
        },
        "response": {
          "id": "f6065583-e2f7-4525-b5ce-3a868efd4bc1",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6bd77e0-a879-49b0-8b52-f6aed1d992c9",
        "cursor": {
          "ref": "93be436b-f61c-4ffd-beae-7314982e08db",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9ff8f0b4-0338-4eba-abdd-dec6e191824c"
        },
        "item": {
          "id": "d6bd77e0-a879-49b0-8b52-f6aed1d992c9",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5781a591-bb89-40bc-bca7-5525119cf939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a100ba77-73d5-4249-9823-c59cc5e074c2",
        "cursor": {
          "ref": "b34d3003-965e-4692-904e-e2b18c11ea11",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f029e530-056e-4cef-b0de-8ebcf1d9bfc3"
        },
        "item": {
          "id": "a100ba77-73d5-4249-9823-c59cc5e074c2",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d56466dd-8034-4cde-bc75-db3e6d706c8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40d5779c-1654-4486-9358-f040f4f48c2a",
        "cursor": {
          "ref": "2cfe830a-1944-499a-8ae9-d022e84390ea",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0730ab84-873a-4d96-8f47-8486f9f94d4c"
        },
        "item": {
          "id": "40d5779c-1654-4486-9358-f040f4f48c2a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "15bdffdd-a4b6-45cf-b8cc-00588535d648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4bbe02-e746-434b-b2dc-89b81141403e",
        "cursor": {
          "ref": "94edf3db-9509-4120-96a7-6514c722bd16",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ba7573dd-06e0-4370-99d8-7b0ed093fd24"
        },
        "item": {
          "id": "9f4bbe02-e746-434b-b2dc-89b81141403e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "af31a772-8f43-4605-8aa9-f91cb525e09d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "197f3fe4-2c1c-49fe-9de0-a8a73fe29e57",
        "cursor": {
          "ref": "54d4b1a1-4cf3-401c-96e7-0504540cd8c1",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "fcad83c6-525c-4b18-8e78-31856f2104fb"
        },
        "item": {
          "id": "197f3fe4-2c1c-49fe-9de0-a8a73fe29e57",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "51bd76cc-4ecc-4de7-8e7d-a288d596c5b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "071022e6-9368-4f94-a75f-856777a353e8",
        "cursor": {
          "ref": "dd33e989-ab55-47a1-9cde-cae9d1b4371c",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ec6aff07-7dc1-491a-8cac-723e6f6f14dd"
        },
        "item": {
          "id": "071022e6-9368-4f94-a75f-856777a353e8",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "278d8093-a4e1-4979-8474-ab87d8ae3190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b51d3711-8238-45c2-9d39-c73983472e30",
        "cursor": {
          "ref": "6f0a27f7-0ce2-46a2-858f-f31d3fa6f9ba",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3e4cfde9-866d-4e02-91fb-8e0a1132367c"
        },
        "item": {
          "id": "b51d3711-8238-45c2-9d39-c73983472e30",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "1eb99a7c-c6c6-4332-8769-865e377e497f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c1b71af-4221-49c4-91fd-f1ea59e8a2a0",
        "cursor": {
          "ref": "22e3d1cd-5535-4696-9001-96be434d66fd",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "cc1f0d0f-5780-4072-84b5-b63866eda542"
        },
        "item": {
          "id": "8c1b71af-4221-49c4-91fd-f1ea59e8a2a0",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "94e97d94-c077-40e5-8700-2fc5547125cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef19d608-41f7-48e8-ab6a-13b0d88d263c",
        "cursor": {
          "ref": "d2f12408-c163-4e4c-ae9e-691002618752",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "38f9733f-cb3d-4c64-85a2-2bfc165f3b14"
        },
        "item": {
          "id": "ef19d608-41f7-48e8-ab6a-13b0d88d263c",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "a714ad09-3747-496c-ac11-54cadc3a68c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5aa6ee-0f0d-499a-a745-fb19c05e8637",
        "cursor": {
          "ref": "3d18add5-c4a8-462b-90dd-7779a1ef198e",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b4a13aec-d823-4d74-8785-0a6b276e7f83"
        },
        "item": {
          "id": "eb5aa6ee-0f0d-499a-a745-fb19c05e8637",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "728a4251-5661-4b4f-9901-dd201f46822c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a6ad920-385f-4abe-afa1-5fa55b2358e1",
        "cursor": {
          "ref": "699a2016-c3e6-4cbb-9d7e-fd8c00e2ec35",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2a959500-bde3-48d2-96f0-6296c9cd50bb"
        },
        "item": {
          "id": "5a6ad920-385f-4abe-afa1-5fa55b2358e1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "538f5452-0d02-4f8a-8ca3-799144ab3aa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41671c48-771c-48d5-b8b9-3ad8138cc904",
        "cursor": {
          "ref": "739d2e5d-b961-4d55-953e-1b0e95d87cef",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8207059e-3977-46e7-922d-da34adb66eae"
        },
        "item": {
          "id": "41671c48-771c-48d5-b8b9-3ad8138cc904",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "bc326bdc-4d50-4ac7-9a48-fa2de85c860f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39795e32-cbcc-4566-b09e-267a6ae0f140",
        "cursor": {
          "ref": "e64a6acd-f8c9-44c8-b45e-dd91f9c0604b",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b0953228-2189-47b2-aa51-52f7bb948172"
        },
        "item": {
          "id": "39795e32-cbcc-4566-b09e-267a6ae0f140",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "54436f58-6b1d-4699-97a1-9e4e5677b902",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bce2a879-ef46-49e3-9c53-f6ca70099c26",
        "cursor": {
          "ref": "949258bc-998a-4fa6-86f4-101f37303677",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ec16c727-e423-4290-9819-ca91ea3c05d9"
        },
        "item": {
          "id": "bce2a879-ef46-49e3-9c53-f6ca70099c26",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "c252f665-6d44-4e31-be99-fed50a6797d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fedb1b6-d0a7-4a12-ba9c-88dce0342d2b",
        "cursor": {
          "ref": "ff82e201-3a2d-466a-8b97-c3c07b67a2e9",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "fe8732fe-cd9e-4796-b15f-2c365c85d066"
        },
        "item": {
          "id": "5fedb1b6-d0a7-4a12-ba9c-88dce0342d2b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "c0c81e7b-6d2c-43ca-b43a-7ffd1d3855dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "888b76ee-2aab-4105-b332-61252e87fb24",
        "cursor": {
          "ref": "a741258c-9b82-401c-87c3-c20152ca61e7",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "fd02732d-0858-459c-a6ff-f9fbcf28a371"
        },
        "item": {
          "id": "888b76ee-2aab-4105-b332-61252e87fb24",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "505d1036-7400-46e8-bb6e-0e05f1359e4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f286b1b9-e502-4c65-a551-d592d28f0f82",
        "cursor": {
          "ref": "f9939aa3-5ccd-48b9-8a78-12955a983067",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "13a5b01c-89da-4208-a5a1-3cd1d5ef105d"
        },
        "item": {
          "id": "f286b1b9-e502-4c65-a551-d592d28f0f82",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c768ebfc-3829-414e-b918-805aec1155a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d899818b-4ff6-4d5b-bd44-15646833e8ac",
        "cursor": {
          "ref": "dc9d7f05-780b-4476-821f-e83c4acbad9a",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e94ac9ec-63bd-4346-a61e-283d213d5a2f"
        },
        "item": {
          "id": "d899818b-4ff6-4d5b-bd44-15646833e8ac",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "54db0ace-b722-4f41-942f-fdce118548f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "397e6174-b3e8-446b-b1c5-aae3bd1bc014",
        "cursor": {
          "ref": "07649947-2427-4669-9b43-422de099c0a9",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "3e98e229-5ca4-4239-860b-e5217ef3457f"
        },
        "item": {
          "id": "397e6174-b3e8-446b-b1c5-aae3bd1bc014",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "047c2ba9-4f43-4b7c-acf4-8d1339ef7811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec8d1954-438d-4736-9979-be636065c50c",
        "cursor": {
          "ref": "4f4e3736-ccb2-4522-a92c-7262cd7bac0e",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "85d1f031-920f-45d4-9ef3-2f72c5a8d0c2"
        },
        "item": {
          "id": "ec8d1954-438d-4736-9979-be636065c50c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f32daf16-41fd-4556-80c4-2f2ec16c034d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6390df6-f22a-4473-bad6-607100a56521",
        "cursor": {
          "ref": "4b3dc8cb-c113-4665-b71d-2428d5301b53",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0ffcb0f5-7c4c-4b04-8c5a-71920dc40ad9"
        },
        "item": {
          "id": "c6390df6-f22a-4473-bad6-607100a56521",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "53a6d17c-ba38-43df-af05-197c8f2df8ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa03834c-d886-4f46-8449-3bf7f9b36d7c",
        "cursor": {
          "ref": "2f624908-9e50-4756-bf26-72d4e8b3b938",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c4933d59-a286-40d0-804c-1e64c83d32c1"
        },
        "item": {
          "id": "aa03834c-d886-4f46-8449-3bf7f9b36d7c",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "5967e5e4-9cd9-4f38-8f77-2705d1be63fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e4e1bc-1254-442d-bfa4-6d8201ec827e",
        "cursor": {
          "ref": "19a6e91d-f17e-4daf-98c1-a910dfb480f8",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ba6c8fbd-74a6-4be0-b120-46cf05dd796c"
        },
        "item": {
          "id": "69e4e1bc-1254-442d-bfa4-6d8201ec827e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "38b6b100-2a22-47df-a7b1-e4c75aee7af8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ec82a9-bfca-4aaa-a004-f65c12562a6b",
        "cursor": {
          "ref": "2e3d7519-1454-412d-b9f9-e984752d513a",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9414d971-3c8a-4d19-bc9b-6f4e60866a47"
        },
        "item": {
          "id": "83ec82a9-bfca-4aaa-a004-f65c12562a6b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "f3219382-a232-4f03-ba93-ac4b21ec1a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e293df6-e0ea-4d03-9a6c-2090bb8829f0",
        "cursor": {
          "ref": "a40f1172-6e1b-4040-b6f3-ac090b7409f2",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1c8a8f62-4aab-4f90-9b96-82f69d54d427"
        },
        "item": {
          "id": "6e293df6-e0ea-4d03-9a6c-2090bb8829f0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "9a4370ba-b8bf-4f28-b44b-a84b173dcaa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d18f2e1-20ca-4ac6-9cbb-f81fc2e569ae",
        "cursor": {
          "ref": "8e03ae98-e7db-40bb-ab41-e271948aa1e9",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d3dc723c-5e77-4f6e-a0be-7ce20e8a6cdf"
        },
        "item": {
          "id": "6d18f2e1-20ca-4ac6-9cbb-f81fc2e569ae",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "cb592156-c85e-4c02-9aeb-5f5e35579e60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6366ee3f-1f5f-4547-b625-c387d1f3534a",
        "cursor": {
          "ref": "5f1e81da-63cf-4172-82ee-811bdb6d7cf3",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ce0fdf75-f2e0-46d0-afd9-c21778ee5938"
        },
        "item": {
          "id": "6366ee3f-1f5f-4547-b625-c387d1f3534a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "da26bf20-1cdd-46d0-8ee2-d2b5de7d815c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "153216e0-752f-4a03-9625-251b7a127504",
        "cursor": {
          "ref": "7aa18a00-d5b0-4020-8587-d1735f4def7f",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c23c5723-9f5c-4005-8c16-3883e2b1d2e6"
        },
        "item": {
          "id": "153216e0-752f-4a03-9625-251b7a127504",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "49f0cc3e-5d0b-4037-885d-83186de1e699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99d00937-9f71-425d-b698-a186b83c8216",
        "cursor": {
          "ref": "d8a14dd1-7a39-4d88-b001-9c36e62e8570",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0c3b6fb9-b61d-4b63-a589-30251e41dc7d"
        },
        "item": {
          "id": "99d00937-9f71-425d-b698-a186b83c8216",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "3f707ea1-9594-4b94-83fa-bc58510c0c72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b28b514-33a1-4f41-a554-1c1fe53d1fd9",
        "cursor": {
          "ref": "2f741bcb-029b-4e82-8c46-235451dca295",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1bac9c4d-8a7e-49dc-a807-dfbeb7f536e6"
        },
        "item": {
          "id": "9b28b514-33a1-4f41-a554-1c1fe53d1fd9",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d67d0a08-cca5-4c24-ae27-2835fd7ecce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f891b4a-c985-4153-a3e8-d287d67534f8",
        "cursor": {
          "ref": "adb60d54-4a51-45aa-8532-c684ca79ac6d",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "955854be-593c-40b6-a92e-b0bcd7f34200"
        },
        "item": {
          "id": "8f891b4a-c985-4153-a3e8-d287d67534f8",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c6c8ee20-3c4e-4f0e-bcc6-2216824aefa8",
          "status": "Created",
          "code": 201,
          "responseTime": 711,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "fa3cf153-e730-4a1f-bcb5-718cfc283ccf",
        "cursor": {
          "ref": "6b22c4dd-f220-43c2-9773-e740b9e8c57a",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "fe56d5bd-db49-4ac8-b350-dcc5d2bc0cac"
        },
        "item": {
          "id": "fa3cf153-e730-4a1f-bcb5-718cfc283ccf",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "4d44c79b-65ea-40db-baae-90ce4ed00d98",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "892dec08-72b5-4a7a-8866-c70cb2c00718",
        "cursor": {
          "ref": "91c2c7d6-514e-48b5-bef5-77a811da5502",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ee2c0ca8-da9f-4180-aa88-4b6c9d04b685"
        },
        "item": {
          "id": "892dec08-72b5-4a7a-8866-c70cb2c00718",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "77f17a37-b000-4b56-96b2-f2f0d8b5271e",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "44a90888-8a8f-4387-aead-107b9c5d9847",
        "cursor": {
          "ref": "d36b869b-d015-4df3-aff6-fd8eaa5b0867",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4c7e5001-7adf-435e-ace2-afe6c0ee82bc"
        },
        "item": {
          "id": "44a90888-8a8f-4387-aead-107b9c5d9847",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "da0da7e0-d21b-48c0-948c-e3bbe9513c43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b714274f-58e7-4f46-8692-530783011ef4",
        "cursor": {
          "ref": "2869af4b-58f9-4440-acd8-0588f5b70d88",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "dec482a9-d4dd-484c-a6c5-419180c6ca23"
        },
        "item": {
          "id": "b714274f-58e7-4f46-8692-530783011ef4",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "bf459b3e-c518-4752-bb63-ecffc34c6136",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "f249d22f-ae6b-45e4-bf3f-356f44be4c50",
        "cursor": {
          "ref": "30365198-147a-4162-bc2e-56cbf058b123",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1fd200a1-241b-4479-a183-119b36065a60"
        },
        "item": {
          "id": "f249d22f-ae6b-45e4-bf3f-356f44be4c50",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "8d347829-6497-4130-b4ea-477a758df870",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "e0ae06e4-6050-4ee2-b6d0-19f63a33b55f",
        "cursor": {
          "ref": "cfdd8694-7e67-47e2-9dd0-a43c174d10ac",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "71d0e457-71ec-4318-ac25-15e698115796"
        },
        "item": {
          "id": "e0ae06e4-6050-4ee2-b6d0-19f63a33b55f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6e98775b-e232-4787-9c5e-f328e59a6397",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "b227f49a-da8c-4059-8be2-52254f87a0d8",
        "cursor": {
          "ref": "4a5684e6-0d72-425b-94ad-39a68bbf0b35",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6beb5d92-4853-430c-b84e-1bb820b60837"
        },
        "item": {
          "id": "b227f49a-da8c-4059-8be2-52254f87a0d8",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a79361c4-d1d5-4212-8565-c3b4b5b4ee8d",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "2ee6b3c0-6440-42a5-bfbe-9e08490fb3d3",
        "cursor": {
          "ref": "ae32116f-7075-4ba6-a68f-2693e64f2b02",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "92f56312-76bd-4702-9c61-d1b72e3faa17"
        },
        "item": {
          "id": "2ee6b3c0-6440-42a5-bfbe-9e08490fb3d3",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b95c9b8e-7b63-400f-8aa5-ba928d2a4123",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "21f2b877-916e-4320-bd4b-b695abbf0e3e",
        "cursor": {
          "ref": "496cc2a5-7a0d-4e5c-be05-23fcf2cbdaa1",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "dd6d7116-e731-491f-b6c6-01c4fd040691"
        },
        "item": {
          "id": "21f2b877-916e-4320-bd4b-b695abbf0e3e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "75a023e1-a392-4541-8b61-c23cddbd9afc",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "7be13258-0073-41d1-afe5-ad0320dd238e",
        "cursor": {
          "ref": "8c62c7ed-d403-401a-92d1-beeadf4a046a",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "050da325-ad4d-4507-97fb-4d782984a901"
        },
        "item": {
          "id": "7be13258-0073-41d1-afe5-ad0320dd238e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "fcaa3f8e-6dbf-4ce0-8826-7322efa0ce87",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "4b45dba3-563e-426a-8bb4-d53de81182d3",
        "cursor": {
          "ref": "d7fc36a9-d2ab-413b-a622-b0bd6d6a4bd6",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "188ddda7-4922-46e5-916c-1f86d6761f62"
        },
        "item": {
          "id": "4b45dba3-563e-426a-8bb4-d53de81182d3",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a838d8e9-566a-4869-a240-73d59600e952",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "1330b0bc-9e8d-4e59-9d38-7b80ef1024e2",
        "cursor": {
          "ref": "c55a48b6-ad59-472c-974d-743a1f76dd1b",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "55ec08c6-0e85-4cdc-98b8-c925fa614212"
        },
        "item": {
          "id": "1330b0bc-9e8d-4e59-9d38-7b80ef1024e2",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "dd387e05-4fe2-42b2-af86-22ea16d03b59",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "59f5e31c-132a-4c89-b39f-899718972581",
        "cursor": {
          "ref": "9f918f8e-0136-44d6-9723-deb3b1c002e0",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d93517c7-fc8f-49f8-8747-95f45dba079c"
        },
        "item": {
          "id": "59f5e31c-132a-4c89-b39f-899718972581",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d0a3714f-1b66-4b8e-8f4c-d3fe0e6c66c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf15fa0b-52e6-483f-9daf-66e27a513ede",
        "cursor": {
          "ref": "c3c94aeb-e1b8-4a32-b02f-f10934c43218",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "4465cccc-6438-4f48-b851-7fb09909f8c0"
        },
        "item": {
          "id": "bf15fa0b-52e6-483f-9daf-66e27a513ede",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "fc645a4e-0172-4eaf-845c-8569233497b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "639efc40-0cf1-426e-b403-cfad6cd46ec9",
        "cursor": {
          "ref": "324d6139-786a-4af6-95eb-da13a4786898",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a20b2036-8c8f-48d2-b183-924fac455a1d"
        },
        "item": {
          "id": "639efc40-0cf1-426e-b403-cfad6cd46ec9",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "58979cac-5471-414b-b0f6-32b7a4043ad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfc3a8bc-8df0-43ed-a7a3-29db2a9e92b5",
        "cursor": {
          "ref": "213b3155-4e6f-4d51-bbee-827dfd86d3b8",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "62c5b46d-e9c9-4bce-bfeb-943dc8ed9dff"
        },
        "item": {
          "id": "dfc3a8bc-8df0-43ed-a7a3-29db2a9e92b5",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "406132b8-cc7e-47f2-a064-c69d64fb55c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "422fd3c6-9571-4142-bfb5-81e8e6d55e48",
        "cursor": {
          "ref": "2047a677-ff9d-4c6c-8abe-2224e1e0ef3b",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "941c57a0-5a96-4e0b-ba97-4bc77e1200e5"
        },
        "item": {
          "id": "422fd3c6-9571-4142-bfb5-81e8e6d55e48",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "9a42197c-89eb-4917-86b2-604f83cb5e3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb1a9b5a-d1d5-4b32-aa8c-34a3b027bd9c",
        "cursor": {
          "ref": "3a6556b8-7c8e-4095-bf96-ab8bd863c207",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "0b2bd28e-8d5f-4fdd-93db-17be06ec1154"
        },
        "item": {
          "id": "fb1a9b5a-d1d5-4b32-aa8c-34a3b027bd9c",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "24e4eff9-ec73-4d79-a3e2-c4620d634c08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e7495f4-5146-4db6-884e-2855986ea72f",
        "cursor": {
          "ref": "87e8841e-b6ed-4d65-9e71-80ec9f58917f",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "bee111bd-d87b-4130-bfc4-c3bd24e81241"
        },
        "item": {
          "id": "5e7495f4-5146-4db6-884e-2855986ea72f",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "64e81fe4-a8dc-46a3-b9fa-cf0a5445b6e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec1001ba-3f7c-4da7-b1b8-d2e306fc31f6",
        "cursor": {
          "ref": "d925745a-6566-4d85-abc9-f617ecfa8885",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b52c4d31-0de5-4ea6-b907-3f0291e741f1"
        },
        "item": {
          "id": "ec1001ba-3f7c-4da7-b1b8-d2e306fc31f6",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "55ca4b36-680d-417a-933b-aa9fcd3fc06b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31286816-88c3-41ca-ab9a-86f3cbbfac54",
        "cursor": {
          "ref": "c51bdb52-3343-4f07-8eb1-8016d33b391d",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "4f8871ac-95be-42d4-a31f-a32fc216b763"
        },
        "item": {
          "id": "31286816-88c3-41ca-ab9a-86f3cbbfac54",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "86b36156-e615-4ad5-9c12-286c28b7f098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e3eddd-2fd9-48c9-9da4-2130add84ec2",
        "cursor": {
          "ref": "fdb89fe8-9cdf-4a5d-96f0-39286b10666b",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "45286ebd-a69e-46cc-b977-14bd8f9d409e"
        },
        "item": {
          "id": "23e3eddd-2fd9-48c9-9da4-2130add84ec2",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "4dfe8e39-16a9-4550-854e-933f98238c8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d44bde9-3455-4b67-879c-542939203122",
        "cursor": {
          "ref": "c119e18b-ad75-4e99-b0f1-7b716a38f114",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "2cb31e7c-3041-4658-8454-c3531027bbb8"
        },
        "item": {
          "id": "6d44bde9-3455-4b67-879c-542939203122",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "105744c7-9c18-4ec9-a542-e15a1fa624eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca26c787-7a96-4f27-b193-5eab702e12a8",
        "cursor": {
          "ref": "10540723-13a8-4741-ba93-5b781efe663b",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e44984d6-47b8-4bf4-b457-a7026ebbffa5"
        },
        "item": {
          "id": "ca26c787-7a96-4f27-b193-5eab702e12a8",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "094ed76c-07db-4dc2-91a1-659807e2c810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d88f5cc8-8373-42a5-ba80-6b3bb409d284",
        "cursor": {
          "ref": "e7ae3e39-8863-49fc-b514-606640f61ec5",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "2f13299b-2f3f-4c9d-863c-f72f6e159641"
        },
        "item": {
          "id": "d88f5cc8-8373-42a5-ba80-6b3bb409d284",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "98d1acfc-0342-4a73-8e86-c6e0c8118c39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8523ff8b-a66d-4768-8b2a-662850eb26a8",
        "cursor": {
          "ref": "e49fe9e6-3db8-4569-89d4-fb9b67cc36f9",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "0b9265d3-4259-43de-8ebc-4e94b61b9de0"
        },
        "item": {
          "id": "8523ff8b-a66d-4768-8b2a-662850eb26a8",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0b89bb2a-beb2-46a0-b036-26b98461acc3",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "4825082c-8e29-44c5-bed0-4fbf53cf449c",
        "cursor": {
          "ref": "923b1eb7-53eb-4fc2-81c4-46976719dd67",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "959cce9c-ba9a-4960-9e63-702d506bbe92"
        },
        "item": {
          "id": "4825082c-8e29-44c5-bed0-4fbf53cf449c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "4725ce2a-5877-4665-8d2e-7095439fb472",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "6311e118-ad81-4838-b5dc-a958da714cb7",
        "cursor": {
          "ref": "20a287ec-5667-425c-b75c-c97e0a57d86e",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "11c49fd9-42ea-42af-840c-3505879900fd"
        },
        "item": {
          "id": "6311e118-ad81-4838-b5dc-a958da714cb7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "377912db-56a0-4e6e-9d68-c122d2e56545",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "965804c9-2f09-4412-ae7e-03de33b280f3",
        "cursor": {
          "ref": "98aef985-2fa8-4754-9174-919c3b40b610",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5ad111fe-fd75-4fc4-8812-6ec6c7a1931d"
        },
        "item": {
          "id": "965804c9-2f09-4412-ae7e-03de33b280f3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c922dd61-306a-439b-91cd-3101e85b07b7",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "d73d8c1f-ff86-4c6b-8bbf-a57ba00958f8",
        "cursor": {
          "ref": "8811f4b2-725a-407b-a89a-dbb21b9de2bc",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ee86f0c3-98d3-43e0-9908-6e0a88f7dc49"
        },
        "item": {
          "id": "d73d8c1f-ff86-4c6b-8bbf-a57ba00958f8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "cbd50a08-7863-4835-baf5-cbff63ee2851",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "7a45fd49-7a84-4ce2-8f26-e0d1decb037c",
        "cursor": {
          "ref": "f15f4ee1-58a8-4b24-8600-e69256f6ed64",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "01cd68af-d697-4779-bd8d-06fec2ab91ad"
        },
        "item": {
          "id": "7a45fd49-7a84-4ce2-8f26-e0d1decb037c",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "3a4ce00b-56f3-4f24-95de-c39895bee7e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c651f59-2808-41e1-955e-d71cde729515",
        "cursor": {
          "ref": "5d1ba457-d857-4427-a910-c5d94952928c",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "8d1db823-9178-40cd-a879-b045952ff0a6"
        },
        "item": {
          "id": "0c651f59-2808-41e1-955e-d71cde729515",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "da57ed61-eff1-4ed2-b631-a2ebd39b422f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "771707f8-5630-4609-81ad-753496198397",
        "cursor": {
          "ref": "928cefaa-35b2-4dfd-b18f-1bc53751b33c",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "faff00bc-a9d8-44cd-a316-54928b1134da"
        },
        "item": {
          "id": "771707f8-5630-4609-81ad-753496198397",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "619a3a79-d10a-4772-b108-b9e7de3b596e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55bdcdad-9df8-4861-b463-908e3c05a291",
        "cursor": {
          "ref": "0c41cedb-1d32-46e9-aca5-7d78a69dd758",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "bde69ab4-084f-41ed-aa26-ac6b2454222c"
        },
        "item": {
          "id": "55bdcdad-9df8-4861-b463-908e3c05a291",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "57c67223-7c1b-4321-8944-0b1d976b813f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaf591b2-b174-4555-af36-835d7ca64c71",
        "cursor": {
          "ref": "3eb06d18-7071-4151-89ac-c2305898d6d8",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9fa937ef-e439-44fb-b967-685d03ab30dc"
        },
        "item": {
          "id": "aaf591b2-b174-4555-af36-835d7ca64c71",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "effb8f4b-25d2-4b19-a994-a4ec52144b19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e75d52f3-7620-43e6-bf3e-0c75a4d598b2",
        "cursor": {
          "ref": "c117e34c-58de-47a8-8d10-bf6dec3c2267",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "51c73ac4-475e-4f3a-a36d-728d02748ecb"
        },
        "item": {
          "id": "e75d52f3-7620-43e6-bf3e-0c75a4d598b2",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "e5806e35-61d2-4e4d-98a3-ff82f0b407cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b9c6e3-85cb-4570-8ca7-c4d553d63147",
        "cursor": {
          "ref": "beb4564e-b537-470f-879a-7bece0a18b5d",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "496f0f62-0ac4-4a3a-b7c4-11d6eb2f8dff"
        },
        "item": {
          "id": "05b9c6e3-85cb-4570-8ca7-c4d553d63147",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0654fde4-436f-4e92-a5eb-096b731ffde4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34c49040-6212-4c40-84b8-4f0eead55369",
        "cursor": {
          "ref": "adb70321-b037-4fff-b519-1aa66ecb2bb5",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "32ec8e99-b018-4465-8750-cd9afd089df4"
        },
        "item": {
          "id": "34c49040-6212-4c40-84b8-4f0eead55369",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "81874349-600e-4cae-b8ee-42b2fb9bb70c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "980101d4-f0e2-496f-986b-7bc1ad388346",
        "cursor": {
          "ref": "49821b6b-ac87-4cf5-b0a9-a7e73f72b85c",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f54fb36c-439b-4b80-898a-350d6eadb82c"
        },
        "item": {
          "id": "980101d4-f0e2-496f-986b-7bc1ad388346",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "9aa8ea8b-d059-470b-a02f-7ea397c0b8e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d3f1803-6d3c-483d-b719-5d8322a17cd5",
        "cursor": {
          "ref": "e0fa4d23-36b2-4863-9ed6-40bfe7d14f45",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c9a610ad-2a4a-4a01-8ec5-ef0e34c9d268"
        },
        "item": {
          "id": "3d3f1803-6d3c-483d-b719-5d8322a17cd5",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "2018968e-7813-4cf6-b23e-3fb3951c11a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba12dbe2-759a-487e-a424-ce057d4612bf",
        "cursor": {
          "ref": "a21d3025-8323-4b13-9761-d86b235e0673",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "bfdff14f-61d1-44e9-9cf6-cd617c11a866"
        },
        "item": {
          "id": "ba12dbe2-759a-487e-a424-ce057d4612bf",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5f36dec5-8134-4c2a-9360-8beed78b97f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06a074f7-4c82-43a0-a62c-5dd7d1dd0839",
        "cursor": {
          "ref": "db6cb5c9-d924-4262-94a2-c6f5796fd597",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "d54c7256-5bed-4e66-9ded-74990fb78273"
        },
        "item": {
          "id": "06a074f7-4c82-43a0-a62c-5dd7d1dd0839",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "35d1aeca-6a6a-4880-84c1-4cc1400a8160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d9d9181-e852-485e-a6b5-84ad4aed6c43",
        "cursor": {
          "ref": "cb0886d6-b36d-4576-83c3-e8e2fd637b63",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "31d137a2-ccf2-4d43-8a64-293535ff5178"
        },
        "item": {
          "id": "9d9d9181-e852-485e-a6b5-84ad4aed6c43",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "730255e0-d1c2-4d7a-a7b8-ee05f0ccbafe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e87786c-9430-40fc-a3d3-c2f0367ad498",
        "cursor": {
          "ref": "bef2b28a-4d14-4050-a2b3-35d370fdccad",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "26e6ef8e-2d3c-4435-a0ee-4f0386cf749b"
        },
        "item": {
          "id": "7e87786c-9430-40fc-a3d3-c2f0367ad498",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "4261d01a-90f9-4128-8b1a-f3f539fca659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61700010-17fa-4f1a-b255-4ba0279d36f7",
        "cursor": {
          "ref": "b3d154e3-e195-4e71-b864-6f8c6edb4d17",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "5c9c51e4-2add-49c7-8b53-54e4c4da8737"
        },
        "item": {
          "id": "61700010-17fa-4f1a-b255-4ba0279d36f7",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2028f237-00c7-422f-8278-fc93733cdda9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be08c5bd-73ae-44cf-abce-61bf29888370",
        "cursor": {
          "ref": "256b0020-a6e9-448b-9cef-94eae672e048",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d50aa2a1-f422-428f-9df6-f112db8654a1"
        },
        "item": {
          "id": "be08c5bd-73ae-44cf-abce-61bf29888370",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "26e78579-7deb-4df7-b74f-6274d470d42d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ebb01c6-217a-4460-9b58-757f1ed50468",
        "cursor": {
          "ref": "07a5db0a-86e6-4425-a598-bf4fde8c446b",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "88e57f80-ad54-4d82-a67c-74dd03ef333a"
        },
        "item": {
          "id": "1ebb01c6-217a-4460-9b58-757f1ed50468",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f4bc0c85-97d8-4731-b167-8a762dffd5fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "602cd97c-6ace-4055-9f2f-0ce90f510db9",
        "cursor": {
          "ref": "eb642d79-fdcd-4a32-9a27-d5ae5afac682",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3e63d24f-8270-4044-bc9d-1afe77c0b9d1"
        },
        "item": {
          "id": "602cd97c-6ace-4055-9f2f-0ce90f510db9",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "b01b7a17-7809-4958-8551-3b13d597efe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0f52748-fd26-4b15-97a8-3847a3e3585e",
        "cursor": {
          "ref": "163a17d1-c4df-4498-9f3b-5acd6b002b4a",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "1dfd4da8-9765-45dc-9fed-eb9ebcb0b5ca"
        },
        "item": {
          "id": "f0f52748-fd26-4b15-97a8-3847a3e3585e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "560caa75-bd7d-440d-ac52-d723197f8d41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e874121d-bea5-4d75-b66c-a11f52e0c6c1",
        "cursor": {
          "ref": "0237ed7c-923b-4f83-bbe8-a35daf22d226",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "bd8b098a-c29e-4793-85ed-465d76907f39"
        },
        "item": {
          "id": "e874121d-bea5-4d75-b66c-a11f52e0c6c1",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "a48072ce-78eb-4ea5-b611-30054fd2af8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d26807-341b-4e1a-bfdf-8ab09175ad08",
        "cursor": {
          "ref": "eeeff783-0312-4804-b86e-68c30b8d64d9",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "cc5c9a1a-a446-4e7f-9e9d-738b37df5513"
        },
        "item": {
          "id": "a8d26807-341b-4e1a-bfdf-8ab09175ad08",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "aa5ab15f-2ed5-4156-9bd9-0344f89f265b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eee6bfd-9efb-4a2d-9cb3-b2480c266677",
        "cursor": {
          "ref": "5a26a2fc-f698-4896-9fa3-84ac5bbec515",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "67eff84c-77c9-4b29-a75c-bd4cd52be15a"
        },
        "item": {
          "id": "6eee6bfd-9efb-4a2d-9cb3-b2480c266677",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e256d528-6389-4bd2-8756-eeb649241342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c86c190-d067-4ff5-b48c-6102a73c7ef2",
        "cursor": {
          "ref": "3b863bd1-2df5-4423-9934-ef86a86fd845",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "9ab6bddc-e3ea-43c5-a4b7-8c7084532e0e"
        },
        "item": {
          "id": "3c86c190-d067-4ff5-b48c-6102a73c7ef2",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c7c79c85-6388-4ef6-a840-473be2e2732f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61dd4b88-2468-42ea-a0c1-330f806e3f00",
        "cursor": {
          "ref": "44dcf878-fda6-45fd-a76d-9b9f0ffa9930",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "eaa2dd4f-1697-4cad-8cee-85f2b20be9bc"
        },
        "item": {
          "id": "61dd4b88-2468-42ea-a0c1-330f806e3f00",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "46b44e00-c0ad-4b2e-a16d-a16da15db267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58fe1b17-243c-4042-8427-7d72fac2c009",
        "cursor": {
          "ref": "7e4b117f-e222-4d86-a9f3-d264c9f42133",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "6d0de752-690a-4561-acaf-60bd8882f7cc"
        },
        "item": {
          "id": "58fe1b17-243c-4042-8427-7d72fac2c009",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3309f867-2d23-44c7-bc64-138844273364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b053306-99d9-4787-8ac8-1dff1ff2f5e4",
        "cursor": {
          "ref": "976e64e6-ecc8-41bc-b0e8-21f36e0e3e81",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "84dcfe7b-2ee2-4363-86cd-5d0590cf6333"
        },
        "item": {
          "id": "6b053306-99d9-4787-8ac8-1dff1ff2f5e4",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "84fe1f06-cc47-44a2-92ad-f1a10bd91177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d09f5835-ed66-48b2-82d7-22003e9d64a3",
        "cursor": {
          "ref": "da236ff5-7a5d-47c8-ae2c-e8e231fb2f7a",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "37703bd7-57db-4b06-87da-6c6aaec26e3e"
        },
        "item": {
          "id": "d09f5835-ed66-48b2-82d7-22003e9d64a3",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b6193d65-d117-48cc-843a-c8494ebcdeb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ff2fe7b-a7d8-4a95-9243-abfcec400457",
        "cursor": {
          "ref": "05eabfd1-1585-4a7a-92dd-74b3ceb00d61",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "58173158-4120-4b33-affd-8cb45c03ac32"
        },
        "item": {
          "id": "2ff2fe7b-a7d8-4a95-9243-abfcec400457",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "2f50b9ba-6558-4711-b6fc-ecbef31f73ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19b2817f-985a-485d-b385-dfdb8c691b8d",
        "cursor": {
          "ref": "6667cc0e-e635-444a-ba10-3f9eebb97650",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "81d7474d-2f42-4fa6-9c6b-4e890fa6a494"
        },
        "item": {
          "id": "19b2817f-985a-485d-b385-dfdb8c691b8d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "1ca21960-82e5-4cde-b0cc-c1efbdd3cd75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f819d776-e720-4fd2-82ad-b9615ea46649",
        "cursor": {
          "ref": "c380344e-c40d-4636-9b3e-2c95307128e2",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b6378c3d-2195-4021-8c26-6f34b1b7f1c4"
        },
        "item": {
          "id": "f819d776-e720-4fd2-82ad-b9615ea46649",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e1394e50-bcdf-4535-9258-a6628d4292c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14850e09-e42d-44f9-93c9-e5ead4ade2cb",
        "cursor": {
          "ref": "d851574c-d2ab-42ff-8b6c-c5877c663800",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f56775c6-8369-4d9c-97ee-3ed286c969a3"
        },
        "item": {
          "id": "14850e09-e42d-44f9-93c9-e5ead4ade2cb",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c0470a81-daa6-4eea-a6ce-dc13b062d801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "482dc9b1-d70d-4057-8476-3be50fe10cd0",
        "cursor": {
          "ref": "4d1b9c82-a63f-4d0d-b664-9b2194ff0f68",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "bc7cf769-a44c-4f95-a13f-67fcf2e0a090"
        },
        "item": {
          "id": "482dc9b1-d70d-4057-8476-3be50fe10cd0",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0cb663fa-5e36-4ece-b6f8-288311114834",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4948857-3410-4cc0-87d8-ea978865554d",
        "cursor": {
          "ref": "79c97cf3-b210-4911-8431-218746b13bce",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e038a08d-866f-4945-bb95-fef91e733231"
        },
        "item": {
          "id": "b4948857-3410-4cc0-87d8-ea978865554d",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "8fe4d19c-26a7-45b4-946a-6a30066e9133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "286f66a7-6a28-4186-9abb-44d89579bb05",
        "cursor": {
          "ref": "339f6591-38b0-4112-a2ad-b496153aa02e",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "827805eb-d5fd-4b85-a7bc-2dd3b7a3b1e9"
        },
        "item": {
          "id": "286f66a7-6a28-4186-9abb-44d89579bb05",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ce2f0109-877a-4efa-a33b-7eea6349331d",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9af80fe-575f-4881-bc6e-a3d037d07cf5",
        "cursor": {
          "ref": "d8d5eb23-3aaf-4d2d-a730-84f283048f24",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "29b3fbaf-4238-4d40-bdf6-e72bfd3bdd27"
        },
        "item": {
          "id": "e9af80fe-575f-4881-bc6e-a3d037d07cf5",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "05f6b8c4-93f8-4aa7-b6d2-c22fb50cb981",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "804c1519-171f-4b70-bc5e-b0ca24958c95",
        "cursor": {
          "ref": "b3cd45e0-6511-4208-8e2d-d1f7d46d5850",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a2006f3d-cd01-4b9d-8c47-43930d22b9ed"
        },
        "item": {
          "id": "804c1519-171f-4b70-bc5e-b0ca24958c95",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "39794c38-44a4-40cb-81c7-ea55da2568d9",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "410f1e36-dd81-41c6-8962-efb249c2fc08",
        "cursor": {
          "ref": "9dd76f5b-879b-4935-adc2-8e2c11fef480",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "4c671403-7555-41fb-8d51-68c580837ae5"
        },
        "item": {
          "id": "410f1e36-dd81-41c6-8962-efb249c2fc08",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "605137d3-3ea7-433f-ad0f-e9853990455b",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "86e2cdb4-1e15-4192-b869-4ab4d50ecf30",
        "cursor": {
          "ref": "997754f9-5515-4da3-8dee-d8870635f46a",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "5cabd317-62f7-4785-b534-548d6b3c36df"
        },
        "item": {
          "id": "86e2cdb4-1e15-4192-b869-4ab4d50ecf30",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f3d7f873-90f4-4e16-a796-da54c3da85ad",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-25T00:36:12.157Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-25T00:36:12.157Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "60b7d85e-e666-4e7f-9ece-fe230f222398",
        "cursor": {
          "ref": "9df17898-ab6f-46e5-a435-abe7664476d3",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "a477484d-aa66-4864-af39-74e812fce58e"
        },
        "item": {
          "id": "60b7d85e-e666-4e7f-9ece-fe230f222398",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b81648c0-2a76-4355-8fb1-be8be820169e",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9cd5170-5c9e-4945-bdfc-d2ad1e3d04dd",
        "cursor": {
          "ref": "8e489697-c86a-4f5a-b6e7-529e91e4ae66",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "48f33979-c15e-4f2b-87de-246f039daa5f"
        },
        "item": {
          "id": "a9cd5170-5c9e-4945-bdfc-d2ad1e3d04dd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "740043bc-e729-446e-876c-7abafcf88aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04f0a54f-e242-4923-b925-c73a7856facc",
        "cursor": {
          "ref": "30937dd7-ee77-4b28-a0b7-fddfc6181a24",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "0b5cfb23-46a0-4873-aaa0-54179e5b5a87"
        },
        "item": {
          "id": "04f0a54f-e242-4923-b925-c73a7856facc",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d9675e33-60bf-448b-aea0-a383b427cc58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92b8649e-c399-4ddc-ad13-cd38245cb237",
        "cursor": {
          "ref": "9a8a653c-6e10-471b-aad6-7bad071ad6ef",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "dbb6bc1b-985c-46a5-9560-2b12b590a7ce"
        },
        "item": {
          "id": "92b8649e-c399-4ddc-ad13-cd38245cb237",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7c9f5d5c-2a20-4184-a41d-dde325c8be0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0a61136-402b-4d48-a3e3-df7de043ef9e",
        "cursor": {
          "ref": "bd2796e8-c0b6-4d80-be27-b1bacfd8d1a7",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "da83cd9f-15b9-485d-9604-0211aee6c565"
        },
        "item": {
          "id": "c0a61136-402b-4d48-a3e3-df7de043ef9e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "faaa81cc-9c4c-4505-8655-b46025b77549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5314fcce-7b07-4bab-b673-2a991c56cba7",
        "cursor": {
          "ref": "6c35c8a1-9b23-4223-8399-e0460cdec489",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4c3972cc-624b-44a1-a063-2c70a74af69c"
        },
        "item": {
          "id": "5314fcce-7b07-4bab-b673-2a991c56cba7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f0b4556b-3941-4058-86de-35ef0857577e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c47d03eb-5def-4cb7-8457-4999a112184b",
        "cursor": {
          "ref": "a3860b29-e58a-42b1-9c99-804b842cb17c",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a231c536-bb4e-49c7-bf09-de90f9d67114"
        },
        "item": {
          "id": "c47d03eb-5def-4cb7-8457-4999a112184b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "22a1cc8f-5247-477a-a948-f871322d464c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20b9919d-e284-4b9b-99af-19e234d0f33a",
        "cursor": {
          "ref": "a27b0cd8-63c0-4ff2-a737-3769b5c94878",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "4df83100-0174-4558-8f25-1780885cc831"
        },
        "item": {
          "id": "20b9919d-e284-4b9b-99af-19e234d0f33a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "afe0cb2e-b415-4bc0-9157-4fe311ad2d53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3935a881-ee22-4ee6-9138-2031852368cc",
        "cursor": {
          "ref": "755c7fc4-c1c0-4199-ad04-85673e28f85a",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "0026fd24-4db0-436d-a076-942b8ee1941b"
        },
        "item": {
          "id": "3935a881-ee22-4ee6-9138-2031852368cc",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "21af779b-b445-4762-93bb-3f72bd69033e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe09b13-c096-47cc-b9a2-4a189814c97c",
        "cursor": {
          "ref": "736cc247-0512-4bbe-9381-48051ab9cc95",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0b45da08-029f-4f33-b423-42920c1e2e5c"
        },
        "item": {
          "id": "9fe09b13-c096-47cc-b9a2-4a189814c97c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "1ec232e9-4bc2-4020-8452-321ded6eb8ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d9f91b5-f62a-4ae5-b041-deb4d6bf44d8",
        "cursor": {
          "ref": "9d4f2ead-54f5-469f-beea-0776f6be72be",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "5cb5915d-9f82-4564-8df5-0352ee8a9190"
        },
        "item": {
          "id": "2d9f91b5-f62a-4ae5-b041-deb4d6bf44d8",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3591d9f1-cc00-404f-8c20-6aeaef2fd751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9b9137e-903a-456c-a2ce-24630b7976a3",
        "cursor": {
          "ref": "db275070-0438-4288-894c-977c23c532ca",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "e8084ec3-293f-4c75-a5bf-0b3b0ebc0c26"
        },
        "item": {
          "id": "a9b9137e-903a-456c-a2ce-24630b7976a3",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "cfa19c58-f042-49cf-87ee-4e90f84d17ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f9660c5-d444-40ad-9a14-72c0c4c37876",
        "cursor": {
          "ref": "561b0a83-0c29-4ee1-9251-22b8c18b24e4",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "76d53fad-e296-4f1d-8754-f5e499167614"
        },
        "item": {
          "id": "6f9660c5-d444-40ad-9a14-72c0c4c37876",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c0c4e1d4-bf49-4c23-b1af-ba39f28e8e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e79451e-e733-4d0b-8375-a645160573de",
        "cursor": {
          "ref": "d6f7d36c-41c6-4c6b-a1b0-019c76531c7a",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "6424f0f7-7fe5-40ca-81f3-0c46411012d6"
        },
        "item": {
          "id": "0e79451e-e733-4d0b-8375-a645160573de",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "39644895-621d-4b82-8aa4-89c95d03148c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32e642a0-e200-4462-9569-411891f05768",
        "cursor": {
          "ref": "5de71c96-aaef-4540-b041-39a7c89e7f3b",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b83ecd53-9cc9-4fe4-9552-aa080fbd6efb"
        },
        "item": {
          "id": "32e642a0-e200-4462-9569-411891f05768",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "fca6f853-3787-440c-9c60-3eee6cdffcd2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 117,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "bf2ded8c-e508-432d-860e-286e6f718fea",
        "cursor": {
          "ref": "da1a8bcb-ab6c-49c3-acc4-77f6a39ca5ff",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "0c7e3890-a6dc-4aa5-8f13-f6a8a7220ad6"
        },
        "item": {
          "id": "bf2ded8c-e508-432d-860e-286e6f718fea",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3a38e8f6-3db3-45c6-9001-1bc78d9297ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03b49930-54f4-493d-9bfe-17e31516b3fa",
        "cursor": {
          "ref": "134f9bfb-320c-4541-8e30-ebf388b89ffa",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "30e7ede0-5026-40e7-940d-f696c709acf5"
        },
        "item": {
          "id": "03b49930-54f4-493d-9bfe-17e31516b3fa",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2aaa9def-1382-4f90-9ed5-da3b67b8ba95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94b42358-e22a-4351-aac9-5409752d4f4f",
        "cursor": {
          "ref": "9d0a4331-d57d-490c-94a4-d5afbbec17a3",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "dd652516-c79e-4ca9-9db3-053a3bc38dd6"
        },
        "item": {
          "id": "94b42358-e22a-4351-aac9-5409752d4f4f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "517dbb00-c63a-4063-a6bf-8e75abe1cedf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "826633fa-406c-497b-87fc-d71e213c378d",
        "cursor": {
          "ref": "03ffb663-4c3b-43e0-aa1a-5ea253a67fb9",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "29157e26-5da2-4f2c-9baa-1f3f6a506ae7"
        },
        "item": {
          "id": "826633fa-406c-497b-87fc-d71e213c378d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "368285d2-d940-4bc5-9fb4-b9c140f9fee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f854be53-d337-4e92-9a6b-800ed4b485a3",
        "cursor": {
          "ref": "5c2cbfdd-c5c9-46c8-8068-f33ac1b114ea",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "69a69cc4-af5b-4dfe-bca8-4f5a0668f7b4"
        },
        "item": {
          "id": "f854be53-d337-4e92-9a6b-800ed4b485a3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "030f793a-1ada-4188-b74c-052fb0d9dcac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a6f22cd-c921-42c5-a1b6-5080945f3317",
        "cursor": {
          "ref": "f9fec7ca-0e80-4753-b61d-6f69ca92dd23",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "636da335-4a70-48ad-933d-7c0552e781e3"
        },
        "item": {
          "id": "3a6f22cd-c921-42c5-a1b6-5080945f3317",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0a7874e7-a08f-4bb1-bf15-4e3cdec65ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2396b4e2-455d-49cb-a0f4-81cd447e197f",
        "cursor": {
          "ref": "331817a2-85b3-4b67-94a4-d4f0b1c08bc5",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "5f9c1748-c58e-479b-acad-9b386568a784"
        },
        "item": {
          "id": "2396b4e2-455d-49cb-a0f4-81cd447e197f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "004f456c-9249-4cc1-9a71-acd66584b98f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a50da662-a4f0-483e-a94f-52a8cd4b4825",
        "cursor": {
          "ref": "412d564b-c9f8-4f61-a306-d283607d0f5f",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b6b67a52-a0c9-4cde-981e-5db837927238"
        },
        "item": {
          "id": "a50da662-a4f0-483e-a94f-52a8cd4b4825",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e6ae1e5a-7063-4ea8-871e-6afc7a430e33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54a0f489-8268-4419-8214-16633e96cbac",
        "cursor": {
          "ref": "0a78d4ab-a662-4d4a-a276-1224c73223cb",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "9d932210-ad31-433e-b0d2-5f11bca79ca4"
        },
        "item": {
          "id": "54a0f489-8268-4419-8214-16633e96cbac",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e0de7aba-a8d2-4f08-a696-d6e12235858c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ffff9b2-d5da-4544-a691-45371350a2b8",
        "cursor": {
          "ref": "5d074ba3-f1c4-4386-ba52-8b7db8a9e0ff",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "76367de1-3df0-4858-b8e0-3d122781867f"
        },
        "item": {
          "id": "4ffff9b2-d5da-4544-a691-45371350a2b8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "361302ce-ad06-4d6b-a524-ac43294cfb62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e47f528f-ae6d-4666-9ee0-3551483c8537",
        "cursor": {
          "ref": "087c8879-3174-424d-b9dd-38791951d506",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c934eb5c-d9ef-40f7-b3a5-d35417a871b7"
        },
        "item": {
          "id": "e47f528f-ae6d-4666-9ee0-3551483c8537",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c98a72a6-d5d8-4ca3-8df5-e7ce87ccc293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d4b4858-c088-49a2-888a-26de8b6b937a",
        "cursor": {
          "ref": "2ef1bc6a-d15d-4260-a050-7046ddb0cdfe",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e0d372d6-2bae-4778-9c2c-2ca329cd4946"
        },
        "item": {
          "id": "5d4b4858-c088-49a2-888a-26de8b6b937a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "84abeaf8-1394-4576-bc2f-af653672249f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e5adf99-1fce-4f37-854c-e5f8d16a05a8",
        "cursor": {
          "ref": "5cfc413b-eb72-4712-b0cd-1b63703429ac",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ee3b5a40-a20d-4ab7-9dab-1d40709e8cc1"
        },
        "item": {
          "id": "6e5adf99-1fce-4f37-854c-e5f8d16a05a8",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1de4a0e5-2df3-4cc6-a818-77fe46a11f97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b159b4b0-ab47-4cb3-8f8c-e30aec552cd9",
        "cursor": {
          "ref": "111d2bad-b412-4489-83be-5ec022cb742a",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "95bf85cb-aff7-40b5-ba92-651e77f9065e"
        },
        "item": {
          "id": "b159b4b0-ab47-4cb3-8f8c-e30aec552cd9",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "01400f93-c5a2-436b-8a65-b38020b5667f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccca07aa-6f47-4753-9b1a-2605f3cc048a",
        "cursor": {
          "ref": "4633242d-d0dd-4210-87e6-b76ae3904907",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2558cb74-c596-482f-845a-49d8fa46c88c"
        },
        "item": {
          "id": "ccca07aa-6f47-4753-9b1a-2605f3cc048a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f69c6a42-da5c-4227-87fe-6a1b583afd37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a340f76-1cf6-443a-8118-cac76b43984a",
        "cursor": {
          "ref": "964bf48f-4f4e-468b-ab08-639a9845fc08",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "0f9db78a-0240-4c13-a8c9-2bd0c100dae9"
        },
        "item": {
          "id": "1a340f76-1cf6-443a-8118-cac76b43984a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "491a1a7d-6d5f-4b3f-9c19-5e54bb6ca4c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f250857-3477-4ba6-83c1-737b0366c5da",
        "cursor": {
          "ref": "882fa451-1e14-4d89-8aec-cf2394a315bf",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "00aff332-a046-4dce-be20-203a3f193192"
        },
        "item": {
          "id": "7f250857-3477-4ba6-83c1-737b0366c5da",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e2d99a4e-4f65-489a-b9d2-fa4df68e0915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cc7d4c2-bf49-4874-a70c-44733840a49b",
        "cursor": {
          "ref": "2398e353-a279-4bd5-9ccc-fddf3a1f0618",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "92493b12-d619-423b-84f9-71ff8879da16"
        },
        "item": {
          "id": "1cc7d4c2-bf49-4874-a70c-44733840a49b",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "b3043322-0075-4b84-b4e4-a95ce93e8a94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6263de53-85af-44f2-b809-ab9453cfe6b5",
        "cursor": {
          "ref": "3bdf1027-d89b-4489-b9b9-1b2875f73109",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "77a396fd-9afc-4412-89ee-9ed951bfc495"
        },
        "item": {
          "id": "6263de53-85af-44f2-b809-ab9453cfe6b5",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "61e008ba-893a-4332-a881-5c432b20813d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15d12a03-2f75-496a-abdf-55c687d4680d",
        "cursor": {
          "ref": "87d999d0-e333-4cae-8088-9c1d035bb6d5",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "eb557031-4937-443e-9bac-9b0ee91bd757"
        },
        "item": {
          "id": "15d12a03-2f75-496a-abdf-55c687d4680d",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "308c63fc-d714-4f3f-a767-651f8df6dd37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d917722e-6eba-48b7-90cd-d37972ee9ba3",
        "cursor": {
          "ref": "a95e9252-e1e1-4573-bd22-e56088a1bb47",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "11b03463-1ab9-44d9-8d75-26ca74f94bb1"
        },
        "item": {
          "id": "d917722e-6eba-48b7-90cd-d37972ee9ba3",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "26d316bd-0ec6-4975-88aa-a9f78bf2b06f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16d37084-b9e4-488b-9cc7-5d7c36365344",
        "cursor": {
          "ref": "073b4ad0-0efe-47a5-bbcf-d2d28f070a8c",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7bc48024-d64d-474a-891c-f850b62d4c88"
        },
        "item": {
          "id": "16d37084-b9e4-488b-9cc7-5d7c36365344",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "fb8faffa-efbe-44de-ab42-b31775cb5538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c39b7615-3120-4020-81f3-dffc7cb3e4ce",
        "cursor": {
          "ref": "44a7ec07-d6e1-48a4-ab31-d2626d834b2d",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "be1514f7-0245-4971-9d2f-df94c2496c65"
        },
        "item": {
          "id": "c39b7615-3120-4020-81f3-dffc7cb3e4ce",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "c0bb71ff-d43f-4c09-b549-984b0d46dd50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f29e3c-e63e-4e15-aa44-37c1813dcbfd",
        "cursor": {
          "ref": "fc51ab3f-f9dd-4b16-8564-509d40b16c7a",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d49b8d8a-2de7-4e3a-8b87-9eb911759656"
        },
        "item": {
          "id": "97f29e3c-e63e-4e15-aa44-37c1813dcbfd",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "15b10a3f-9b40-41c3-9a65-11028a4826df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c76cd09f-f520-415d-ab26-bc869ca2f04d",
        "cursor": {
          "ref": "d9226ef9-e5db-4e3d-aada-b82a5b5648e1",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "62af0a89-11c5-4f2e-96d2-abb6728f3079"
        },
        "item": {
          "id": "c76cd09f-f520-415d-ab26-bc869ca2f04d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c3d4f4c6-830e-4a16-844d-1993b0cbc84f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df36f3ca-b532-457c-8846-d59ae58d86e3",
        "cursor": {
          "ref": "1da509d2-31e3-4aee-a9c8-5506ca26f37a",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "6c3b3d36-c71a-4efc-93ec-b153d6632890"
        },
        "item": {
          "id": "df36f3ca-b532-457c-8846-d59ae58d86e3",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "c41e90ac-5a96-4e3d-902e-df27eefddbdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f42601c-1062-476d-a822-1256d50cbce8",
        "cursor": {
          "ref": "27c119f5-1294-4278-a6ec-de641449bc16",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5ef8e47c-6a78-445f-9196-f453a184048c"
        },
        "item": {
          "id": "5f42601c-1062-476d-a822-1256d50cbce8",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "a824c478-00df-42f6-8065-9f745e32d81f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "642fd8eb-a899-4ccc-a46a-7fb5ed0d4396",
        "cursor": {
          "ref": "518f1f6c-38bf-41ad-b0da-4b6ac6a8ed39",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e8735ad2-f685-48dd-a4c2-069d55420854"
        },
        "item": {
          "id": "642fd8eb-a899-4ccc-a46a-7fb5ed0d4396",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "4ceb8ade-2832-485a-8b1a-71d533ec3d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "604f4e91-06ba-4014-8773-4fd04d125c24",
        "cursor": {
          "ref": "a4acda8d-3067-46cd-b5da-cc615e853748",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b9e2db34-be35-43e6-960b-7a8cbbc82463"
        },
        "item": {
          "id": "604f4e91-06ba-4014-8773-4fd04d125c24",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2bfd88cb-a97d-4d1b-9856-5df7b75be32f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcca8cb0-9d7f-47cb-b128-d165d06b0652",
        "cursor": {
          "ref": "348a5791-f098-4967-b2a0-f8efd8a072c1",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "17a1da42-0c5d-4e2b-ac9a-6e3549036a20"
        },
        "item": {
          "id": "dcca8cb0-9d7f-47cb-b128-d165d06b0652",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b6e5c3a3-a637-4945-9b39-ba3d7fc9f0b2",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "aa35143f-7670-4338-bd04-5fd009e5c014",
        "cursor": {
          "ref": "39324347-3bc5-4485-99cc-1af1203b1b91",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "a9fe7d5d-9b6b-4011-987c-112487f80f04"
        },
        "item": {
          "id": "aa35143f-7670-4338-bd04-5fd009e5c014",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "8b06fa64-35ca-4e48-8509-7106bb2ac221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f23d7c0-f601-4821-9a21-82565f75247e",
        "cursor": {
          "ref": "11574b53-a9a0-4774-b0fc-d7ddb2889812",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "cba2ab97-5853-40d6-92e0-79a25482d901"
        },
        "item": {
          "id": "4f23d7c0-f601-4821-9a21-82565f75247e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ad1eb8d6-66de-4543-b055-0fa3a838623b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66a02cb5-95e2-49cb-a548-d98bb7ced5be",
        "cursor": {
          "ref": "ed88e2b7-b223-4f6a-8803-85d21cb4fe16",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "e278842c-757e-4843-b835-89bd3c53a8be"
        },
        "item": {
          "id": "66a02cb5-95e2-49cb-a548-d98bb7ced5be",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "1f0107ba-99ad-4fc2-95b7-b32c26d23341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfc5d43a-b23c-4d86-a5d3-9454524940b1",
        "cursor": {
          "ref": "5780e7f4-2569-405d-b81d-2868b6daa134",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "48f4a3a6-ba1e-41db-bba5-0e14bc90412c"
        },
        "item": {
          "id": "bfc5d43a-b23c-4d86-a5d3-9454524940b1",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "2464d3ae-4c34-46e4-a733-f4a497ef3509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "457ea6d6-bf76-4f6d-a481-8210cd3edd7e",
        "cursor": {
          "ref": "7cfc126c-5920-442e-8a59-28a67e9a189b",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "9231af60-63f8-4982-8846-2c975bbf3379"
        },
        "item": {
          "id": "457ea6d6-bf76-4f6d-a481-8210cd3edd7e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c05bcd03-c19c-44d6-88ff-118f0bda07c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faabb18f-d6c7-4c63-8436-58ebdf67c1d5",
        "cursor": {
          "ref": "442b12ea-a632-4455-b6d4-83660697e8b6",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "64b83b21-2757-4b21-92a2-5af004e3046f"
        },
        "item": {
          "id": "faabb18f-d6c7-4c63-8436-58ebdf67c1d5",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "60171525-35b5-454f-b7e7-4930dcb43da4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c84e399-956d-4a50-8fb5-4b8c186059f9",
        "cursor": {
          "ref": "a8fc011d-707e-456b-8d48-fde5d1d3ddf2",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "b2618b22-9555-405a-b286-573cd5b1e597"
        },
        "item": {
          "id": "8c84e399-956d-4a50-8fb5-4b8c186059f9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "186dc7c4-d7ea-4eb8-b60c-33d06ab9ab9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d59cc551-c95a-40b9-9b16-f762806ec93f",
        "cursor": {
          "ref": "f00e21b6-602f-4325-ba97-ec286b711a6e",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "2739f266-5dfe-4003-916c-34cea12338a6"
        },
        "item": {
          "id": "d59cc551-c95a-40b9-9b16-f762806ec93f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "689484e8-6f69-4778-8f29-6b9c44016135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4052f0c4-9712-4369-9359-a4b2fd29753f",
        "cursor": {
          "ref": "e7db4eb1-4ca3-4035-8506-dc2d3ea4d952",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "72bc2f11-6d2e-4d9b-ae03-381190fee6f4"
        },
        "item": {
          "id": "4052f0c4-9712-4369-9359-a4b2fd29753f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "4afc6d18-41eb-4021-89d2-33f94077df6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e1fda6-e170-4516-9ca6-2520a818bcf3",
        "cursor": {
          "ref": "73167fc9-23b0-4c97-9c81-1ad406049a84",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b9044320-4941-4539-9aea-515f56e0b38f"
        },
        "item": {
          "id": "a0e1fda6-e170-4516-9ca6-2520a818bcf3",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "07ab7af6-6507-4bfe-80a2-98787a67b566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48819c2e-8cb5-4ad5-ac8d-b93086cf00b5",
        "cursor": {
          "ref": "06f06ed3-7451-412b-82e8-e25542c91064",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f3b56390-a433-4c78-afe9-e5dd51287260"
        },
        "item": {
          "id": "48819c2e-8cb5-4ad5-ac8d-b93086cf00b5",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "16585a73-2985-407c-917c-5de6e882842a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f21b6da8-cec1-4bb7-b63e-892844a4f0b9",
        "cursor": {
          "ref": "4b8941a0-febd-4a60-8afe-70d4d7c29a9e",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "cf83b8c5-cd86-4c79-bca7-e70955de97e6"
        },
        "item": {
          "id": "f21b6da8-cec1-4bb7-b63e-892844a4f0b9",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "d3679069-3201-4726-9f61-27e997754624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20fe79e8-ee83-40b9-9380-30155c4f0dda",
        "cursor": {
          "ref": "aa16ac0b-8282-4e8d-a7c9-d62ff989becd",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e445dc84-d873-4a5d-9011-0d7582a81e26"
        },
        "item": {
          "id": "20fe79e8-ee83-40b9-9380-30155c4f0dda",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b70fd550-79cb-409b-828f-e6c96d742b3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b77057da-f61a-4d2b-90af-3c6fd3771255",
        "cursor": {
          "ref": "c1b60e4f-39c2-484a-8fc1-1b4c3b385768",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "0d6261d1-6d97-4563-b8a6-47a73e8c4096"
        },
        "item": {
          "id": "b77057da-f61a-4d2b-90af-3c6fd3771255",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "7e96b0f7-50ad-479a-a528-fa4110414820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8172c6d8-dbfd-4c72-935b-fa0beb4b509a",
        "cursor": {
          "ref": "004cfd20-634d-4980-975e-80252bdafa00",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "69badcc9-0d45-4214-8ef7-e57931de4a7d"
        },
        "item": {
          "id": "8172c6d8-dbfd-4c72-935b-fa0beb4b509a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c335169f-2c4b-4e2a-96ca-4bf9ff0cf0c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc727fc9-b1fc-400c-a67c-2d648e2ece85",
        "cursor": {
          "ref": "23d764dd-9d77-43f2-935c-da5aef527f26",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f669e791-82ba-44e6-b0b0-af218b5547a3"
        },
        "item": {
          "id": "fc727fc9-b1fc-400c-a67c-2d648e2ece85",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "9f6917f3-474e-4ceb-96a9-36b1330c9a54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "585dbcc5-2435-4a83-bb03-04f954aef6d1",
        "cursor": {
          "ref": "ccb3f685-38f9-4719-a5d3-717e15459944",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "9ff763e3-682b-4572-a30d-ab1d1671963b"
        },
        "item": {
          "id": "585dbcc5-2435-4a83-bb03-04f954aef6d1",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "438ff0f3-e726-4c48-9c51-5acc10dcbd35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0842edf1-44b2-4c3d-9b5f-fc811396fed2",
        "cursor": {
          "ref": "2b5dd591-86a4-4e31-81a9-45488e3b5d7e",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "02b74e90-dc18-419e-af61-4df464ed661b"
        },
        "item": {
          "id": "0842edf1-44b2-4c3d-9b5f-fc811396fed2",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "19cd45f4-9f41-4401-97c1-8e814c66d02d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17d4ae0c-d4f2-4d13-b117-4b55caa2b08b",
        "cursor": {
          "ref": "78343eea-3397-4be9-b3a6-a6c011c86a06",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "3d7e47b0-628c-4b6c-ba26-98cf537d1524"
        },
        "item": {
          "id": "17d4ae0c-d4f2-4d13-b117-4b55caa2b08b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "02c90ab8-0723-4db5-b616-450b6cb39fa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35a69042-760c-4b71-a945-dcc8a4d8fcd6",
        "cursor": {
          "ref": "a1365e81-d087-47ba-9266-f38f52818f2e",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d8b2ca5d-22aa-46db-b5f1-7c8d17a850af"
        },
        "item": {
          "id": "35a69042-760c-4b71-a945-dcc8a4d8fcd6",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "7dfaf299-dd56-4edd-9efe-d24653521e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "669bbae0-b921-407e-9487-9207a1f16f0a",
        "cursor": {
          "ref": "7662bc44-c7ca-402d-a040-4c5b08acd714",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "18a48d74-4c60-40b6-99d0-98bf4d677130"
        },
        "item": {
          "id": "669bbae0-b921-407e-9487-9207a1f16f0a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "27dcb7e1-28e8-4fd9-a399-84d003e96c52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94af55d4-8f2d-4c50-9f3e-0f43300decef",
        "cursor": {
          "ref": "16946a57-2cb5-4264-a5e3-02de3f45068a",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "36523d7e-ed8c-41ee-a2d5-67c37877a6df"
        },
        "item": {
          "id": "94af55d4-8f2d-4c50-9f3e-0f43300decef",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "7b39b906-d9ad-4d36-878e-e802a30bb339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a5ca0f-853a-4982-a510-b450c3e948ec",
        "cursor": {
          "ref": "1d6e34ba-2cdc-460c-885f-78c3ae8ebfbd",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "835638b3-247b-4ccc-9ddc-e819100e527f"
        },
        "item": {
          "id": "44a5ca0f-853a-4982-a510-b450c3e948ec",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "61ebfc12-1a48-490d-afca-5a2b0785970a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa897f72-cf4c-4846-9d7d-c2efe49ad8bd",
        "cursor": {
          "ref": "42dba465-6c3f-404f-b2c6-600db76e794b",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "2549b3f5-f715-40cf-9d76-6725d7bfd3ac"
        },
        "item": {
          "id": "aa897f72-cf4c-4846-9d7d-c2efe49ad8bd",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f6c9410d-6373-4efe-82c0-619f061081ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e8c7d5d-4345-4d6b-bc46-aa9f7f7ed3ad",
        "cursor": {
          "ref": "6502ab3a-0464-47bc-af96-ca95c4560184",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e68362c0-5801-41d1-b95b-702c9ddfc18d"
        },
        "item": {
          "id": "0e8c7d5d-4345-4d6b-bc46-aa9f7f7ed3ad",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1d61a636-2bfc-419d-8a92-664f3347615c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d7db68-7ef6-435f-8259-73f08efe6b94",
        "cursor": {
          "ref": "8c2ad864-21d4-42a5-bff9-87e29fe8e14d",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b97a7b55-e76f-40b8-a085-8fa110b5064a"
        },
        "item": {
          "id": "d4d7db68-7ef6-435f-8259-73f08efe6b94",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "44c8558a-b628-491f-98ed-7b01cf5a3611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "015d28f3-3562-4b76-9a7e-3077193d2019",
        "cursor": {
          "ref": "a00c3b10-6858-46ad-9a07-ce46f62a7aa6",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "55e3ba2f-6acc-4701-a6b2-08a2f6607484"
        },
        "item": {
          "id": "015d28f3-3562-4b76-9a7e-3077193d2019",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "03a1e54e-ca71-43fb-a73f-2fe5cc332c64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "685dcef7-8b21-4dbb-a0a3-8459b5bc64da",
        "cursor": {
          "ref": "d561feda-7de0-4851-8e2e-294f44ef2d1f",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "4dfbb30d-2fe8-410a-bdc2-3ee3e2d82f68"
        },
        "item": {
          "id": "685dcef7-8b21-4dbb-a0a3-8459b5bc64da",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "7aab9f76-4065-4561-8fb4-76587727fc7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d9ef998-c8c7-48c4-878a-4c93fa58cb5a",
        "cursor": {
          "ref": "a7a76e0a-fe12-484e-974c-63a284ae995f",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "7bc64172-ce32-43df-8fe6-29a543e7b11f"
        },
        "item": {
          "id": "5d9ef998-c8c7-48c4-878a-4c93fa58cb5a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "23120ba5-b11c-4178-9bef-3e11b6102f84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86f95a04-eb3f-4c06-929a-699745d2514e",
        "cursor": {
          "ref": "d120ccfc-b415-4cf4-90d2-edc6ad343c28",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "74a6c10b-33d2-45c8-8ec2-881c8fdc3970"
        },
        "item": {
          "id": "86f95a04-eb3f-4c06-929a-699745d2514e",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "a83b8c49-8688-4fac-9599-b1f178b470f7",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "08b3aa63-5beb-4e1a-8c6f-846049a81e86",
        "cursor": {
          "ref": "b493458e-8f35-4db6-92be-e2673917a330",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "14ce4063-8c38-4e7a-bd81-1f8d33c999f3"
        },
        "item": {
          "id": "08b3aa63-5beb-4e1a-8c6f-846049a81e86",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "e9eb7498-b1d6-4db2-a079-ec435bc3bb35",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "9899cbaf-c5f8-4d0d-b00c-fb8551b4bd8d",
        "cursor": {
          "ref": "0c4e8246-adec-4e25-9ae1-be4fa518b9e7",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ad67eedd-7f6f-4bda-af83-1eda379d1f54"
        },
        "item": {
          "id": "9899cbaf-c5f8-4d0d-b00c-fb8551b4bd8d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "e8c97d71-7d03-4a8e-bfc0-a7dbfe295489",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "34fdc980-50d4-48fa-8c66-bd76f77311c5",
        "cursor": {
          "ref": "b145463c-0791-413c-82b8-5a6b8bb3d4de",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "43dddca8-046e-4789-9d9b-f1ec29e3f2bb"
        },
        "item": {
          "id": "34fdc980-50d4-48fa-8c66-bd76f77311c5",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "81285344-25c6-4cb6-9a19-20174a03287c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46034d01-b8b3-43bb-92a1-9b70062cf77a",
        "cursor": {
          "ref": "3135c409-ebc4-4dfd-a90e-e31fb07c766b",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "2e43daec-5f42-4576-89d6-f9908e218f18"
        },
        "item": {
          "id": "46034d01-b8b3-43bb-92a1-9b70062cf77a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a160093e-e407-4634-a575-0379f7002e6d",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "759534d1-1e12-437f-a2ec-6c0e678db568",
        "cursor": {
          "ref": "07697ce1-60e2-4dc0-a32c-0fc106762f3f",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "4b96115f-e79f-464e-b07b-e6a8f20124f0"
        },
        "item": {
          "id": "759534d1-1e12-437f-a2ec-6c0e678db568",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d7130fb0-5b7a-438c-a22b-b880b22a01ae",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "3e64a6cf-8a8a-4821-b2bf-ef68bda2f65e",
        "cursor": {
          "ref": "b4e7832e-c23c-44c5-81d9-b1f3238f49e1",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "eccefc4e-fe8f-4a6a-a60f-c6dbcb59f481"
        },
        "item": {
          "id": "3e64a6cf-8a8a-4821-b2bf-ef68bda2f65e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "20d963fa-a49b-46de-b133-b60b7af6fe25",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "7510c223-7659-4d05-9963-9be09b75a114",
        "cursor": {
          "ref": "4fddee10-83d7-4489-a78d-841f9809a832",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f75dbf75-31d1-4714-9011-90fea3302099"
        },
        "item": {
          "id": "7510c223-7659-4d05-9963-9be09b75a114",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e5cf62ea-7457-459a-96c0-0d6ab9538f5f",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "b10631d0-48e6-4873-af53-b503b7c9548d",
        "cursor": {
          "ref": "0f6ebc10-7b46-4f9e-ba6c-05e8126a5e4d",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "f200b652-dc29-4e54-a4ae-d8bafaaf562f"
        },
        "item": {
          "id": "b10631d0-48e6-4873-af53-b503b7c9548d",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "7772ef74-0f3b-424c-bd13-1d440586ecfe",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "9983cb80-6547-4e12-ae5f-4d5944d39274",
        "cursor": {
          "ref": "5997731d-d90f-48de-805f-2bb981bf1044",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "417272d8-acfa-4e33-bf52-47efae2920d7"
        },
        "item": {
          "id": "9983cb80-6547-4e12-ae5f-4d5944d39274",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "2c9ab3d5-5b23-45ed-b158-376d90eca261",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "ce0dbec9-67c5-40a8-a63a-76a69431e1ed",
        "cursor": {
          "ref": "71d5d81a-9f44-4f7c-82ba-a0e3e9d28347",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "4e4c9f01-a515-422f-9c74-757b51cc4543"
        },
        "item": {
          "id": "ce0dbec9-67c5-40a8-a63a-76a69431e1ed",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "8a976255-0b57-4cd9-ad07-6b5a9724e55d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa3a337a-5e67-4206-ad27-54051154da7f",
        "cursor": {
          "ref": "12447ec8-1117-4590-8218-5c9a33de6b06",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "c922f3b6-53e5-493b-926a-ffde65adfe51"
        },
        "item": {
          "id": "fa3a337a-5e67-4206-ad27-54051154da7f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "4256bc4d-32d3-4205-8682-30fc036a1de5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c562cb-8556-42e7-9dec-709dfc1100d3",
        "cursor": {
          "ref": "2442a9e5-68e9-4b21-aaee-116dfeeb8fcb",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "67f5d7b2-af4a-476c-827f-6dd64fc52647"
        },
        "item": {
          "id": "10c562cb-8556-42e7-9dec-709dfc1100d3",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f1b3820a-e016-41e8-a276-3ee5d931136e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29c660f1-2f48-4b72-a921-20b4645a17f3",
        "cursor": {
          "ref": "201a0ee4-117b-4d17-8c95-b1680a4af847",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f3b94afd-bdeb-4c2b-9867-423bd5a83912"
        },
        "item": {
          "id": "29c660f1-2f48-4b72-a921-20b4645a17f3",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "649be043-301b-4e9a-b6cc-af3b3da1f4c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bcbef34-aeb3-4e36-b8da-ab4ee4f310c5",
        "cursor": {
          "ref": "88630d8a-ef88-4ac6-9c8a-2c13463c15ab",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "989fcdb5-9377-42b7-9a18-362684945297"
        },
        "item": {
          "id": "3bcbef34-aeb3-4e36-b8da-ab4ee4f310c5",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "bd0510bc-7f20-410e-bb61-56f98fdce7cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c61b5f72-f745-4992-bad3-42c767ed1b3f",
        "cursor": {
          "ref": "be3fc178-4ba8-4e43-bf70-9945f4d708e6",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "7f5ef2cc-d389-49ef-8d07-852c28a46223"
        },
        "item": {
          "id": "c61b5f72-f745-4992-bad3-42c767ed1b3f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f4dd611a-6654-4d7e-9054-9d41c2f98b59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02be1532-444b-4ee6-bba9-39d24ba8043e",
        "cursor": {
          "ref": "2925b594-21c1-4864-b911-711d1460f75c",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "9325e082-606e-43d5-ac31-087aa4cc0c64"
        },
        "item": {
          "id": "02be1532-444b-4ee6-bba9-39d24ba8043e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "0450f34f-6de2-4e4f-997d-236f8dd0109d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6d21c69-c9bf-409c-9c61-df353ac13cd9",
        "cursor": {
          "ref": "f5768dd7-5d4e-45b1-8ff6-19ab653c3337",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0fd0184e-a006-492e-8180-8f2443a9948b"
        },
        "item": {
          "id": "e6d21c69-c9bf-409c-9c61-df353ac13cd9",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ee42c2a0-867b-4d99-a6c9-17e1e6ddbe84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cb8ff46-9bac-421b-b781-d80d78cb418c",
        "cursor": {
          "ref": "fd28a011-2023-43fa-92ab-362080634a12",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e6405c1b-2c9a-4512-97e5-432504d1b7be"
        },
        "item": {
          "id": "5cb8ff46-9bac-421b-b781-d80d78cb418c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "72dcb36d-ff8e-44d5-964b-c864af2d73c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599b1395-1f6a-45c1-85f6-b89df6e58e48",
        "cursor": {
          "ref": "28d44841-c97f-4457-8306-f954cbea65f8",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "6d721874-58fd-45bb-8cd5-d05b72bae044"
        },
        "item": {
          "id": "599b1395-1f6a-45c1-85f6-b89df6e58e48",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e81b91ba-0bc3-4a85-865b-c86acea4f8e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19e1d884-c48b-4451-b5a5-b7b42db46731",
        "cursor": {
          "ref": "870f976d-ae24-4ffd-bad2-2c5ca399190d",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "2d53ff61-3493-402c-a13a-ebac5f46a234"
        },
        "item": {
          "id": "19e1d884-c48b-4451-b5a5-b7b42db46731",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "cc20140a-57b7-45b7-b700-a4a43c247780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b20b04f-bdfa-433b-9449-5b38e6bf766c",
        "cursor": {
          "ref": "2c18e342-4aff-492c-9f6c-4640508dcefe",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "1394b314-1f18-418d-bc18-30337953e6af"
        },
        "item": {
          "id": "2b20b04f-bdfa-433b-9449-5b38e6bf766c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "3bc97161-6c91-493b-8725-9069544ff780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d89937e-e54f-400c-98d7-9377a3720486",
        "cursor": {
          "ref": "fba43ec0-5289-400e-8215-76a47a1dc66e",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e41644c7-aebf-414d-ad8c-b88bc6789126"
        },
        "item": {
          "id": "1d89937e-e54f-400c-98d7-9377a3720486",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "3555f58b-84da-4745-bf77-b309b4f26025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5e16941-31b4-41f1-a700-56aac060bc01",
        "cursor": {
          "ref": "fb3f8810-f076-40d5-824e-624910216a6a",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "35012ab3-c423-4070-a310-db1ac3cbb97d"
        },
        "item": {
          "id": "b5e16941-31b4-41f1-a700-56aac060bc01",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "46c121e2-18a3-4858-bfe4-4355728c93e6",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "dbf3cbd5-b989-43e6-a5d8-9e4dec752b2a",
        "cursor": {
          "ref": "8408dc29-78d3-49c9-b70e-a1a7cca77bfd",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f69a10d0-ec1c-4d44-beaa-3e28ce0b88f0"
        },
        "item": {
          "id": "dbf3cbd5-b989-43e6-a5d8-9e4dec752b2a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "aacce3cd-75c4-4e2d-ad19-07cb59689691",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "61e7925d-553c-486d-a075-2e4855587016",
        "cursor": {
          "ref": "365ffb1e-30e5-467e-ab5a-b4d22a7cc857",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "2784738b-66d9-4c18-ae7f-455ef0b7cb6e"
        },
        "item": {
          "id": "61e7925d-553c-486d-a075-2e4855587016",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "8b64dfbb-915e-46ac-ba66-7ea9c1a76266",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "b4360d98-8b21-48bf-9c7d-5de1ea5abc52",
        "cursor": {
          "ref": "94129017-4748-4b24-9504-5f4a92de18e5",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "34c3b4b8-015d-43fe-975b-53f648b29029"
        },
        "item": {
          "id": "b4360d98-8b21-48bf-9c7d-5de1ea5abc52",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f3fc5493-213f-40de-bc73-5151104a144f",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "dbdde684-be62-49d3-a710-5e0d77482f05",
        "cursor": {
          "ref": "8d8a628f-5011-453a-9ea0-dc0382606426",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "3f4cd6b7-7ed3-4138-8502-871fb11b3e36"
        },
        "item": {
          "id": "dbdde684-be62-49d3-a710-5e0d77482f05",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "2f46b838-0d64-4fe9-a2a1-38a677dfa7f5",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "4d98bfc3-68f3-414a-8351-ab6f9241b7b9",
        "cursor": {
          "ref": "8bbf5448-1621-4db4-bfcf-041a1b3e0443",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "13723489-b294-4272-9bbb-182ff5933b9a"
        },
        "item": {
          "id": "4d98bfc3-68f3-414a-8351-ab6f9241b7b9",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "528e2318-551d-4322-83d8-e604d8d59716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88834a95-393f-473f-825e-349c87f958d7",
        "cursor": {
          "ref": "84e08aa8-8b52-4b92-991d-0f6c57de9a9e",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "aca60bed-d4b4-4afd-a18f-cc8dcd5aa2f4"
        },
        "item": {
          "id": "88834a95-393f-473f-825e-349c87f958d7",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "887ae6df-d5c4-49d0-adc4-8d1ff767b5cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dc1a4ff-22f2-4a46-adbd-b823efc7b4dd",
        "cursor": {
          "ref": "8e75e136-e615-4b33-9e4c-c97066ffae45",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "78c2a460-1dfb-4c66-a73f-0b56ba558e23"
        },
        "item": {
          "id": "3dc1a4ff-22f2-4a46-adbd-b823efc7b4dd",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5bfcf26f-3fa2-488e-bf44-a5d23e38e358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2beabb9-1b90-43f0-8434-f08bd87f783e",
        "cursor": {
          "ref": "73139da4-db94-46da-a86f-4f62f4bf0e45",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "280ade63-d0b0-4267-85fb-d891cc22bf6b"
        },
        "item": {
          "id": "f2beabb9-1b90-43f0-8434-f08bd87f783e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "bb33fb21-857f-4f47-ab1d-8b4d38e5c7c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6186c146-5ef9-4373-9cfd-a88193712131",
        "cursor": {
          "ref": "9be064ad-aebe-427e-9df6-328efcdd269c",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6b021637-04d1-4899-a1a7-a2b72ab66b45"
        },
        "item": {
          "id": "6186c146-5ef9-4373-9cfd-a88193712131",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b84763ca-d9a0-4584-ba89-59d6172ee658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fab371c3-7e03-4ca2-855c-563dc0287040",
        "cursor": {
          "ref": "4bff8f2c-c0dd-4aca-b774-41d0805cd10b",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "3b5ef863-388f-4b34-ad58-91c7279414e8"
        },
        "item": {
          "id": "fab371c3-7e03-4ca2-855c-563dc0287040",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "1c5d55e6-78e6-40d6-82a4-94c93125a935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9bcb14a-878a-4883-b25c-40b7694f833b",
        "cursor": {
          "ref": "1fdd72dd-677f-4535-a5b0-0073b483f04e",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "fc46085f-469e-4485-baac-d39d8bc49290"
        },
        "item": {
          "id": "c9bcb14a-878a-4883-b25c-40b7694f833b",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c9ad7aa4-48d1-4e03-a2fc-6c5155c89188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f12fa5d-ccb5-46ed-9960-b5d52c90b54b",
        "cursor": {
          "ref": "db7dc9c4-103d-4f3d-96a2-6d5c1ec751b6",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "1ae77c1f-047c-4379-bd40-78ab6c73e5ad"
        },
        "item": {
          "id": "2f12fa5d-ccb5-46ed-9960-b5d52c90b54b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "fc190a3b-3324-4270-af75-fc7b69ef49bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e28ed41b-2b88-48b9-ad97-fc0308f3158e",
        "cursor": {
          "ref": "5529cbf8-ecf2-49b7-a21d-8523d9ca42e0",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "2500cbdc-ad4c-4e94-9dbf-8e6446dd0ad4"
        },
        "item": {
          "id": "e28ed41b-2b88-48b9-ad97-fc0308f3158e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "05b20724-34a3-40db-b99a-3ad9021aa85b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76206e16-fd81-4b29-af89-9d10fb296181",
        "cursor": {
          "ref": "1000181f-3d76-4a14-80b7-fe93e49c00eb",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "9317086e-6802-45f9-a030-d33843259b2b"
        },
        "item": {
          "id": "76206e16-fd81-4b29-af89-9d10fb296181",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "519218cb-cdc5-4380-b052-fc0db718bcb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a7b6bd7-f3d8-4fa7-aec1-cc1aad3f86b4",
        "cursor": {
          "ref": "b7e3b42f-e275-4f86-b751-9903d371cb8e",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "5b9e1383-2c54-45e9-9366-66f2246e9dbc"
        },
        "item": {
          "id": "9a7b6bd7-f3d8-4fa7-aec1-cc1aad3f86b4",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e068722e-dd2c-4692-b3ad-5e38d3de339b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97e11637-29ad-42b0-a0c3-975a1dfe32d0",
        "cursor": {
          "ref": "395fa457-b3af-4491-a43d-7182b22c14a8",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a976f018-2736-44ca-bcc6-9d3002088d4e"
        },
        "item": {
          "id": "97e11637-29ad-42b0-a0c3-975a1dfe32d0",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "1041d0d3-e507-42b6-983f-360bbf0fdb1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a039fe-e796-4441-b9c1-e681341bcedc",
        "cursor": {
          "ref": "19846f76-1889-44f4-abbe-e866a70bf8ac",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "62dbcfce-78b1-47a4-9e47-4c7bb6027fa4"
        },
        "item": {
          "id": "f9a039fe-e796-4441-b9c1-e681341bcedc",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3df9cec6-0ce0-4a5d-9e5b-6d9db312d311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1503c5ca-f5a4-45c4-9735-2bd17ff4353d",
        "cursor": {
          "ref": "0573a9ea-f177-424b-8230-b0a1254ad137",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "eb2568a9-ac30-4f67-b03a-0796d0e10c45"
        },
        "item": {
          "id": "1503c5ca-f5a4-45c4-9735-2bd17ff4353d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ede29280-1096-44cc-9539-fc44f436017f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a1bc482-bb47-4bfc-8aa3-74d01f9eab02",
        "cursor": {
          "ref": "affa3aa7-12aa-4951-a384-4f40ebc63b54",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "919052e0-8336-4dec-8c14-d363aa8c7595"
        },
        "item": {
          "id": "0a1bc482-bb47-4bfc-8aa3-74d01f9eab02",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "06e30cb8-7423-4340-a905-0d1540aacfc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e682501a-fe09-4b65-a863-39eeb34a4ef1",
        "cursor": {
          "ref": "20265228-ac69-4ab7-9ab4-5a072b59eb64",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "574a0068-20e8-45ec-a759-0c31350c51b2"
        },
        "item": {
          "id": "e682501a-fe09-4b65-a863-39eeb34a4ef1",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "03bc8858-1a34-4e1d-a8b2-1c786c723f0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76aef43f-2eba-4c0f-bd50-7f476c4ed4cc",
        "cursor": {
          "ref": "60f73cd9-32f7-45b3-8df3-4e016d848de1",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f881e17d-fa65-468c-aad7-205c81381550"
        },
        "item": {
          "id": "76aef43f-2eba-4c0f-bd50-7f476c4ed4cc",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0a16dae9-d0f4-4574-8f7c-beee45d1c73a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "748af2df-e0f4-475a-ab0e-fdc71b0e4484",
        "cursor": {
          "ref": "2140ed2e-6ac2-49cc-86e0-a7fc6239ec7e",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "dc568eec-420c-4476-89f1-ee3a81961711"
        },
        "item": {
          "id": "748af2df-e0f4-475a-ab0e-fdc71b0e4484",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a72bf006-70a7-4f07-8631-372feff3fc38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73afe0fd-69b1-4835-a9f0-63bfd4f08ef7",
        "cursor": {
          "ref": "d89afa13-632c-47b4-9c7e-3c643fb69130",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0ac2c40e-472c-4b05-ab93-03777fe836e7"
        },
        "item": {
          "id": "73afe0fd-69b1-4835-a9f0-63bfd4f08ef7",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "fb3fc075-f207-4559-8a38-08ec4e38fc1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1324fbc5-ca8c-49a3-b0f3-59b9ebbc3908",
        "cursor": {
          "ref": "fb85be74-3e6c-487d-be64-9552a0ecd3cb",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "6098579f-58bf-42e9-b881-0b889f670b1b"
        },
        "item": {
          "id": "1324fbc5-ca8c-49a3-b0f3-59b9ebbc3908",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "fde78903-8b7a-490e-922f-42140aeb5618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed94b902-fcf4-4579-ae62-f6f266ae561f",
        "cursor": {
          "ref": "8f4ac208-ea00-48ce-a5d5-ee8c9379f774",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "013b2f75-e610-4de0-b7b4-9dfc77e6b40a"
        },
        "item": {
          "id": "ed94b902-fcf4-4579-ae62-f6f266ae561f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "b1eb98cb-f6ce-4297-8d43-994de8449201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fda0a40-9c12-4c27-9282-686a58858a57",
        "cursor": {
          "ref": "d8abcfd3-d2b6-4fb6-bd3b-e1f6846b8f31",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c15fb760-3faa-4aca-8a9a-0865cfae36bb"
        },
        "item": {
          "id": "2fda0a40-9c12-4c27-9282-686a58858a57",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "fcf0ce37-001e-402e-b6e0-cf809d4404bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ff06537-dcb2-4b2e-ae00-3715d095086c",
        "cursor": {
          "ref": "26f76244-e44b-4974-847b-fa62f4443bcc",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ef506618-c2e2-434c-97b5-6fd1b5122d14"
        },
        "item": {
          "id": "2ff06537-dcb2-4b2e-ae00-3715d095086c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "364823a0-4dad-46c6-86d0-5f07eaf2de88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91cbcdf7-f2f7-4570-b0a1-d8348a8f3c5e",
        "cursor": {
          "ref": "8451dfda-35cd-4986-b442-4020ba5237cd",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0f3ebfd5-9ef8-40f5-bbd4-f820728e49ab"
        },
        "item": {
          "id": "91cbcdf7-f2f7-4570-b0a1-d8348a8f3c5e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "36178119-5193-48df-b530-3ebeb34b379a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48f2ec83-0885-47fd-bfa1-5f2bf58e65df",
        "cursor": {
          "ref": "b7759c69-970d-4e90-92ee-ab5c46097c8c",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "62aa2b72-2927-4f4a-acbb-b9fd399da534"
        },
        "item": {
          "id": "48f2ec83-0885-47fd-bfa1-5f2bf58e65df",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "ce627ef2-9f10-42ec-b475-388735160480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16fc156f-e85f-4970-ac54-410a515781db",
        "cursor": {
          "ref": "09638c0d-3358-4493-b59a-c275180c1678",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "58bf1171-8cda-437e-949c-dc15ade6bd9d"
        },
        "item": {
          "id": "16fc156f-e85f-4970-ac54-410a515781db",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "14181c65-7688-4b5b-a3a4-e13861d70d51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9a2c33f-f12a-487d-aa56-9c9cdf7a0667",
        "cursor": {
          "ref": "7c281804-4f5d-465d-9f4f-51db47c9bd0e",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "e371d9c0-50bb-4e0d-a7d1-bb0a92bd85c2"
        },
        "item": {
          "id": "e9a2c33f-f12a-487d-aa56-9c9cdf7a0667",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "62baed98-0406-4561-8be9-b18be0ce770d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ba89df-797d-423c-8e0f-5963fbdc1fef",
        "cursor": {
          "ref": "c593ccc1-750f-4c0d-98ed-8fc8fd827469",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "60cb8eb7-fcc7-43c5-98fe-e80c152a5d14"
        },
        "item": {
          "id": "a2ba89df-797d-423c-8e0f-5963fbdc1fef",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "14ab828e-e309-4782-a249-ab6f38737569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "646af1f7-79c9-49f1-ae21-0348257dae14",
        "cursor": {
          "ref": "bc9c733c-fef4-4e8b-b9bc-194ad0193083",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "3d41af4c-daf8-4906-9b90-8e72dbc32895"
        },
        "item": {
          "id": "646af1f7-79c9-49f1-ae21-0348257dae14",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ccba39a4-3714-4435-b8c2-8d60d3859d15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "116b25f0-ca57-4bdb-9c3e-5c747cb1be83",
        "cursor": {
          "ref": "90ce805b-ad6e-493c-890f-cf5ab437e3d0",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "2a3d2744-16b7-4fad-a3ab-f4dae5585795"
        },
        "item": {
          "id": "116b25f0-ca57-4bdb-9c3e-5c747cb1be83",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "424e8251-a8cf-4844-9fc6-c90c67b9f0f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ab15f70-ddb1-4a07-a546-ef718d6782f4",
        "cursor": {
          "ref": "8408c0ca-6ea9-41eb-b1f6-6d4c7376ff29",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "c215a8c5-687a-4875-adc8-3348c61ea006"
        },
        "item": {
          "id": "5ab15f70-ddb1-4a07-a546-ef718d6782f4",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "a7226b04-8a81-46d1-98e1-4b0fff8c7d4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44f5fb6f-ad78-4b98-8f68-56ce4f70a5e5",
        "cursor": {
          "ref": "b4047673-99a5-4fb4-bc25-2be0332c0220",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "943ac37f-6fcb-4bad-bd9b-0db57dc2c204"
        },
        "item": {
          "id": "44f5fb6f-ad78-4b98-8f68-56ce4f70a5e5",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8f8183ea-3219-4d57-b515-575d46343f2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f7d82e-67da-42e3-9dad-f91ad5278320",
        "cursor": {
          "ref": "452da880-5064-4b7d-9fbf-ebf2ddce7cf9",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c90510a2-8d08-4e0d-a656-f5ecdb81d829"
        },
        "item": {
          "id": "19f7d82e-67da-42e3-9dad-f91ad5278320",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1f8754c6-554a-462e-9993-9274d1d43726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c64c965-490a-4c4a-aaf5-ce17de23aa98",
        "cursor": {
          "ref": "aa4f97aa-8ef5-4341-8c5e-cb66a82aebed",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "30c71616-6370-473c-bcfe-88524fed78ae"
        },
        "item": {
          "id": "8c64c965-490a-4c4a-aaf5-ce17de23aa98",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "cc206ef8-b5ce-4018-8903-f83e22824eae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c1e099-0235-4490-851d-a271febd4659",
        "cursor": {
          "ref": "befadc19-6d15-4070-8504-59a4508a6954",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "beb4264c-5c82-4849-9eae-9abc5a4703c9"
        },
        "item": {
          "id": "c1c1e099-0235-4490-851d-a271febd4659",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "60c479d7-dd3c-4f33-8e19-4499e73db6ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d6d8423-5b98-4bcd-9955-b75344f3bf7d",
        "cursor": {
          "ref": "f434db51-9f8a-4538-ae1e-9bfaa21cb2f2",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "34373048-99a4-49a7-985a-284e6e96f576"
        },
        "item": {
          "id": "6d6d8423-5b98-4bcd-9955-b75344f3bf7d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "1fd01e08-d616-47db-8a50-9a6a88599fca",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "c77d1d39-4f68-44e0-8910-484b1da0a084",
        "cursor": {
          "ref": "2e46a8fc-2b85-40ee-bb17-e67f96127708",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "1376aefd-6aa5-4a87-8233-850a33c0c5f4"
        },
        "item": {
          "id": "c77d1d39-4f68-44e0-8910-484b1da0a084",
          "name": "credentials_verify"
        },
        "response": {
          "id": "bffa15b4-a118-4d4d-9b57-8e6fb9a386d5",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9fccc3d-5a70-45c6-964b-dcd845ee503c",
        "cursor": {
          "ref": "08733473-6ab6-423e-a383-bfd18eaf671c",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "761ced3f-b991-4d3d-aff1-99dd4f2ad974"
        },
        "item": {
          "id": "f9fccc3d-5a70-45c6-964b-dcd845ee503c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "043f75d5-25c4-4099-a4e5-9d29f4e81b78",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a938b48-bfe6-49b7-aed5-466f74fa1bf8",
        "cursor": {
          "ref": "e6dd5fa6-65bf-43d3-a4d0-25dace12aebc",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1e6ccda5-731e-45a6-bfe6-dbc28c968688"
        },
        "item": {
          "id": "1a938b48-bfe6-49b7-aed5-466f74fa1bf8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "62f0df96-4f0e-4a47-9aa2-749dff6a5b0b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a938b48-bfe6-49b7-aed5-466f74fa1bf8",
        "cursor": {
          "ref": "e6dd5fa6-65bf-43d3-a4d0-25dace12aebc",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1e6ccda5-731e-45a6-bfe6-dbc28c968688"
        },
        "item": {
          "id": "1a938b48-bfe6-49b7-aed5-466f74fa1bf8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "62f0df96-4f0e-4a47-9aa2-749dff6a5b0b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87cc5ee4-badf-4a7e-a223-6cdb32ce1fbb",
        "cursor": {
          "ref": "013ccd2b-30a9-4eb9-a2b0-87245ef521ee",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "7896037b-53f1-4b13-9afd-724b8274c4e8"
        },
        "item": {
          "id": "87cc5ee4-badf-4a7e-a223-6cdb32ce1fbb",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "639e36a9-28d2-4d89-9057-521be4c5d4ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa08b7d-721d-40c3-a10a-b58a69eed8da",
        "cursor": {
          "ref": "943a9c1c-3a31-4c08-84f5-5e4e28d9b675",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "113b5309-d415-4dd9-b0bb-4b260306594c"
        },
        "item": {
          "id": "0aa08b7d-721d-40c3-a10a-b58a69eed8da",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "84cff97b-b787-469e-90db-71a6a86fd903",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}