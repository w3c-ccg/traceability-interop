{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "991a1629-f1ef-4266-b6bc-ace74a570cff",
        "name": "Clear Cache",
        "item": [
          {
            "id": "931fbbff-5f83-4440-9af8-7c7891fb4019",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "45762951-a2e1-4589-b101-f6b4666298aa",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "135d70b4-4f24-4c6f-8fcf-a7e62d2d1b5d"
                }
              }
            ]
          },
          {
            "id": "a77d8be9-9fd1-45aa-bd9d-b93bfbf36389",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6684cd74-a9c1-44c5-83e8-6fa2dfd5d32f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "83252a88-86f0-438d-8537-6ff5f5fa91f7"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5db7001f-45ef-4d54-b14f-cebc47d95ca5",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "74c41a0e-06cd-45e3-960a-c0de335fcaf6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3f49b140-f57e-479c-9ec4-6d71f6ee2fd6",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "69502726-9cd6-4003-8964-8d336f9f7ed1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f76d9693-bf3c-495b-a953-2121088b8bd3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9e9dd8c1-083e-448e-b798-44ae46c1f856",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "783d871f-8c28-41fe-8a23-d7c4d37e8d0b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "26d15a01-fd09-48c7-a218-8d40189d1153",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "42f9d1d4-2eb5-4ac6-86b5-89b3e2ddb348"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "91363c94-3d8b-487c-ac0f-7a74484e0c20",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "98f3e1e6-3968-447c-8569-77bd2e6a7f85"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "56e7f32d-84c0-4be0-8a0c-d6b7df2d3db7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5660b3dd-5089-4078-bd5c-b81975491722"
            }
          }
        ]
      },
      {
        "id": "a96281f0-80ed-4735-99ad-0c4d5ebecf29",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "cb751bf7-f536-4695-b2fc-9a3a425655bc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "14544226-6599-4978-ad04-7c534ebaaae7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0614f103-c913-4f10-82fb-c3b0eb1c68bb",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d223bc-bb35-42ad-ac84-5ab3b5496327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "33bddd82-9e6d-4370-ad20-7d698e4b358a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1728e74-4b9a-49f4-bcee-f30954320585",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a4b1090-bc36-4913-a74e-9d8958f20f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1fb87f7c-4482-400f-a94d-ba0690840a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b7b35d4-6c64-406c-8978-c5299b741579",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c03fefd-aef2-47bd-99ca-f41d16736c72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e1c22e20-9f1a-4a7f-9850-c9793d70f398"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7bc0f69b-a82a-4805-9a57-c043a8f8ca3e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f31ba69f-3431-4bdb-bd5f-5cdeb6dddc5f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6fc551e-6a34-403c-8010-b1e82b22bd7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ac178837-33c6-45fd-9322-e0f4f42222ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9481cc6b-cb5f-42ac-8d2d-bf89a80d1be6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6751714d-a6f6-4fd4-82d6-ec8acd0fb57a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b365b0a7-f5a2-4d69-91c1-920368ab396f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f4a0681f-09f7-4d3c-a2be-486c48487a52",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "af4ddf8a-4e99-46f4-9051-c1b1643698a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "13f3c5e8-dfbf-4385-a62a-02d70854c78c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1eaac807-1c2a-4663-aee1-8f7ace75aa02",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "41bce81f-07e3-4c50-a5ae-06d5709868c0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9463d3c4-a93d-49b5-a0aa-10ffc959ad59",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "49ffa317-9e54-4bc8-9393-679ec343f9f5"
            }
          }
        ]
      },
      {
        "id": "fcff724f-96c9-4751-8977-8a5b71f68d17",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "1d9e0a46-f444-4d40-9cb2-54490513919d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f98b4094-1420-457e-81cf-a8b58f5df9ae",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "501dbbe1-8ea3-4eb3-b021-fe9289b466cf",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ea578a-76ce-45b8-a664-c374e9c029d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "893abef7-4793-4abf-8563-0974df861321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fce1026-f0cb-41fd-a808-58131600b62a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "34a04e9a-4349-4b75-b0d9-8866d43ed603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07011268-8ce6-4863-b646-80ec2c9d4ab9",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "399f9fc1-171d-4316-88db-265b251e0dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "687b73e5-8b30-4d78-b749-6c838cd9b5c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b86dd7-97b5-463d-a518-efb22d350ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c33cd76-1c55-4a3d-a3e4-2787e2d9ad77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e76bea9-e9b0-4667-8236-bc4a8985cba9",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e14c86c3-de22-4b6d-a364-a34e5bc52f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d431261-9cc7-4e25-a39f-47702efde9ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98041bca-4e99-49cb-8e5d-12bb33a1323d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7748fb3d-1df2-4fd5-9464-e7996a4c299d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "552eaec8-8755-444f-8b09-fe472f71ae2d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8efa5be1-8aea-4e8b-9799-32ea91d07d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f7d2135-b613-45a6-bb78-3a72477ca872"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a916148c-7269-4797-8a15-d2cf626452dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "016804c1-c3e6-43d9-b16a-40469a1dd33e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b7049f-dd17-4298-92b5-551c5b4a6bcb",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1eb336-0ad1-4a18-aea5-84891d0a6a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "795c22f2-6bff-4908-a48a-def212b5b346"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b5eb161-4326-482a-9964-3be46b19b547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58217263-c605-4d6e-bad5-7c66d024e4b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9a39d7b-4b87-4f9d-a926-91c5f7c2d91f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "269869a2-ae55-488b-b194-65329a85ba1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a2db95e-0e9e-4112-89f1-ae18c2eec587"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "364538ef-4d99-485f-b749-b1e549fc13e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "810b5c20-f5aa-44c9-82b1-49e6ee18dc32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d14dd61-6ebc-4d28-88dd-f63debb7f611",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac01c9f-586c-4333-b928-169774610c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55dc9f58-a12a-4e0c-a040-5bc38a78e8bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d75f4d21-ee88-4a48-a8e3-5f9171edacdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "731f981c-af22-4a8a-97aa-10de52f30024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "300aaf7f-3b37-4dfc-9ac3-fd807be9cedb",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be874406-4163-4f7f-9c74-89b27ef230a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57e570ce-f72b-41e0-b6f3-ea44d8f1eb64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6002bdb-e8cb-4280-97e1-940abdeeeeae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca356cff-9b81-42ae-a76b-3b6f289c854e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9ff66c1-4b70-4602-bcd9-3f4c5dfb1137",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41565f4e-194b-4cee-a73f-0dd422ea4942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "407f531e-3351-4431-84cc-6aac09144eeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b915eaa3-7cac-487d-bd99-57fe1f0860c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c791a93e-c24f-4915-a8c0-65e87a121015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ee0ac3-982c-4d70-bddc-df02842a8c69",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ad3846-35b2-40ed-8d6e-a4bf83643206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "106a0ba3-d9e0-4b55-81d6-5dc831721dde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d43da26-47d5-48c7-bf03-05bf2a3988b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ea2bd9e-1be4-4f5c-824f-93857b2b1510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "770c5a71-5b8b-4198-a2e7-af3ffd1ed7c8",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5794fb0-a221-4aaf-b830-c295c8a65fd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eac26453-440d-4823-84ee-429ce2a15cb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf77ab93-858d-4c0a-8a90-6f8a49dea1a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59c98d74-0c34-426b-93a0-57d95f69f6a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a3ef568-0623-44f0-a35f-af725370cd13",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57796967-4322-4963-94e4-9ffecf1dfd92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c12c136d-8a3f-4c35-a234-3d2d4e878e8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a1da809-4178-4886-85aa-385ddfdce0a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c394a706-5e47-43f5-ab28-586b83fea13f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38434991-116b-4dd3-90bc-3f3b3a5921b5",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b5c498f-af18-442b-8cef-f7d9af93239d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db4e7e36-7cfb-45da-8fab-8c68d7676c7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3a58dd-f1cc-41ec-8e75-93c103ea7926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b55c61f7-7474-44b4-bcc8-0c81db5f82fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6317a3da-9a99-497a-94b4-56783ff5803b",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b74b235b-7630-4617-a61e-18bc4404d3b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "890e2248-ed06-41c2-9b03-3bf64ed6e623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bacc6a2b-e983-4072-99a9-219f82e58e18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7fb19089-3816-4d3b-abfd-cdc4fc11ce2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aea24d0-796b-44d8-9e6b-b1b19006b4b2",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a50163ce-04d0-4f30-aefa-14c5625200de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eb7a391-3c64-4a87-8f71-2b84dee2ae08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "074cb7c5-e50e-475d-bb9d-63e5b1859ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3bc51c0-5124-4c7b-bfd4-8330455df761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d6d489-2801-4117-bdbb-bcc72d145d19",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c179a45-51d8-4a74-bd48-8ecde9e550c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29db4018-d2e3-44ee-b2d3-f372130e0c50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3fded58-c2d6-40fd-a93d-40e6ac99a56f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eaf62989-08b1-43ba-a671-40eb246f7a23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45068dc2-9ed9-4833-a188-f23eea564610",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b21dc84d-eaf4-4ff7-a489-98b521268dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "010cb634-8aa7-4e51-b274-d2521f16d04c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d758da58-d490-4a0b-8452-78f30074cc65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "86f79c9e-a43b-4621-bead-d3173fe5db70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf32ce0c-fd91-4daf-a173-2c494059470b",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7822fe7b-00ce-414d-a3c8-bc0aea4a1788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d07b98ec-1d03-4862-a101-71f09ec7b474"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee56ff2-c54b-448e-a25f-da30f6cdf36b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "957b7b09-04a5-4957-a442-47e083701e0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a14dbe-a379-4d58-a596-a083644785dc",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef5a8418-d258-4cae-a37b-69a9da072e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a486cd7-2be2-471e-b92c-ed4a1521ae62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ca453f-b29b-4309-b130-33a39eb431a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fba1530a-04f0-4840-ad7c-5484894c041d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e33bcc5d-56a7-40ce-9dd9-f44e5b35e7aa",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8e65d11-1790-44be-96f3-8bf925de9a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f63c31e7-441f-4512-833c-6b698b540902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a722b24f-f62b-4c97-938e-3a1db8b379fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "90b9583f-238f-4782-94de-80a6aaa5fb1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97cda6df-28e8-477e-801c-2872a5aa93c4",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62ee44a7-1f36-4888-b062-c0e92574678b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f8cf634-bef0-4909-93af-39f41e6e2c82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f62cf6cd-59ce-459a-b684-dbdf050cfcf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "60c827ce-4762-48e1-838e-9ae77c75b666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d21f4a74-203d-4aa6-8829-5be008f7e34a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "895432bb-2dd4-4014-9142-0c687d744698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f0b2fea-2432-499d-927d-48f4e7ad878c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3745b6d0-33c4-4e41-9d04-41b63028200c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2ea3ce4-aeb5-482b-91f3-4aa7fcd463d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8da6cb3-30c8-4e52-8a13-cdd928039f81",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43326747-0d28-4162-a6e9-9eeeb7b46a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0acd1aff-66d6-403a-84fe-43a02181cf39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2d708bf-0b57-45d4-9534-3d12633b845c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "be26ef21-b737-4fd7-aec8-dba96db2035a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6414bff-9607-444d-beff-d79bac9151e9",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "783b2aed-a807-484f-8ef7-b988fec4c3e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b787491-8660-4701-8c10-5d69aca07e82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d81041f-f6b0-4131-97ed-92730cfa50e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ed2497f-a115-4072-8f16-59562555b42d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd872e6-fdde-499f-a853-7f6416733029",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d302731c-e8cc-4ca4-8076-07557554501c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ee69b05-a3f4-4696-9a00-814d1bbb0ec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd1f788-8ab9-4521-aae7-dcbe44d3e7d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5fd705e-2d8a-45f1-9cb9-c00c41b324ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b663ffcc-a265-4b13-9a39-a02919a5d805",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4e63379-df2f-486c-aa2d-fc02c1cb9d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "accfc2d0-f1bc-43e2-bad5-6b499b40fd61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcd9bfe5-643e-44c7-be1a-a40db97a8f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "103b6890-719c-46d6-a9de-ba631d3a0408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e6e651-9b78-4a79-be08-adc6059c001b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94aeb047-5ae0-4417-a010-11eee20f7a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30b6578e-e5a1-4b46-b6dd-63bb86107c1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15cbf11e-3b1a-4c9e-8dfe-d9b8808558b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cd89485-92c3-44bd-937e-54eb791d08ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55f26349-11ca-4f15-82cb-53a6dea1c56d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51863f4a-a478-4d48-bbb2-5df5e7917112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9318c885-9154-40c0-ae73-fab4c43f6273"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c49a90b-f945-46ff-b15d-00ec7add94c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8e22eb5-6f4c-44b0-b7df-d64cbf930040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59239ea3-075d-48ad-84ce-1b71f0c6e029",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "166d74d6-110c-4073-be37-3806571f8c3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bae6ade-9199-40e6-8358-9d20d75f37a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92aadb61-06ab-481c-a2b5-1e770321eda8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "970586ca-459d-4ebe-aa53-7a7eeb7f0f3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb23c566-49bd-4d54-8775-ab0057c0ae17",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29201983-c685-46a2-bd42-e4959fd12a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8245a25-0432-428b-97ed-092c68b377aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d9d9e5-3386-4732-ba74-9b01470928ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "58b8c124-1f4e-4c7b-84af-50f9a4752fa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a0a974b-d29d-4c3c-bc46-ed8ea56b497b",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff0e5b0-15a9-4d31-b234-1a54f0f2aa38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ec266eb-db7f-42ec-b825-fe61933b2dc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c8421d-44de-46fe-951c-5def1d36cb2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "73ee03e9-bed3-4a78-b6f0-e6ae15f4c382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fab5b991-bb61-4c4c-a442-41592d467a06",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "309dc3c7-5153-4e48-834e-cdef5d1a5ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5854765f-a6c7-4f70-8da1-dbb08bb99254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7da86a4-c925-47a6-8feb-7b0e0c0625db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a8805bf-88b5-4c2b-860e-d60f8e6dfb37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f3ec987-3d02-458a-9204-8084c606eb32",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f58f72-00c1-4baf-a3e4-f2978685891e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94782372-8395-4e8f-981f-334def12bcc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af2cb31-1631-49d5-bfb6-9be219a7779d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b786e51-d58f-4b9c-ada5-67b7953658cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b3da81-29b3-4a9c-883a-1e8809fd390e",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "633ab66b-29dd-4b13-819b-0879b2e7b57d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2ad3c2c-a657-4441-b256-ab72fd0717d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0b0be9-a931-4d4a-ad36-886236bdf921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "75466442-d438-4b77-a056-0f7d25385b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afec3ed9-10bc-4b26-a98e-d8b0fd26b8a4",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8be7dbb9-cb70-44f2-974b-203e64411555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "568f51b8-257f-4660-9b9d-02f013dc60e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a6f8f5-c085-4acd-a3a3-c64c62863132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a73766fc-46d7-4ab3-bcf8-725abdd79100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3adbb8c0-198b-414b-b208-129eb3e7084f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23f23bc2-ff1d-4c7e-95a5-d8081f62e3b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d7e11e67-f0a4-48d1-98c3-1bdee085d493"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e11f78-5c91-471a-9d59-fd3a81ccb856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0dac8f04-5e7d-49f4-a71d-40a62744087f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ffc54c4-a38b-401f-83d6-4bd6858e73d8",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb21c29-ec77-43e1-8c8b-c1da78f7c263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0d4da19-b524-47cf-9077-ab1370bc5346"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "758c6129-ac5c-4db1-80f7-bad15885cbae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "71abd9c2-8455-4781-b76c-711d90dbf3a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f86093ed-a610-4215-943c-bd4b79e0ae1d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf5ce77-9676-4807-9275-795bc3a71cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc3f0a40-c782-44da-957d-256bf33970c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e768c4-c0e2-4b58-90ac-d38954fd81a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3bfaedc2-d6fb-4551-a41c-666444fe4936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd6ea8c-944d-448d-95b5-ae1ac7db2197",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f31b02-4195-43c5-ad4d-12ee04068178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94de3fa0-7e07-4ade-b9db-77027321c13b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d3da4d4-820d-456a-805f-9a2f827a58fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d567a700-6944-45c0-ad74-235090ba27b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0fca184-c550-496e-9a59-50548666fe99",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07268acc-ac12-4899-9111-8d56a8e48796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8e59331-f1ef-4846-acfb-2400dff3f723"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1819a615-15a4-48ec-9c27-c39414de2ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d580640-8bcb-4ebf-a297-4ce022fc92d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8383eb5b-95fa-4b8f-9248-cbdd5f501543",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "334d6953-a34c-4283-99fe-fa6ca5145d3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d81eef94-933e-477e-8d27-ce5f7bb2bce5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf028086-2723-494d-b0b2-45092c479420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b4dfc86-2f2e-40ff-9531-08f8d79a0f1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4db2fa4-e685-4f98-a2d5-796f58785d64",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc2913d-aa2b-4310-b68c-debf2259a2cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2c9faa5-3364-4d4a-a442-5541402b0d30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47e39fb6-2b35-4687-a87d-1a53fca49858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "a8f3343e-44ef-4a73-97fa-223846e6e4a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e8b6ad8-1654-4ff0-acbb-3ba899cf1ae6",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aed57e9-582d-4aec-96a8-10a4c51e7ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b55fc3e7-07a2-41bf-a639-477e415d9d4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d7911bf-aa95-4ebb-b704-4b44d7aeddc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "46a8959f-75c8-4850-b296-ac6f6de5a0b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e7d4164-ba46-46ee-b78e-c8b55b140225",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42590205-b476-4de6-8767-54ad3facd33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c265581a-e453-4cc4-ace7-54b20fbe6cdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45474989-8dd3-49fe-9999-c43ebca39ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "bba9695e-1e5c-4cd5-9e85-354cdf0a49a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c7168be-8c38-4622-897f-7d3f6c54f586",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6237e887-aa6c-40f1-8ad7-c7d3cc2ed0da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "411fc19c-e65c-4937-a9ef-8c4eed2545b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b896c0d3-1576-4666-b54c-0863e953727b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7480dc8-bf71-4bb0-a74e-36f829d422ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "055d2396-1f93-424f-9cea-e5255fc52ba6",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43022eaf-c345-498e-822f-90cfdfa7f4d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e92dde1-d96d-4f48-974f-38d8d93851d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6b224e1-8d04-436e-bb66-f499cd024c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3423044f-407e-4156-8e24-2c31b306a7db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c85ad3-9426-41d8-a0af-63548df1eb6a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d146e9-4d9c-405e-9bab-090ec5044de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a25e38a8-9e72-490f-9649-9a0f427e3c50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ac4302-be38-40ed-9efb-9f661a2401da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b6db1f5-54e8-4e47-b7d5-787f21362c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6791211-c73f-4316-8249-c2893fd7e57a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be1c7bb-8179-4d73-9833-f70baf55c26e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5656c02-2b1e-4fa4-bdc3-e2129f0d7fa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10aa843a-2056-4c07-a18f-15c2fb8028f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab37cbd5-590b-4297-8616-6b0d45d0909e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e328505e-b5bd-4ca2-a4f2-abae1f91df39",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc667b39-617c-4754-b0db-7d61f87cd7d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4887f730-6c02-4bf4-ba0f-883dc28d8377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d2115d8-0a3c-42af-9b83-022754e27a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e13d9be6-c858-4022-b0b3-adaa8dcd80b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c0c5122-8807-4560-830e-a6e4fea66373",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ffba222-daf8-4756-8929-5c1071475e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9909103-ae2f-4896-a9b4-b30105e836b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b75691fc-3532-4841-a6d1-292a872167c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "84babea4-5b87-4d8c-ae0c-7cdbf746cac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d40de87-509e-4b13-903d-d198089ef494",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f87154a2-20ed-4a52-a8dd-aa0f1972c8ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "275da1a7-d03a-4991-8057-39bc9b1b321d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fb81037-bff0-4148-bc4c-682025e13c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d16cfd1a-2902-4972-9897-700d3a1db168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d303dd6f-57fd-4edb-bb3a-3cba5c7f637e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "008da387-15f8-4408-8efc-01ad525d65e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cd75bcd-41ec-42cf-aa25-86989a438223"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f2f8c7-7e0e-4162-8f38-1229f96db113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2b37784-07e2-46cf-9ee0-96ac3f9aa6d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9473ad16-4eca-49c4-8cf7-5922056bc226",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa71f46-0ec1-4c27-859b-439febf46954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e95cc47-76e4-4047-88cc-078d28e5aa8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a705809-fe65-423e-90aa-5a7bc26c5b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d94a198-b358-4215-9f9c-a5609487433b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab2fae4-aa7a-4fa1-8943-4ebafea7a6f2",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbc96253-b02d-4476-9b7a-a684829012de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bfb5445-53c2-4fa4-a340-662fa567368d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f25154d9-d386-464d-9f60-632bc5209763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "403d2945-c786-4b7c-9e6a-eb062599ac0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3362769-cea6-4450-a021-5ea2ea7b654b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c74c125-c9c3-41e6-9356-ea0982b57cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7426d9a3-563b-4bac-9264-12eead3dc7f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9733ca68-da83-48e0-98ee-19ae840fe940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "55ac5b85-e00c-4dca-95ef-41fd0cd35929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31de704f-6e75-49ef-9924-3a22f95867e3",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d77513f-712e-4512-96fb-fbae4e255259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c9a1809-0bc0-49e3-ab5b-d48117301c5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25526e1e-1e16-4594-b6b6-8759a5d47e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "0b320bfe-ece8-43a5-9070-41a14f5395ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8c2f070-2178-4853-a138-3919332df485",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87765bca-73fc-48c2-96e6-92ddaeef6a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43c0c633-47b5-4461-8ccc-624225773a3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd6336c-b171-495b-ab64-7293767d746b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1df7884-ad5b-40ec-928e-ab653fd08715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b40960e5-26a8-4901-81ad-f1221e4f3c2f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a867b06a-bb76-4ae7-8840-8a08d3be1b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ae57804-43e0-4991-bd53-6abecff4952b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508aea6c-00de-4314-990c-c80c6f3e02ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "447c7a8e-e7c7-438f-beaa-da427ccbbb56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0353797a-7d57-4bfe-aa89-0cd5c4d4d49d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "842722e8-0fc3-4300-a6ca-ac1dc3d88613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a84f05a8-3e48-4399-ab7f-5d94e6cdfb23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff55712-209b-4c4b-8ba6-cfb2e514ab0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "76c4fbbb-52b8-4f3c-8b36-c6b20ae05172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f268d65-9d12-45ad-b7b7-b5f6dede6b4c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "520ba27b-07bc-42df-a52f-992df710b945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ca59d44-140f-4d93-8b65-7d1a2a06fca9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1842cf09-1964-4481-9de6-563cf2fd59dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "87c160eb-ed39-48bf-8214-8ae0f2cde9c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b843e885-a086-43aa-91a1-ace55119cfe7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82e1a376-c41a-4327-bb23-883437cb2a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c0f378a-3b59-45dd-9637-8de9a3eadc64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f8544f9-d7ee-4216-9034-44a7dc94b2b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7185f186-e687-4cd7-8b65-690697ab96b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f65074-9928-4098-8f6e-14e0f875ad14",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec3b0dfa-bedf-4cda-a12b-34de22a81434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1a220bd-f6ce-4b72-8274-9df8404490f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "328ca753-3033-404b-a2e2-68ca8a2383fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bf29cbe-79ca-4de3-8b84-0e5423e10e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b5ceb0-85f1-40e6-8e47-310fff77d57b",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7dbeec4-2675-4d28-b8cc-b93700367d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7c64daa-9ac1-46b1-ab56-dac95a470916"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e1dee2b-f6d2-446c-b7ba-d2d420afbedc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b06bbce9-f66e-430a-8530-a821a3252a50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61587e10-6bf3-4c9e-82b6-7ca093371bc3",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d07826-312f-45fd-bfd9-257762a5a9d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2377b5c-588b-4944-a910-3be3f618e980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "233f60bd-09ff-4a07-9215-a0a0c247387f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc85825c-efce-4798-bcee-4b6af3b72ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6960901-7f2a-471a-abab-05051b8117b1",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70ea5745-db88-4146-a3f9-50e21c2ec166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f4f0b47-2d64-4846-8b37-167cf51a1c4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa739711-f321-438e-a891-a6d295d9b499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e43d37d6-4a76-40a7-bec8-519b11a3643a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "187217f4-c8cf-4d2f-a6bd-dcdf5dfa4a2a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e4f8e50-f50a-49d7-99bf-c9a9838d393b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "090770e1-d4ec-4cd0-b062-918ed6368768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5ab5328-4b37-43ab-8689-31e49585a41b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "701c68b2-54f0-4ab9-a80b-374fc6f0253c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3c672f2-c8b5-4700-918d-97fbc901ab72",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b187706f-b4fe-4e35-8a6c-358ea97e2551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaef6061-911f-4d80-9f4f-fcc15b5fb63c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b9a9a1-8017-483d-b0e8-652c701dae33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "88454b0b-00c6-4ecc-b034-ed4f285ff1d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd712cc7-71b9-444f-bc06-61fd7e83dbb2",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f3729a-4445-4d3f-a9f0-f48cf27a1197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "750645d0-00ec-40bf-a9d5-16ec07f0b031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3182e7d-9c23-4dbf-9b68-03a85edd72ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2f99349-76c1-4b62-832b-ea9313798d49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "744ed8a5-4078-4f88-a885-935b0769c55d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a57147-5d66-42f5-be4b-0e4222e51b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06877ce6-ee39-461e-814a-6ffd1547c919"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc2d8a2c-d2a3-4df1-9f82-f71d34ef72ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ca6c8ec-350f-4d7a-99c0-d04633055e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d61b41ad-8163-4997-af9f-2e11ac472460",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aea5a4cd-6118-4467-bfbb-c8105ede914f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1f0eb8c-a2b1-480c-a5b7-c4302ba9d380"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d485e1-3acd-4403-8dcb-93196a84a5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "144873d8-223e-4723-a25b-d20f94dc0299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "983a76e2-efaa-4b1f-86d0-9edc7d48edd6",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "154bf064-1874-4671-ad3e-1c2b03dc32bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa1ec353-e255-4b29-b6d1-d92642c82c4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e02406-04cb-4a07-8465-3bcc74b7e7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cf7c6c5-f857-412c-bff5-53b00de5cd44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc6d4a7-85d1-4b80-a98f-3755d373897e",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7339fff9-1f9a-4314-a5fc-901453b26de0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22faf1f0-8c41-43d4-b472-9f2f1ef62d88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bbdf775-fc70-4f97-8701-c44505ffb560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f4977c5-b178-4b70-9a1d-ed0000aab8d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da779bc-5590-4d7c-abfc-4101641be2d2",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d52aa51-1564-406f-8fc4-607b69e48fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e41c624a-6028-40b9-b8dc-546892eec142"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f73d511-3c61-43ba-91b2-22d288928c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6caae59-986c-4a85-a2d3-d77eaec969c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdaf3876-3827-4693-bd20-120b19aecb8a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4350d323-3d7e-4500-b7db-d0c452542206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dc5f922-3bba-4a05-b3e8-e43640bfbe61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fbc2585-ab0f-401c-9005-5b173463c4b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "15b846a8-65d3-4c10-b4fb-3bda08e3698d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07132724-4a26-45da-a85c-97d4bdf39f1c",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "535c5cc9-99f4-4d39-b975-848cf123bc8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c0223e5-5022-42c9-a14e-92003ba849cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96562f59-68d8-46d4-91a9-4b4faed4be84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0aab651-93d8-469f-a3f4-d9929a40c33d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bd2cdf6-643d-4099-842b-730f56dfd460",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a311fa9d-226b-44bd-915c-782f35a28db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "921756b7-6081-458f-a2c2-1f74b2cf79a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aff4410-740c-470b-82d7-fd030592499f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e052c174-05e8-4854-94e6-3d55f803354e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "874b3c42-fa01-4e1a-9862-8a396b166afc",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c5d2e37-9440-45ee-8fe8-49d9c849a0d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25303089-fb18-4bd8-82c0-2047de3dfa50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3bf099f-fb7c-4a30-bb05-fa538f1b40eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "06ebf475-a3c7-439c-94b0-0100759112c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d9350c8-d40e-46b4-baca-3e440f641fd1",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d9ba34-7c13-4a24-b816-513314812a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb2caccb-c136-4c9e-a8c2-8c9bc8dc66a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd7b9795-fb42-4f0a-8160-6dd7c9ecfa8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b944353-315f-4bc5-9aae-db1e92347dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5bb22db-6482-48d6-a0be-bdeb5acd7cf5",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f5f7678-a685-47ff-8007-8331e08c156b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6956ff94-cbc9-47ff-9697-652c5f764197"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a062fc-8a45-45bc-bf9a-73c6193fea5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f34838ed-ce55-41af-bcaf-b20ce551423b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "303b8430-43b1-42cc-90fe-469041ccf729",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5a0a7a5-0ca5-4c2c-ab26-2fc41b9990de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a58c0823-3f1e-4c1e-9fa8-4469dbba0eb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29de41e0-db12-43bb-9087-a2ed88367709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "25672210-3b42-45b4-9c27-a58c381f6c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f7b9a80-12f4-441e-a996-a47294cd9ccc",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84b0a451-58dd-4a18-a60b-c5b441d897de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62edbbcc-8418-4bba-9e2c-2f6cf923f25a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df21406f-bbd6-4d47-9669-efc27d7b51d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "09ac343c-98d9-402e-869a-c978e875eb75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e5138fe-41d3-4b8f-9834-734e3a790734",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "360da23f-50a0-419b-aa8e-362c157132aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e33d6a94-357e-435d-976f-fc0c1605a69e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc4371e-477e-4b40-a3ff-e7be93037828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4550c543-e074-47cd-add6-56296690382d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50c310e7-a140-4ff1-89a7-f473afdc3ad1",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d9dd01-5567-4fb2-82de-c6a3ce36ea74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30f4ba27-83ab-4f71-93e8-66b26503929c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "945ab972-77a4-4579-9784-b77c3edf05a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a9d4ce5-73a8-4c9f-b171-a7b49b0d69d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfb81e63-0981-44e2-a6fb-7efe91ffff3b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0398f70c-99df-4113-8600-cffecfa3fe06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cc7fa8d-4cb1-411a-98c5-2e8bd2b3ed0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96416340-9960-45b8-a08d-c0c5987971c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce5c577f-0b5a-46b1-b03e-9808755af9f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d84f3de-0ac9-4939-a483-f55705a087e1",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb27cbe-1f1e-4a93-8f0c-30179e93bb14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9bad48f-688f-4198-8c82-32ee885085eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4327abdb-58f8-4ae3-adf3-911c678bd2b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "447ddd96-2f19-4774-9b47-d023c7a229a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa2e98fc-f1f7-4ccf-bf23-6335241c90f0",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e91903-db0f-49d7-9c92-5d6bf21f04f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "429c6429-7ac2-4f03-a160-561933473e1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83aec28-dd00-4240-be44-02ba08e182b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8fc8ba1-66a2-419c-a641-132279ada4c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7724f87e-50c0-44a9-9ff5-30a900b12895",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d19911-a4d0-482c-912b-495782f98a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93a8dd25-b473-4f59-8584-cf87d28e2796"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf1451c5-c35e-41b5-b7ec-0900b6da2373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a299cda6-9407-4d9e-8b27-78f48e2d8e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0d4624a-de37-4595-8d3d-aa1d07980b88",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed5b32fb-73cf-49f6-a1b2-3c0b3937ad93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "466e5da5-43bf-4d4d-9b99-5dfa78030b0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d0c8c24-cc03-476e-a317-26d050761565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cfde1849-837b-4ea0-a77b-a8518add4809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdae03af-0fa6-49df-86cb-6ddf03d91b96",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f83c4bee-485d-4b34-992b-5c83a8b1849e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc1e61a5-9971-46cc-a112-8219f2f1cb54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "386a949c-56e3-40d1-9d30-25fdd9b7143d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e727fb50-a1a6-495f-9553-dc56d3d60f0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0625d77e-da6b-4aaf-a368-6662a24769a5",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eb849f4-df7e-47ff-8954-56e15f3071ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6de44345-237b-4331-a7f3-258f1ee75ea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb11f270-dcb4-4a37-a6c1-860d47575209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "94a4305c-c6c5-41d5-b5eb-52c172de9d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf2904a-23d3-4db9-8b68-66c00a8754dc",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1132d4bd-375b-4756-bd0e-98dab7115bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f7942e3-0e6d-4b68-a162-217d8f66de06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8311e6ad-1efd-497e-9f98-7a1ef1e015cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "dff0bdd6-40a6-482c-851f-9e7f70a916da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9381e15-fb5e-4e55-9737-5f53e590fa93",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e255de2a-63a9-4732-b1ca-1375ec4d7952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "79999b9a-a563-4abd-a23c-e9e1e4ee78a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "677d32be-3628-45a5-bfcc-9d915ee5645d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a2146e0-1cf6-4d51-b4f8-b1b70bfcc7c5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7042efcb-53bd-4f25-929f-4228ecfa8d59",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5567143f-8a85-4da2-882b-53d6b1c03602",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9372eaf2-dc38-4f76-8e99-7fb597922ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "23a5920f-d046-4eca-b3c9-232324ba03d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb07de41-656a-4812-9162-cdd2e2ed0dc4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b33ebb93-6c3a-4d1a-a555-20b046abd104"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "09d5df7f-11ed-47eb-a9a0-9d360d31d092",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c4ba260-3ca3-4ed9-a6a9-5bed56f73e14"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "38465552-c3e4-4db2-98f3-40f263e8ff1c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0cb20001-4bf6-4969-ac1b-4e7c6f716f5b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "64acd850-b19f-4ef6-ab60-ae5ed7745975",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "408d1f2f-503d-488e-8fb1-1599123b6353"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b4ec50d1-3684-4884-a411-2f71e709766d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7beaf004-0894-44e1-a9b5-f0257da7c763"
                }
              }
            ]
          },
          {
            "id": "b897f951-c89a-4428-aac6-1ed2b89f71d6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "66dc2bb8-6ee3-4791-9055-f5d7f9ac3105",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ed646ea-d1bb-4ecd-8138-52c8619c2200",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "192b14bd-d04c-49a0-8ba5-041f715f84e8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7710b9b5-b2a8-4dac-8da7-3713581a85a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "539062f8-0888-4b2d-b2ab-c550e2b17b24"
                    }
                  }
                ]
              },
              {
                "id": "f60d616c-3527-4f46-9578-1817783147d5",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "381ee03c-e4d9-4697-843a-8df149135c8c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3d59f430-682f-46c4-884f-5bd12696e4e2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "76b41079-8e51-4a95-9ad0-26667f094e8c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "704f33fa-81ca-49dd-b97d-ec6c8c22571f"
                    }
                  }
                ]
              },
              {
                "id": "b9f6f93d-ec4e-4e59-bfee-5fb9dbe70998",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "44611850-9ecc-432e-a80a-25d82b13c213",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0f6fe599-ffb7-43ac-9f3f-09cef175799d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f2e2e81-0017-4495-b2a7-70cbb2f9ef4c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3d260daf-7b83-4010-af06-8718e978b1b0"
                    }
                  }
                ]
              },
              {
                "id": "ece5e3d1-b8a5-45fd-89f3-f96427089ea6",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "74a0e452-fae7-4f81-b309-bc757cd1f8ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "13700def-8095-4d88-a52f-6df5fd1be7c9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4360444-a4a4-47db-9f64-f9c631438aea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1eb70684-8e0d-4889-b710-5f5661cc896c"
                    }
                  }
                ]
              },
              {
                "id": "917730d5-1b63-4f20-8e7f-a5fab71c94c7",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e31feabc-abb2-4514-be1f-a7f5e71ced3d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5628d05d-b209-4a8b-8a58-aa02ca847293"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "48d8e18e-5628-4ece-b225-3878c2173426",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "6bbaecaa-aadc-4ca5-b0da-fa050109fdb1"
                    }
                  }
                ]
              },
              {
                "id": "babddf80-7c5a-432a-bcf3-a4487c9fbc23",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb6ceb4a-17db-4e21-84a9-2f032730bae8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4dad67f8-ed8f-454e-aedb-fa4aa89b0fa3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c1c659e0-da4f-4570-b1c5-7b79b590a05b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b5efb56e-0ef4-48b4-84b9-529ddd3eb025"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "52ea7392-c525-4c58-aca4-85f6eb3393a8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4345e354-2808-4ecb-9631-3eff800e33a9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bed6fccf-c501-4ff2-ad34-6ef838ca3311",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9444e354-9e4a-4fb2-a0ae-fed11f5e16bb"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "40f56e9b-c756-409a-be82-16b3c2da91f1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "56c43af3-86f0-479b-b37c-76a8cc353f7b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "006b742f-14fd-4fb9-baa2-37aeae79f047",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "51e5355b-ce70-4e93-a5de-cb13eee1997a"
            }
          }
        ]
      },
      {
        "id": "df1a3019-42d8-4596-9d61-3b9a07c3c05d",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "7f4a6126-83b1-4bc4-b1d9-e5131d68e6f6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5cf57729-4a1b-4f6b-a470-789f0c179d5b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0a09437f-2cdc-43c4-b671-1c47e957a20d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9dc05e3-691d-4d05-80ce-9c8ea417b0a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83ed4ea5-17d8-42ae-9806-7f692009c609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f0e200-4c74-4196-a2f0-717b43a2078f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "db48edd4-2025-4bf3-8099-78ae4c6a26cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce59f568-5426-4f13-9d00-25e714f7ee92",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45f05bc6-d456-49ab-a66c-30c1c54f21d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6782e1cc-91ce-4f87-8c1a-15ea4e5cabcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92ba9e63-48eb-452b-800b-967c48e197f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bcf760a-fae4-474d-9d64-5f5a398fb9c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762d6e18-0e80-45c0-ba49-73318574aaab",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a97fe538-373e-48a9-a9c2-3ddf58a5db7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1255e6f7-e8a4-46f2-af52-f3189f916f4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f9a467b-8d44-4f5d-85e1-a93dec9f2da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f75c7a1d-cf67-4e01-a4d5-6316cc5449cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "033a9636-9acf-46ed-9e41-ced2983b1601",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53c65795-06d2-4d8c-8fda-58b3968e180c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66b2bd0f-8a95-4342-b216-9520624e509d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d87ec1-9554-46d9-8f0d-4f09d4b667f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8da39d8-191e-4d65-9615-6df23cdf6204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72739270-dce5-4796-bba5-b5e8abf6ba49",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1aa1e54-a5a8-4c94-93fa-6c6376c11027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d82a782-fe12-4c26-a081-e37c3917fb98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f7d76f4-0d3f-48bd-a577-b51164208ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0655f836-53f1-4245-98f0-0391034553d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a959786b-5211-4b3c-9c5b-4bd86adbb4b1",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4915e2c3-9752-4365-92ce-9fe6fbe2f4ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff9f3720-e4aa-4c3e-8e3f-3b5f2035dff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c1ff736-f88d-463a-9fff-2a1f1f242363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d2546df4-2075-458b-be7f-5402ff0652d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "372470f6-abf5-4d99-9767-4d20e20ccb12",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6183a6db-0c51-4b17-9d17-d9d3d7c03619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcb5324e-249b-4fec-b80d-d21785692b7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf2082c6-e357-42fd-b77a-2049ab6269ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5faf9b4-2376-497a-9d14-a2a3068848ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88b69ced-847b-42fa-9aee-c7478b678fba",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56163bd8-1325-4af3-b1b6-91910c45bd6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad28e212-2369-4f4f-8aa3-ec0713b6734f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1721f4da-b5d3-4406-8580-c6ace4dd132b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "15806624-1f3f-4ea9-87a9-0579ee56be06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f0a685b-32b7-4649-bd67-4767806378c2",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a82d9afb-9567-4073-83b4-33d5aa95ce68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7235fd4-f0dd-47a6-8566-ec6fe750f847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faf821b4-91b3-4279-8782-13fe37e35edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4675c799-c2be-40db-b70f-4184815a9bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "100f3fac-a9ed-4df3-befc-c37ca36a6be3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5d70de3-ea43-4f11-ba3e-f21041bf0e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1d0f08c-f8f0-4476-9ecc-807985409f66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd2702e-39a9-4289-bee9-ba91a462195d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e6dd587-2d1c-4fef-99f0-355dbb8b5f64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9210f91d-e0d7-410c-a621-4a46de188060",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80ce3110-bf3d-47b3-a9ec-3fac6c3172c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "169ebc57-f69b-4df6-9d9d-c7c3020b0312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb41e56-642e-4c1e-8cfc-290b4d2d6931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "48433902-6bfd-47b3-8dcc-fe024d53dd7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ac3ef1-0103-4024-b150-abf1c4707fb4",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89d23090-87f2-441f-a7d0-1ea6cf0085fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a315a933-0a38-4256-824c-8ab20f1e0ad2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f24a7315-03e2-4ea1-8977-55899178251a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "571ae421-6748-493e-8c62-d4f84affb6a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53d594ed-9c33-4737-85a1-f629e15fcee0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e47b9631-91a4-45b2-b5a5-74c1f2ebae49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b297b58b-ed92-46b7-a6ac-50807705a481"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6914d856-ef0d-4d67-aed3-33412f439a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ddfeb4d-88ee-45ac-aaea-4d357f00593e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66866885-0866-4c8e-8302-eb5eb9e08f89",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d7d23b6-877b-42cb-a558-8ae400b959ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40ef1f89-a2c6-43ec-bc6a-99ae607b5d39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57372c08-158f-42da-8035-92b1813d7ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "79650323-aa90-4120-bd87-d07bc446b9f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be087ec6-abbe-4939-8cfa-daa2ce4524b3",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1128385c-1ab8-4947-adb5-69b8302b7aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd7683f6-4a4f-4642-9eca-5d1613ffea64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cdbd064-14d0-4f07-9ea4-b7d48779ff9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0256bca6-e441-4930-b224-6c0e244b6f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f27994-3f8b-4810-912f-b33d34a974bb",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47882c4a-c762-413b-86fd-9fc637bdde68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffe46d74-03cb-46b8-b1a3-29f215328a85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bebd9c5f-727e-4390-8073-715b55014fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f157a62f-8d7c-46f0-9874-b2abcb200122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f14abc3b-8452-4cf5-9ae7-ff467cb4df42",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3da7e389-dae4-41d4-ae56-fa1503c51344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4c3ed0a-afc4-46ee-8b22-b978558a4dee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad02a7f-4dcc-47d1-8488-121987a15539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9976f240-e14f-4a6f-828b-76850a76ab7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b8f74b9-6641-4583-b175-b8ecbb0ee72d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d56978e7-74ec-4960-bf75-21258223c05c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c3af0e7-208c-495b-8960-f6d8875cbab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77afcc38-1e54-4abb-a3e7-49f7248a5c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "50baf670-711b-4e6b-9ff8-cad32f4e6f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02ec6f5c-b410-4de3-93da-adca9ee3cfbf",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "581090c8-6d44-4300-882c-4eab60f42443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5637ec61-5d66-406d-b94b-0ff24d95fc80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf06f94-0f9f-4d0a-9794-f2ec2496aa36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f6b2937-22a7-4246-b1a8-ef39c1ddc81c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2d46c4-e168-4908-88b7-6b6f878a1c7d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4f849c-50be-4dfe-97de-fc61bc14427c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "319f9c76-7a3e-48c4-b4f5-fd76d76388c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a5b131-cadd-4765-8737-d37e45a60a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42cbc8ac-4f54-4383-a42a-e3021a4d4e9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64cc3aeb-e02e-4e97-97a1-e6346277a1fd",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff112434-9cb3-4ed1-9297-7cab9f387675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "735b51e2-59a3-4dd2-821f-e9b616cbf784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eef1da0-0fb7-468d-86c0-dbcb0ad58acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b2bacbe-213a-4913-86de-b0e0a9b1c0fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a652ece-3d4a-484e-bdf8-fcf31847000e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf75fb8-ec7a-4ac9-8a9c-dc2ba2a31acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bd57cc2-710d-491a-ac9e-49140e61b730"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d67735fb-c431-4a79-9bd1-41a78382852f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05a6ef7b-be83-4239-a745-129476231a3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0c029be-a204-4b80-8e62-2169becc9c9f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d99c01-c45b-4daa-bdba-a3f68f47705d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e78710c-5f34-4c56-87f6-e33070d3c48c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45531280-9c6c-4dc7-902a-0ea780cf7ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef9b786c-59eb-413f-ab5d-47f4348e6ca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b301292f-3a88-411b-b2a3-7ba0307267b9",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c38eb89-7df5-411a-8090-897ae57dfee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc45080a-99ca-49f5-be15-a1770cac1e75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7d7f2d-4771-412a-b560-1abd845d0fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b948927-b9ba-4975-b23f-28611b392c7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a98a40f-6685-4e3c-83cc-75804402c95d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e57e4fba-caf5-4c33-9a50-68a142c4368b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed37e135-b4a8-4871-9dd1-cb677f23b0f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4341365-4c2d-44c3-997d-5b8bb8f8d474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ae33059-36ed-49aa-94bc-c6dc77f008b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ac294a-4dc4-4334-927d-4f9eed7e3686",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a98467-ba1f-45c1-af32-69b6af3afd67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a763b13c-dced-44e0-98de-0f4a130bbd42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f9ba0ec-b4fc-4c55-8fff-54655f546c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c6bd549-6727-45cc-8aac-b5c7fd8a302a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85cced09-9531-4222-a2f3-ad3737bc18f3",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9446565-6e04-4e32-8320-2cc00a889c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d881758e-6266-4009-9b5c-ad3e6e2f20ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5149185b-6aa5-4548-ae7e-0d502527d89c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0e3f900-7bf7-4a15-bcb5-d270cd83f234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f72c9aa9-f51f-4283-a2f4-2a99df7db0b7",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "050510d2-7147-4a5d-b3c3-cedea21749cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e61b98dc-3dd0-4f3b-9e78-7c432b5ee03a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "699d077a-63ee-415f-b48a-67b78806211e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8890f2ce-bbf2-460b-b6c6-89e6ef4b7c52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "254d1158-d61e-484d-9b5e-7a28d4e5d89f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1eabe91-bdef-4f2e-8416-c57dc7690f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "803532fe-19a7-467c-b82d-7a97067531ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb75d622-df5b-42d6-90f9-a4cedefd4913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83a388e2-03c3-4236-ae2b-74d12730d5ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a026b32-6fae-482f-9ea9-9b7541d18f1e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "820d81bb-bb54-4d13-bce2-07880b9e10c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2127a5b-74b2-41b3-b9fd-1a6c9e7d5c37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d67a9a29-96b9-4e21-8e6f-2a0849243a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eeaf977d-4cc4-4959-9a1b-eee7759ecd85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed68d67-5208-4493-a592-1d3d5cd090b4",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d8f4fa-b792-4dbc-ac24-fcc87897affd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "959242ef-10ff-4e2f-a514-09cf35147a25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c775b7-ca86-4230-a178-6cac14ad4e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3addcdb-c7b8-4fd0-9842-c1c8667aab71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1fc9c0-1c01-43ee-960b-eb33d5e63955",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01146c39-2d27-45f1-b73b-2ec99c26f22b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b2d6775-cc49-4d22-8edd-fa1baef04684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "660a35f1-818f-45c6-88ff-7a79950927f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a7867f5-153d-4cd1-bbed-0565d262c4eb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9fdb8b32-accb-4f70-a756-83b9fffef19d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "beb2f7f8-ea98-43bf-9f38-aaffd3875ab9",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c96f5d-2e9f-4a83-b8f4-7b763e19928d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5c4801d5-5429-4bf8-979d-089ba65bcbeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc38efff-2670-4481-8a7f-195bb502b338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "98996a0c-a127-4b42-a085-ca434610e9e5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "95143015-6558-4a7e-af22-5ed44612d2da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e3170b0-d374-47b2-afea-c150cbe03e5c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "91617b8d-6661-4eac-be8c-5501d83808d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f8eda99a-4641-415f-8b1b-c50b8cfeabc0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "02d94271-9d4b-429f-a43f-c6e5b9e7bc94",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1141cf6c-63df-4e67-ae4c-0184c0c33d01"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aebe2a8c-8817-47a0-819c-867cb1df8013",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a87f00f2-eb7f-4148-b757-7aced3bc759e"
            }
          }
        ]
      },
      {
        "id": "f7d7c9a5-b075-4e73-b8aa-7ba4bb712775",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "cd98ef44-44e7-4dfb-97e9-d9b778fe54ec",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3910da92-5f7c-4d03-ae0d-5b50fd59e79f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4b635e87-f03d-471c-b9d6-23bba10583c5",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d7fda49-3be2-4704-821b-5f69ce7bd328",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feded590-752d-432d-a43c-ba4e6f1aa9a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e63085-8999-4e1b-92f8-550819a4f9c4",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99fd829c-fdff-4183-8608-33cc9cda2c69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "938f4c5a-f9fa-49a0-86b9-5133f6055304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e9ad44b-8c66-4255-8019-c7c8b69385e4",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce036469-5d1b-4b24-8e44-956f8c748b41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abd1b207-103d-45fc-b830-dc67f2668f32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d0b792b-5f1c-43c1-866e-3dc03957af96",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1a1a4a-c4a6-4d5e-acbb-7b23e7b278d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0115894-8ca1-42b9-b482-30e8eb2acde6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b59990a3-2102-427a-b89f-5bb0755c481e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb445c93-a33c-4b3b-86b2-593b03d67821",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f3de615-585a-472f-9b1c-b3d7efc1e9e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2765f3b-d9ea-4702-b724-ec4473f9e3e0",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1d37b9-0410-4891-80b8-ffc045e54bf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bf81c10-cf0c-406b-be3e-57c2072c41e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9aa6f71-39fd-417c-b23c-72b87695f92d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5510525-01f2-4375-b7de-96a6edc8f584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4c8f547-cc35-46f4-a57c-1fd8669e8ba2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b38a98-46c2-48e1-9a2d-8a2eb73f157f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc12e379-f511-45e3-85d6-a1d6b5f3f84c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22fa7063-de41-43a9-94ab-a14e3c23c999",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b79a3b-437a-4494-aa44-37daf86e4968",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d573697-bbd2-48dc-832a-db8aedac1c15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ba0deb-3446-46e2-ad21-1128178effb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d2cff69-d7aa-4fdd-a312-2325ba651003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1536bf24-f951-491d-8538-84d9941277c9",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7a7c17e-9b18-4cef-84df-f8fba0edcfae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43efc64f-f454-4989-9208-4110dacc75c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f75f0e-6c48-40a8-87eb-87a65f4eea47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d004f2b6-6228-4e37-a265-c32fa171a05c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de251157-c21d-4d6d-a5e3-bf35890c5876",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a3b826c-380a-422c-b5e5-b98171cbbbdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58d5b109-cd83-4423-80c1-a64008c64f58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f820fd-324a-4d73-9fa8-d7b271f7bf83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "136e69f6-7193-460a-bc8d-7b896ba683ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16cdc26d-9aba-4e9f-8ac8-dda4079882a0",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e36aa8-028a-4e2c-b5f1-15735afd3267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4080442a-1ba8-42ba-9113-958b33226b6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca5a430-2ffe-44aa-96e6-cddf1927611e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b2164a0-4956-4f6a-b9b2-37ae80bedb95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cef8ecb-3010-4874-895b-224ddcd6c8ba",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5caa855d-5fbe-4560-a2cd-835142027c89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed01d3af-8a8e-4939-962b-24bd0a144e3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd332f5c-b594-4c51-a816-4f360f77c069",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79d39d29-dff2-4d38-9e5d-6e568599f6d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "445a1d5c-230a-4981-baae-4628b7f884cd",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc163321-486b-40f2-93a8-895e3ed3ec86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "477c4c62-5fbf-4584-9f91-3e239cc0a271"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f48edef-9fc4-4ef0-aa9f-b3aa6fb88350",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ab0cfd1-5e76-4147-a9d8-88bbcaeafa9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ffa1b51-1fbf-4ad3-9e8a-e71d1cc6ef09",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3671756c-d33f-4091-9f2f-7650e27eb671",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f36901fc-27a9-4844-bd76-f8764dd19edd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "229444fe-9257-4ab7-ba01-4416aabf5d25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26537646-fb87-4710-9f99-587894694fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e742aa3-c359-466c-87be-0bd8dbd82540",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc776152-077b-47e6-a930-304a232131c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5607d540-66c5-4ec1-a666-1dc124e9788e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40666100-a3c5-4aec-8bf4-3a860c3f10ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c55b7590-c06f-4591-ae7f-bc9ba8ee7199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ff26a64-5869-4ab9-904d-bd25c2aab026",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8077b524-057f-4977-8adb-8db5379878a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb9b5a6a-bf93-4177-a7a9-e775416151ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70ccfaec-85e0-4178-a698-869a947b92e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deef22c1-ed1d-41dd-a54a-cbe0d3c71885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "905a4790-4817-4c79-a749-f9de14bff7a4",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac7e1b11-460d-4640-b089-e828f4592cd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "791c2c87-1440-4214-bc54-143210666aaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4a5c228-07a9-4a1d-8fe0-469be47d91b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d31c6326-8e4a-4104-bfac-363e4bc77c45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "586ff4ec-cc84-42cd-9c05-f38a2e6aeded",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d30a0647-b323-4201-b625-ab3e84a51b5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ac7b627-98ba-4fc8-99e6-7ae1656024ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff00bf3b-26c8-473e-a92b-749cda9642b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5009096f-433b-4640-8796-d43a82393417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60f19df0-eb0a-47ac-aef3-2cd3a12aefef",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c0f063-057d-4430-bde6-d04d928f04ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6710f149-7ef3-446e-8fb5-d28a726caa8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2279b10b-85b4-4d13-80c3-2fee27386258",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb21ca15-900b-48e9-a411-e0611f94640f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37933b91-cc8b-4469-a931-7407c5ea4217",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4befef1-941b-49c6-84c5-9a720ed46908",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dadfbcf-8d14-4b17-bc86-ebbe9d815dfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95fc8de9-b2dd-4da5-af43-e4826c2b2d14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b43d140c-4166-4e8b-bd4a-2870d9327598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75bcd9c9-9367-4853-925b-31992d55a37f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e3be844-f7ea-4068-a914-94829925f2d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60c0cc91-2759-41af-8910-4732e2341252"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07e87539-6248-4685-9896-e6bca88300e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6d8a9df-7a50-4b04-b830-0a87380a3cf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c27cf5b5-3e2f-4f5b-8d36-72cccf454c38",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb60b0b-5e5c-433b-bdcc-d260a0beb1fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1b3b9ca-9869-4567-9184-b3fb306be41c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15ed0f68-e3c4-4d71-8eed-bdc787038653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a71dee6e-950b-4ec7-80be-6812464a7d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab846203-255c-40d4-a42c-cd2b830f6a32",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1243f8d8-730d-4acd-8ef5-9eb5797431f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc21516e-92ba-4bde-9d3a-5d621006643c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee12c5f8-c2ac-4aff-9930-68031d148d38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cba616fa-ef4c-4134-bdbc-3a1eebf7ce02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "033729db-5bf9-4150-8ff2-3ea0b1eeccb3",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b26c10e-d62e-4e08-9430-4f5662ae3fcf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf95c746-1bc8-40b9-b46b-a35520b16de4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d36a325e-8377-42f4-a87b-e0eedd07c681",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70070dfc-45ec-47f8-827a-3fe462a04d3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f85c0065-be2c-4670-a2bd-adca3f8c412f",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bb8a509-981d-4056-ac06-e07a30f9a90a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4b291b2-9969-4ff0-8e6b-2c11f60cdc76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5985ac2-da8b-44a8-b359-31daddf77005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fa80ed9-f1be-4478-9c59-48bc5216cee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9b6dbd9-10d9-4ac0-a8bd-17ad701c773b",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e1a600-5bc2-4172-816e-342f6e0de1d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97978e9a-fa1d-4f77-9c49-29e0d309cc33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b7eec0-4b58-4b40-a9bc-4769c2869cf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3acecc0d-2033-4b0c-9b17-388e10d61496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2657d11-5ca5-47b4-bc2b-3b8dd3848074",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eace6d48-a3d0-4e97-ac11-5171b94c3640",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c5e9555-3cd2-4f36-b510-fa276849af41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "792b33ee-efe7-4374-8f3b-8fb34f6b6d50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82e697cf-67b0-48a8-b5fd-83ca36f3ab85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04112830-06e1-41e8-9f99-24b2c336cc48",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cc9ff83-c5a3-4cd5-b907-f5a04278076c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77066733-966b-4b1c-aefc-dcb22957679c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc646041-6a67-4efc-b2eb-6c4a1bb8241c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f83c643-ac65-4194-9eae-2df9ce5fbab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99eba65b-66bc-4062-ad75-93f1e161b42f",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d668ee-d238-450a-8170-9d27e3b0cdff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7937962f-dd41-4828-ad89-bd3a0c61d7ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c819f6e4-4af7-4f90-9d6f-fc19287f4fe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46ef1026-e641-47d1-b096-09e67f713561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f42c4de-04f2-4125-894a-a5a24cb5108d",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "658eedcd-4507-4b01-87ee-2a9910885f9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff3dd46f-713b-45db-a0da-0e7c06cbd53f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d9f622-0704-448b-9790-a10ca00c53ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e592ff0-65bf-465b-8f44-de1a943fed1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "881921de-31a4-4591-b34e-03b622699ac8",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2be1859b-8da7-4623-b68c-2986a6763614",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93ca358b-8b5e-48c3-b34b-278fa037723d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2effbe83-c39b-4ed4-8883-6b517fe45565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af0f5f55-fe95-4a53-a1e1-9832c9e99b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b557e2-0ecb-4459-88b9-851a0ba10fd5",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26db62c6-e568-45ae-8a7f-512da944d002",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cf8dfd2-e66b-4738-8e25-40a2c0154c4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e23804-ca1a-4766-ba6e-6b1a038b062d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc23706a-201c-4cc1-8cb1-72402b7088dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6941d438-e73e-4466-acdb-f7c42fcf0b21",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15cc046d-14e0-47e0-b311-f8e98c1fe7bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec2b0aa2-3614-4bfd-a383-667b0c8fb1a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "687a3ff9-7468-4130-83b9-39a44c58e88d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a22c43c0-057f-42eb-bbc2-b7948639f04c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a48ba5-d228-4005-b386-9eae8dc932f2",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb5a6369-4395-4724-8591-225a8ec1b954",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74e1cb4a-1609-4af5-865f-bc646c8d536c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a456db3e-f564-4995-984e-282f959e0c6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "692cced1-c628-425d-ac1a-2e2345a9df1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b6c2bb1-7d08-4b87-82c8-b6449af26819",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59431aae-5e5b-4aa1-9a9c-ed73f457a402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4bb53aa-704a-4da9-8b6c-94b816109f4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca07a167-78f8-4863-80bd-1ebb5ab89665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23b56546-d0e1-4d7f-b740-8229633a2e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e59396-c506-4109-b11f-d85efefa2088",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d49f65-f2b3-4ca0-968b-aa2512569132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02d7ccf3-db73-49f6-b8f7-0517729ec0cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac318a61-4edd-4c90-bca6-9952007cf4de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a9b8aa8-85a8-4150-aa76-19f6262cce6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d57d04f-c37d-4e23-beb6-18b627bcc1cc",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be6203d1-9e1e-4eda-9f0a-e29b209a9384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57c5243f-a735-4a58-801f-f1f59b68868c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08dc33ae-634c-45d4-af91-af257135f7c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a506851-5327-4ec2-a869-43bef9c23e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eded556e-92d0-4ace-9554-a4790dc2a09d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db44271d-6a0f-41b1-8004-28b33bb464e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff42931c-b407-4642-8555-2f850e639621"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d5fe09-80b6-4b98-8632-03fc5a663e44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c16b8a50-0ea8-4568-8136-4629cba0da85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be3317e9-315c-4504-bfb8-03d87f36ff6e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e30bf8c-e91c-4c68-9ab5-693df54165a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41cdd17e-b1b8-4263-85bb-815ca45f7835"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69697be9-e929-4d97-8c69-a0f9c9d967a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edb40865-24c8-430e-92c5-fa4d4e5c8668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "203f1d41-914e-44ca-80eb-4d4d4e386254",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ed25d93-d3bb-491e-b4d5-6399dd51aa6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "247280d2-abf0-4650-ab52-9273beff3030"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9fb0a1a-bf3e-4209-8f8e-4fb4195f9d6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e865c71-3fc8-4aa7-b36b-c23cd3b9d0eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b576e007-9a74-43ac-b448-d06f36a4f4af",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a181774f-2975-4e32-a158-ea54f6f3c1d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16488b68-daa8-4948-a590-e63ecedd9c06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77237b6e-5220-4892-8888-2947cd36e1e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddfb3d30-96a6-4364-aab4-3e136c0d98e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea70bae-ddfc-48ca-9cf3-14e0fa7ec45f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "652e9ca1-7d07-420b-a5a7-e1d26873c2a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9a997a3-6bed-461f-be9c-0387126949d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a4ce88c-7b04-49ba-83eb-b1af27a7b048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64ee2999-f941-4579-8505-04171b66c698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31be5891-9341-479b-8594-4ee9ea2a5a92",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38d1f88e-cfb5-48a8-a939-cac280098419",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8c733a2-17b1-48a2-bfad-082af8eb0aa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5656e6b1-2d5a-428f-82ba-7bd49f06a838",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0ad5f36-d88e-4e01-89be-8df1ab41cbb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe173b2-13e2-464c-b79f-63e5a05013b1",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be720aa-54fa-4d88-8e3a-6dadb907e46a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f0b33e9-2c03-44ba-bc11-af90678b5646"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa273867-9324-4022-a2a1-bd06f82403d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8de6fc7-87c9-4dd1-a1ec-a2d9884d5b5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35943400-9985-4b73-9897-141b8e8bbcd2",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb919595-9855-4409-b88a-19a13f6f87ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e27d05a-0418-4473-8f13-b62b8a59c9cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d84715be-b082-4a14-b3ed-4d373accb831",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf04f712-667a-424f-8245-22d3e3efe31d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "034ab9b5-383c-43a2-ba3e-61ad17ca005f",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "944bbb5a-f92e-4350-823f-129a2ef3add9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a0b7266-cbc0-4540-80f4-7830b0c7053e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b943e01-8de6-4f6f-915a-a5ce2c55a178",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b81b90a8-5771-42a7-9683-b81749eb2d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f03d4dd5-3f09-482d-9f30-f9097844cb83",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b5c2a2a-0f61-4a2b-a82a-8fc13ebf0d63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cb09ec6-4d34-410b-906f-900511650d67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eecf9ec-3430-4e41-b065-e387c15f3b67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d875757c-5596-45bc-8bed-f2257ec05b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02e78376-9581-45e5-ab7d-6b9066079227",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "992f6fa2-5e47-480a-98e3-22b17d6878da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "919d7cc4-fc3e-4613-8e06-7d3f3db766e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c69ec24a-5c2c-4f43-9221-97ddf4edff3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e491cfb0-a63d-4243-9695-5677098e8cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48304487-a5fa-491a-b362-f5d6ce4bd3dc",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf882fa-ee44-4a0b-8797-98ca1ba7a3c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc33630d-572c-4e1f-b525-d60b0a840ee1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42fc5dfb-c474-42f6-a7e6-d18c5275947e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6776fbdd-22fc-43ac-a202-79ddc84459f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6fc6edc-0d83-4f6b-85bc-245bf9ebc2c3",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab056a5-fee5-4b1e-8dfa-11504a701dc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5241ee3-3298-4397-9012-b99465b9f227"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af63257-3044-4330-9828-0409d1feb24b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90e13705-9d75-47bd-8a7e-66df6291b64a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64c88419-eab6-4382-98da-f5089f1aeeea",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42047d2c-6042-457f-9a89-28550e2738b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7db6dbc-73db-483f-93c5-00e65a874960"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1be5d34-6c2f-4093-adc2-e5bcb68691f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb663132-5d78-4417-8be3-a416473b3846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ce9d08-caa8-457c-adc2-49fc137f839f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b9a6fe-34fa-472f-bb20-28638fc3277f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d6b54a3-dd7e-4d7d-a961-b3c9d803139e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6716c82-b441-4df3-8335-b8be39e64e2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7049256e-f77c-40ba-b51f-3c64d7c9adf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a27e983a-c628-4dc2-b015-1e5ab0f0562d",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce19b4ca-9507-4532-a0bc-0fb2c5ffcee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "663ed8c6-0bc7-4dab-9106-77380663d7ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c73fa35c-cacd-44f9-87c8-dff92c321e24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a0f3027-5c84-4a17-8964-8279f77f376c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29257622-a2b8-42d9-8808-2e72072e024a",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91b5afed-8fa3-4813-be9a-d964aa4b4411",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f881f33-274a-4c05-b0ce-d75f396448d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c523724-e4da-4419-ac6b-1869584d1f4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2943127c-bd22-464d-a7bd-c32001c76d71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f64961a1-7969-4a92-a686-8125478d7390",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc2ae74-982b-491f-a9c1-008b9710fa71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cce83bef-c960-4a19-b4db-721e1e8547c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab11526b-d6ec-4432-bbda-e872554100b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1b04b16-f261-4de0-b3d2-7e0817984dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed84a3b8-5c59-4080-a952-92860c70f57d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "575a3074-6863-4080-b453-6dcfc633f529",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b733e27-9632-467a-94f3-e9acfeb69bac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eac29d0-2be4-4065-8789-27ef0a623c41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa565303-1e35-4246-8232-ef0670582fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71714ade-c898-4d89-928f-765a4e9bf84d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ae404f-e857-4b0d-8714-a7d0624c823f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76bb4d08-d3d1-47f0-96f4-442fde5d0540"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0acd10b4-5769-4eff-b91f-0a58b39ab356",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a7eb18e-2908-4b4b-b40a-07efdeaa24c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0062f4ed-c62c-4e76-853e-1b711ba5cec5",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79199ea3-4e5a-4461-ad4e-2501b8425063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db6aa7f5-e2e3-4404-b75b-65f7a914151d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3a48c00-06b6-4ac5-bbc7-dbaff1005383",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a84116be-19d8-4acb-a0a2-b3a04bedfccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf4f933-fa56-4dad-8ecb-ee6e62fa04ff",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c53606a-d743-4ba3-a635-4350af41d1bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87252026-c05b-4a55-bc32-c4852a5e29a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b735ae91-cb0f-4767-b67f-9bd0777804a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2682b34-d942-4594-a287-5447b62f9a31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6930820d-5748-44b9-8c5d-fbccafb909d1",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c2eaad-2516-4b02-8928-481fbe6dc207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "473ddb48-4fb8-42a3-acee-b5823cdc5aeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb85996c-667c-4f23-b6e0-3d0e7d08c329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8590822-dbb2-4f72-9d28-cadf0d317d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab8108bb-0f08-4978-95af-337525487af9",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bdf46f2-c09f-4cb3-9168-da6d45cbd7e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30287340-71c0-4cdb-ba6e-f46f319cc141"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbf7d9e4-3ce1-45e4-8cd4-ba303e5a9a05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8b08935-f657-43a4-bbe4-eb9b2843559d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8369a0a-1482-4a0a-9771-0b694089b5e9",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc0c243e-2fc8-4d13-9b51-6e80d5c9c4d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70df3a10-7911-424c-8eae-291167e11fb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7574c5c-f1a0-4141-95d7-57114670e7cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d5875d6-af54-432e-a1bd-1e86f81a7801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e358cf38-2bdd-45f8-b001-a9db8a7eadae",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "160f9aa5-0e4b-446e-b310-a724e41f6eee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd0147c6-1ef2-41e3-a27c-b12bb056f63c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c697a4d3-a0e1-48a7-9b5b-079d13eb30f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cee5c732-d351-41ec-af3d-0469c314fb2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06de4e8f-fab2-4907-8745-592256c536e1",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "277cdf7d-dd69-4e3d-bf2b-7412dc435a14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09ce030e-e7bb-4b90-8fb6-3000501e8274"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c722a2c-1d2a-4a3f-acf6-f8fd0195066d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7dc3982-a700-4d62-8945-c535009b8c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f78a28-0d19-43e5-b562-ebf0aa69091f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aa1e37d-659d-4db7-aeac-a2f96925bfdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b766510-3a1e-4015-8437-eb799dcd0e6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2360e63d-9e02-47af-b245-3586a21be2cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "125c099c-cf55-4ea6-8042-1b672507c002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3809a428-c9dc-4c82-bf66-9fcad0b07c73",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf315070-75b3-4e8a-a782-7ab5acbb46c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b66d241-479d-4ae8-af95-df59934f4831"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b71d17d3-3cf3-49f4-982b-a4eaa1a108e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85f6b364-8084-4db6-8df1-ebf87b875d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc84fd0c-6d3e-4d73-b666-b7ad1e55988e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f2cc3c-c5d0-4f19-934a-342e2c6d5cb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4da459d6-609e-490a-bf3d-e6c066a2e938"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5886a407-d697-4779-9b51-6dc1f50697bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60f8c6b3-76c7-4ec9-936c-759c1b37cbc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d1d17f0-862c-4a2f-9422-db177760e083",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dd2f52d-20d9-49ac-b365-69484e02f974",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13963f24-f7e1-4868-b513-24d64a07a723"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f333a3-a49d-4529-b259-5c1a0e53f1ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a550c3fe-9960-44e7-9360-26375be5fa9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f9a64a-bb9c-4baf-b12c-e084626ba39a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ab9d4d0-2c8f-41a6-bc5e-b50e83b9bda0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea77db99-83a1-4cfc-8cb2-549094a97485"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e21b033-29f5-4b49-bbf1-0cb462911467",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d008e8b1-6a94-4498-9916-47eff102cc32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd950d4e-712d-48ec-a084-152c319a3603",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f13c83-a5e1-48e5-b2f4-ad448ceb3f25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d9ca433-c7ef-49b9-ae4c-cccfac55b3f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b83df517-7550-4e5f-af91-e419c262bf91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fef61076-0faf-4aa1-8218-2d04a602f82a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a281926a-f51e-46e5-8a0c-cdf2737e5112",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e983979-cf63-4455-b634-47e5d0fd5d49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a4c6b1b-aa21-47a0-a6b9-00d6cabab7e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b783ab8-af39-4a07-ba41-3655c4b79c1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3908200-8c2e-460a-9a49-b542bc4479d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d509fdf-8589-44e5-88bb-05306124c2a4",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb3b88c-66b6-4821-ab34-822cd0bff8e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aeb75730-5ec1-46b1-9395-f08d3cf8b95d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1dca8a2-3dea-404e-a3ad-c1770fa3357c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f920f76-8adf-480d-9756-3d2b18f55085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4fae883-ca5e-4e4f-b56a-d8c89d073362",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc07ca0d-432d-441f-951c-215856464f38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eadcccbc-5b85-4519-b38b-64aac8be5825"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff547a1-8dcf-4f13-b4bd-2e2d3b2945f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd3c42c1-b2a7-4815-bade-ebdaf97b7aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73017708-be3f-4959-84aa-67f707d8e5c2",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0683e2bc-f294-426a-a261-352c82ba631a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7aa3dc5f-34ae-452f-8472-117cd19b5c4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d927823b-63cc-4e6d-8d7f-e5fe5199957a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2249cd66-68a8-41a6-882e-ef51e78b782d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c0973b-0665-43c0-873a-1db809e0d4f5",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31d64856-d1ab-4b87-bf2f-774629210146",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ed697fd-ae01-404e-a03e-d6062f230aaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35423a91-42ce-4b22-9d32-cdcbd560e3b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f3de5ec-a32b-41ee-b381-8169c7e38e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2519b1d9-dcf3-4d04-8ff8-f622263a9f2a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a961cb0-4c25-439e-bed4-8003f50336ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1e444d3-e2ea-48eb-930b-a685bf9642b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7458372-80d8-400b-8cb4-31410851f077",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55bfe28c-b334-4810-a368-20934d8640fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10787a96-bdaf-4292-9829-1abbf48508e4",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21f5a1ad-4803-4214-90bb-77b9bdf83c62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09c8c040-1bb4-48df-a852-0f9c0b344e5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ab9d25-ab74-4f90-946c-1b419eac4fd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dee9032-3a03-4538-a19d-e0cb4d70be30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fd285fa-b3c4-4294-8422-771f7d9efabc",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d579832-e027-4606-83ab-a71364821abd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b20fe570-003d-4833-a758-ac22c290375b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40281d68-d4f4-4819-a648-34ea6a22ab31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4a7ba97-2268-4c19-a912-16e92236fe9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86b456e4-b408-4d28-8bbd-a860472eba30",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "178a9f34-405e-42e1-9bbb-216a76255322",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82f9872b-f4f3-40b1-83fa-404df78cef59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0894f92a-f693-4771-b366-7bae9969d9fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56577573-6303-4766-b51b-b6893abf793e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37e9ec5c-6091-490b-8017-5060ecc82ef8",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "035ff34a-8760-4c24-aa42-1730b9773223",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0be02a6a-e0b8-478e-8b99-33c6e0af4897"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d579f8f-e565-48ab-98ed-b55178c0b533",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "854aff59-3910-41ee-bbb5-0441275f2d6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16ae8b3-c45d-4bb4-8c30-340b28543f98",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f00aedba-0857-4456-8f3d-f9919a6f314c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1963957b-058c-4e18-b21b-ed4a9277be5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc1d00df-5897-44f4-8ae4-44875f5cf9f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac10ca62-a495-41bf-8c45-45c5ec1e16ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a10207d8-f689-4b20-a052-87fdffca072c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968f0d50-b519-44f4-a393-3a1ab1cfd9fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c805fa80-bbfe-4f59-ae91-0c4fe2893952"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f342f2-f617-4063-905d-0a9ebaab5a6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75c9e9ad-9da3-4c31-ae81-9ca9c7dcce73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6960da4a-7225-41b7-9a7f-f5f05ea68387",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a8c1fe-eb36-4745-9b32-f82be93062e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc9574d0-781f-4f70-a101-2ab6ae9a26e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60903c30-932e-43a7-bac4-24445f8dd77d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "181087f0-f87d-49f5-bd70-51b82dbe6948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4682664a-e856-4a4c-a294-316b488bee45",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "128d7a1c-0bf8-4d73-bfd7-74f73440da0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f21b66b-950b-4c0a-b8ef-8f89482a0336"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6913254a-7901-4a71-a70c-476d65b86254",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19b5c2d9-88a2-4d60-a7bd-c30f7241b079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ab68906-f33b-45dd-aaac-58dc721f60c4",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0765954-38d1-4dd4-9270-b2e32a4cf16c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b34e0c9f-186a-4b5d-b0a5-ead0ebd50f9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5678e42c-00d5-4125-bb57-fc16162dc362",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c71665f0-0742-46d2-9d2c-07a9343325f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cdcd58a-dd95-431d-bfaf-4680421c73c8",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "259a560a-6105-407b-9057-bac548f3845e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88798c8e-1c5a-4ac0-8141-a9bbf36e9df2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0976791e-a5fc-4332-aaf7-9f1de6f205a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11e2143b-d771-41f3-884f-7dccdd33540d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f46dd915-c46d-4f13-a077-ef27c8a9c5ed",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9702527a-8936-470c-ae3e-c6dac6b453d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a7d647d-e80b-4a52-920d-24eaea979407"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "900304a9-dc7c-4929-a825-0ca4d726f542",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "480df87a-27fa-48a1-9d8c-764bfca6c733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "971858d7-1499-4f24-a03e-277a483eddf9",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9383eaa-0d50-4135-8bc6-3bb4c65d5fd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62f50e9f-3260-43fd-a798-7fde7548d34b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "188430c8-b9ad-4c44-a71f-03d657ae1a38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5037b9f-7d6f-4fa5-ac66-a7ab61e5798f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73afad4e-6160-4f63-9a14-dbdc3056db52",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c759523-397b-40ce-b79d-3001136afcdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d470bf9-2a5f-4300-a5c1-1dc71eab85d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a94488-9f38-4f1f-b8ef-4220bb800231",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04e13179-d19f-4121-9841-6e9afe5bf1e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d2919d-3258-40c2-a126-86804709c730",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd88ef97-b2b9-46d2-90ff-57f935720662",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac8a966d-5597-4669-a5f8-3bc7377d1269"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e582b8e6-8ea3-4f84-b332-58e3a03e2f62",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30ea3be6-36f4-48c5-bb3a-281111a86fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6d93f0-2e66-49b3-94d9-f50971154a0d",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81832061-473d-4a7a-9a6f-47b3e46f5a16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5157cae-b218-4def-8ffe-d755ece164b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e772f0ae-6393-43a6-be84-3fc127d2c3e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef99eb12-8091-48d0-8f10-de8e810da5ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b28ad51-6ee6-41c2-896a-f082be231127",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4322f8a0-3633-49d9-a19e-fab89eca1894",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab3e7563-c6f9-4b87-a460-de9f0d509c42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff9e716-e28e-405f-87c7-a6da3e3230ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e724f06b-10f4-4028-84e1-abcce9c58b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ffb55c5-9668-43d2-859f-14709b349028",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb02aaa8-8304-4216-bf70-78daf470b0f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5e622f5-d5a5-46ff-b783-fc116f409a14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1972187b-4deb-498b-ae56-ff154536bb00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed446cfc-0780-4cc0-83ae-20f79dec79c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b61cfc-8e81-4bb9-81ca-3f36d98fab0f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a619d9c-369f-451f-b4da-80b86ab84b00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf07572d-60ac-454e-a49d-d66e9b00ff40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fe0e374-dae7-49a0-8101-0d3e03b13687",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b187f73-7e0f-4a36-a148-120aa2c64981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fd7c7f2-3a6c-4a88-9a0b-489f74fac609",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b2819e0-a9c7-4d27-92c4-1d58556aafe8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05fa41b1-bbb0-4723-b425-0cfe09728414"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c15d670e-2b86-4ba5-929c-1ef39de5bfe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eb02c06-12b9-4e95-9931-94c3f05fbd85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcde5c18-e08d-4801-a881-4ce1596c5365",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5378a4c-5331-4be1-a9a3-5dbe76d6e5a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f52b5f8f-27dc-4d54-9cfa-0361af5cbd9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b0a4231-5ebd-4ea9-a3ba-11fa3a47bf30",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b1333d7-2113-4707-bbf6-c29141ce53ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "680faecd-9799-4b55-87ea-9c16a7ee82c4",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a00dbd-d0cf-4e2d-8da4-faa5b04d050c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb7c9a85-5f76-4d08-b72b-b2f859f48c86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfcfc90f-1f49-4196-aa67-47588cf514a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3c808f5-2b1e-4c37-a241-6b1cad5c17d4"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c0a9305b-6bc8-4c22-9959-eb1d2598866f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5e427b52-8515-4cbb-aea8-aade8fc7da66"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e23a5d2-22aa-4362-851d-3dec4596ba63",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "05b20222-68c0-45e5-ade2-33f8015e1a1f"
                    }
                  }
                ]
              },
              {
                "id": "699fe919-2817-4b67-a60d-9fdc5d1bfcea",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2176d010-6eec-4048-95cc-b4d3955390d6",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d57026-611c-45c2-82db-b7fdb1d70aa2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "95ed1878-51d5-458c-8e64-a4dc946f3dfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33e0807b-fbb1-432e-be81-3dd88eaf554a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eeffa89d-6bbd-4e8d-b341-4ed5157561f0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58128f59-4093-485c-bdba-e2426ca27b33",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9844926-49ac-42c8-8b3a-fe7406a3bbee"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4bd6e2c0-102c-4648-b2c6-2fd454cfb1bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04fdaede-3bbe-4f21-bc08-110ad02c16de"
                    }
                  }
                ]
              },
              {
                "id": "ebeefbec-fdf7-4870-90a8-d4232467f5ba",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "439da20b-b448-47b0-8411-6d1984be0130",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "761defba-f38d-49d9-9abe-2b0559318aec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "f3ae5a57-c8a0-48de-9cab-9f8f9a0c976f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54072a58-97e4-44df-b477-4f78bcac5bfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83f82ed1-0a8e-4144-8a2d-7a0fcaf3265b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "295fe9ef-00e5-41af-b858-a2d695f89958",
            "name": "Positive Testing",
            "item": [
              {
                "id": "de691d45-95ef-4e04-b13d-df4b02b8ea34",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e662f03-629f-4bfd-8e01-785dba5dbce0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "49ea4794-64eb-4777-8b10-0bd3ebc805e6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae5de844-45ce-439b-a380-b17068c26b04",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69881fc6-d380-411b-bbf1-5a28796163a5"
                    }
                  }
                ]
              },
              {
                "id": "f141b840-a1e2-422e-a20f-fb9c58e7b45f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "687b6b6a-11fa-44d4-811e-1d3033beae12",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0906ff81-a9ed-4832-9887-f22f33b6fca0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3fbaf3dd-b37c-4f29-86bb-0022020535c8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7cd7fbf0-2d26-4ba3-99c4-697828e23765"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "af8a2a9a-34e9-45f3-8d82-4e45e15c1a9f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "5c04cade-9a28-463b-b038-b92e29aab095"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "63444168-afeb-4f2a-b8c1-00fe365c0be7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8da5a61c-6cc5-430e-8fd7-8a7f43e88a32"
            }
          }
        ]
      },
      {
        "id": "aa4fda92-369a-4036-8dce-4ae9aa0c48fc",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "38105695-cae3-4e3e-8e03-8bdd2b2a92bd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "50fcc05e-490b-49e7-9fa4-8c38b54dbd93",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "49ad4039-6170-4c95-ac05-4068dc062d71",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59b3213f-03b6-44b0-9b36-9ca6bfe7fa70",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "883189b9-fe88-4418-a3bf-d37fd12c6d57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0964d5-c6d1-4fca-aa5a-d68e1ff88a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02597456-ba80-4817-b583-96afe981eb3d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5be77fca-8629-4b3c-85dd-4c08ec13a99a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f44a8a8-d7fc-406b-b0bd-adfc9c535134"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "85ef79c8-d2ed-4ae7-9c9c-2f956df9b81c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "207b17b9-82fa-4e48-b18f-ef88c19e4d1f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ad594ec6-d2b9-434f-8396-1fe77740065e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "693bc627-6f8b-4929-b616-30dc402c60e6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3f4fb727-ba87-49c7-9e85-23f46b9595cd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b076aa68-6cb1-482d-861e-05aef13c1865"
            }
          }
        ]
      },
      {
        "id": "fd84ffd9-ac27-46e0-b4c6-b9174f463ba3",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "cdea847d-b970-4401-b58d-7f43ce4e8110",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f9d39893-f405-4f9c-9849-e903b0fcb999",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bedd17dd-2650-4c2c-98ba-0b70c254a7c3",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83099bc7-c66a-4382-a6e9-e49be811c818",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "11a12c3e-dd6f-4c82-b51c-195804132e72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "736a197b-5a59-47a0-81e7-2d43c2878c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dce473ca-82c3-4a20-94e6-13950e3d61cb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "76e206e3-2103-48e2-91a7-b9a108504612",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c25b072-7695-437a-81f7-18cb4c9b4e7b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b85c5887-5149-4a48-b3f7-20f52b140f2b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "80081bfe-3b96-49c2-adfe-326d40da2df8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3f91efad-5525-4283-802b-403d9baea6e3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "02e705d2-5576-42b5-873d-1a8c275e61ee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9aafb3e1-beb4-44f7-8084-981244bc7443",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "20380b03-e19d-484e-a686-3b540bf0da2a"
            }
          }
        ]
      },
      {
        "id": "ac989687-92a3-41d3-acad-f383b58053ff",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "2176f4ee-0c0b-4263-9f22-694f8b3d7503",
            "name": "Negative Testing",
            "item": [
              {
                "id": "08f04628-380d-4815-8528-64713ccd799e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1a98a013-ed4e-450b-848b-33ff4d1c2210",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "432be516-8091-4355-98d6-6598b80295c2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "715db109-af2e-48a7-8441-42b3b9cc1a6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e352c5d-a1b0-40c9-bd6c-4babc6572d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c30f1395-0be5-4245-8926-c5943648d7ee"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7773c46-8146-45a1-ab08-9e246336ccac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "33c256e3-daec-4fe9-8d35-6d23155e9ede"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "27ab4aab-be17-40c0-8587-0b709354a97c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5760b6c5-6f6b-4f51-926d-b680be0ac318"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "00345a34-8749-4ad9-9682-6ac19a910ef7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f52594ae-2c28-4f7a-bb4d-22baa06e0d8d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b7c0de87-bee4-4662-8b54-704790021d48",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "81e601a7-1d34-4bfe-adb5-1b682b9a9596"
            }
          }
        ]
      },
      {
        "id": "8f8c4654-78bc-4b3c-b5ba-905aefa6084f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4e76943a-b4ac-4ef7-bf55-1c9e60e631ac",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a1fd635e-11b3-46d5-ae91-f1cb5d7846f1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "f364170b-ae7d-4694-a5b5-9e670046659d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4748245e-79f5-444b-8d8e-41afe2445de5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4f977e98-c21d-47f0-93c4-28bf79aa0292",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 30
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 270.9634146341463,
      "responseMin": 11,
      "responseMax": 8780,
      "responseSd": 863.0409571877001,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1685839717448,
      "completed": 1685839795276
    },
    "executions": [
      {
        "id": "931fbbff-5f83-4440-9af8-7c7891fb4019",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "bd0fca2f-715e-4671-a8f9-fc6e3fb3fd38",
          "httpRequestId": "33724ab9-0b02-4d3b-961a-4ffaf018ef06"
        },
        "item": {
          "id": "931fbbff-5f83-4440-9af8-7c7891fb4019",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "c17f226f-7ac2-41c6-9ce2-1ec7cbabf4b3",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "a77d8be9-9fd1-45aa-bd9d-b93bfbf36389",
        "cursor": {
          "ref": "8bc15120-2420-43ba-b0d4-22485851cde1",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "755f5c84-e5a0-47b0-94ec-94c566a8f1e1"
        },
        "item": {
          "id": "a77d8be9-9fd1-45aa-bd9d-b93bfbf36389",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "02cbe0a5-d0a2-41fc-b872-755b340c3d3a",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "3f49b140-f57e-479c-9ec4-6d71f6ee2fd6",
        "cursor": {
          "ref": "85475cce-d073-4c18-9a3f-e473a8b207bd",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d3c212c2-10d9-4dca-bdce-79c30cf72e26"
        },
        "item": {
          "id": "3f49b140-f57e-479c-9ec4-6d71f6ee2fd6",
          "name": "did_json"
        },
        "response": {
          "id": "1a399b7b-1aa0-46d4-a475-92755dd08d00",
          "status": "OK",
          "code": 200,
          "responseTime": 466,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0614f103-c913-4f10-82fb-c3b0eb1c68bb",
        "cursor": {
          "ref": "3f233c2f-3b00-4dbd-986a-1429a55adfd7",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "323544a0-229b-444a-81a3-763006aca3bc"
        },
        "item": {
          "id": "0614f103-c913-4f10-82fb-c3b0eb1c68bb",
          "name": "did:invalid"
        },
        "response": {
          "id": "7c7639f5-1525-4ef1-afc3-4d8eb51ca870",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1264,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "0614f103-c913-4f10-82fb-c3b0eb1c68bb",
        "cursor": {
          "ref": "3f233c2f-3b00-4dbd-986a-1429a55adfd7",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "323544a0-229b-444a-81a3-763006aca3bc"
        },
        "item": {
          "id": "0614f103-c913-4f10-82fb-c3b0eb1c68bb",
          "name": "did:invalid"
        },
        "response": {
          "id": "7c7639f5-1525-4ef1-afc3-4d8eb51ca870",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1264,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "b1728e74-4b9a-49f4-bcee-f30954320585",
        "cursor": {
          "ref": "b07bab83-a6bf-4f61-923c-3606ba81c482",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b96d5ecf-b287-4ce3-a16e-08890274f9d1"
        },
        "item": {
          "id": "b1728e74-4b9a-49f4-bcee-f30954320585",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "7e48717d-fd37-471f-92c3-5ba797114921",
          "status": "Not Found",
          "code": 404,
          "responseTime": 35,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b7b35d4-6c64-406c-8978-c5299b741579",
        "cursor": {
          "ref": "99ceceea-f7e6-47a3-9856-2a748b2b5e40",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "fea92007-309c-47ff-ba29-f853c3c9cf87"
        },
        "item": {
          "id": "1b7b35d4-6c64-406c-8978-c5299b741579",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "87e9eb4d-a81e-4402-a72b-2cee59093a53",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f31ba69f-3431-4bdb-bd5f-5cdeb6dddc5f",
        "cursor": {
          "ref": "6701c81c-6969-4638-b0ed-f2f450e0a310",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b293bb24-4ca6-4a29-a111-be45d712e1ec"
        },
        "item": {
          "id": "f31ba69f-3431-4bdb-bd5f-5cdeb6dddc5f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "71d1989c-9cac-4d48-8fd1-cbffea7999c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "f4a0681f-09f7-4d3c-a2be-486c48487a52",
        "cursor": {
          "ref": "d47b23be-4e1b-40dd-b597-e224ba595446",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5e82db7b-661a-41a5-83f7-6cd3c18d9af3"
        },
        "item": {
          "id": "f4a0681f-09f7-4d3c-a2be-486c48487a52",
          "name": "identifiers"
        },
        "response": {
          "id": "e02336a9-4658-43e1-bfb7-3cdcaa472320",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "501dbbe1-8ea3-4eb3-b021-fe9289b466cf",
        "cursor": {
          "ref": "af84fe7c-e3a5-4580-8a2a-ed5073db80b1",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "cac165ed-4a69-4a55-bb8f-097b0f33e9f4"
        },
        "item": {
          "id": "501dbbe1-8ea3-4eb3-b021-fe9289b466cf",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ae338d1b-8cdc-433a-870d-9629df3561a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07011268-8ce6-4863-b646-80ec2c9d4ab9",
        "cursor": {
          "ref": "c7b8f597-10a5-403b-bba4-3086e474f57b",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d3f0534a-7625-4fe6-acec-d625467e5bdd"
        },
        "item": {
          "id": "07011268-8ce6-4863-b646-80ec2c9d4ab9",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "3ba62cd4-5c87-413f-80a4-5a8321749fbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e76bea9-e9b0-4667-8236-bc4a8985cba9",
        "cursor": {
          "ref": "f0ea4dff-b483-4dd7-afce-5fd8b843c16a",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "379cdadd-1e5f-42d6-97cc-b6049d4dde15"
        },
        "item": {
          "id": "2e76bea9-e9b0-4667-8236-bc4a8985cba9",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0a55dc15-2c1e-4f2e-9d7b-8758ca8d5905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "552eaec8-8755-444f-8b09-fe472f71ae2d",
        "cursor": {
          "ref": "30bbf3f4-06f0-4f97-868e-c1164929b9bb",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "11ca0b80-ef00-43cf-b150-c1584b8ae588"
        },
        "item": {
          "id": "552eaec8-8755-444f-8b09-fe472f71ae2d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "2dc12996-2b87-46fd-bb79-ec76085d3df6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2b7049f-dd17-4298-92b5-551c5b4a6bcb",
        "cursor": {
          "ref": "3b88f0a1-3f97-4378-a39d-b71e9f41b766",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4fa57030-c804-4753-a702-3b063b90fae3"
        },
        "item": {
          "id": "e2b7049f-dd17-4298-92b5-551c5b4a6bcb",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "c18d3752-e38c-4a0d-a4a1-8f4160391d97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9a39d7b-4b87-4f9d-a926-91c5f7c2d91f",
        "cursor": {
          "ref": "0a539f89-f884-4e08-9570-5320c8ccdefd",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a1714e4e-7c88-4568-b389-dbecad2402ec"
        },
        "item": {
          "id": "e9a39d7b-4b87-4f9d-a926-91c5f7c2d91f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "73f11600-19f1-47b6-927d-6139a7c86bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d14dd61-6ebc-4d28-88dd-f63debb7f611",
        "cursor": {
          "ref": "dee6b582-e906-49b6-944c-f02229450a7b",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ff5ecc90-6090-419f-aa6b-bf39dc8c78df"
        },
        "item": {
          "id": "3d14dd61-6ebc-4d28-88dd-f63debb7f611",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e4078f9c-6870-41e7-b3fe-c6d233b1f0f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "300aaf7f-3b37-4dfc-9ac3-fd807be9cedb",
        "cursor": {
          "ref": "c26dca2a-d241-4096-a86a-b144e89e4e16",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "f386ae27-080c-405e-9f5d-5aab519b77e7"
        },
        "item": {
          "id": "300aaf7f-3b37-4dfc-9ac3-fd807be9cedb",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "6178b106-b3e8-4f1d-bb21-087339609d9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9ff66c1-4b70-4602-bcd9-3f4c5dfb1137",
        "cursor": {
          "ref": "ce9da19b-d015-4660-b8c4-9046699787ee",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "dc49d661-e300-49f0-9193-2c0b255e715e"
        },
        "item": {
          "id": "e9ff66c1-4b70-4602-bcd9-3f4c5dfb1137",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "4da7c821-1c3c-4573-8aa2-3403aef49068",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ee0ac3-982c-4d70-bddc-df02842a8c69",
        "cursor": {
          "ref": "70bfd361-4fd4-454e-b267-e4e7b7a3e64a",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "04c2bc57-1a86-42c7-a995-705a48e0a616"
        },
        "item": {
          "id": "67ee0ac3-982c-4d70-bddc-df02842a8c69",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "80016fa9-b5f1-4cd3-a252-8253685d8785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "770c5a71-5b8b-4198-a2e7-af3ffd1ed7c8",
        "cursor": {
          "ref": "9ea4d373-e6f3-4225-bd6b-4d4c153ca2a4",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b10d439b-6c62-499a-936b-051b837b3b0c"
        },
        "item": {
          "id": "770c5a71-5b8b-4198-a2e7-af3ffd1ed7c8",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "3c9dadf5-38ca-4912-ba1c-b8295825c1d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a3ef568-0623-44f0-a35f-af725370cd13",
        "cursor": {
          "ref": "bda7dcab-bea3-4442-b7b3-648270b81687",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "dca91a30-c30b-4d3f-9ffa-45fd2bf75197"
        },
        "item": {
          "id": "4a3ef568-0623-44f0-a35f-af725370cd13",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "861db0c8-20e1-4942-8361-ced35723f68e",
          "status": "Created",
          "code": 201,
          "responseTime": 1023,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "38434991-116b-4dd3-90bc-3f3b3a5921b5",
        "cursor": {
          "ref": "d0cc599c-d5bd-4d5b-b758-b6bb99965a33",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c24cc333-f72d-4baa-9b28-f8ed0589b392"
        },
        "item": {
          "id": "38434991-116b-4dd3-90bc-3f3b3a5921b5",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "af05a26d-f97e-4f95-8272-2e463d655b18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6317a3da-9a99-497a-94b4-56783ff5803b",
        "cursor": {
          "ref": "39b11978-2434-4cbb-9b6d-633c6e0a08be",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a82897f4-8326-45de-8d0c-d91ab65554e4"
        },
        "item": {
          "id": "6317a3da-9a99-497a-94b4-56783ff5803b",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "8a564c29-e77d-4262-9e25-d0a24707cbb4",
          "status": "Created",
          "code": 201,
          "responseTime": 8780,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "0aea24d0-796b-44d8-9e6b-b1b19006b4b2",
        "cursor": {
          "ref": "092027ed-ce76-40a0-a7a3-13ac44c7c999",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "3273b82b-beec-4959-a4f6-df27b4441d45"
        },
        "item": {
          "id": "0aea24d0-796b-44d8-9e6b-b1b19006b4b2",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "1c4e58f2-b06c-4827-85c8-0a7a4c7d45bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60d6d489-2801-4117-bdbb-bcc72d145d19",
        "cursor": {
          "ref": "87f28ee4-9a7d-46d6-af15-39ae9c7bf474",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c1f50403-89ac-415f-9f95-d991226f0957"
        },
        "item": {
          "id": "60d6d489-2801-4117-bdbb-bcc72d145d19",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "1cdccc93-e7e3-49ab-b912-0834bfefdbb9",
          "status": "Created",
          "code": 201,
          "responseTime": 4827,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "45068dc2-9ed9-4833-a188-f23eea564610",
        "cursor": {
          "ref": "b25e600b-9a12-47cd-912e-c2da01a61d35",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "44f5965c-77b1-43c1-9c19-299df277bac7"
        },
        "item": {
          "id": "45068dc2-9ed9-4833-a188-f23eea564610",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "9124fe75-6f2e-4ebd-b05c-3021e67a4835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf32ce0c-fd91-4daf-a173-2c494059470b",
        "cursor": {
          "ref": "65cfa781-3376-4224-a46b-7d53d9a7a93e",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "4df126b6-d2c6-4299-9bc5-44f6bdf215f0"
        },
        "item": {
          "id": "bf32ce0c-fd91-4daf-a173-2c494059470b",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e7cd28ba-65b8-4017-992c-d80f2f352f30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 919,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11a14dbe-a379-4d58-a596-a083644785dc",
        "cursor": {
          "ref": "cbbfb359-1f9b-47a4-9ed7-e0f10d531d5d",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7dd2aaf3-62f1-4690-abd9-341415f6a84f"
        },
        "item": {
          "id": "11a14dbe-a379-4d58-a596-a083644785dc",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ee8829cc-1370-46ed-88b4-734c3f4ce510",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e33bcc5d-56a7-40ce-9dd9-f44e5b35e7aa",
        "cursor": {
          "ref": "882e965f-1359-4799-b693-a4d48d49b1b2",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "26c1f662-6f63-4dee-84ec-4477be1000d9"
        },
        "item": {
          "id": "e33bcc5d-56a7-40ce-9dd9-f44e5b35e7aa",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "d511b153-e429-4dbc-89ec-d96ac29c1403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97cda6df-28e8-477e-801c-2872a5aa93c4",
        "cursor": {
          "ref": "acccecf7-433b-4d19-81c4-924632aa2056",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9012a82d-42b5-4871-8cc0-27e5dcb2f95b"
        },
        "item": {
          "id": "97cda6df-28e8-477e-801c-2872a5aa93c4",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e57cecff-030d-4366-b034-fc72851c168e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d21f4a74-203d-4aa6-8829-5be008f7e34a",
        "cursor": {
          "ref": "d717a65a-93ec-4626-accf-c4a81956c4fb",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "dfc74468-ec68-4af4-bc4b-dc6a1daa9aff"
        },
        "item": {
          "id": "d21f4a74-203d-4aa6-8829-5be008f7e34a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "727b5454-d8a7-4885-9b35-e295f6711ab9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8da6cb3-30c8-4e52-8a13-cdd928039f81",
        "cursor": {
          "ref": "30740efa-bf8e-44b0-a371-b26af004f020",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "866cea4f-8bbd-4c11-9730-669a5b0c1319"
        },
        "item": {
          "id": "f8da6cb3-30c8-4e52-8a13-cdd928039f81",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "357d7176-1ccc-4a66-8dc7-a204e38503fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6414bff-9607-444d-beff-d79bac9151e9",
        "cursor": {
          "ref": "8683cfd8-7239-46e5-9963-862f08dad90b",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d0f28151-522c-40d5-854b-eabe669128ab"
        },
        "item": {
          "id": "e6414bff-9607-444d-beff-d79bac9151e9",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "84f3efaa-8308-4423-9e75-deeb72671410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fd872e6-fdde-499f-a853-7f6416733029",
        "cursor": {
          "ref": "f54d497f-7e9c-4ab1-983d-8e38c992ce4a",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "689e24a9-eadd-4ce3-8ea1-19095097cc7a"
        },
        "item": {
          "id": "5fd872e6-fdde-499f-a853-7f6416733029",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "84cdf7e7-b28d-4bc1-a3c3-51828394827f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b663ffcc-a265-4b13-9a39-a02919a5d805",
        "cursor": {
          "ref": "f19e69ff-b6ed-49c6-83f5-2f982be58bee",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "33573c11-55ad-4ca0-9e49-6fac2195930f"
        },
        "item": {
          "id": "b663ffcc-a265-4b13-9a39-a02919a5d805",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "8cd2be16-df7f-4ea8-be8a-b9c0608fc9dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0e6e651-9b78-4a79-be08-adc6059c001b",
        "cursor": {
          "ref": "e91a3e8e-9e39-4d55-ab48-c6d93fcb4633",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "5e8c5210-f861-4e7b-bf3c-43629fc8dfcf"
        },
        "item": {
          "id": "f0e6e651-9b78-4a79-be08-adc6059c001b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ca6fbd66-cf68-473a-b098-14245cb67796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55f26349-11ca-4f15-82cb-53a6dea1c56d",
        "cursor": {
          "ref": "974d0d5f-3607-4cdc-9e19-27a3556cb202",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f07914f5-891b-407a-9be9-d3aa412fc338"
        },
        "item": {
          "id": "55f26349-11ca-4f15-82cb-53a6dea1c56d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "fe0d1242-0169-4306-9359-a0614b82f65c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59239ea3-075d-48ad-84ce-1b71f0c6e029",
        "cursor": {
          "ref": "1fd7f03f-c5bc-48ff-82be-5e86a8f5b2cb",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "43cd5ae2-371d-42f5-9d16-cc142aa1a206"
        },
        "item": {
          "id": "59239ea3-075d-48ad-84ce-1b71f0c6e029",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "957a062a-4d3d-4c16-a11f-cf6e1f2fdf3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb23c566-49bd-4d54-8775-ab0057c0ae17",
        "cursor": {
          "ref": "2fb1079e-9495-4c6b-8c98-42f060ec6381",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "cdf1bcf5-75df-42c9-93f9-152e9f3d6022"
        },
        "item": {
          "id": "bb23c566-49bd-4d54-8775-ab0057c0ae17",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "df72af90-abab-44c8-bab2-a5d6536c044c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a0a974b-d29d-4c3c-bc46-ed8ea56b497b",
        "cursor": {
          "ref": "d1ca98ab-3dcd-48fe-a909-707d33d8b05a",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b240259e-8875-4629-af98-182995616e53"
        },
        "item": {
          "id": "7a0a974b-d29d-4c3c-bc46-ed8ea56b497b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "2ecf0333-23a0-413f-ba99-d2909a322b8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fab5b991-bb61-4c4c-a442-41592d467a06",
        "cursor": {
          "ref": "7408961c-0f19-4d77-94f0-ac36e5360379",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c89605fd-2285-4477-98b9-ac416911055e"
        },
        "item": {
          "id": "fab5b991-bb61-4c4c-a442-41592d467a06",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f8be1ec5-d0ea-4088-ae2d-dbbeb6ffb8ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f3ec987-3d02-458a-9204-8084c606eb32",
        "cursor": {
          "ref": "a089805c-c440-41bc-9180-884d3b16e622",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "20013db2-2afc-44fe-98c2-c9663da24e8e"
        },
        "item": {
          "id": "0f3ec987-3d02-458a-9204-8084c606eb32",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "1ea81067-ac52-4a2d-b3d8-9e935765e920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b3da81-29b3-4a9c-883a-1e8809fd390e",
        "cursor": {
          "ref": "18a8537f-2f66-4132-ad92-39139fb5eb05",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a10e41c8-f408-4ea2-b2a8-d0b97d065251"
        },
        "item": {
          "id": "e8b3da81-29b3-4a9c-883a-1e8809fd390e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "80dca95e-6e18-48d1-b2e7-51dfaddff136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afec3ed9-10bc-4b26-a98e-d8b0fd26b8a4",
        "cursor": {
          "ref": "0263640e-71a6-49ff-a0e5-d63c2823a513",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "73315d64-2304-4b1b-b16e-31d43e1a8909"
        },
        "item": {
          "id": "afec3ed9-10bc-4b26-a98e-d8b0fd26b8a4",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "96a9ca4b-a093-49ad-b1bc-c668bdfb253d",
          "status": "Created",
          "code": 201,
          "responseTime": 2785,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "3adbb8c0-198b-414b-b208-129eb3e7084f",
        "cursor": {
          "ref": "ce35b655-35db-4956-8ded-db07469c4080",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1a0c543c-df2a-44a9-a78a-0d955a265b1b"
        },
        "item": {
          "id": "3adbb8c0-198b-414b-b208-129eb3e7084f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "fd51faef-5074-4f59-84c5-15ab2c262cbf",
          "status": "Created",
          "code": 201,
          "responseTime": 2843,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "6ffc54c4-a38b-401f-83d6-4bd6858e73d8",
        "cursor": {
          "ref": "b9d3d32f-8734-4d62-bd18-fd065aeb6e3d",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "5a1a43fb-34d1-4c95-99f1-4b0892cf35e6"
        },
        "item": {
          "id": "6ffc54c4-a38b-401f-83d6-4bd6858e73d8",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "bebfbf6e-a7d6-4558-ae87-b8b2059c9d9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f86093ed-a610-4215-943c-bd4b79e0ae1d",
        "cursor": {
          "ref": "a5581cf7-6e35-4536-86e0-e36d81488b5c",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8b8e5a01-9416-4a65-afc1-878e14b46cff"
        },
        "item": {
          "id": "f86093ed-a610-4215-943c-bd4b79e0ae1d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a5166f31-6b4a-4e06-bb07-7ce172b1129e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acd6ea8c-944d-448d-95b5-ae1ac7db2197",
        "cursor": {
          "ref": "2f6a6903-dc6a-412e-947b-14fb1014b796",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1ded88e2-a729-4bc5-a20a-0d5aeaa39799"
        },
        "item": {
          "id": "acd6ea8c-944d-448d-95b5-ae1ac7db2197",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "43da378b-d724-4944-854d-f5a26bcb6687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0fca184-c550-496e-9a59-50548666fe99",
        "cursor": {
          "ref": "c726d70c-f1e7-4b4e-ba70-f57f6d7f74ed",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "bf9873b6-9f0d-4425-b6d0-6de162c90989"
        },
        "item": {
          "id": "e0fca184-c550-496e-9a59-50548666fe99",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "60118b91-5631-4f98-ba34-58615f927989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8383eb5b-95fa-4b8f-9248-cbdd5f501543",
        "cursor": {
          "ref": "a41a5e0c-7894-4839-99fe-215c2e974997",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "06ffa9bc-5288-4e3a-9d47-a4e8375c44be"
        },
        "item": {
          "id": "8383eb5b-95fa-4b8f-9248-cbdd5f501543",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ce95b6cc-e6ed-46f7-8f34-da5e5c5b69f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4db2fa4-e685-4f98-a2d5-796f58785d64",
        "cursor": {
          "ref": "5c622df5-5b65-4691-885d-5ab3cce252a1",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "877767e2-90be-47f8-be43-e64507733870"
        },
        "item": {
          "id": "a4db2fa4-e685-4f98-a2d5-796f58785d64",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "856d52f8-e845-4878-90a0-1a3965582000",
          "status": "Created",
          "code": 201,
          "responseTime": 2480,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "8e8b6ad8-1654-4ff0-acbb-3ba899cf1ae6",
        "cursor": {
          "ref": "aca02d81-ef09-4d9a-ae9e-4584d9a94d8c",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5558d3fe-9327-4e21-9f05-41234a170311"
        },
        "item": {
          "id": "8e8b6ad8-1654-4ff0-acbb-3ba899cf1ae6",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4f9dcf59-f926-492a-83cf-28d7d2cdc86f",
          "status": "Created",
          "code": 201,
          "responseTime": 2054,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "8e7d4164-ba46-46ee-b78e-c8b55b140225",
        "cursor": {
          "ref": "623be889-766b-4c18-8f51-ddacdd6bd0e4",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "fad3da98-3a9a-4517-85db-201608ab2c34"
        },
        "item": {
          "id": "8e7d4164-ba46-46ee-b78e-c8b55b140225",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ab75c3da-6352-432d-aa80-3ff32f8da82f",
          "status": "Created",
          "code": 201,
          "responseTime": 2235,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "5c7168be-8c38-4622-897f-7d3f6c54f586",
        "cursor": {
          "ref": "7563a5c7-e2f9-4a69-b24f-c6b26ccdbbf8",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5c4c6285-baeb-4459-888a-9311865a1a7c"
        },
        "item": {
          "id": "5c7168be-8c38-4622-897f-7d3f6c54f586",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4669b2f4-d64b-470b-a5ff-a5c149289a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "055d2396-1f93-424f-9cea-e5255fc52ba6",
        "cursor": {
          "ref": "fba7adf3-7dea-466a-bbf6-f5ac92eeb022",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8450515c-e876-4a18-908e-9e9436855d4f"
        },
        "item": {
          "id": "055d2396-1f93-424f-9cea-e5255fc52ba6",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "82c76263-2d35-45a9-90c7-c448f75fd040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 236,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9c85ad3-9426-41d8-a0af-63548df1eb6a",
        "cursor": {
          "ref": "f3fb8e3b-bd2c-4e21-9233-e2f787c4f58a",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e0719c78-627b-4cba-b41a-0f16efbba854"
        },
        "item": {
          "id": "f9c85ad3-9426-41d8-a0af-63548df1eb6a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "d9dee5d1-1e25-43fb-8d77-531f022dd2fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6791211-c73f-4316-8249-c2893fd7e57a",
        "cursor": {
          "ref": "d94b1b3f-7f8b-455f-b13f-9fc43d04d0b5",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "65d6f817-70bf-4ae5-b809-760a681d2731"
        },
        "item": {
          "id": "f6791211-c73f-4316-8249-c2893fd7e57a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "11e04394-6a6d-4ddf-a70e-1fea12ae3cf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e328505e-b5bd-4ca2-a4f2-abae1f91df39",
        "cursor": {
          "ref": "4cfc093f-a2b0-4d95-84a8-d51504878f9a",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "41225645-249e-47fe-a56c-e1efd8c022a8"
        },
        "item": {
          "id": "e328505e-b5bd-4ca2-a4f2-abae1f91df39",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1b4c41b2-da9b-40fb-94a2-1244e3298830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c0c5122-8807-4560-830e-a6e4fea66373",
        "cursor": {
          "ref": "ec841b86-ea88-4443-a1e6-5a2505c58413",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0e9f74e8-1fec-452f-8312-12a28bf3bc69"
        },
        "item": {
          "id": "5c0c5122-8807-4560-830e-a6e4fea66373",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7e60c753-06cc-41c3-a66d-3b99e625ea1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d40de87-509e-4b13-903d-d198089ef494",
        "cursor": {
          "ref": "454d2d87-ea7d-4285-b281-18ffaf2e09bb",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d415c0ae-ffc1-4271-bf04-1b6319b12221"
        },
        "item": {
          "id": "3d40de87-509e-4b13-903d-d198089ef494",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ce05bc9b-98f7-47eb-8d6a-1540f0a81079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d303dd6f-57fd-4edb-bb3a-3cba5c7f637e",
        "cursor": {
          "ref": "9f924b33-46b1-45ff-b8c0-224cd7327ccb",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "5dd43d8a-9461-42b4-a3af-d866dda527c3"
        },
        "item": {
          "id": "d303dd6f-57fd-4edb-bb3a-3cba5c7f637e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "4ebb8b2d-8fba-4f98-9bc5-7397d96177a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9473ad16-4eca-49c4-8cf7-5922056bc226",
        "cursor": {
          "ref": "a1d83e76-13e4-448f-a9bf-d5a3e4adc7d1",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "3bf95475-cf0c-4221-bb1b-b6af05d94514"
        },
        "item": {
          "id": "9473ad16-4eca-49c4-8cf7-5922056bc226",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "762c44e4-9283-464b-b6d9-7f25641dfd11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab2fae4-aa7a-4fa1-8943-4ebafea7a6f2",
        "cursor": {
          "ref": "ced9d42a-7476-4b55-8e71-62c1462761d0",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "856ccc9a-b6ff-4d8a-9208-d49c13a666b2"
        },
        "item": {
          "id": "dab2fae4-aa7a-4fa1-8943-4ebafea7a6f2",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "46ab216c-afe7-4025-8049-16d31ad1bd3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3362769-cea6-4450-a021-5ea2ea7b654b",
        "cursor": {
          "ref": "45aa29cf-19b2-46c3-a97a-bfbbb6143eb2",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d940f464-6af3-4002-9355-79d6e66b1c5c"
        },
        "item": {
          "id": "a3362769-cea6-4450-a021-5ea2ea7b654b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f8f158a4-5596-4b77-9c10-e18f51033283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31de704f-6e75-49ef-9924-3a22f95867e3",
        "cursor": {
          "ref": "9fc17350-59a7-423b-bf3d-f59186133c2b",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "d970c934-dc1e-4db4-a5e5-ae35075c3ee6"
        },
        "item": {
          "id": "31de704f-6e75-49ef-9924-3a22f95867e3",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3a50b723-3542-41de-82bf-3afcc6e5a7ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8c2f070-2178-4853-a138-3919332df485",
        "cursor": {
          "ref": "13d9e55c-2dd6-472e-9e7c-e86ca8659ebf",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "38e5e0e6-d6aa-4890-9050-94a311059313"
        },
        "item": {
          "id": "c8c2f070-2178-4853-a138-3919332df485",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "522cf3ea-fd44-4e7e-b0dd-dc4dd594e8b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b40960e5-26a8-4901-81ad-f1221e4f3c2f",
        "cursor": {
          "ref": "b69ea985-fce3-4950-aa01-6b20b4e1cbc6",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "00143fcd-3dbf-448b-a5c3-57ba4ce6728a"
        },
        "item": {
          "id": "b40960e5-26a8-4901-81ad-f1221e4f3c2f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "66c28b4f-e0f2-44bd-b9f0-ade76e6d13fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0353797a-7d57-4bfe-aa89-0cd5c4d4d49d",
        "cursor": {
          "ref": "79ebde16-48ad-4b93-8aee-f3cffc3efac7",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d5f4c67c-1f47-413c-9b88-9242594631a5"
        },
        "item": {
          "id": "0353797a-7d57-4bfe-aa89-0cd5c4d4d49d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "859e194f-ad41-44b7-83d0-937b96746b33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f268d65-9d12-45ad-b7b7-b5f6dede6b4c",
        "cursor": {
          "ref": "cc809241-0b00-4d50-a402-15b9a2413066",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "8cba8de3-a2f5-4714-baa3-8ce7e60f691d"
        },
        "item": {
          "id": "1f268d65-9d12-45ad-b7b7-b5f6dede6b4c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "11f235f1-f92d-4208-b60a-bbe670ffad0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b843e885-a086-43aa-91a1-ace55119cfe7",
        "cursor": {
          "ref": "55a25f89-30f9-4597-8dc8-af9468d8611c",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "2a69076f-4e06-4059-9675-f9d59b72e6a4"
        },
        "item": {
          "id": "b843e885-a086-43aa-91a1-ace55119cfe7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "95f79848-145d-474a-a2ff-18b37a00963e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09f65074-9928-4098-8f6e-14e0f875ad14",
        "cursor": {
          "ref": "495f1a88-05e5-420e-8dc9-883ddae58cd8",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "da6389f5-2485-44a6-be7e-f48e74550d76"
        },
        "item": {
          "id": "09f65074-9928-4098-8f6e-14e0f875ad14",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e92aa0b4-9e66-4246-9aed-76ba20491b06",
          "status": "Created",
          "code": 201,
          "responseTime": 3157,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "e8b5ceb0-85f1-40e6-8e47-310fff77d57b",
        "cursor": {
          "ref": "af6aeeb6-b0c2-48dc-b010-9c9d8fd995e4",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a95990f4-a4a6-4e7d-a4d0-b101c85f6e96"
        },
        "item": {
          "id": "e8b5ceb0-85f1-40e6-8e47-310fff77d57b",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "a9b67d4f-3578-48da-ae23-634e91351920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61587e10-6bf3-4c9e-82b6-7ca093371bc3",
        "cursor": {
          "ref": "57091838-33dd-4da9-a99f-38bc0276e118",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "b9f006eb-ee23-40d2-8038-781b37fad8d0"
        },
        "item": {
          "id": "61587e10-6bf3-4c9e-82b6-7ca093371bc3",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2d8b4826-1e19-44ec-9756-45c1c9de0628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6960901-7f2a-471a-abab-05051b8117b1",
        "cursor": {
          "ref": "abe0b9b6-5af8-4899-a0ae-2150c14380cf",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "403ff960-9196-4283-ad80-b20fbf6ab2da"
        },
        "item": {
          "id": "f6960901-7f2a-471a-abab-05051b8117b1",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e1e3a84e-1bf5-4740-8ddd-513ab2cea8ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "187217f4-c8cf-4d2f-a6bd-dcdf5dfa4a2a",
        "cursor": {
          "ref": "ba5efa86-90be-4b1d-bdb5-c09e87de2056",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "58df491d-d14b-4f81-973d-ca3bfc5b361b"
        },
        "item": {
          "id": "187217f4-c8cf-4d2f-a6bd-dcdf5dfa4a2a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e1d1de82-6d82-45c6-b1c7-7d622a7aff66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3c672f2-c8b5-4700-918d-97fbc901ab72",
        "cursor": {
          "ref": "15c49d52-e896-4afe-a052-14cd7cdd0865",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "bb5bc672-9deb-48ba-8a11-288e29ced1ed"
        },
        "item": {
          "id": "f3c672f2-c8b5-4700-918d-97fbc901ab72",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d296070b-9e30-4103-9fce-edc03822c3e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd712cc7-71b9-444f-bc06-61fd7e83dbb2",
        "cursor": {
          "ref": "93cf82e5-7d27-4194-9d40-f5317b9800bc",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "d6537e7c-6b47-4ffa-b1e6-fdfefb770e24"
        },
        "item": {
          "id": "dd712cc7-71b9-444f-bc06-61fd7e83dbb2",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "bfad7825-7f2c-4901-96a8-758fe184a4fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "744ed8a5-4078-4f88-a885-935b0769c55d",
        "cursor": {
          "ref": "7c8140e1-531b-4011-bdc0-7958006193c2",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "22d2eef2-3e0a-4270-a6b5-a94704a944a7"
        },
        "item": {
          "id": "744ed8a5-4078-4f88-a885-935b0769c55d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "38893eaf-968f-4e54-b15d-01a0a4ec4e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d61b41ad-8163-4997-af9f-2e11ac472460",
        "cursor": {
          "ref": "c90da521-1b1b-4bb1-b121-c0f75c309609",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d61ee569-d092-45e0-8e6c-be61a4c86845"
        },
        "item": {
          "id": "d61b41ad-8163-4997-af9f-2e11ac472460",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3b71d536-63d8-4c0c-be76-4c5d469c5465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "983a76e2-efaa-4b1f-86d0-9edc7d48edd6",
        "cursor": {
          "ref": "c88fa1fe-b57f-4ac5-a541-29e90406a4c5",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "4e694da3-5d7a-478e-a57e-73bb3e8c8631"
        },
        "item": {
          "id": "983a76e2-efaa-4b1f-86d0-9edc7d48edd6",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "88d75076-a94b-4c0f-8863-d0cb71ea013b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bc6d4a7-85d1-4b80-a98f-3755d373897e",
        "cursor": {
          "ref": "ab354b54-0fb2-4755-9280-75dab9616bd5",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b4174fc2-2cfb-4656-9fac-763251fb2ef1"
        },
        "item": {
          "id": "7bc6d4a7-85d1-4b80-a98f-3755d373897e",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "34c1fe6d-2b90-4f54-8cf9-b763571ec260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da779bc-5590-4d7c-abfc-4101641be2d2",
        "cursor": {
          "ref": "538704bf-57c4-4b57-bbdc-464f91c39acc",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c27e8ca4-dd1b-4bcc-8b8f-310caa27bb36"
        },
        "item": {
          "id": "7da779bc-5590-4d7c-abfc-4101641be2d2",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f518ade2-f22b-462c-87fe-bf123fc53f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdaf3876-3827-4693-bd20-120b19aecb8a",
        "cursor": {
          "ref": "cb0d5428-2b9e-436f-9bc9-e3ac210afc8d",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "6ff02b4a-08e4-4aed-bb61-9664d244aee9"
        },
        "item": {
          "id": "cdaf3876-3827-4693-bd20-120b19aecb8a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5dbf864d-4422-446e-8531-33b8cc57c795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07132724-4a26-45da-a85c-97d4bdf39f1c",
        "cursor": {
          "ref": "883190d2-7372-42ee-a09f-418a8c62bdce",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "1daab907-1d61-4114-b263-c68d1c5cd642"
        },
        "item": {
          "id": "07132724-4a26-45da-a85c-97d4bdf39f1c",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a3deaa40-abe6-45e6-983c-846b29cd8aa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bd2cdf6-643d-4099-842b-730f56dfd460",
        "cursor": {
          "ref": "96e7fe07-2da9-4eaa-a35d-68f22965b96f",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1d2d36ae-764a-4ea4-b185-727fa60ea0dd"
        },
        "item": {
          "id": "5bd2cdf6-643d-4099-842b-730f56dfd460",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "8c38e8ba-6fd2-4e12-bfe2-852af0c12487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "874b3c42-fa01-4e1a-9862-8a396b166afc",
        "cursor": {
          "ref": "a070f136-3824-42f4-89d3-cd790debbdb9",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "3936cc97-2661-47da-b869-1f6abad28f9e"
        },
        "item": {
          "id": "874b3c42-fa01-4e1a-9862-8a396b166afc",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "720030ed-7456-40c6-8118-b058848dcb82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d9350c8-d40e-46b4-baca-3e440f641fd1",
        "cursor": {
          "ref": "16443143-5572-4478-8050-b1edcea029b7",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "7ad2e0bf-efc3-4f76-9513-5d5a251e6d6f"
        },
        "item": {
          "id": "1d9350c8-d40e-46b4-baca-3e440f641fd1",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c80847cb-b3fc-40d6-b0e7-d382cb9bbe20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5bb22db-6482-48d6-a0be-bdeb5acd7cf5",
        "cursor": {
          "ref": "774e451c-3fe0-40ab-a9a7-5f1240b34190",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f8a5b3c2-7327-4777-b5f1-44d15ea645f6"
        },
        "item": {
          "id": "a5bb22db-6482-48d6-a0be-bdeb5acd7cf5",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "8f212330-d405-419c-9d10-d639bc70efd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "303b8430-43b1-42cc-90fe-469041ccf729",
        "cursor": {
          "ref": "3c82ec02-967c-4214-a6d0-8ad54f4f6d3f",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d80ddde2-728d-4df9-a7dc-0f05672f6979"
        },
        "item": {
          "id": "303b8430-43b1-42cc-90fe-469041ccf729",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "6b3a0192-c297-4d9f-8a80-73952415dce5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f7b9a80-12f4-441e-a996-a47294cd9ccc",
        "cursor": {
          "ref": "9a1dc3c6-3992-4bb7-999e-b9638aa77730",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "64f9b059-358f-4247-a4d8-1a1f53f67f15"
        },
        "item": {
          "id": "6f7b9a80-12f4-441e-a996-a47294cd9ccc",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c9a743f8-7084-47d1-8d3a-d5c36c3c560a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e5138fe-41d3-4b8f-9834-734e3a790734",
        "cursor": {
          "ref": "74393b68-20aa-4df5-9cd4-57a140b27994",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "aed2737f-9395-41af-b98a-6d08f39204af"
        },
        "item": {
          "id": "7e5138fe-41d3-4b8f-9834-734e3a790734",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "9db72680-8cdd-408f-8c6e-61b9831d82c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50c310e7-a140-4ff1-89a7-f473afdc3ad1",
        "cursor": {
          "ref": "2959b86b-2d6c-4639-b089-8758d4eb660b",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "3db3910b-ae7c-4e49-b0b5-0f8182bffe56"
        },
        "item": {
          "id": "50c310e7-a140-4ff1-89a7-f473afdc3ad1",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "14764948-a654-45d8-8497-490e066372a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfb81e63-0981-44e2-a6fb-7efe91ffff3b",
        "cursor": {
          "ref": "c34c9018-8ef9-4912-9596-9aa438bf2ddd",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5374fbc3-0e92-4cb3-9c86-b19dd748c867"
        },
        "item": {
          "id": "bfb81e63-0981-44e2-a6fb-7efe91ffff3b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "82fdabb2-5a32-4a5a-9ac2-0fa5ba8df51e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d84f3de-0ac9-4939-a483-f55705a087e1",
        "cursor": {
          "ref": "25d14ab2-af8e-4c5a-8982-4cad9d76150c",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "5dc2ec46-10d6-47f1-82b1-1490b5e5cbed"
        },
        "item": {
          "id": "6d84f3de-0ac9-4939-a483-f55705a087e1",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9e344a42-5d36-49c9-9a77-915aa7466019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa2e98fc-f1f7-4ccf-bf23-6335241c90f0",
        "cursor": {
          "ref": "047a2979-32f8-4f07-bd2a-a53131ba8e8e",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "0aa2d56e-d0fe-4963-8702-107bfb0c5eef"
        },
        "item": {
          "id": "aa2e98fc-f1f7-4ccf-bf23-6335241c90f0",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c3daa0f9-301e-4227-a58c-20ae488d6a29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7724f87e-50c0-44a9-9ff5-30a900b12895",
        "cursor": {
          "ref": "9d3392ae-df0e-4391-b02e-03e41a2a66ed",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d91ad617-64e9-4984-9c2a-1af70d8a1346"
        },
        "item": {
          "id": "7724f87e-50c0-44a9-9ff5-30a900b12895",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2b4aee68-acf6-410f-960e-20bb6818ca0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0d4624a-de37-4595-8d3d-aa1d07980b88",
        "cursor": {
          "ref": "f7c9a38f-c79d-4fc9-9fd6-9ad9285bcdd5",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "7373c5da-c02f-40e3-b259-ad0c5f918b9d"
        },
        "item": {
          "id": "c0d4624a-de37-4595-8d3d-aa1d07980b88",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4dd2887b-369f-4365-95a1-3681db4cdf41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdae03af-0fa6-49df-86cb-6ddf03d91b96",
        "cursor": {
          "ref": "4c640b97-89d1-4de5-8735-22f2aaf46509",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "00cc5bac-153c-4254-8915-1f7647b18852"
        },
        "item": {
          "id": "cdae03af-0fa6-49df-86cb-6ddf03d91b96",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "65410148-6f7a-4d23-ba82-d549824040ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0625d77e-da6b-4aaf-a368-6662a24769a5",
        "cursor": {
          "ref": "bf33ca08-d0f7-4862-8ff4-68cfc9c59f70",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e9d2c6ba-1ffb-4f59-abfd-99cc2a30fbd9"
        },
        "item": {
          "id": "0625d77e-da6b-4aaf-a368-6662a24769a5",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "9f94eda0-21e0-45ab-bd72-78279ac12421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf2904a-23d3-4db9-8b68-66c00a8754dc",
        "cursor": {
          "ref": "ca791c1d-5ee6-4b63-b47e-73d7be688a67",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "801bf7cc-419c-4cd0-b276-a5fd236ef45e"
        },
        "item": {
          "id": "9bf2904a-23d3-4db9-8b68-66c00a8754dc",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "7c0ba065-5a78-4ce4-a245-ba8e2bb50566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9381e15-fb5e-4e55-9737-5f53e590fa93",
        "cursor": {
          "ref": "2144c88e-376c-434c-8b07-087ce7031cfc",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "fdafd61a-3e94-48e2-b394-ed59e22ff70b"
        },
        "item": {
          "id": "a9381e15-fb5e-4e55-9737-5f53e590fa93",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "75fd4629-9838-47b3-805c-7f942c8e7aab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5567143f-8a85-4da2-882b-53d6b1c03602",
        "cursor": {
          "ref": "f3cc89f5-e2d0-4e6a-b961-a74618269298",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "6af620b4-4287-4f6b-8522-6ad93d974712"
        },
        "item": {
          "id": "5567143f-8a85-4da2-882b-53d6b1c03602",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "8b722789-ed5b-4a29-b64d-627f9c5e32d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "66dc2bb8-6ee3-4791-9055-f5d7f9ac3105",
        "cursor": {
          "ref": "b6599adc-2116-492f-a756-d614eec3b68a",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "18668929-4f8b-4926-93ae-57f44e9b433b"
        },
        "item": {
          "id": "66dc2bb8-6ee3-4791-9055-f5d7f9ac3105",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6836821e-0a71-46d6-972a-478987a80943",
          "status": "Created",
          "code": 201,
          "responseTime": 1765,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f60d616c-3527-4f46-9578-1817783147d5",
        "cursor": {
          "ref": "eba0400d-2714-4e66-8da7-34806aabc8bd",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "8cc31a34-c93e-4bd4-b000-0a3e0173ea0b"
        },
        "item": {
          "id": "f60d616c-3527-4f46-9578-1817783147d5",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d46f60dd-1666-4bcf-838d-d56f49d5bb78",
          "status": "Created",
          "code": 201,
          "responseTime": 2267,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9f6f93d-ec4e-4e59-bfee-5fb9dbe70998",
        "cursor": {
          "ref": "b8bf8a10-6591-400f-8dec-5b16ecd821e6",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "0297e988-e0d8-435e-9221-c466bbceb208"
        },
        "item": {
          "id": "b9f6f93d-ec4e-4e59-bfee-5fb9dbe70998",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "fc0a2c78-2314-49c2-849f-07d860043519",
          "status": "Created",
          "code": 201,
          "responseTime": 2730,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ece5e3d1-b8a5-45fd-89f3-f96427089ea6",
        "cursor": {
          "ref": "98eacdbf-6eed-4f99-aac8-28c95f6c3b28",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7f694c4c-42f2-474d-be75-273762710fad"
        },
        "item": {
          "id": "ece5e3d1-b8a5-45fd-89f3-f96427089ea6",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c4c864bb-cc35-4ff4-939c-e731754fab5d",
          "status": "Created",
          "code": 201,
          "responseTime": 3855,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "917730d5-1b63-4f20-8e7f-a5fab71c94c7",
        "cursor": {
          "ref": "41825261-984a-4a4f-bb76-3977eda439c6",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "94b75985-d016-4ffc-a87b-a7ba6c2834e5"
        },
        "item": {
          "id": "917730d5-1b63-4f20-8e7f-a5fab71c94c7",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b0fec454-9a0a-493a-9dc3-f15de4ed271d",
          "status": "Created",
          "code": 201,
          "responseTime": 2521,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-04T00:49:33Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-04T00:49:33Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "babddf80-7c5a-432a-bcf3-a4487c9fbc23",
        "cursor": {
          "ref": "3c06f271-894d-4556-a3a3-ccc956cf4f0b",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "031ee606-95e8-4281-be11-cf727ae8baa3"
        },
        "item": {
          "id": "babddf80-7c5a-432a-bcf3-a4487c9fbc23",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e3801bd7-70a6-4e92-b6cb-221985411634",
          "status": "Created",
          "code": 201,
          "responseTime": 2322,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a09437f-2cdc-43c4-b671-1c47e957a20d",
        "cursor": {
          "ref": "b04d9d83-4532-4936-8b4f-f79251c8b2bf",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b7600aa4-e484-4996-a464-1dddcf661f69"
        },
        "item": {
          "id": "0a09437f-2cdc-43c4-b671-1c47e957a20d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "89fa5730-6f62-4bbd-8991-804146f5a5a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce59f568-5426-4f13-9d00-25e714f7ee92",
        "cursor": {
          "ref": "deaf646a-42d9-4340-a5de-71a36cfeec9c",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c41b9336-c953-4dfb-b41f-4cb801f488d2"
        },
        "item": {
          "id": "ce59f568-5426-4f13-9d00-25e714f7ee92",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ec91deff-8283-4baf-acb1-d9690a9b5f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "762d6e18-0e80-45c0-ba49-73318574aaab",
        "cursor": {
          "ref": "d39d260a-1153-4e88-8678-ec0621c2a366",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3c39b30d-7679-412c-951d-814fb50a77ac"
        },
        "item": {
          "id": "762d6e18-0e80-45c0-ba49-73318574aaab",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d3da2bfc-7ce2-4ab4-8daf-9e6eec25c8c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "033a9636-9acf-46ed-9e41-ced2983b1601",
        "cursor": {
          "ref": "abab5563-79d7-4fb0-8e11-f45bd9d466f2",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "de9fd982-5914-42f5-9f96-1f36d15efc8e"
        },
        "item": {
          "id": "033a9636-9acf-46ed-9e41-ced2983b1601",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "bff98cf3-70b5-41ae-b7d7-cb68c840c7d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72739270-dce5-4796-bba5-b5e8abf6ba49",
        "cursor": {
          "ref": "135de4b7-305b-4f40-b27e-ce00419159f9",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d42a2ac4-1d99-4826-b4f6-82a2a040f4b9"
        },
        "item": {
          "id": "72739270-dce5-4796-bba5-b5e8abf6ba49",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1930778f-f1b1-4959-b78f-179eb1ad9be0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a959786b-5211-4b3c-9c5b-4bd86adbb4b1",
        "cursor": {
          "ref": "7911d7e7-e396-401d-9bff-d6aa29f6dfb3",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e335227b-cab2-40fa-9879-d53c637d6483"
        },
        "item": {
          "id": "a959786b-5211-4b3c-9c5b-4bd86adbb4b1",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "96ef3a46-cacf-487f-87ed-b7bbb41767e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "372470f6-abf5-4d99-9767-4d20e20ccb12",
        "cursor": {
          "ref": "0082ef65-a098-42e5-932b-104c7d573437",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d687a88f-0639-47c9-9fc3-97a289e3c72f"
        },
        "item": {
          "id": "372470f6-abf5-4d99-9767-4d20e20ccb12",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5520cdc8-0ca6-4296-9819-23cc043ed77c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88b69ced-847b-42fa-9aee-c7478b678fba",
        "cursor": {
          "ref": "f7ed50a9-6070-467b-9c6f-59c9ee1c5fd9",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "eab655f2-a03f-4dae-ace6-7ecc1d320a7f"
        },
        "item": {
          "id": "88b69ced-847b-42fa-9aee-c7478b678fba",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e9770639-5ef1-46e0-9ffd-e7b9a237b484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f0a685b-32b7-4649-bd67-4767806378c2",
        "cursor": {
          "ref": "9043891b-a195-4fee-b141-a444e8655869",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "bf2b0bfb-6667-4e5a-87c6-acd0202b8c0c"
        },
        "item": {
          "id": "0f0a685b-32b7-4649-bd67-4767806378c2",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c9550d38-fab9-422b-8782-353889c6acf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "100f3fac-a9ed-4df3-befc-c37ca36a6be3",
        "cursor": {
          "ref": "9277b6a8-b7f3-44b4-afb2-1d0c23842456",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "08fb4f5e-176f-44f6-b0a4-994fdc5a37ca"
        },
        "item": {
          "id": "100f3fac-a9ed-4df3-befc-c37ca36a6be3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "50226903-69c0-40f2-816c-98f1c34fcf16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9210f91d-e0d7-410c-a621-4a46de188060",
        "cursor": {
          "ref": "f2ee1f59-2a4e-4c22-8373-2717a32a0fa0",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "afad6d14-26a6-418d-ad03-48d558eabb04"
        },
        "item": {
          "id": "9210f91d-e0d7-410c-a621-4a46de188060",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "20b63f2c-b96f-491f-b9b9-4cf48fdb9d51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09ac3ef1-0103-4024-b150-abf1c4707fb4",
        "cursor": {
          "ref": "ca83f91d-a684-4e49-aa2c-cbca358978f6",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "fe69e681-485b-4d5a-a4a3-f912406b7521"
        },
        "item": {
          "id": "09ac3ef1-0103-4024-b150-abf1c4707fb4",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "246c4bf7-8ff4-45cc-b867-49a293411eb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53d594ed-9c33-4737-85a1-f629e15fcee0",
        "cursor": {
          "ref": "5cb1520f-645d-4e6d-8f9a-d9cd3666866f",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "911066fb-ac8a-47af-af3b-c04679421964"
        },
        "item": {
          "id": "53d594ed-9c33-4737-85a1-f629e15fcee0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9efc96c1-e8a8-4864-aacb-58d08d58846e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66866885-0866-4c8e-8302-eb5eb9e08f89",
        "cursor": {
          "ref": "e5e39040-9a8b-424b-84b7-3c03defaa882",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "29dfd379-856f-4305-8fad-49786a073087"
        },
        "item": {
          "id": "66866885-0866-4c8e-8302-eb5eb9e08f89",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7de95bf7-efde-41e4-abdd-cc1013e11b5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be087ec6-abbe-4939-8cfa-daa2ce4524b3",
        "cursor": {
          "ref": "580d8eae-2def-451d-82d8-530eab3b6d81",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "db89aece-40a3-443d-9306-53df7cc54799"
        },
        "item": {
          "id": "be087ec6-abbe-4939-8cfa-daa2ce4524b3",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b1e2042e-f102-4e41-96bf-e016832da0ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f27994-3f8b-4810-912f-b33d34a974bb",
        "cursor": {
          "ref": "446a96ae-2f2a-4424-aa7b-3f7fc7514bb8",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "529a3600-8a8d-4bbe-a477-e629619b6b33"
        },
        "item": {
          "id": "66f27994-3f8b-4810-912f-b33d34a974bb",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8f097d26-5925-461e-aba0-1563094790bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f14abc3b-8452-4cf5-9ae7-ff467cb4df42",
        "cursor": {
          "ref": "96955a96-28c9-4023-b928-3a8ab9f168e1",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "9e352b2b-b623-4d9f-988e-884fdc4d5185"
        },
        "item": {
          "id": "f14abc3b-8452-4cf5-9ae7-ff467cb4df42",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ffe80ffd-deb9-4b49-8eda-82430f8e4c6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b8f74b9-6641-4583-b175-b8ecbb0ee72d",
        "cursor": {
          "ref": "f9a8b84b-7192-41e7-87d0-1cf44dbfb38e",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "aaff392f-5072-44cc-8d61-3423201429c5"
        },
        "item": {
          "id": "7b8f74b9-6641-4583-b175-b8ecbb0ee72d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6da88aa8-0eca-48c4-94fd-a31c922a8195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02ec6f5c-b410-4de3-93da-adca9ee3cfbf",
        "cursor": {
          "ref": "dc2db9f1-e234-420c-8512-ad5859c9af2c",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1bc939a0-83b6-4d68-8485-e996496f8931"
        },
        "item": {
          "id": "02ec6f5c-b410-4de3-93da-adca9ee3cfbf",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "649918b9-20ba-473f-96ce-37e0537eafaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2d46c4-e168-4908-88b7-6b6f878a1c7d",
        "cursor": {
          "ref": "bb113804-e484-423a-aa52-1a1040121df3",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "89b6f5f7-6f74-48e4-834f-ea9d1c7bd56e"
        },
        "item": {
          "id": "ca2d46c4-e168-4908-88b7-6b6f878a1c7d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "17833295-1adf-47a6-aaff-67aab3dbadb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64cc3aeb-e02e-4e97-97a1-e6346277a1fd",
        "cursor": {
          "ref": "3266457b-39e1-4834-910c-7e249f4f0864",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "59c16be4-c8bd-4dbe-a37a-988bb249b3e2"
        },
        "item": {
          "id": "64cc3aeb-e02e-4e97-97a1-e6346277a1fd",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6df7368c-8dc0-4c44-b70e-b122eac23ad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a652ece-3d4a-484e-bdf8-fcf31847000e",
        "cursor": {
          "ref": "bfc9dae8-77bd-44e8-85b7-1dac5f212b47",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "83bba3f7-e5c3-4af4-b01f-8ff4209abf69"
        },
        "item": {
          "id": "4a652ece-3d4a-484e-bdf8-fcf31847000e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "78d177f0-7c7b-4454-bfd1-4a74f39ad1a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0c029be-a204-4b80-8e62-2169becc9c9f",
        "cursor": {
          "ref": "c317f302-ceae-47fd-aa9a-0c407b0e3d0f",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "42d91f5a-f2dc-4c8c-afc3-f1a0a973108c"
        },
        "item": {
          "id": "f0c029be-a204-4b80-8e62-2169becc9c9f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "80192cf1-0883-464c-877f-e5348e994442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b301292f-3a88-411b-b2a3-7ba0307267b9",
        "cursor": {
          "ref": "e1193e4b-2515-4e79-9690-8b3641fc95e4",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "ef9dbeeb-0e96-4351-be84-04618a90caa9"
        },
        "item": {
          "id": "b301292f-3a88-411b-b2a3-7ba0307267b9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3995977a-198d-46f5-9395-ae69c48e2e82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a98a40f-6685-4e3c-83cc-75804402c95d",
        "cursor": {
          "ref": "64e150e9-a260-4f27-9a71-37321caed14e",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "63a0ff93-7809-4819-ad31-9132f44f283c"
        },
        "item": {
          "id": "0a98a40f-6685-4e3c-83cc-75804402c95d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "be3b1b8e-1f45-404e-b712-e4474fc7b6ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64ac294a-4dc4-4334-927d-4f9eed7e3686",
        "cursor": {
          "ref": "9da57732-7ba8-43bc-a06f-237b5d65a747",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "bbe25ca1-0bd7-4704-ad34-345e2506bc17"
        },
        "item": {
          "id": "64ac294a-4dc4-4334-927d-4f9eed7e3686",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "90911fa6-3b2d-4d86-b006-1abd07b7e284",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85cced09-9531-4222-a2f3-ad3737bc18f3",
        "cursor": {
          "ref": "842a5fbd-ca23-4d85-aa1b-5a23298caee5",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e52f97ce-a843-42b6-9567-9cf5b0091feb"
        },
        "item": {
          "id": "85cced09-9531-4222-a2f3-ad3737bc18f3",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9d08f65d-97d1-4e2c-af87-707bc25dea3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f72c9aa9-f51f-4283-a2f4-2a99df7db0b7",
        "cursor": {
          "ref": "4991af96-e805-486b-884b-5d6e5e6a6c3f",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0c9f824b-2e16-42fb-b108-49f13b332b6f"
        },
        "item": {
          "id": "f72c9aa9-f51f-4283-a2f4-2a99df7db0b7",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3efa78c8-ee63-4f08-b862-5f8fe83db07d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "254d1158-d61e-484d-9b5e-7a28d4e5d89f",
        "cursor": {
          "ref": "a9cdfbe8-fb8d-4907-a89e-3716acbe73d9",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ded8e0f9-0fce-418c-b399-20a7c9a57e5c"
        },
        "item": {
          "id": "254d1158-d61e-484d-9b5e-7a28d4e5d89f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "cbb6f915-07e6-4206-976b-2d5ca718e94c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a026b32-6fae-482f-9ea9-9b7541d18f1e",
        "cursor": {
          "ref": "aedb0f27-c1e5-4c4c-9f0e-ddedcaa5424a",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "34df44ff-e7fa-4254-990e-4649d69dc139"
        },
        "item": {
          "id": "6a026b32-6fae-482f-9ea9-9b7541d18f1e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "bff35204-0fd5-4654-b3df-f8ed722753bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed68d67-5208-4493-a592-1d3d5cd090b4",
        "cursor": {
          "ref": "9e57ef29-6f06-4188-8a98-b6167d3ed939",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9e7cd2d7-e96a-4b71-9439-37be76e6dfd0"
        },
        "item": {
          "id": "0ed68d67-5208-4493-a592-1d3d5cd090b4",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5f87e2cf-8b98-4d7f-81bc-70263fddce72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1fc9c0-1c01-43ee-960b-eb33d5e63955",
        "cursor": {
          "ref": "33a82435-6e7b-47b2-9612-62e95c543dc8",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "8eb2d9a7-d299-4c67-873d-93c51c23a78f"
        },
        "item": {
          "id": "4c1fc9c0-1c01-43ee-960b-eb33d5e63955",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "1dc8de53-791e-4b5d-a979-2279c8a23e78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb2f7f8-ea98-43bf-9f38-aaffd3875ab9",
        "cursor": {
          "ref": "8383abfa-5b13-44e7-8d17-8c0e312365a0",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "4258be66-a282-4c0e-a20b-5253eb75ab42"
        },
        "item": {
          "id": "beb2f7f8-ea98-43bf-9f38-aaffd3875ab9",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "33224fdb-897f-4a9b-8e11-a61551524a7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "4b635e87-f03d-471c-b9d6-23bba10583c5",
        "cursor": {
          "ref": "9eef81fd-f807-4cd0-82d2-61253e587d4e",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6ae4e705-046e-4107-ada2-636d36a73371"
        },
        "item": {
          "id": "4b635e87-f03d-471c-b9d6-23bba10583c5",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "dfa33301-ee4e-4a66-9bc6-5009703f7cca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75e63085-8999-4e1b-92f8-550819a4f9c4",
        "cursor": {
          "ref": "be86f1f6-6db8-4845-a68d-b15762199a84",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c8c4474c-c32d-4fa6-9ea7-e979634bf3a8"
        },
        "item": {
          "id": "75e63085-8999-4e1b-92f8-550819a4f9c4",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4dda210f-c02a-41ba-a053-a008a17bf6a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e9ad44b-8c66-4255-8019-c7c8b69385e4",
        "cursor": {
          "ref": "affcd592-89b2-4155-98a0-a1bc5fc1135d",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a0ab119c-6dec-4a6a-bb2c-abeaf816d952"
        },
        "item": {
          "id": "3e9ad44b-8c66-4255-8019-c7c8b69385e4",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e56c6a9e-de9f-4182-ba91-5f1e0fd79e77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d0b792b-5f1c-43c1-866e-3dc03957af96",
        "cursor": {
          "ref": "a1052bde-74e9-4f28-84bc-7233c4924370",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "dfc8a38e-cc8d-4889-8825-0c10355ee25f"
        },
        "item": {
          "id": "5d0b792b-5f1c-43c1-866e-3dc03957af96",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c51dc4a7-2af6-4d47-980b-658d0375949a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b59990a3-2102-427a-b89f-5bb0755c481e",
        "cursor": {
          "ref": "f3a5e8f8-8989-498a-8f55-d3aec2d99c93",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "f4f9973b-f345-4787-a229-3b100704f569"
        },
        "item": {
          "id": "b59990a3-2102-427a-b89f-5bb0755c481e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "fa37ca1b-dcaf-49aa-8233-c10501d65d73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2765f3b-d9ea-4702-b724-ec4473f9e3e0",
        "cursor": {
          "ref": "7289129e-38c1-45f9-9df2-a9c7d7a08f87",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "33b5befd-19e9-4d43-bb86-594914eaff00"
        },
        "item": {
          "id": "b2765f3b-d9ea-4702-b724-ec4473f9e3e0",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0203f2c4-91f1-4a49-86ff-5858980cbb29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9aa6f71-39fd-417c-b23c-72b87695f92d",
        "cursor": {
          "ref": "0393289e-98c1-47f8-8041-57e5d992d992",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "4ec20cbd-15c8-4703-a22a-32b67d3ade38"
        },
        "item": {
          "id": "d9aa6f71-39fd-417c-b23c-72b87695f92d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "8976bb7b-2d9f-4d50-a309-ddac9eab7ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22fa7063-de41-43a9-94ab-a14e3c23c999",
        "cursor": {
          "ref": "adc63281-e8d3-4f13-a85b-b3090148198c",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "76e51064-5651-4148-915c-67953bb47267"
        },
        "item": {
          "id": "22fa7063-de41-43a9-94ab-a14e3c23c999",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "dae6bfe4-ea43-46ed-bba9-d91aa6c38e7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1536bf24-f951-491d-8538-84d9941277c9",
        "cursor": {
          "ref": "e54a36a6-3fc2-45ab-8e3e-ca26b13e3c31",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e37c9736-b4e4-4dec-addc-0807ac7c4a0e"
        },
        "item": {
          "id": "1536bf24-f951-491d-8538-84d9941277c9",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "fd41dce7-af1b-4020-894e-de67e1a679bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 277,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de251157-c21d-4d6d-a5e3-bf35890c5876",
        "cursor": {
          "ref": "4c6694e9-7465-4714-ad13-4848d61a18b9",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e543e59c-bbf9-4635-9c88-31573872a4a9"
        },
        "item": {
          "id": "de251157-c21d-4d6d-a5e3-bf35890c5876",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "81c9ff8d-33df-4510-839a-57f528cbec3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16cdc26d-9aba-4e9f-8ac8-dda4079882a0",
        "cursor": {
          "ref": "7fd83005-7359-4e2e-a1f9-1a4e695a98cb",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "9744f49f-204e-4345-a658-630352488c48"
        },
        "item": {
          "id": "16cdc26d-9aba-4e9f-8ac8-dda4079882a0",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "1ceeef95-9631-442b-a650-0e6ddd320ddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cef8ecb-3010-4874-895b-224ddcd6c8ba",
        "cursor": {
          "ref": "82b9fdf9-f9c9-4d95-9f7a-549e21157efb",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "fb97b7da-ae78-40a2-a747-6593e7b3a25e"
        },
        "item": {
          "id": "5cef8ecb-3010-4874-895b-224ddcd6c8ba",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "99462f33-af09-4bd5-9201-2e5d8a4d760f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "445a1d5c-230a-4981-baae-4628b7f884cd",
        "cursor": {
          "ref": "b5dee137-3acf-41f1-81d7-a86dc33f3142",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1207df3f-bf0b-4f97-8cd6-5c00779fdd68"
        },
        "item": {
          "id": "445a1d5c-230a-4981-baae-4628b7f884cd",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "3fce3976-60ef-4660-9813-05e884cdc1c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ffa1b51-1fbf-4ad3-9e8a-e71d1cc6ef09",
        "cursor": {
          "ref": "b0e08449-fbcf-4727-a13d-2e3604663050",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "1689638f-9e81-45e4-ae7a-8de41f4628f8"
        },
        "item": {
          "id": "1ffa1b51-1fbf-4ad3-9e8a-e71d1cc6ef09",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a0fb2c39-a6e7-4331-9253-8a4867212f6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e742aa3-c359-466c-87be-0bd8dbd82540",
        "cursor": {
          "ref": "4d71984e-6752-4012-821d-54c385316f89",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "66ac4908-4cb0-48d4-be52-7e71d99e6f1e"
        },
        "item": {
          "id": "7e742aa3-c359-466c-87be-0bd8dbd82540",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "71570781-6dc7-4a74-a34c-6cf4c269a0a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff26a64-5869-4ab9-904d-bd25c2aab026",
        "cursor": {
          "ref": "ed2b04ac-4c48-4fd2-810e-926b4fe9343e",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "bb4770d0-d0aa-445e-95d8-2348b848cbc8"
        },
        "item": {
          "id": "9ff26a64-5869-4ab9-904d-bd25c2aab026",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "4af8177b-bc9b-4ef0-9c67-edbbe0f2dc86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "905a4790-4817-4c79-a749-f9de14bff7a4",
        "cursor": {
          "ref": "faf530a9-6b41-4fdd-a297-a279ea609b7f",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "2629d1fb-02ca-42ab-8478-23a8f5197da5"
        },
        "item": {
          "id": "905a4790-4817-4c79-a749-f9de14bff7a4",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "34fa140e-fdd3-435b-b593-26fa65942c69",
          "status": "OK",
          "code": 200,
          "responseTime": 254,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "586ff4ec-cc84-42cd-9c05-f38a2e6aeded",
        "cursor": {
          "ref": "4e586fad-fbf6-447d-a6f4-4a0a039217e3",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "06d6af35-c51f-4d24-9df8-7ce5bfdb67ce"
        },
        "item": {
          "id": "586ff4ec-cc84-42cd-9c05-f38a2e6aeded",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "07f72e5f-0c93-4b18-b733-942d5af1cc18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60f19df0-eb0a-47ac-aef3-2cd3a12aefef",
        "cursor": {
          "ref": "2654ea23-7b17-4f21-b29c-aa9e55a292af",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "df3a8ae7-bdac-48b2-92e2-987c83ec3c5f"
        },
        "item": {
          "id": "60f19df0-eb0a-47ac-aef3-2cd3a12aefef",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f5754aab-c733-4710-adf1-20350118c359",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37933b91-cc8b-4469-a931-7407c5ea4217",
        "cursor": {
          "ref": "470768f4-b61e-465e-8fdd-86e5ffffb41e",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "fcefecb7-8a64-4a0f-bbd9-590eb4853f11"
        },
        "item": {
          "id": "37933b91-cc8b-4469-a931-7407c5ea4217",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "0a59be95-0f87-459d-963c-76587b6da3ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75bcd9c9-9367-4853-925b-31992d55a37f",
        "cursor": {
          "ref": "cfdf61d9-1c50-4c3d-aa60-148d2abe3eef",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "6126ae8f-3d3d-4730-9c2d-7c7b78e81886"
        },
        "item": {
          "id": "75bcd9c9-9367-4853-925b-31992d55a37f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "89068694-b9f3-45d6-a7ef-e65ac80bf370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c27cf5b5-3e2f-4f5b-8d36-72cccf454c38",
        "cursor": {
          "ref": "371d68f7-c833-44f8-878c-5894fd8aa917",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "8d271912-49b8-4a19-9df8-15bd22ac370d"
        },
        "item": {
          "id": "c27cf5b5-3e2f-4f5b-8d36-72cccf454c38",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "cfff656d-be36-42a3-841b-29d3ccc1ce87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab846203-255c-40d4-a42c-cd2b830f6a32",
        "cursor": {
          "ref": "8e240f47-5db9-4806-aa83-c70e5f499257",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "962f1fff-0d73-4876-9432-99ec3ffa2cbb"
        },
        "item": {
          "id": "ab846203-255c-40d4-a42c-cd2b830f6a32",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d476315a-fbcf-4820-b131-efee8942b748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "033729db-5bf9-4150-8ff2-3ea0b1eeccb3",
        "cursor": {
          "ref": "13d94264-cadb-453a-9c00-6c5f87af936e",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "2c448c6e-d9d8-46c3-81f5-e55b40f1fd10"
        },
        "item": {
          "id": "033729db-5bf9-4150-8ff2-3ea0b1eeccb3",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b0a9155a-f3ba-4645-b936-d7ee04fd8e16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 989,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f85c0065-be2c-4670-a2bd-adca3f8c412f",
        "cursor": {
          "ref": "7830b4d1-9fb7-4d5a-bed9-444bdcb4fe2f",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8e463112-ba77-4012-9e3e-f7ac51928c0d"
        },
        "item": {
          "id": "f85c0065-be2c-4670-a2bd-adca3f8c412f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "4a0a9ba6-813c-4828-aa9d-4f416e2972f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9b6dbd9-10d9-4ac0-a8bd-17ad701c773b",
        "cursor": {
          "ref": "23b6ebe8-6759-46a5-b002-24d32d3544b8",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f3669308-ed46-4aa4-98e4-5e57c10bbe1a"
        },
        "item": {
          "id": "b9b6dbd9-10d9-4ac0-a8bd-17ad701c773b",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "834debd5-e9d6-40f7-8676-634a0c9b8468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2657d11-5ca5-47b4-bc2b-3b8dd3848074",
        "cursor": {
          "ref": "4a4779d9-653a-4462-8434-782690b765f8",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "9f915acf-6e23-43b2-abc9-0b91ba0f5a21"
        },
        "item": {
          "id": "e2657d11-5ca5-47b4-bc2b-3b8dd3848074",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "1909c278-dd1c-4a21-98aa-8ce973fdfb51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04112830-06e1-41e8-9f99-24b2c336cc48",
        "cursor": {
          "ref": "ef3a7ffb-b922-45d1-a244-37dac7d84e96",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "649971a9-92fb-49a5-b838-a302df405d71"
        },
        "item": {
          "id": "04112830-06e1-41e8-9f99-24b2c336cc48",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a11d4707-a4da-491a-8004-2ad85132d610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99eba65b-66bc-4062-ad75-93f1e161b42f",
        "cursor": {
          "ref": "146b3c6c-6051-4a08-a833-a79e2c9393e3",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "254a7ecd-060c-47b3-95d3-0078cc70a621"
        },
        "item": {
          "id": "99eba65b-66bc-4062-ad75-93f1e161b42f",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "8d531aa7-6d69-4391-8eed-fadccb6f636c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f42c4de-04f2-4125-894a-a5a24cb5108d",
        "cursor": {
          "ref": "7277f605-3ba8-4923-8b86-1db3e27447ba",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "57b820e8-2eb5-4b00-907b-498ecd91aa2d"
        },
        "item": {
          "id": "7f42c4de-04f2-4125-894a-a5a24cb5108d",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "03de5ade-e923-481a-896b-531690b70060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "881921de-31a4-4591-b34e-03b622699ac8",
        "cursor": {
          "ref": "e7a315a2-c096-47ca-847a-210c3c814405",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "222b5cc0-2d83-4fde-9b01-be5263b92a55"
        },
        "item": {
          "id": "881921de-31a4-4591-b34e-03b622699ac8",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "57ef2f50-735d-4573-8f13-c5226575613f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42b557e2-0ecb-4459-88b9-851a0ba10fd5",
        "cursor": {
          "ref": "aaafdda3-0f92-4ec6-8ebe-00d3997f2daa",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0ff7b328-2177-4262-89cc-3a6b15832c1d"
        },
        "item": {
          "id": "42b557e2-0ecb-4459-88b9-851a0ba10fd5",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "1b20de2c-9263-4385-9db6-efe404ba5975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6941d438-e73e-4466-acdb-f7c42fcf0b21",
        "cursor": {
          "ref": "6448deb7-0135-4956-a07a-57d93f85fe9c",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7802a512-16e6-4f56-90fd-ed228298b3e4"
        },
        "item": {
          "id": "6941d438-e73e-4466-acdb-f7c42fcf0b21",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "6c9c6f8a-9e29-456d-9a33-96387359a3be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a48ba5-d228-4005-b386-9eae8dc932f2",
        "cursor": {
          "ref": "142cd752-0fba-4dd0-8629-20cf8499fe7c",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "4b3c8bb2-ca2d-4ada-a9b0-b0dbb47b7921"
        },
        "item": {
          "id": "b2a48ba5-d228-4005-b386-9eae8dc932f2",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "4603605e-6ace-49f2-a430-347396009696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b6c2bb1-7d08-4b87-82c8-b6449af26819",
        "cursor": {
          "ref": "06bd7c32-f42c-4fa0-a18d-e8d35367e66c",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a174cc3e-719f-4727-b2d3-17e6414b3b67"
        },
        "item": {
          "id": "5b6c2bb1-7d08-4b87-82c8-b6449af26819",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "be46243b-02d2-4283-87d4-69564c67b28c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3e59396-c506-4109-b11f-d85efefa2088",
        "cursor": {
          "ref": "555c5989-7d23-40bf-b72d-02fa1c4631af",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "8e2d512e-ad3b-4545-b37f-1c01225a6c35"
        },
        "item": {
          "id": "f3e59396-c506-4109-b11f-d85efefa2088",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "9815d8e0-5528-4cc7-9c75-2289c2162798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d57d04f-c37d-4e23-beb6-18b627bcc1cc",
        "cursor": {
          "ref": "3cbd9a90-7465-4bbf-8046-7d49f7b8af13",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "8e60b07a-5969-45a0-81fe-61f711ce735d"
        },
        "item": {
          "id": "7d57d04f-c37d-4e23-beb6-18b627bcc1cc",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "4bbea857-4570-405e-ba89-2e1743d18691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eded556e-92d0-4ace-9554-a4790dc2a09d",
        "cursor": {
          "ref": "1b4416c2-8496-4a28-880c-bad605b5ec7b",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "90119caf-e4bc-4137-a18c-2970c182c474"
        },
        "item": {
          "id": "eded556e-92d0-4ace-9554-a4790dc2a09d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "7f88e7cb-3405-460b-b1e7-5fdc0fb2278a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be3317e9-315c-4504-bfb8-03d87f36ff6e",
        "cursor": {
          "ref": "cc8dde31-b781-43e2-90ab-d96546664dc2",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4e10483b-555b-4cfe-be27-9f56f12cc74b"
        },
        "item": {
          "id": "be3317e9-315c-4504-bfb8-03d87f36ff6e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c66c8b11-fc9f-4e57-9823-ee3b3d51730f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "203f1d41-914e-44ca-80eb-4d4d4e386254",
        "cursor": {
          "ref": "fa3089b0-3671-4e62-865c-80572136d439",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f88fbc09-d3ad-4e74-8d56-3878971b6592"
        },
        "item": {
          "id": "203f1d41-914e-44ca-80eb-4d4d4e386254",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a68c93e8-6bea-425d-8bf1-2fb1bb8bf58c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b576e007-9a74-43ac-b448-d06f36a4f4af",
        "cursor": {
          "ref": "8f0bc91f-779c-4c40-8c16-a5f81bd3b30c",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "69affa22-2cd8-45df-a100-f2be9c7c5b92"
        },
        "item": {
          "id": "b576e007-9a74-43ac-b448-d06f36a4f4af",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b9e13bf1-5020-4ee0-8ce5-43b480fd607d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea70bae-ddfc-48ca-9cf3-14e0fa7ec45f",
        "cursor": {
          "ref": "0ea089f8-4119-4b3b-ade0-048cc150f3c9",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "8f99ac22-68ef-49b0-829d-2b565a03e3bd"
        },
        "item": {
          "id": "0ea70bae-ddfc-48ca-9cf3-14e0fa7ec45f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ad764066-94fa-46f5-9d59-6c221ecae49d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31be5891-9341-479b-8594-4ee9ea2a5a92",
        "cursor": {
          "ref": "3eda8a86-c335-4d10-90b1-f5f8d5828979",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "39bc674f-7306-4971-aed1-c8c5204ac4c3"
        },
        "item": {
          "id": "31be5891-9341-479b-8594-4ee9ea2a5a92",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ae494629-8641-4ef2-aac6-f386a83d990d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fe173b2-13e2-464c-b79f-63e5a05013b1",
        "cursor": {
          "ref": "cccccf62-0787-44a4-8f1a-56f745afd2ee",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "9e3718b9-532f-4e1c-b4d8-8223b6562f26"
        },
        "item": {
          "id": "4fe173b2-13e2-464c-b79f-63e5a05013b1",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "0127aefc-7cc9-45e3-9ba5-e0cb75ef7da9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35943400-9985-4b73-9897-141b8e8bbcd2",
        "cursor": {
          "ref": "14ba215f-ef2d-4f56-9f27-9ccc146ed527",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ceb35334-7939-44c5-948c-36baefaabb07"
        },
        "item": {
          "id": "35943400-9985-4b73-9897-141b8e8bbcd2",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d8e18573-9f85-4662-bdea-823b05da3d8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "034ab9b5-383c-43a2-ba3e-61ad17ca005f",
        "cursor": {
          "ref": "a501aac6-cdac-44fa-865b-f0bbe10899a9",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "6ad32c66-c112-4566-bbe5-6390967a7609"
        },
        "item": {
          "id": "034ab9b5-383c-43a2-ba3e-61ad17ca005f",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "fa509bb6-8aca-4f63-9f02-746f5521dda4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f03d4dd5-3f09-482d-9f30-f9097844cb83",
        "cursor": {
          "ref": "360cda25-0022-4800-9f17-eab582e4fade",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "4d5d9a9e-21f4-4fc7-baec-2043f5baf7a8"
        },
        "item": {
          "id": "f03d4dd5-3f09-482d-9f30-f9097844cb83",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c3c1e25c-82ca-416c-a7ef-0021d78c08af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02e78376-9581-45e5-ab7d-6b9066079227",
        "cursor": {
          "ref": "e7b4c3cf-351d-4e4d-8e4a-abf6c864008e",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "bef5efed-6b90-4feb-993e-c429bf092b3b"
        },
        "item": {
          "id": "02e78376-9581-45e5-ab7d-6b9066079227",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "993fbace-4451-4795-aaf4-3e670ac0bbc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48304487-a5fa-491a-b362-f5d6ce4bd3dc",
        "cursor": {
          "ref": "1ba87c7d-c3e0-403f-bc0f-0ef82239c00a",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ea21045c-bce0-439a-9525-82e706bb6599"
        },
        "item": {
          "id": "48304487-a5fa-491a-b362-f5d6ce4bd3dc",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "980b4c3b-b9d6-44f1-a7a7-d96cd9d5faed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6fc6edc-0d83-4f6b-85bc-245bf9ebc2c3",
        "cursor": {
          "ref": "c59f9998-c7e3-41a2-bbaa-783ce94f1b3e",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "22c22ddd-b00f-41f4-893c-aa792d73f8b8"
        },
        "item": {
          "id": "f6fc6edc-0d83-4f6b-85bc-245bf9ebc2c3",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ac78b9c4-8edf-49b7-b8ea-87f2173015c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64c88419-eab6-4382-98da-f5089f1aeeea",
        "cursor": {
          "ref": "8d75de63-ebbb-49e2-be5c-0efb277937f8",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "1ef69262-d6f6-4c63-b12b-04dbabde032e"
        },
        "item": {
          "id": "64c88419-eab6-4382-98da-f5089f1aeeea",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "bf846c27-e9a0-47af-ab56-cf39f0c0f563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97ce9d08-caa8-457c-adc2-49fc137f839f",
        "cursor": {
          "ref": "fe320ba5-c5e2-4e21-994f-cceb257328f5",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5d0958f6-10e6-426e-90b0-9a01efb1da9c"
        },
        "item": {
          "id": "97ce9d08-caa8-457c-adc2-49fc137f839f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c80a7604-9034-44a2-8897-64e23aab12dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a27e983a-c628-4dc2-b015-1e5ab0f0562d",
        "cursor": {
          "ref": "152c83d9-ba97-4d8d-a32f-4e245e52f51c",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b4f7d5a9-157b-46b2-9b0b-239f1648fc2c"
        },
        "item": {
          "id": "a27e983a-c628-4dc2-b015-1e5ab0f0562d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "01ac662d-7d5b-456f-96e9-2ddcf7a8fd8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29257622-a2b8-42d9-8808-2e72072e024a",
        "cursor": {
          "ref": "90deca61-3f71-4f43-a17a-7d33285b246f",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c57ee5a7-102f-469d-9441-4041fa202a16"
        },
        "item": {
          "id": "29257622-a2b8-42d9-8808-2e72072e024a",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "b0c7152a-29bf-4abf-a0b1-6278c26c864e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f64961a1-7969-4a92-a686-8125478d7390",
        "cursor": {
          "ref": "cf9b3b6d-5143-479e-9f7b-9066df1427f1",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "483bb5b3-2248-4126-a44f-15c791dfa755"
        },
        "item": {
          "id": "f64961a1-7969-4a92-a686-8125478d7390",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1623b312-e37d-4fe2-a202-266b75fe1bc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed84a3b8-5c59-4080-a952-92860c70f57d",
        "cursor": {
          "ref": "f2aa316d-eea4-49cf-b550-b38eeed2a158",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "80a1ecbb-a024-4289-8461-85e4f1006868"
        },
        "item": {
          "id": "ed84a3b8-5c59-4080-a952-92860c70f57d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "5bd89c42-81a0-4604-a633-00641ff8312a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71714ade-c898-4d89-928f-765a4e9bf84d",
        "cursor": {
          "ref": "bca8107e-d3e2-4b13-93e9-795f201644cc",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "7f84b6f0-21ca-4dc8-992d-0c9429ad7766"
        },
        "item": {
          "id": "71714ade-c898-4d89-928f-765a4e9bf84d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "11355f27-86b8-4cdf-b2dd-94fe209cdcb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0062f4ed-c62c-4e76-853e-1b711ba5cec5",
        "cursor": {
          "ref": "a5511f23-25fa-4e26-9900-41b1ca12f4f9",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "3645f5de-ad0c-4cdd-9057-493d3ea77858"
        },
        "item": {
          "id": "0062f4ed-c62c-4e76-853e-1b711ba5cec5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "70b237fc-3fde-4bab-afe6-bcf479121f0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf4f933-fa56-4dad-8ecb-ee6e62fa04ff",
        "cursor": {
          "ref": "569bfc3d-a99c-49b1-9d7f-3aa24d30666d",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "cdd8a05b-e91a-406a-a2f0-550d3265ea31"
        },
        "item": {
          "id": "9bf4f933-fa56-4dad-8ecb-ee6e62fa04ff",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ecc8ccec-7c72-42fc-98f8-8351377a14ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6930820d-5748-44b9-8c5d-fbccafb909d1",
        "cursor": {
          "ref": "5691cfc9-04c7-4323-b064-443c5a2f869e",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "8b89eeec-1e36-470c-b033-c36c2fc75c42"
        },
        "item": {
          "id": "6930820d-5748-44b9-8c5d-fbccafb909d1",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a41e4855-68a0-42ac-b2d5-76796c26c38d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab8108bb-0f08-4978-95af-337525487af9",
        "cursor": {
          "ref": "12bb3e1f-29cc-434e-82ce-269a07a076b9",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "0e7bb35e-2e95-4edb-ab90-53fbb5091746"
        },
        "item": {
          "id": "ab8108bb-0f08-4978-95af-337525487af9",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "bfed99d7-17dd-46ed-90cc-892d1e2d70a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8369a0a-1482-4a0a-9771-0b694089b5e9",
        "cursor": {
          "ref": "4b2d3704-ca1f-4aaf-bec2-b36d1d36f68b",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "36bbad5d-6780-4043-b697-805f58ad4036"
        },
        "item": {
          "id": "d8369a0a-1482-4a0a-9771-0b694089b5e9",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "aa16de6e-6ed5-4cfb-a3a2-03397033e35d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e358cf38-2bdd-45f8-b001-a9db8a7eadae",
        "cursor": {
          "ref": "5c931a45-47f9-407d-9620-4f4abd757930",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f52324f3-3651-4faf-8246-fea532175e52"
        },
        "item": {
          "id": "e358cf38-2bdd-45f8-b001-a9db8a7eadae",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "445e8bbe-9077-43e2-9a81-07831c91be53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06de4e8f-fab2-4907-8745-592256c536e1",
        "cursor": {
          "ref": "c6ee5b0e-ce5d-49da-bf74-ed7c81fe76c7",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "ae20627e-e3e6-4af1-af26-1d7de28383d7"
        },
        "item": {
          "id": "06de4e8f-fab2-4907-8745-592256c536e1",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8c8148d8-3fb6-4638-bb76-ef1017c9945f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24f78a28-0d19-43e5-b562-ebf0aa69091f",
        "cursor": {
          "ref": "dac3ef0a-3a3f-4714-9999-1aa916de67ef",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2070b22e-9ca8-442e-b991-7d33a690441d"
        },
        "item": {
          "id": "24f78a28-0d19-43e5-b562-ebf0aa69091f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "9d546240-275d-4673-9c07-7608e74aa569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3809a428-c9dc-4c82-bf66-9fcad0b07c73",
        "cursor": {
          "ref": "269a85a7-a64f-467d-bd85-7a8dc4f33409",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "af11bd97-1f27-41f6-a916-11e929352451"
        },
        "item": {
          "id": "3809a428-c9dc-4c82-bf66-9fcad0b07c73",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "4f9ec144-9fb7-47cf-b386-28068db9d994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc84fd0c-6d3e-4d73-b666-b7ad1e55988e",
        "cursor": {
          "ref": "77f8c0c9-cf31-4b59-a4f9-2549f077ebe4",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "40022cf0-6c73-4fde-b877-c4f709e59f99"
        },
        "item": {
          "id": "bc84fd0c-6d3e-4d73-b666-b7ad1e55988e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "9a74ce0b-a869-4839-84b3-d752eef13410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d1d17f0-862c-4a2f-9422-db177760e083",
        "cursor": {
          "ref": "d3aa90b0-5b21-4ff7-aa90-92e2ad9486ff",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "7914435f-df3d-4dfb-a7a1-46d332ebd9c1"
        },
        "item": {
          "id": "1d1d17f0-862c-4a2f-9422-db177760e083",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5b2620c2-ac26-4dc8-8a44-8d99394c29ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16f9a64a-bb9c-4baf-b12c-e084626ba39a",
        "cursor": {
          "ref": "3f6ea3a4-a90e-4e13-a8ba-d5ee17223a09",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ccbfa5f6-3614-4357-9031-900683279f63"
        },
        "item": {
          "id": "16f9a64a-bb9c-4baf-b12c-e084626ba39a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7516cc92-2445-4ba2-8aff-122e783fc5b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd950d4e-712d-48ec-a084-152c319a3603",
        "cursor": {
          "ref": "f33aacf7-904b-47eb-bafe-c99bb9003f4a",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "91f2ebd5-4250-440e-a7f6-e0213a796e3f"
        },
        "item": {
          "id": "cd950d4e-712d-48ec-a084-152c319a3603",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8748091d-5d50-4333-a1d8-be2598d54cd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a281926a-f51e-46e5-8a0c-cdf2737e5112",
        "cursor": {
          "ref": "4042a09c-14e5-4276-8ac0-093ee4d5a7df",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b0bcd5aa-280a-437c-be9d-f712b68501bc"
        },
        "item": {
          "id": "a281926a-f51e-46e5-8a0c-cdf2737e5112",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "cea9abaf-fa54-4c0b-98ae-a5c319819021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d509fdf-8589-44e5-88bb-05306124c2a4",
        "cursor": {
          "ref": "4f2c33f8-0fbc-4883-a068-f85632276233",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "fd9544e9-79a5-48de-bb53-58ad517f589c"
        },
        "item": {
          "id": "6d509fdf-8589-44e5-88bb-05306124c2a4",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "1575feef-7859-4c91-848c-798576d26949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4fae883-ca5e-4e4f-b56a-d8c89d073362",
        "cursor": {
          "ref": "abd96544-cb0f-4e7f-8977-7c9af2cadc61",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "40ab57fb-e1c4-4237-9001-3ec15b43da51"
        },
        "item": {
          "id": "f4fae883-ca5e-4e4f-b56a-d8c89d073362",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "fa8c4c64-8a6f-435b-b2fe-eb29852a641b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73017708-be3f-4959-84aa-67f707d8e5c2",
        "cursor": {
          "ref": "6a748099-fa5d-4548-a77c-a62898b5a3f7",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "3b3b3113-eee5-4402-8ed7-89b95b3592eb"
        },
        "item": {
          "id": "73017708-be3f-4959-84aa-67f707d8e5c2",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "898548dc-1c2e-46b1-b282-214ce6422608",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c0973b-0665-43c0-873a-1db809e0d4f5",
        "cursor": {
          "ref": "cf138a77-8b2d-4c5c-9474-b52301893b97",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "9bb82df9-a401-4056-9e52-e04ae5650a65"
        },
        "item": {
          "id": "12c0973b-0665-43c0-873a-1db809e0d4f5",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "949bfb05-096f-4e7f-95c0-3f83ccf7cf81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 876,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2519b1d9-dcf3-4d04-8ff8-f622263a9f2a",
        "cursor": {
          "ref": "3905cee3-7fd8-4c55-9eb0-3b6681614eb8",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "bc5a357d-bf06-444e-a6b5-8050acff241e"
        },
        "item": {
          "id": "2519b1d9-dcf3-4d04-8ff8-f622263a9f2a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "6da8af84-cb65-4b25-8512-7c65c611d78e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10787a96-bdaf-4292-9829-1abbf48508e4",
        "cursor": {
          "ref": "337388bb-4938-423c-8640-3f24c2757231",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "3a2ec5f5-fa69-48ca-83c7-e73ce6d476ba"
        },
        "item": {
          "id": "10787a96-bdaf-4292-9829-1abbf48508e4",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "70c623e8-9708-4fb6-a4c4-62fbd321e7f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fd285fa-b3c4-4294-8422-771f7d9efabc",
        "cursor": {
          "ref": "30536f13-ff69-4cdf-95c5-5331d2a1b0c0",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "bf775464-43e2-4263-9fcb-ceb815415cf5"
        },
        "item": {
          "id": "4fd285fa-b3c4-4294-8422-771f7d9efabc",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "43007e9d-7010-462f-8e60-622af49ef88d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86b456e4-b408-4d28-8bbd-a860472eba30",
        "cursor": {
          "ref": "cdad1214-268a-428e-bc9f-ef1188e12782",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "05fa00aa-658e-4fb9-8651-00c73d999802"
        },
        "item": {
          "id": "86b456e4-b408-4d28-8bbd-a860472eba30",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3b0b0d2f-d21c-488e-b215-2782de2cfab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37e9ec5c-6091-490b-8017-5060ecc82ef8",
        "cursor": {
          "ref": "86b62499-34eb-4524-a8dc-42e8d815444c",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "7704ddc5-4431-4f93-9474-e49bec8000e0"
        },
        "item": {
          "id": "37e9ec5c-6091-490b-8017-5060ecc82ef8",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7164a6bc-94e0-496a-82f9-663373f1c323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e16ae8b3-c45d-4bb4-8c30-340b28543f98",
        "cursor": {
          "ref": "e687e065-e9ea-4fa3-bb4a-09d441a1cd1c",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "27d1188c-9004-47f0-a74d-2faff185536f"
        },
        "item": {
          "id": "e16ae8b3-c45d-4bb4-8c30-340b28543f98",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2249f85a-2d79-4b2c-b0e2-ee95d229d425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a10207d8-f689-4b20-a052-87fdffca072c",
        "cursor": {
          "ref": "5d9ce395-d7b4-427d-a645-c412ddc713d9",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "62dfde60-5a33-4f12-9028-d1d123e847eb"
        },
        "item": {
          "id": "a10207d8-f689-4b20-a052-87fdffca072c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "358f5341-3fd0-4f05-8a55-935d573a4df1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6960da4a-7225-41b7-9a7f-f5f05ea68387",
        "cursor": {
          "ref": "6645b0a4-4a3b-40fd-96db-8e1c4836e033",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "794df155-35bd-4ba8-9f81-910806d24592"
        },
        "item": {
          "id": "6960da4a-7225-41b7-9a7f-f5f05ea68387",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "99789001-5234-4793-a789-59052809a6f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4682664a-e856-4a4c-a294-316b488bee45",
        "cursor": {
          "ref": "474c0d6c-f328-4560-9b16-cd30f73735d0",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "6334e95f-8eb0-4884-b969-910c697ab55f"
        },
        "item": {
          "id": "4682664a-e856-4a4c-a294-316b488bee45",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "812a4ee9-6566-4f5e-afc9-e0e9ef1e809c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ab68906-f33b-45dd-aaac-58dc721f60c4",
        "cursor": {
          "ref": "4b581b3d-37cc-427f-9e19-e46a957fa580",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "d403e3a1-c46f-4dc4-9a6c-5af37e6d8634"
        },
        "item": {
          "id": "7ab68906-f33b-45dd-aaac-58dc721f60c4",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "6c28e9b1-5456-47b4-91f0-ccbd650cac33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cdcd58a-dd95-431d-bfaf-4680421c73c8",
        "cursor": {
          "ref": "ea221985-ac36-47be-9020-b6d0d9d8ebcd",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4d4f31c5-fbe7-4b5d-8b4e-86e250c9f751"
        },
        "item": {
          "id": "3cdcd58a-dd95-431d-bfaf-4680421c73c8",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "825a9ba7-5ef0-40e4-98a9-843792bd9ed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f46dd915-c46d-4f13-a077-ef27c8a9c5ed",
        "cursor": {
          "ref": "b2548bd1-1d03-4ba8-a917-41f5317437db",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "b001fe8f-402c-41a9-be01-a1e8440e371b"
        },
        "item": {
          "id": "f46dd915-c46d-4f13-a077-ef27c8a9c5ed",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "4b4848ac-0751-4dd0-9d41-1730be87cce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "971858d7-1499-4f24-a03e-277a483eddf9",
        "cursor": {
          "ref": "370e838d-0b18-4334-b1e6-32640ea3a353",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "cedeb1fe-8348-458d-b880-fad280dd53b9"
        },
        "item": {
          "id": "971858d7-1499-4f24-a03e-277a483eddf9",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "71a862b3-0e2c-4fc2-b742-47055c16dc45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73afad4e-6160-4f63-9a14-dbdc3056db52",
        "cursor": {
          "ref": "97781370-b07d-4315-894b-96be642a4a6a",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "a407fad1-1a3b-4434-947e-6fcc91553bcf"
        },
        "item": {
          "id": "73afad4e-6160-4f63-9a14-dbdc3056db52",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6efea3d8-c300-48cc-ac78-3fd8347436e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d2919d-3258-40c2-a126-86804709c730",
        "cursor": {
          "ref": "70ce4476-9aac-4289-b386-6a24f6f2a24a",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "b3c22441-d8e0-491e-87ff-5b1170e375ce"
        },
        "item": {
          "id": "73d2919d-3258-40c2-a126-86804709c730",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b5773ee9-eab2-4582-b237-a8ec76b745ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c6d93f0-2e66-49b3-94d9-f50971154a0d",
        "cursor": {
          "ref": "ebda9755-178f-4203-b65a-10792c147abc",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "f67b7c5d-9f6d-4136-ac38-ea4f211849a5"
        },
        "item": {
          "id": "2c6d93f0-2e66-49b3-94d9-f50971154a0d",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a0d43e49-6741-4866-9ada-cd1af710773b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b28ad51-6ee6-41c2-896a-f082be231127",
        "cursor": {
          "ref": "829f6e74-6ff0-41bb-a9ab-8218c5f6219d",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b2ecefa0-c702-4cd2-9eeb-f93856077ac6"
        },
        "item": {
          "id": "5b28ad51-6ee6-41c2-896a-f082be231127",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "5a1775e8-140c-4813-81d8-757ba133bdc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ffb55c5-9668-43d2-859f-14709b349028",
        "cursor": {
          "ref": "3eb3055b-f121-41d1-96e1-a55125cfce42",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "7ec1b240-d423-42ab-a566-617ed029f019"
        },
        "item": {
          "id": "5ffb55c5-9668-43d2-859f-14709b349028",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "58e099b3-831e-4b2e-bf7c-c3701d80cce2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62b61cfc-8e81-4bb9-81ca-3f36d98fab0f",
        "cursor": {
          "ref": "986e32dd-89cd-4202-bb03-feb126332b9a",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f6b0bad5-cd28-4649-9629-17b59cb94106"
        },
        "item": {
          "id": "62b61cfc-8e81-4bb9-81ca-3f36d98fab0f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "655a1159-3fc6-4411-ba12-9e56247cd8e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fd7c7f2-3a6c-4a88-9a0b-489f74fac609",
        "cursor": {
          "ref": "c4131bf6-d202-4fc5-8bd9-bc368d49651e",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e8b2aea0-ae10-4817-be7f-56977571ff7f"
        },
        "item": {
          "id": "0fd7c7f2-3a6c-4a88-9a0b-489f74fac609",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5b9532d1-a451-4b4d-bd84-315c562aeab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcde5c18-e08d-4801-a881-4ce1596c5365",
        "cursor": {
          "ref": "58ff35f0-d8b1-43ed-ae6a-eda9f831c53d",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "779c8778-922a-4bbf-8b17-2fba8d0eb893"
        },
        "item": {
          "id": "fcde5c18-e08d-4801-a881-4ce1596c5365",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2a79c9aa-8916-4233-afe4-7167ff5880a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "680faecd-9799-4b55-87ea-9c16a7ee82c4",
        "cursor": {
          "ref": "a0f9e5aa-bec6-44d3-91aa-442e4918babb",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "a1baf6ee-b00c-46d0-9b68-98080e4c0c62"
        },
        "item": {
          "id": "680faecd-9799-4b55-87ea-9c16a7ee82c4",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d3b3982c-c76f-4f32-a0ca-4ba26bc14858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2176d010-6eec-4048-95cc-b4d3955390d6",
        "cursor": {
          "ref": "e037041a-156c-4dcc-abd6-3691f113293c",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4887e165-fa8e-481e-84ba-e06be597603c"
        },
        "item": {
          "id": "2176d010-6eec-4048-95cc-b4d3955390d6",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d3ae114d-728a-4d2e-b0f5-134d0a110cc1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "439da20b-b448-47b0-8411-6d1984be0130",
        "cursor": {
          "ref": "703d4955-e990-490b-b7d9-b9c58f2fa2fd",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "6d449708-709e-48fa-b835-18cea0008a68"
        },
        "item": {
          "id": "439da20b-b448-47b0-8411-6d1984be0130",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3c700cff-0dac-4aff-911a-cbafef87c333",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "de691d45-95ef-4e04-b13d-df4b02b8ea34",
        "cursor": {
          "ref": "a2368f15-3888-40a5-b473-d082e6f7e830",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "eb5028cd-d8af-4f9d-9b3d-97537fb3a48e"
        },
        "item": {
          "id": "de691d45-95ef-4e04-b13d-df4b02b8ea34",
          "name": "credentials_verify"
        },
        "response": {
          "id": "24defdd0-866e-4201-b760-54aa807cfff8",
          "status": "OK",
          "code": 200,
          "responseTime": 1619,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f141b840-a1e2-422e-a20f-fb9c58e7b45f",
        "cursor": {
          "ref": "cdc63a7c-788e-4d25-b9eb-2f1240d3b50e",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "0e85fa65-dc05-4635-9f3d-57daa133acb3"
        },
        "item": {
          "id": "f141b840-a1e2-422e-a20f-fb9c58e7b45f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0fcab07e-3ec6-41e3-a735-dba65d7791ea",
          "status": "OK",
          "code": 200,
          "responseTime": 2146,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "49ad4039-6170-4c95-ac05-4068dc062d71",
        "cursor": {
          "ref": "5f4399eb-fb52-4b5b-bffa-da9b224d42d6",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5df7e74b-019f-4f8c-ada9-099da8a15520"
        },
        "item": {
          "id": "49ad4039-6170-4c95-ac05-4068dc062d71",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e2e8d366-3c98-46aa-9966-ffd86f75fbb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "49ad4039-6170-4c95-ac05-4068dc062d71",
        "cursor": {
          "ref": "5f4399eb-fb52-4b5b-bffa-da9b224d42d6",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5df7e74b-019f-4f8c-ada9-099da8a15520"
        },
        "item": {
          "id": "49ad4039-6170-4c95-ac05-4068dc062d71",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e2e8d366-3c98-46aa-9966-ffd86f75fbb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "bedd17dd-2650-4c2c-98ba-0b70c254a7c3",
        "cursor": {
          "ref": "5725ebe3-3112-4198-b21f-61a45c30143c",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2790a78c-fed3-44da-be78-d5eb6a42efcb"
        },
        "item": {
          "id": "bedd17dd-2650-4c2c-98ba-0b70c254a7c3",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "aa83db5f-f16b-441c-8745-73cd44e6167a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "1a98a013-ed4e-450b-848b-33ff4d1c2210",
        "cursor": {
          "ref": "97dc0d98-1761-4420-b87b-e4cd7b3a1b0a",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f09b3d3b-f718-4edf-a076-0d910c4939df"
        },
        "item": {
          "id": "1a98a013-ed4e-450b-848b-33ff4d1c2210",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "abd183ad-ada8-48e6-80af-880df99cf13b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      }
    ]
  }
}