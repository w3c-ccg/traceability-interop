{
  "collection": {
    "info": {
      "_postman_id": "faa02ea8-9433-45af-b9a7-893a98130da9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "8476acbb-154d-4f4e-beb6-683504acd851",
        "name": "Clear Cache",
        "item": [
          {
            "id": "8bd524bd-0f02-45e6-a81f-9eef6626e6d6",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "21ab91b8-6219-410d-b849-7fce755ccf66",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "35f67a12-860d-4642-9e35-dd3ca99f9ed3"
                }
              }
            ]
          },
          {
            "id": "6062c5bd-ea1b-4b23-8201-ca71c93a2bad",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4fe08a68-bc0d-4966-ad81-3e02944e8e2e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7afecd54-5cb5-4720-bd85-7db850fb09c1"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "81cbe697-8419-4624-9ea1-72c62cfa7b30",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "decc6c94-8b1e-4999-992b-e0d9114184cd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c4bb954c-8b72-45c9-b4d5-9dd1eaf7343b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "14b249c6-9479-4bc8-a711-5d9fdd1c2b41",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2e4972d0-dae4-4f05-8cd6-4309cf2dced7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2d299cab-f875-4f0a-b90d-9d775ae373d2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fcecd125-ebac-4a4d-b751-8aabbe054fa7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "06b92fb3-9574-4c10-b990-621179de97e9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8b3b720a-f112-4425-b3cc-2c143e345d23"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "88f3e3ae-97bd-4051-b5bc-397217425730",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c3d9ee7b-45f2-4f11-94cd-75efd21528b3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "91b21c10-0d34-43ea-85ef-60c33611a9ac",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2ac6dda6-44d4-4159-8be8-aac3de030a4a"
            }
          }
        ]
      },
      {
        "id": "77cc23f3-a03d-4fe5-902b-6b38a2b90958",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4ffe3e64-3924-4792-ae7f-0d4abad0e7d5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "919adaa0-e911-4148-b929-246f30b9f573",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ec22d235-1f6d-4a89-9ef1-5275245cf59e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e431b4-87c8-45f5-be82-efc5f3f0e306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b8e5b851-4d22-41e2-a73e-b09bd826748a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d23f4bd-dd1f-457f-afde-4edb8e36e976",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3400a25-dbd7-42d2-8dc4-e26835b78780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0690554-1005-4e44-8af0-e29906ed3aee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c342961-4ac7-4261-91c3-ad4d6cf2bd22",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b22b1a-8a6d-45bb-95f5-99dc0c1fa81e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a9edeb5a-3cbf-47ea-95ee-1680771da112"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b3fc94d8-1914-4109-80bf-3e141eca887f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6005b6b7-64c1-4d1d-b511-8a5cd2bff37b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bbcb33c-ef0e-49b1-a01e-2b980ca8a8dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ddc08204-0946-402d-aa38-fda7d8b6b1d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f84dd630-5991-4fe9-9491-eca96ff5b3a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c1736ca-37e6-4e91-b923-4f33df050b1a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8e42fb0a-adad-44b9-9379-8ca7d66c034c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d93e1fe1-2378-4d3c-b360-18bac34b03ee",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "41998c77-4618-48f6-8ef7-2933bb1feb59",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "97767456-159b-4eba-a2b3-8f3651d3bb5f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c3db1339-f190-447a-9986-3a75c0681a79",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "16fdf85a-899e-4690-8c69-1168c3ce9d77"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "91cd8758-705c-4578-8b74-541c22d86070",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "68a6e337-2a35-4710-b0b7-1b0ed05fbe64"
            }
          }
        ]
      },
      {
        "id": "f1d8b5d6-a305-4ef0-8fdb-1b1a856ba347",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "21ec6fe9-2bef-4902-af77-eae285ff9e8f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a76f2d70-1151-4795-be40-81ec7dfe494e",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "511b3a0d-860b-46b4-bf6c-cb34df52ab65",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "521ec658-39dd-4d78-967f-2a370a7eb149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64bd9581-bfb5-4aa5-835a-76b2205f307f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d97cb6-b809-44d7-9d81-67af89a3d30f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "147a2386-1a05-4589-a382-deab75c48d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f35978fc-e13a-40df-85d7-e407a1d2fe59",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb33534d-3b7f-41cb-b37d-0299e2ad343d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "309eadd4-8ad0-47f7-abb5-9c226a06c39d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d1d244-24ab-4639-8c84-2c21070c7c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "27cac9e9-74e4-4f4c-8ad0-3f407431bf0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8a08a84-f6fe-47cc-baff-bb5a64a8a769",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4f743ac-b1f9-4550-8320-fc1ff9a6ee43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc1fe832-26ff-40dd-86c5-589e678e5265"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cc9a4c0-bdca-4728-84d8-25984005c279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d95611f-3a82-4874-a9a4-126618904459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e6c81b7-2bd2-4d5e-a2ef-47c197421167",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "656ae581-071a-4ffe-98ee-c502b9dec772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b11ece98-c065-4c9b-b705-545468d7d840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cba2815-6bff-4da4-9de1-b8ae229fe29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b62a4b4-977b-4fdc-81ff-09587c49c3a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa2c986-df1f-4d17-9491-52fc688087e3",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "166e14a9-71d5-47ab-8af6-898aa2bd15b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60de44b5-4b36-479e-9c97-21d4213ec2d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9741a441-4cd8-4fda-b1ce-b1259628759a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31de02e9-bcd6-4ce8-90cd-fb3b2e765526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "586a211c-a58c-45e1-acc5-3efef232e1c4",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "716c712e-9846-472f-80c1-486f0f8c5724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec0e387b-7d15-4c90-9313-cf3a1c5ec532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f31cfe77-d06c-45af-8d60-f9ea81906504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6601ab8f-4b65-4dac-94ab-a89cb7b2ebb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65773312-bf74-4af4-981a-24addef2ab77",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66711d6f-326b-49cd-8f49-53ad3dd47423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c3139cc-2b4e-4b72-865c-33b08b90d723"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7854ac50-5e69-411b-888f-3b50edefb78d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b342a75a-0047-4ef4-8fa6-220e753a8966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c994fe5-dbf0-4085-93ad-0eed611641f5",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c82e033-4b80-43fb-835b-d25f06a52fb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6419e8d-aadf-4fbb-b780-9b6a527bca90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9764bbab-72bb-4d57-a2eb-75734a95dc09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2639086-8734-4f2c-bc45-540e480f89f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c298ef7b-59f1-442f-898c-e72514926706",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "366845fd-1992-45b0-ab2b-b11987e0ca76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2755d788-984c-423a-aa61-25e4778773e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed83f40-3d25-4433-8437-e0a21c45250d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bbc55939-1c53-4ca1-912b-805ec20b48b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e844b16-9624-43d8-9f28-57cd09fbe655",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e56ea60-8817-40fe-b05c-a4330bcbe2bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39f7f325-e50b-4a32-bf7d-b6b3ca0f0370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbcacd91-0055-4c65-87d8-28e4950cdf9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6a933307-c774-4f08-9104-97a869c2b999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d265ef00-0908-4ab4-b463-8841539c559d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "112aba5b-dcdc-488a-9728-8d864c2c9b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9aa29f1-5f0c-4860-a52a-ca91f768b0af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bb1f7e0-e4dd-4149-b564-dea5077da15b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "efaed7fb-6772-4b10-b8fd-c99a4b4da3eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dff68f41-4821-4e0c-893a-75a06194522e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61efcb83-b126-4965-86a0-9ef0615dfd1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bd34516-8fdd-49e2-982f-8eb0292112b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b0506e-be4b-47e1-92a3-ae8581a4967f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb32ebdf-f4b7-4296-805e-96d2af286639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a19e1b3-1448-4e50-bcb0-75133f45a334",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "084eb676-c629-4d22-8eed-d80205bdbc3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7428f61-9c6e-4382-abbf-fc174fcf5afe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da124a0-f340-44cd-be27-6b99e64ee67a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85c89bb7-28e2-4f03-8d39-8a5c242fb17a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67a4c699-8223-4e24-b613-516c60a2b9ac",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f5ac63-2125-4563-989d-13c93056763f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfd0d308-837d-4789-95e1-63e502375626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf7cc231-f8dc-408e-9a8a-c306f8141d46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d5d493f-8298-4434-a6b7-f0f50e383122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f8d516d-5183-41e5-a3a4-82b8644b6466",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f69c075-19b2-4fab-a562-381665c3e336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0053906-368f-428a-b7ea-02f177641ee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4b0cc5-4eee-48c5-a88e-7504e93a4d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae387647-bbfb-4838-94e3-e452dc70d944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e694d32-de02-4f6a-b419-713b95f1f036",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf3627a-b1b0-4955-9537-813216fbc179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53a8e79b-ae4e-4ee6-a5b4-36ec2ed41118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6902ad67-94b5-4193-a79c-6ff11479230b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ace7294-9c24-4111-be7a-eef89265da87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1046b3a8-99fe-4c19-939b-56ac5ebb96d4",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec70477a-3b0f-4129-aa7b-7639fba1a847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6465da10-3c3c-46ff-904f-f0e04c021838"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065ded5d-048f-456d-b143-0b219c61b24c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d271c125-fb2d-4777-9fdd-34d3516237e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d00d9136-004d-4f62-9fa1-cf406c1217d8",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f186dc34-7d10-4813-b2d7-bc60e57a0f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a25b735-8632-451a-9bcb-97e0e9df301d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9bbd72a-7161-4112-8910-d95a052904b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "678ec575-d080-4d6a-b2bb-328586a4b234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7713be14-de7f-40c9-aa5d-1cf66c1204ff",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1328100-85d0-4de4-b5ed-fbdc201f2ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e9be620-8199-40f9-b756-4c5a28ba349f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2b7aef2-f56b-4ff0-bead-44eb33f127ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "057baac8-4896-4e4d-855e-8ac2199483ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f89d159-57b0-4f60-8e6c-e55809176234",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd5aeec5-331e-4cfd-8a9b-3df006e60049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "739e92f1-ee10-49ce-a15c-2aeea94ed289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24f81cb5-2a64-4954-9839-9303edac3571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4aafadb-964e-47c4-a34a-74f111429c6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ebffa05-a2bc-4198-be09-83d3c6ccba6b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7721df25-8676-473d-be88-cf7163e54c62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b57702fe-136a-4b10-97ff-1c3a1d8f8b1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c0656fd-aa63-46dd-8226-9729ae3c47dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "20e8956a-bcaf-4a72-b9a3-2f6d92114608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbf3b7df-0cf8-45b9-8dad-281c0f7d986c",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ebcfa68-a19c-4de2-a9fd-2a3e77924c08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa38a754-a394-4d3c-a338-5e5ce6823e1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71422018-e139-4615-a0d1-1902bde55730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "32954e8b-4cc8-4ed6-bcbf-2c30b9e8a390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ebd4b0-62e6-45ba-a214-81e3d7c7a09d",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c285ad56-4f21-4f3f-925c-748cf9a0fd24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e50c0e2-430b-4406-8d13-235b1f458a9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b09100-5c85-481a-a77b-bd26797fa207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "200a8125-57e8-406d-9a21-9a38ac02b1d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "668995af-2e03-4969-a56c-84b669fd860c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c0f942-bd2c-4507-bc57-7dcd0b5c9780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c29cb7d-eae7-43f4-9652-463481b21d55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a9804c1-99bd-465f-ae8b-459a7e3eb90f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fee989b-0776-405b-8201-b373e54ce364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd2eb44f-41e8-4cb9-a823-8bc224041675",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc8f4f2c-f221-4be0-981b-7d72af68707e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed3828bb-f69e-4c48-a625-1d3c4d5083e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40a01628-9a2d-4aa9-b236-a5b63ab6164c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbe04e1e-a508-4289-812c-e921d5bbf626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0d7cf10-97a5-4f8d-a268-6b89165229c9",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee76c5ff-c09e-4dcc-aad1-761622f48090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b7a6203-5339-4bb9-a584-5131bff8c668"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "170a0894-d4ed-4d5a-9b25-bb524edc18b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "242388e3-4307-475b-9184-8e84e4bf5c9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cc7b74c-1a94-42df-9b9b-69f6b7baab24",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1376db0c-617b-4b88-96d8-6257aaacb7d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aff01633-8bc9-4ac6-8923-10c3bcbd525e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d5cc979-db0d-427c-889c-13bb76e58226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a90efadc-13d5-4e97-8eba-f4244a0be4a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93189710-2c2a-4f4b-8abe-c87304486365",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18c05cba-647c-4f3e-a3de-c0a1593ee1f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a804813-ef85-484a-a9e4-fc1564225777"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4c836e-8d90-4554-b801-c509be654444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "74cf4287-b7c6-48f2-87c0-0f67811c49ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04e68bd8-7da0-41c9-8e59-50df55a054e3",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd0112d8-a1fa-4cc2-baed-da8b3bfc08c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb6fb09e-a3bc-4ba1-b3f3-a8c5b6f350c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffff65bc-8657-42cc-a276-53759ccadc65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ee3d887-f975-4fc5-911f-04a0d87869ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38cd2b3f-a71b-4fd0-93b6-c453aeba057a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b461c3-456d-4dd0-87cc-388b360f8035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd767844-22b0-41ea-bab0-21365a2df3c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "655df463-543b-4a54-a83b-54770e69edb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "28b1ded4-dccd-4763-aef1-987d1363d7c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa7cdd6-d607-46cb-8ce9-18ca5786ef8e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb76905-9fa5-4de5-8fb8-0ac696a3275f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01849c99-6800-4c2d-9a5b-11833cf0b292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11435894-23e9-4c1d-b5a2-530bbedc5ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "20077d40-f486-4def-acdf-0bcd6266eea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92b95a99-7cf7-4952-9070-7a96bc4b239a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a7a6fb4-f1be-467b-954b-860b6cbd63b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "687c3401-af05-4308-9808-4302a5a1156c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71ad2ed5-9535-4d31-9dc1-0cf11fbf7af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab034f77-8493-4da4-be0d-488e89a46628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02c2564d-f6a1-4ce3-a47b-2721446314fd",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17494cb5-c7a9-45cb-a4a7-7dbe69e19986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9269b3bc-8bed-408e-bc95-872c613e2972"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d248e1-9914-421e-a9a2-9abb388f928b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "809359e4-9a12-4f7e-a8d2-0a2dea938b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c7452f-9e54-457a-b9ec-94897ad3bad6",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a30f19ae-08a7-4ec5-b1e4-e61cc93a7456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a42b0d4f-7edc-455f-ac53-1aa82e69a1f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "564a01af-6577-4433-8e12-bcb705e67305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "43277082-364a-4c68-a24a-a121c2b7b5d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1d677ae-4085-40ad-af30-6b3e26b9e650",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46be17f-637f-4120-9b69-eebf50e8fecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72f35ac5-db79-48d3-83d7-fdc4346a39b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07789acd-1b04-4fa2-bbd4-72b64c3c708a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "88695825-83e5-400c-a47b-aeb89b6c0024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cfc3bdc-b516-4efd-b803-ef8306c34891",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45147b11-dc76-44a5-9d53-9c399d14d8e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4945265b-c6e0-4ec4-afee-2726b016d995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9919ac40-bc3c-4dfa-a46f-3690e6951f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dc4d8fdf-8123-481a-bba5-0b8359462d1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aafe74b-9b3e-416d-b9f8-613fd7000200",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4eea93d-d102-4360-96cb-3d4b52c0425e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4de0c71-59ad-4c78-acaf-4974da6eb0d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34ee201d-11a2-406b-9d91-6f0ead5749f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc02f0a1-1432-4c32-81a7-a65e47f6b458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "694780a7-aa87-4266-946a-41564629b01b",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "014c76a2-91ee-4ac2-a938-2307b933e8f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91e262c3-150e-4fa0-be52-d7a80611d435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4936b9ad-a862-4c83-8b74-684f8e4bc122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1291ec91-2f54-43f2-aa7b-3406e0176660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3601bdb-ba0a-4f29-8562-0cb5548b1f4a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ae0889-5b62-4e92-a9cd-585191c1ea06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f407c05e-94cb-486e-809d-b5cad4cecbee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fd24833-80dd-4fd1-8824-f03a7c741991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "23cb8ae3-a4e3-443d-bfc3-b59f678625ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d00beb-6db9-47d9-9abd-8d24725d2898",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9012ca91-24fe-48fe-b25b-7ee822d8157d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9010c11e-f4d2-48f2-924c-7a1196c56457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f074498e-4ff0-4fde-b74e-dad06f0b5ef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e567882e-d4d8-475a-b7fe-01b7ce6c565f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b430a3d-f7ab-4647-a974-d1add2574ebb",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab9720a2-8320-4f47-95b9-667e6fed9a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fd87390-0aa7-4299-9591-e887e61e7a1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f16d992-324a-461f-adcd-52de7368170e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa94ed64-87a4-4f7e-b73e-7d5e508db92d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f2b249-ac1d-4472-8f35-d29779565be1",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c4d82d-2e98-422a-8695-572539a46807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1184de7-57a7-48c4-a793-6284a24a9451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b76c59-6a37-4532-92e9-583810bbafa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "8cb068c6-5b85-4a8e-968d-e81e880988e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc87b7d7-ad3f-4e8e-ba1a-f770e3f32054",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d8d546f-55d9-4dd6-b769-6ae4ce903ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "616308ee-178c-45ca-8b58-3e1b2b725bed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4e1c4c5-527d-4821-801a-5f772e84a5fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "706055fc-e331-44a1-9ff2-4d668b829ba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2410f15b-e0a6-475f-aa61-16fcae271352",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f6f6f3-8e7b-4f99-8366-7206ea3af357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b31354ad-19c7-49d1-854b-4e62d9564a95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8d5a48a-990b-40cd-8e24-a5c454a27f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6283cf5-9d08-492a-bd38-6b150775a117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c11e9338-3395-446f-9e51-1b3d91c7b6ae",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68cb85b7-59d7-43da-be57-ff5fe0b715b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "344e85dc-7b09-4b3e-9526-f6210c5fd6f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b8cc127-c2e4-4f2b-84e7-5a64d3da1c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a412b3e-5097-4476-942f-522d0e84e7ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b584d63-498a-4705-bff3-02d0a39fa452",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b79fe5-98fe-4a86-b656-1b84cb31fad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c531d517-8d41-41fe-b479-5f3062ebe392"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a094d9-a868-4739-93b1-fb192fe52290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3de26659-c291-4861-bf9f-e90055da9c56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f3af611-7855-4173-a16b-11087cad315a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68153d0d-6212-49d0-9f84-6d03c3c8385e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10ab8852-01a5-489a-91db-fe9a6e82a042"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "734cfdc0-edf9-469d-af2d-8bfc8cb7c548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c74abc81-b812-46b8-91d8-849ebc1dd68c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d30e358-86b5-450b-a07b-00e61a71c975",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f2798a7-693e-422f-b9bd-87b61e642f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52fa9968-3193-4652-b9dc-242a74cab7a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdbd76a9-3bae-4bcf-b8e1-f0f8b6328f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b07f5ccd-4842-4d3d-a3b8-be481b6bf8cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d76b310d-5dbe-4415-9446-a7a8bdb05c2a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "155860be-6188-4887-b774-ca670df72a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca057c6c-73bc-4ec3-b823-c96592ae9729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "127f4c00-160a-436e-8f25-29572ef0e901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dea5b4e1-6cef-40be-a2fb-59ebbbc32d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ebb4c5-9a91-4b1e-924f-34841e8d6b59",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29c710eb-e1cc-4540-be0f-d7531ce42c55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "829ad0c3-a940-4664-97c3-4a66c4577e7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ad7cf4-674b-44b6-b9fa-4282d0c8a553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "828ca653-ee8f-4445-91d1-2160e5bc4364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0c6389b-8960-4718-a930-e3b6acab1717",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b66a63b1-db97-49ab-871a-f6c8507cde71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39e0f0fa-4e47-44c2-8256-f4c848be2bb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee8b5719-e3a9-4510-b28e-54b6c9248663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cbf7a0f-1e57-4541-a99d-c834bbae67bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2527621b-affc-462b-8d6c-07fee8cea148",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21f2fa08-0d7d-45dd-a139-d3cc61905621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5a76c6b-f144-4e6b-9f82-04e474852d09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67950350-ca7e-4e47-aad7-21043c4258b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "12d01330-b57a-4c75-a64b-ea98109697cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f93e86-37ab-420f-b137-a8ae3d16d736",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce0dc615-4fea-46c2-8556-3f0191f607c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b19b171-d274-4e2f-a3fe-f785fce66bd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30499116-f8ce-461c-ab80-e7487f28ae59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "77a36371-11ad-4650-b2bf-3ccc467b3283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "158005a5-4bd7-403d-acb8-6e88bc80ee96",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94adb26a-ba5e-4285-af7e-27ac9c2e34a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fec89275-10fa-49c4-a833-228e79146a43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07656e01-ee2b-4560-b0d6-f16979b73931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "32c0b0ec-98da-4880-a481-8600a1145ada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed9e268-fcdf-4fd9-83fb-b93ee4519318",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a665c0-3f83-46cf-9c81-e6de2b7db5d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5751b715-eaae-4b44-9fd0-751561c0a441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2949d64-557f-4da0-8bdc-e97826a8aef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cac1b39-c42f-4b39-92fb-0bfc0ebefc79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "290e413b-b094-41fb-b3bc-e0de7ca4339f",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb9c5ab-78b2-4350-8375-5e8c2aac76cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0c93085-9aa1-4616-a42d-74811fb02338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "338c70d2-c6b3-48e7-9a64-ed7b987f7caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "107d0108-8a85-4daf-84e3-ee754e10c833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70d10073-68af-4a58-bbcc-f6399c20bf18",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff6d7970-a179-4d69-a912-33dee474e811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c7e6325-f1ad-43ed-b667-a4b1c8f5c5fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2949d23f-2e5f-49aa-98c5-1d8a88098dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "eddacccf-6c19-4b8d-8a52-7de728bed0b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d356086-dd83-4848-90bf-ba25ce6d50b0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c9e23a-8043-4de3-a88a-2e80d79b810a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47b2c21f-f7da-4cf7-aa04-9e7501dced5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5e77724-1623-458b-8f4f-87710b9a18ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1bd7ec60-9264-4e9b-8718-f9bdae2664d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36809e95-f275-4f81-b226-11836daf4d0a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00233c09-032f-4686-927c-a4265fb546ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf0c3f83-015e-4ff7-bb57-71f1647b06e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "917fefe4-01d6-49fc-ad44-1ba968155629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "536245f1-95f1-4b8c-b260-6b1951977372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a13d90a2-ee42-4bc4-8a39-de28c35a0cff",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "579807a5-23b0-47a8-8f4d-68a8d828b155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5077969-7e50-4275-9a49-7e8e856919e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b340f0d-6af0-42ba-815b-2e62a28389e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec8542c4-c736-480c-940f-cd8e34ef88e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59a4f043-fa06-491f-8862-409ad1f0f2f5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ca24d48-5bd1-4bb0-989a-1212a2625f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c4f783a-bbcf-45ba-86bd-cf4e76f5fe8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a221b7-a9f7-4e0e-8785-ed5e91d6e9b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c8bbb8f-d805-4a84-8873-5e3ee5262f1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c299e9d-c8c1-43ee-9e45-f75a7dd7735e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f56ff2e-85c7-4d4f-bcd7-0f784910238a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1db00fa0-b1d8-44db-bcc3-bacbe197d508"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbf5e99f-ac65-4526-9540-448311c9e90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "c80ed825-04b6-470e-a8de-c99f73d5e497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "751e5765-8aa3-4d13-9cec-846ad936b259",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b78c15-5f33-402c-939f-bc1ec9f0378b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95f8a167-e47f-4e1b-8f83-25ffa995e11a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b969bdf-30ca-446c-ba31-c9c0fd4582d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0ce8857-1d3d-4bf3-98a5-9e4c87beba63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf035673-25cb-4fbe-867e-da30a15f5d11",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97de0a4e-a904-49ef-93da-e64c5ac3a039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59de18d5-05c7-45ca-98d8-bb54949639ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a28a2660-c5e0-4a5c-89a2-df4b92e4525b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "049d59d2-75ef-4401-9969-5f3cf6ba052d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6182a628-ed5d-4d28-a9cb-e840c2152146",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f72cf3-08bd-4c4e-8105-4f5608c01557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67b98073-4889-41d9-bde1-eeda238ad84d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c6964b-01fe-4962-a4d1-88990322ba10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bdf017f-6890-4e6d-987d-3542862485c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cdd94f6-1b8d-4dc9-9ca6-9559aea86e8f",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e821483-f478-4ac4-b39f-18f3411e826c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2846bb6a-3948-4b60-b424-931f16a895b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b39499-ed40-44f3-a92e-9c86b541c13d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a0d37a2-8fdd-497c-b46b-3edc0fa4c546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2338553-e442-44a0-a950-c9de3a76fdfe",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbfd7da0-4546-4cb5-942f-72e60872096a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36374b2d-a668-4320-912d-9313f77c0012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5926701-573d-41da-a78a-78a6790c27a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "334e24ca-d3ea-4b16-b974-db97dcf03350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e07fc375-ca91-4b41-803d-ad73d647e800",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ca608b2-6236-43d0-845a-cbc80966f79c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c080f9d-0029-4aac-bd61-ba1767c6bd0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71de9783-a567-4625-a425-21ce78dbf1e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b604b706-86f3-4005-958a-32bdc3b4621e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c8fa133-408a-4bcd-8d47-0cad205ef886",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "176cedf3-be59-4dc8-88eb-ae71ab504064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fff914f-26af-4922-ba19-4d3c9f6cbc81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5738ab7b-a4ef-4e04-8e0b-5d8cf4fc7a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c2ba59d-c497-4f04-b366-f3eb1d0d3a86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1b365ae-30d5-450a-bcbb-8e5097de87de",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d82bc11-5e39-4dfa-adcf-fab5c9ea178f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2434bc40-4e2e-4a6e-8490-05912d4ea44f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46b9850c-72b0-47a0-8820-354d2f4aeb54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f07e5301-9698-42b4-9e27-eb689a0140e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c4f6ce0-af85-4d67-9b25-add00f670506",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e534be9-b982-4095-b661-5c29e51aa140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeed09d2-2adf-4016-bdf3-efa94c2f1d97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a04df4-2d9e-4e4a-bf26-ece9ee458472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7852d128-efb0-485a-83e0-e83c00839728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42db430f-f17b-4286-9457-0f6e5499215f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6e5abdb-7ab9-4a3e-b3ed-d047f7d72121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "972b4a5b-035c-4635-8e0f-67b5aec716fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "208edd24-7a94-4f5c-8b22-ba06bea58410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e83c60d0-016a-44ee-8662-58e71f072d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d31e916-52b9-4ff1-902a-0e0e79cd0442",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d35fae5-4d8f-40c8-b1b2-9138ceb1acbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9292744b-57ff-4b85-aa38-7fca528c5348"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b42db5-2984-4b7d-9c4e-3165e5985578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8210350c-1cbe-4edd-a80a-ddf528915b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b459301-4ad4-4742-b796-dfb7971ff5c7",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43118359-2464-4457-b7b8-8a35c6b9b4d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47c3eea4-c2dd-45b6-8f1e-1a96b3c978b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e9abf7a-7861-4ed8-899d-6ae562a07144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dd550b50-2517-4dd1-b1ad-8127c0d7ab53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b00743-e885-4a3a-aeea-bb5c652849ab",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81a6bdd3-632e-4aaa-b636-4f83ac12b2c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7455bbe-d013-4baa-ac80-d02da204e668"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e36107-b672-42e1-ba66-04ad36084623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "67e88497-4e74-4d4f-aeee-9874683edf28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a6eaa8-6a14-4dd7-abaf-e9694b556bad",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6bdc465-677f-4966-8b7f-df5dfbd6e56a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "522fd1b9-be46-44a0-8676-d68d60ebaa15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a11b77d-8645-4446-8cff-449b4c672be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "da5b256d-4d18-4287-9544-0506c819ee30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32851d6e-e866-4047-8f47-25ca50157959",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef49a300-f311-49a6-860c-c0f07dd61d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f763fa08-6357-4707-8393-19b4b879cae7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec37e5a1-cf80-4937-bf63-d9afc403af38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "65251bf3-d3b8-4593-9503-0d498ff1939d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "826e0aa7-bbee-4603-b43d-96cae6404070",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "017f9304-224b-4442-b671-a1834dc97a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7be974c-75cb-47b5-be3f-6fb464c8c98e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18153bd8-0ac3-4157-a4dd-fe51395460fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cadf093b-e645-4b10-b203-d190349ab562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e499e7bc-5648-409d-9e59-3f4a4867a9ad",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "569c086e-0559-4c43-a9fd-38c76447f6e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a976d03-29cb-48a9-bc76-8e596dadd7b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c54329-7fb3-4f78-a0f1-ddbdd7884cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea67219b-462b-4339-b2d3-6aaf546f6275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db75a85-5f6d-4cf2-b391-99e5fe5096fa",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9922c33f-846f-4556-9213-48334b996590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9143576e-b8e7-44c2-a006-085b41de9501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "936e40a4-ac15-40db-bbab-258c92738b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2f56229b-9ea2-4466-ba10-6297931987d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f120d63-ddd3-47aa-9d70-49e4881209e6",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46923615-fd3d-426b-a242-3f8c52aec4d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee94930e-40eb-4867-9553-87f98a8a356b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c78ca56-d79c-4bb1-9bac-d1dd786cb629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd366f70-107a-4e95-8859-9ab815e3a5d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02e1e828-77b5-4299-a964-0db18b60c689",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beeb23fd-400d-42d3-9ecb-0e1ab0b403c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a251bcc8-f575-4375-99c6-fc5bd959878a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f15ddc-8ce1-455f-b934-cbeeba009074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b9b40dd-c0d9-4596-b43f-f55fd8792aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e45257-a094-48b4-9323-af614754b4c4",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a996227-2264-4843-8f09-96b02ad2ac73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d08972a-5f1d-4f43-924b-510f0e31eae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "947e2b07-05d1-415c-a744-d93ef0485138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "797ff3ca-2eca-44d8-aaa8-6398090ccfea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c38f31e5-63ff-4c34-a03b-ffd38f0b4a6b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f879cc71-ff66-4402-9983-af7d1102fdfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d33cca6e-5ae3-460b-972b-0b8c11b8d86b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd50d6cb-2820-4e80-ab8c-4f30111051c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0624cbe8-18e9-40cb-b460-a7694f014446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbec9d2d-8690-48e8-9444-26ebced8314c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ce1de6-ca94-435d-b7fe-bf880302f93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "773ed7bc-e368-46eb-864a-b3f6bc85e3f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2db884c-16df-4380-b5d0-5821f621c585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f1c13445-35af-4730-8cd0-cfd2b5657ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "695a6ce1-cff3-4b33-a89a-2fd91dfff777",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04668d8a-0f8b-492f-a513-edb44e9f27bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f468afe-ae12-4b47-97b6-287d5df49c9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b140c7-100f-4fb1-9ced-0001da7cfd9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "09ac93a1-b06a-42ab-b2f3-81479b945e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c5b145-2ab6-4bd2-a7b5-efacf1c3fd62",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09cf1b96-4e95-4407-ad97-fd83b83f94d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe9d0a35-9825-46fc-9f44-b9d6fafdd48d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e9ab14-b18c-472a-ad3f-81b696df3e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b026fa47-16aa-4b34-a6cf-eb3d854d14c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5902949-2c22-4053-acb2-bf36d85910b8",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea95b623-b7c7-4050-841f-308eb47dcead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90dea793-3d70-478a-baca-a7c44bcf03a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "717ad13a-16cf-4e82-bd4b-c048e18ac96b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "352d30d8-0382-46ec-8450-7b8c0b13acd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53735174-0f79-4011-8b85-d82030dfb879",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b4a41f5-553d-48ef-97f1-679a38bb82f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8b8b6ac-104f-4abe-9f4e-77be144b8777"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "371efc15-a747-496d-8463-c5eae446809c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "92335b43-3d65-41d7-84f6-c9496f8ee16c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3b461d8-b768-4024-bd27-d0ed64e150a1",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b2d07a-b875-47d3-a36b-a2da06315b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "268740a1-531a-4fe7-9765-de294ebbd172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "469f33ca-4e57-481b-9e44-0fe2d53e37bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "da686b67-a20f-4fe0-9f65-730d82658f3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b70a3ac5-18e6-43de-b762-528fa162f7c9",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21e49c81-ad33-4b62-baea-ad84c3f6a663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b5477cf-c8b5-4775-afad-e84c35ab3c14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7cebf51-b853-4fd0-831b-ceec87806dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e7f0330b-6b25-4b87-9392-1d2060122176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "360c6ded-cfe4-4477-8f30-e79274b8f43c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf2f62f-4cb8-48f5-a3bf-0d675125d607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "8d2eb6be-3851-4bb5-b416-7ccb52071e04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45103fe1-3659-45c7-a7bf-5e67db4f9ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f0e153f-9d58-4a31-9d6e-abb0feac180c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "11fb99d2-87b6-46b1-8eca-cc70d1cd21f9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c08f7c60-3d0f-4888-8886-e0d7371b6f1c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7d5fbb-33e0-46fb-9902-ecc0f048e9ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "451a23af-4294-4d9e-8f06-607e306f2e29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "778c3fc4-eb8a-40aa-87c5-d8b1cd85c9f4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "832f871c-8865-4b55-a450-7a56da9febd5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f9ddd88-6044-4dd1-a9f3-c42e4f67051c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87847fe3-86ba-4ee3-83a2-3813628457f7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "857dbe21-dbdc-495b-8291-f1d1603d4375",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "961126bd-9569-48b6-83ba-4fbdc3134a6b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ff17620b-aef3-41c9-8cea-40ff49115434",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9374f8df-d337-43e8-ba75-3b4b17b369ac"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5c7e0dbc-3c8e-495f-8e7b-f923952bdc77",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "78de95f1-4fc5-48fa-914a-4866fe1fbd03"
                }
              }
            ]
          },
          {
            "id": "4a14be58-83aa-47d7-a57e-e01aa9ea7677",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6faea8a3-856c-4ed9-ac21-cde254a31a94",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1e017a0-6459-4442-a854-4b96bee700d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ed98baf2-1575-4c2a-a578-499a66a40d14"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d04ea368-9ac8-4a3e-ae75-a57239e00edc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8abbc8a8-9500-4077-b445-21db3f590452"
                    }
                  }
                ]
              },
              {
                "id": "30a057eb-1891-4c07-95dd-2f066d00a079",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "64903c11-66f3-4782-8e8a-59f45433f0d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8096faca-bbaf-46ec-ab8c-934372bb706c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5b3fddf-cf40-48af-9a6a-a04f0fad8289",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9460236f-d3c5-4d88-9060-f56398ef1562"
                    }
                  }
                ]
              },
              {
                "id": "b889e75a-8947-42de-9018-01d63aa4e131",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9bf1417a-4c33-47f5-a8f7-fdf342e8f634",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "337c3130-eb65-4eab-b5da-b8130e9f9dfa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "be07be8f-4bc6-44d2-9a5d-dc9d490d847a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "84ce096c-b8c5-4047-968a-e9b018da0848"
                    }
                  }
                ]
              },
              {
                "id": "260de776-c6f5-425c-967a-6bb88f468332",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "556b9ffe-d0a3-4dcc-b61c-95bdb1e8b059",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9e0c8ca8-33aa-4ae8-a74f-1d39befb3ba8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5fad0ad-95be-46cf-b997-20ab33ba643a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "935c9d94-d04f-40bc-9ee2-0d6c29945798"
                    }
                  }
                ]
              },
              {
                "id": "b215c13d-b161-443c-a200-cbdd00d76c15",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "00c66642-4c32-4aba-8a83-45c7a3ddcf57",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4ade7e6a-cdd3-4f14-a66b-52c54bd68cac"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "52cc8e2c-4d51-4a74-871c-abed540ecbdb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2c1ac1c1-7a68-453e-ae7d-0987a3e82e9a"
                    }
                  }
                ]
              },
              {
                "id": "6278684c-ab90-47fc-a1f7-90db9ba8d603",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6949a1ca-2784-42b9-800b-296831b4fe4d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "74827865-8462-4f9a-96b5-fffdbab68ef1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "61fd5f00-5cf3-4702-8f08-551bba1bb4b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e76442a7-1bd7-4bfe-aeaa-568cf425eb08"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c57bdae1-5403-4e2b-a55d-e654df31830b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a459d267-4460-4ee1-895e-1c5c5f8ad110"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b553979b-1618-43fe-98fa-de695ad78e5d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "33ca4e26-d29f-488d-b60b-88bd9ecdab01"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "be0e8bdc-eabb-422c-a4f6-caba5524870b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "db8d3638-eb39-447a-949a-936cc075c2fa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a19c94cb-8b12-401f-a88d-6c2099e42bd6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "31d13e13-8a1b-4176-a43f-99743c817514"
            }
          }
        ]
      },
      {
        "id": "0a6ebe4d-ee2b-4aad-8f92-da6a2e4fff13",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "31587475-b494-4a89-9950-f7accdb3fb9c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0b1715d5-f330-4f32-ada1-2c43d64e112a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0c5ada24-11ff-49b6-a180-75ccb9eaa7bc",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e4e281b-b8de-405b-8cb4-a866e4035d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f03cdc1-2ddb-4397-a98c-cd807fd75386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c2e3a2d-f0c3-4bfa-9817-20a3b0a0a2ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fe6eea7-f18f-4bae-90a3-d8e0af85cacc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1b9314c-9b88-49f6-ae90-c36c3a215a1d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa82954-6050-4926-9f74-7a7fc396a26d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20fa2397-e108-499b-9fc2-1566faf7c855"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba8bdb7f-c91c-447a-bab9-10b517db5500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b524bb9-1fca-4fb3-a08b-ebd9943ac06c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dd874d2-e0fc-49bb-a754-60bfa751d8c6",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46dc744e-bb72-4b78-bacf-29dc08475ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feebdc05-b50b-4cbe-b551-a0bbb869f195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c14f25-b014-4352-918b-988a0818605a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "637bb8ad-e996-4607-9457-b25028cc63f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aee0aa1-363a-4547-8ab5-3dd789cca266",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5726f8-5bfa-4247-b53d-b508989f386a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbace3d6-4e65-4431-955c-3dcafd37363b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e67e8b80-699f-4882-b1b8-79c0b1089495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b0a301e-574c-44aa-a7b2-93306fa7f0ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d3f7b70-c6af-41cc-a0ad-e7bf2bb76b3f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d3c1ede-3a89-4458-9b49-e4bd87c06ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa97f5a7-d838-4612-a671-716a68444f01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc52e6bd-f3f8-49c4-8da4-43cfb4147a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "271dce5c-b99f-4083-9610-088b440d9399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f98eba-ff4e-4cac-8c0d-f14d6b033f29",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee08d507-1695-41e6-a65f-8765ba744cfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fd41b2d-d083-48ed-a133-f3381fef8e94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b364658-2e11-4a55-9571-2930c6d97b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8240a0ab-5258-4a82-a4d7-87eea63c5f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e25fa43-5242-4691-9c9e-8bf12c0b1613",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5489a783-103b-4ed4-a4e4-fe62583fa7ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dded722-4822-466a-9e63-eb3905ef46cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f11e52fd-d209-4211-99d0-33f083232dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "885df668-af7b-4273-ab24-e2bf4a026667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "522aa847-393e-4b84-abbd-ea16b9e6897c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e36772a6-d19e-46e0-a716-178011bb7115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddbc096a-4cfa-45e2-89d5-4390717fdd87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c5b9fe9-c1e4-4d65-b26b-383832344865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "edf71fff-9521-4fb4-bbb4-250bacac2a92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f0aaac-8a11-4150-86be-0da14d531323",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce2a38e-a231-425b-b31c-36a042495dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2e7ba75-461c-4108-93f2-759aaa291f40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8140376a-1405-4725-b5e3-b9708a07e6b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f1f3ebc-44e9-4484-9ecf-9250bdde77b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c513c84f-3e45-47db-a6c3-f873020f1154",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70885a7-9f05-4ced-9fd1-64c542f63bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b77c252d-3717-492c-afdc-85c8bea3ab48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f77d61-13cc-4b77-807a-d924cff378e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "90537e12-fabe-4098-9220-2e646bacd6c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "996067a6-003c-4478-b835-9cf493ab3d42",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b305ea32-f60f-4aa8-8df1-cd2dda5ce8a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "633fae38-a98c-4a06-a9f8-6bc34e88914b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90f919a2-f79e-4a12-b541-11f8178129a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "919d662d-ae1e-415a-acc9-8b9da1158e76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e060e5-9bd0-4b73-a2b6-7b93f575caf8",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75a29f0e-ba33-471a-be93-c566b24cc406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf68f64c-98a3-4800-9404-74507aa40765"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c8b8caf-711b-460c-8150-608a143d338a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e1172972-48f2-43be-8d05-4e12d53d30b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85c6d13e-4217-42c4-9e80-199f1bfec55b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d92974-bb3f-47b5-9256-97dc6272dc26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae45fcb3-0f5d-4a97-bed9-fe3024d50c7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e540f464-f95d-42bf-b66f-78173fb34f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "704f2ebc-c566-4e44-ac9b-454c5503c161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86ed5da7-c4cd-42cb-878d-f78caa4fdb70",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c202078f-7da0-4cf7-b9b5-adad32f4bce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c9fd481-0d56-4e2c-a796-37df9a46b66d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2edc1341-3773-43d4-a352-b11231d90c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "529432a5-4acd-439e-b78c-97a141a0298b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4b64b79-b21d-4017-a15d-2c0e62403582",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3517d302-3dc2-4c89-bec3-0cf10095d846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "225b8882-5f54-4669-af39-70390254fb9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f3e192-2867-4ef3-8014-fd0987a53c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a982d3f-0818-4cc0-8fa0-acbbacee15a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c6f255-92ec-43c1-a135-729b4b2654b4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39275e0a-1545-49fb-8834-6e63cb68595a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e435f8ea-0870-40ab-bd25-1659e629239e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "047efc85-27c8-4a23-9365-5d5fa59d2a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "75660f38-78a4-4c61-a5fb-ebdee9d58f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73bf3d7c-27b0-476b-ae96-36e98d7e07f3",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b9119d1-8ed3-47c0-9bc0-6556242683ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbad3404-9433-4ec6-b584-4a87925e7845"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45b55970-e597-4ac7-b213-202c01c6cd31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "539b082a-fead-4353-81d6-49f0b51bc8c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "994aabc4-3910-46b3-b85c-4231d9bb0648",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f2c3ce0-28cf-4a0e-b5f7-be9f189e447f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94a28cae-981d-4579-90cc-3fd5e9aa4372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d04ff78-4663-488d-b107-a983c15ce589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3df36295-93d8-4bd1-82ba-5a1d03c9017f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28317146-1ad9-4886-9b7a-f9085fb69b35",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc3a1688-ae56-4529-95ed-d5d2b6636e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b294c13-30c5-44bc-9349-7ad976dc61d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a8f87d-36f7-4e32-9c2b-2ee0aebee0cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f391a47a-b53d-41fc-a3d1-060d1ac2f683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab289f4-a708-4d79-b27d-f8547b9858e1",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1adc3fa-4635-4859-ba5c-4a4e19db0907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dc51fa7-cac9-4d1f-b69c-d500c930050e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f11a9e0-fe03-4622-a59a-2c0cbb58fdad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b059318-2fb6-42e4-a7ee-ba51e4665b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b40bfa2a-483f-4170-b56c-97a76d88c1fc",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "387221ac-2fad-4257-be19-fa95d7d20a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ae00255-096c-46d3-962d-385e4b8599d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a44969e-a6c0-44e2-ab53-f0eba7a8e820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be0c8e10-d469-49c2-bd90-36b78fd2cd6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4cea794-b585-4993-8529-8abbb7d3fc31",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e97568e7-dc7b-480c-8946-a7aefa8b9541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55b15b45-80d0-45ed-955b-32f27c235389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f892dd34-8b0b-4889-be97-0ee3faa0725d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d167f9f-f48d-47a4-9fda-eb3e598e0b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a3240d-e0b3-46a8-8a98-d8bcf7ddaed1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b22387c9-aba4-459f-a8a2-bdbce404c155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee7a2349-abbd-480d-9798-f774eddcd999"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa75915e-736b-4d78-b5bf-f55f6e9983ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31f831c0-0cc8-4ae2-a09e-27255ead1b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d29498a-a299-48cf-989c-bdd0e6cedd2e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13acc6f9-06ef-4c31-9b30-fc355d013598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e280bc5-eaf9-4b89-a813-d8af70d9f85a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fad4c7f-a7c0-4f16-86ff-fd476cb1f9c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e0259d0-6c70-4dd3-8336-f1ee43db97ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "336a1817-c36f-4d0f-b5e7-aad2f740dbe7",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "776b844b-d602-4adc-887d-6c3c187da69c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d1a52d8-cade-4399-b5bb-999bcfa853ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d700529-245f-43e3-a793-643b45b0ca2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "586ff7d5-d69e-4ec6-a92d-fe2f95324063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5238fa6-97c9-41c7-9724-d56ec8412e1a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fedd9866-25ec-4c7a-b5e6-b7e185d6e44f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d6275fb-1bb3-44c8-833a-3eeec7874a31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4911f44-940d-4fab-b7a3-f4b95cbb5f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "401e18a9-e441-4d5a-848c-cc59183be85b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb50607-d90c-4acf-8f9b-123925558a05",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed9e5c41-ee74-4a82-849a-c4c38d155c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ec5c149-f65b-40c0-9e2b-fc00ceadc9d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf0dc6b-5773-499e-a3b3-9e968757e29a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f5e3f09-1e56-4dbf-9e0b-0665dd619202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0adc18f-d9ea-4540-a472-1a9d4bb07ddc",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55cc1a6b-3830-4d88-bab4-d9c1d48f0301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7b427b2-3a53-4292-b331-b88c0c46c3ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d0a17b9-1d3c-4e07-801c-95073677c106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f13cd03-4d8f-4361-831a-dae02a87f8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cccd2f23-010a-4328-843c-159b15693d71",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "944c1f12-2013-49c5-95df-3837ea285710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74f6d77d-baeb-4c8f-a4a2-8e07e6ea6a6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f72d9f9-5d67-4ca3-a455-9227e476d0f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31bffe70-7e3f-4e47-bc16-4a980a0e9e25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "102d2349-3885-473e-9795-8ebff09748fe",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8083fca2-5458-4a0d-84c9-9bb98302c48a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a02eaf6b-7161-4e8b-935d-73d273a5705c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "151a136c-0c55-4b8e-8a97-7b6d20c36055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0817760-aec3-4c99-8787-ec59304c30a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a90f656d-7e5a-4aa6-800a-359cef48beea",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c616bf-af3a-4981-9231-d9a413966512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4a95c85-9eba-47c7-b375-030cfebae905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cecaa74-aa7b-40e5-af4f-1d775e879dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71580362-0942-42bd-be8c-c9099ac61834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "656b39cc-c0ef-4347-aeac-de6188cf57bb",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3dd9498-be1b-4db3-bd54-6be813ed48a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8474b45-4f44-4f9f-9aa9-93ef4cb9623d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa93a81b-666c-4b89-9a8c-cd0ceb8de51d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4955ec86-4681-4ca4-8489-5d14124c2b0a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "adcf2134-32f8-4171-99d8-288a888b1ff6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "909a4aad-34d4-4b92-b5fc-2fc7b74f6d0c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d997dea-e666-4117-8959-95aa8dd5b722",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b4f15ae5-e6ce-43f0-bd66-d3f7fa76cfe4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a5b3924-0599-4196-a5ab-2cccc81a7eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fff20ea5-6a97-4f20-8be3-80660481b533"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f30b7e9b-dfc2-41de-9381-3539a429a9c8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1318ed93-8be8-44b1-97d0-6d3ac8b501e7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d122681f-e8f2-4ae7-bb9e-bc4e790755ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aec87657-5a37-4393-8c9a-fdc1f212f238"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6b51d3ec-e2cc-4180-8cd3-6dfd28728655",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "54d7e71c-1a61-45a6-b3dd-1116a62a73e1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2e2c3e53-a879-4a23-ba42-036a8cd2da21",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a7f71dff-39b4-4cee-8f30-3908764343f5"
            }
          }
        ]
      },
      {
        "id": "17c5b12f-687b-4a93-a7f8-0ac2f185c04e",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "a961ad98-0749-4178-aed6-0ace8ce24592",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b3d5ba9f-8504-455b-98ba-118e24895c9c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a3b99bcd-c893-412f-9ed2-c8507dc734e3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33763936-0313-4b88-8458-408e1d6415be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca3348da-b594-42ac-9b48-6fd44ed8bf8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23c8ce1c-22b0-4c1c-9f92-fed179201a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "24046adc-2b86-4f7a-a189-888641967a31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45c62ab2-9675-4036-bcb0-be5c18d0a926",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d02bbbf4-9361-4659-a9c7-3d332fb65339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14ecbfc6-5fec-4005-904b-6dcf2fb35c47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a67c48-a569-4cc4-935c-ccbf967c5ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee7abc0b-7ead-4d56-8058-cb2a0f38ee27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b710433-7680-45e8-8599-2a48f871e977",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e2da7b4-61e8-4c45-b260-948cff2e851b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "742a1a0c-9fb1-426c-a1b4-098f5eee8c46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9af6898-65cc-4efa-a6b1-bfb5a8fbdea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "be81aa18-d453-48fb-85db-c63bc7f6616a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2287b2f2-abbc-4269-ba04-564abbb63841",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d24d372c-0da5-46a6-93cd-5b0e8b74cdd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e07ea79-c41d-4f82-8518-fe1e72cb6b71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a741c53f-0861-42fe-916d-4e76a3156dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "69feb5a2-5b92-42d6-9fe0-e1d12bce9da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0ecbf08-7901-4b90-8fbc-bcf1f45746c3",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bbaaee9-e8b4-49a7-8c74-79ec042c6352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc0b29ff-5d47-4812-8949-cf87774fd7a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "629b91bf-faa3-4a0e-9ad1-cf3f765aaba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2d1a8ab-c160-43e3-94b6-c882c7f5a9cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3788d5bc-56a8-48c5-a53a-d94fd191f435",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fd2de85-003e-42c6-a878-fb69f2e2abd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e66a0eb-c8aa-4742-a34c-a348f9007c5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ce9f260-cc18-49b7-b930-863d85974242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6426f4d-8186-496d-9f0b-06b100adcc4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8125e094-1d33-4f10-9439-1e75467a6d69",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d794e003-b63e-4baf-8133-a025405368c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce195d10-3872-4d38-908f-adc1dfc79e27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c6d805-81ae-4c21-8259-a71a8962b8d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1583261a-251b-4863-b8b9-ab7a0b06b439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e438208-a8ad-4858-9edd-f627b5d16e0f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2d2b6c2-0324-427b-a71a-0d6b5c207df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cee4e6fd-e406-4ddc-9c01-26f5b1884b10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6dbbc08-ab24-4161-8538-1b4e33089004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "82933920-ee6c-419a-8669-6d84cdd1af70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb08ecc3-f1d2-4b77-8e7f-89cddea88db7",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "435caf6d-15bf-4789-bcbb-939edf8a034e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7670bce-d04f-45e4-861c-d0ab48bdf54f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1870ee44-a7cf-487c-9478-4f0f16d25b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cb68781-8b44-4180-9df4-826db45277e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9368deb-79b9-4b84-964e-2880b8e8f666",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c0a7611-f7db-4ed8-9073-01e9518d7151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c276085-a0f4-4de1-a060-3cab2fee212d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0450d3d-8812-4bf6-b379-d95b3eb49b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ddfc601-6f40-476c-bcc8-91b73904d09c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e1fb158-fdd1-4996-8338-517564aa4479",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84004ad7-5f26-460c-8138-2ca2676e031e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2025264e-0c92-4694-9518-b410c600e952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b6769c5-fa14-4262-a93c-5aa25cac863b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "238bedd7-58ba-4663-a60a-cad4c8142954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c22c7665-7b39-4689-b640-1c5bf34a7548",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1a5690-a4c0-41dd-84b9-6d5f6927e49e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c33c61bb-93da-47dd-a5f2-bb604fcfe19d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0f0ece1-ce21-4b3e-983a-985cfb2646bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f872b42d-0d5d-44bb-9716-42f952ec9cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db101022-8b0d-40be-a2ca-b6ae08bb0bb1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10dcaa91-2bea-4d38-85cf-6e0de9d375de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ea56b55-94ac-4ef2-9a05-194fcb0a6242"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f17eb91-c7a0-4f8b-ab1f-f6f2b0a87746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ada8cd4-7b84-4d81-861f-7d6a9986a834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3fd2527-4f21-4d1f-a5bc-001a61e007b7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07130798-8cdd-4835-88de-ba25460c17d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "298c349f-1580-4750-ac89-50af460dee39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add1247b-3515-47ad-acd6-cd3ea218343b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff32ebd3-8148-4dd7-a916-10b8a4b0e379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b45c4f6-e99b-404d-8058-b3cb15ded742",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37d9d3da-bad5-4d0f-bdb1-00e8c1d67d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af4f4ec5-2a29-44d4-a8ea-dd272b379d83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27803025-7a35-4b76-b260-a6b85f447666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c61896af-7ee2-406e-9b21-67c0453d3bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30cafd14-a4ce-42e7-af55-21865fc9fda2",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "517e2368-fb5c-4e87-85ab-c31a42ba21c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e09370a2-2442-4263-8dd7-9e216310c14c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "763236ad-4367-4507-92cc-9e3f3c514d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "dcddb7c5-4bbd-46fb-a98d-4812c46bc627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a3a83c4-ee40-45e3-97f6-c818f8e7065e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4e487ef-57c3-4d96-a62a-7011a6fb29bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1288da1-e461-4d58-95b6-991454a628e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0276ec1f-2fc0-4d61-af4c-fc0f2f826e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ff1efff-d3b8-4cc1-9ddc-c47fff8805a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cdbd105-5b76-4069-8c70-9011e38d2dd0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec959c7-565e-4ee7-87b2-c6fb0836695a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f63e9d77-6a1a-45ae-924c-5bf302bfe86b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46258e50-e280-4a95-9fd3-2ab063146174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "eadc678b-c44b-490d-b2f4-933aec079aed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e58328f-3e48-4b2b-b78c-f8e0fde3a2c0",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a6d95a1-bd87-4a43-b38e-b5a0423c4cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14470950-df65-4849-ba9a-c2de5351b8bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "355e63c1-6d47-470f-abec-b0c33c56dc36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af22d8fb-52fb-4ed9-b730-58665d43c6c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f53df9-8031-4225-be4b-a8247c6c4a34",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a8da89-7691-42c0-9df2-1f53ffb631f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e97df5c-6ab3-4148-b520-03b51ae3ca3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88345104-618d-4815-abf6-fd89218bd1fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8858228a-4cc4-4b27-a998-ada1cc6a0059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb7d3a8b-b674-44ae-9b28-94f00b68fa36",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aba2eff-5563-4ae9-b9ac-d0b9bd1c24f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e494244-a19f-410f-9dd3-4fb37d330065"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47e05d8c-994e-468c-980f-c8a96f0e8dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d4044d7-f4db-4b42-9674-ba9a425d74f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1644c78c-32b1-46ab-8d13-3f22b6b09317",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4555f42-d9eb-4c13-814a-0add1aca8477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce43a170-ecc7-44f2-8022-26e9b8730b0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cb9b14e-2b25-4488-98e4-e02bee846271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8b4d85f-9bcf-44f4-b587-18d99bf9967d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b18097f-f608-4635-ada0-bdc85af83f50",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1a2d74c-42ac-4809-b273-7b062ec33e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe0d3797-54db-4da1-901f-dcbdc26c2c43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebabb112-f7d5-450a-a20a-15151de78482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4833c51b-b46c-45b8-b105-71b3b0b1d743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e561da4a-b16b-4a3e-88b4-35bd4118da8c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "383d45e3-7e4a-44d8-87a4-60d47e0f7710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f8c14e3-388e-4e81-8582-14ec01f2cdf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63ee7bc-2378-4e6f-a887-d03770490d2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ad8ec8a-0dca-4aff-b6d5-8889cb329dd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3876d06d-516f-47cc-8d21-5a22a1373144",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "060da5cb-d59d-490f-b9bd-1c4faebc64fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1e74d79-2f0a-4995-886b-137ecb320f23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aebbe23c-1878-4d67-b23d-8b7a76e364db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db421839-6d7d-404b-9a0c-14bc98e17962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca9a0199-ce8f-457c-9060-e2c484ae4682",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa7af87-d254-41d4-b133-5f8f924b9ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "045e69a4-53fa-4065-b971-63e316526ddc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba0277e-f029-4abe-b8c9-4db7041ecc7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "697fd416-9b60-4287-9838-1473b4b23545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f742c7f5-6c5a-4179-a540-8acbda9262ed",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62e71651-7246-4f7e-9d18-8f83b6a88cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22ec5c61-4ad6-44e1-8076-e4c9debf7249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47e91453-1ea5-47ed-beea-c27a8422ba2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "697ea0ca-3124-4840-be8b-28f39cde586e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28226998-f809-4761-967a-1e5324f90ea1",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5372912-e254-406b-87bd-80f4233e2f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5a038a1-162c-454b-a64b-ce43ddf5c83b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a3c27f-11a3-45f5-a604-8e1b7e54ff74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d6c6d71-5920-4f8c-a674-3add59d04a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1961b08f-a217-4280-9599-89dbfe2fb4c3",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02693009-3eb6-4697-9d9e-83dee7ef574b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcbd779c-2413-4e26-98f6-45fcfa348515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12e184a4-e1c2-4f74-acd1-a9a873b7c20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f059384-b901-4af7-a4b4-91a91553a3b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "399ab075-8005-4d76-83f2-cfd1822da0ed",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f435b547-65fd-4cff-9a13-2bb3a324af0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0478a33-be4d-4635-a628-23a483c857c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a521c8-1b76-4852-8b5d-071c41291fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4248b013-b6d8-4a39-ae30-297867d22394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aafc498-ec46-443c-9830-a39d39a654e1",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "694e230b-06a9-4268-b422-d04a9ca58dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3daed07-4a52-49af-8923-83e247748f4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "059dd6a7-ba64-4238-9500-194564466239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cf4ace4-1cac-4436-ae11-6fe238da5fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84e442ae-3f64-47cf-9b20-38aabe4c8c76",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51286557-abc2-4ab3-8af5-d9497bbcd7c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "980ff3a9-71dc-4125-9330-3ca5f2f99748"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "047d81ff-7289-480b-8064-15b73efc0ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b47f226-fe49-47e0-acb9-4498ed2eba17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a53df94-69ed-4c65-996b-7078c42811aa",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "769a1471-4fd1-4017-a38f-ec4681f40f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "197e93fa-352c-4928-9bb4-e8e49975b1c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89097ee6-5f1b-43f4-9735-137b44de4c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9781a1c-dd72-4028-abd5-356065b2a3fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ff9e1e6-f4fd-438f-a159-17d8e18f505e",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32fa05c5-b942-49ff-b1e0-1570061ab3ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b172daa-61dd-42c1-8110-f9f6775626a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77601e46-06be-49f5-81fb-9e113bdcab61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "542a0031-719d-4f89-ad0d-43460887a553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e859a578-27f0-40f2-a0ff-ab5da3719c34",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf6fe766-bfb1-4143-b88f-a84b42302b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5335323a-6e5a-400d-9ac7-e2387b7f4aa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf24b90-6b90-46e2-abac-779d6b4aadea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0404bb2d-f8dd-4dc7-8364-fba0c6af37e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30969068-4dfb-42f3-83b0-3ddcc0ad7dcb",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2477a22b-be70-48b7-8941-05847bf15226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9bf5eec-5b7b-4e85-89dc-c6ca1e4385ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d30c89fe-704d-4c4a-8f80-ea8d767f4bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7705fcfd-3eb7-44b8-8387-3d310b86d08a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "078a2eda-2b73-4aff-b1c6-066ab1df80f4",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65b9dd6b-cc9b-4b69-bf2a-56ec418d029a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62b4856a-0cdd-4310-ae24-96203f8367e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89c065f6-e24f-48f1-9746-f0c2cd12f986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3ddfd72-cc25-4615-8713-b7e62dde89cc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e18e86aa-5a6e-49b5-8e05-81a08b9a5a3a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9ce5322c-9275-4262-b23f-9bdc82d0c77d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3122e892-e85d-4b42-a661-460cc9e0f73b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d0e13f30-a517-40fa-aa44-ef8c731a3080"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7342ea3e-d5fe-4f8b-8345-ba0c8cddf281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b3c8b51e-3b69-4c33-af54-385ffed34882"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a24001db-8f66-4032-8cde-4cab1f97aeda",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "717f16db-3861-4370-a18f-6c232ac12ff6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aad3c752-6384-40e8-9f55-ea1a89993794",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a9978e0a-6bea-472d-81a7-8b2f91c6d330"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ca73eab6-c46e-49db-861c-28f5c8b9be70",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "44cb4f4f-e484-43fc-b4b6-481b8a9410a6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "696810ff-7ce1-45dc-9f8a-c740f5dcd518",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cbdf8619-44fa-4033-a575-81d147ab3c8b"
            }
          }
        ]
      },
      {
        "id": "55442c7a-2902-4513-8f7b-58e4b765fd55",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "e0ebb198-b45b-4df9-8fe6-191b4ae96a29",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9ab609f1-239f-432c-8ad4-40da8c79c5cf",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f19d278d-459f-4577-9fda-40169d4cd4ad",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5939d0ce-8b71-4784-8eb9-921f9a78d929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33139365-2a69-440a-b1dd-c54b66d2efde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc1cc27-b73e-4a0f-aa85-6be8bc2e15b2",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d58f52-85d4-4778-a76b-43eb763a2fea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bad85a91-69bc-4bc6-aa90-db248eb015cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c16439-9e64-4ecc-bb40-1de5afa61dcd",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f892e7-30f2-49cf-8088-05eb860f6e42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2b37aa1-ebb3-4c76-a2ba-162a0e229909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc1afbed-24b4-4e71-a97c-2f2f1f206a5d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aa09d4a-60fe-44d5-abdc-1783585406ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ad77ba1-19a7-4f12-a0d6-7b8750b77cd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "091c6654-0a93-409a-a359-a3ad7373f7fc",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a6369b4-882a-4779-ab03-69fc2e187fe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93d8a1b0-b8d8-4fe4-8785-a5babc2609bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b77782-b14e-43d9-88d0-021c227739f2",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbce385c-ba58-45bf-a8ea-cc75755354c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9caa714-7421-4d17-9431-05500195b17c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1405319f-f774-42da-b976-63ca9c1a8d0a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e7a36c-5fff-4ceb-816b-a5ee4ba55f5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05998974-a01f-4f65-baab-3773e979252d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f817eb7-aa08-43bb-b299-ff296eaf0117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99239cf5-e42a-4a2f-b739-aac77894dbb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "529a49aa-6016-46df-9e73-1b79e03eabd7",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4b4add0-0951-4888-b61f-7af3432ed82d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4d69bb2-7892-4112-b44f-519029edd669"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c504f447-f503-4bd8-8535-dc78d4666b82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61a11843-9aa2-4b09-83b5-805f64661bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc747ee8-c9b5-4978-b899-24d18d729c7d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d095965a-b396-4810-8fe6-0d99000a34f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b526fa51-e5a0-41c4-8c69-38edbd01e31f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab702fd7-330a-457a-8f61-9cff11b25a30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbe8a14a-71c0-4d31-988f-168757a54ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6659ca9-9883-43ab-a7e8-c2b5a1f866f4",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd46078-3b98-4aaa-8a9e-a7470819fa70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1844e0cd-f38a-4c6b-b39e-879a858af35d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e7416b-95f8-4031-810f-b42d9f66e593",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "debded2a-a9c8-46cb-8035-748caf6f4f23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ea30ec-8b89-427a-8cbe-230baffa55c8",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e0e012a-9100-4f98-9874-4d694b539869",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15f5cb31-d237-4130-b9b0-f5645647b9eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e672da-3454-4385-91ed-b28cb0ac5e5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5ea59af-00a2-4404-ba2c-5f416d82288a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20a9c4d2-eaf3-4bd6-95ef-0e983e354295",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fba7c5b-1b26-4702-8d76-07c7a860c03f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9586318f-210d-4246-bda0-0ff6468f8cd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac45a397-b2ff-41d5-8bcf-10c8a5654961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de3e7022-6c72-4fd7-bc77-dd2f404eebb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60f6c8ff-8215-48fc-98bf-d879522ed5d3",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94f4c21f-d060-4301-b613-74f47151f969",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6dfce15-668f-4dc5-a2ae-329f7fef29ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8474b2b-2790-4f29-9e56-25b7b0df0967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5365c4c2-3263-425d-840a-405dd523f39a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee449edf-cbff-4471-b871-c98d7fcc91c6",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "426a79c6-a618-4981-8301-b7f558fdedbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb345ade-8187-4f2c-b6e6-c1e4220ec6d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a7d38f-db2f-4149-a001-de598fc68935",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa14beab-73d6-407c-bc03-855c3ea3ff03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fc691bb-b377-4312-9dba-949004ccd1ba",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e6bd88e-3f44-4888-a31d-7eb80a035f4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11bec888-efcf-4ec8-a8da-29c1352a56fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bacd87c7-b625-46eb-a8cf-f695d94640e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd22f476-cf3c-47f7-9866-6f05dd6e1f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b82c423-d622-43e7-aa6a-e33cf994b992",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16daa98c-a03d-4cb1-a553-93f9fd9033b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03f88c55-aa2c-4cd8-a649-8fba07a1fb15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f07daf41-6afc-4fc4-9db7-5df005981439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5ff0802-ecb7-498a-bb04-74bb49ea7ffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a7b41e-003c-4682-a8c9-306371a14801",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80cc0667-2126-4492-b893-6276be908034",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdcd32bc-e0e2-4483-8bea-2ff8ca42e34c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbbaadd8-a055-43ed-b8c5-efadf4a6fe05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "962b7d15-6fe4-4e2a-9ce5-7c1354892d23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fcbd624-8917-4c9a-8df9-06a30de05738",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f56dc6f4-24b4-4579-8893-ba384ce4f5f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a953ca9f-4ab9-472c-b11b-0a18921e62a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c65a63-7988-451f-ad57-09d56e1d30eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b6c14e7-6bec-4817-84ab-9c348b8201a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ab2091-57a8-4aee-bd50-2eab5d77d77a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b6286ef-d70b-4398-84fb-57631608cf95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de44569f-8bf7-4013-a62d-77dc249380be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee64ba3-dd2e-43e3-8001-fcc7d21cac32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3e46b2a-ba6e-44de-8fb0-a11eeab7a0f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaa97d1d-1655-40c7-9cc3-43eccf60c4bf",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3235b983-4bef-4fa1-be11-4d42a50ff984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39d2c3c6-d03a-4897-9585-43f4627dffec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e979cd0e-76b8-44c3-a821-4d87bea3cfc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91875d69-1ded-4ef1-b019-94d5fe777a93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383769f1-b82f-478a-a769-efa7225cbb58",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70bf7fa1-bfea-4372-b6a8-41e980bbf2e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8381ac47-4f4b-4a83-8fb2-c794ad888c16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e4f5d8-a9c1-4f6e-8991-7ce770cc1192",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40eb86b4-0b19-437a-9bb3-c53bfdd304ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e516e68d-ef1d-469b-8f1a-b6b3215f575f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d99b894-2c2a-445e-82f1-4c23ab074bc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cecf3876-f6c0-4edd-b776-6486327e54a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc2415f-1f80-47c8-90fe-28f2eafcdff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fac8733c-c6ef-4a1e-b84f-bfc2df471595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21bccee8-be91-43a0-8781-91e5a0e9f716",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7085ec1e-bba4-4ba9-b920-cacbf5d658df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a9aa501-5931-4762-8d5a-b59f50a0d6f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf7d7a4-edd8-4f86-87ec-cf55bbfbaa2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1650c1c8-4f3d-4cc9-8f08-d17745f52639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "480abecf-11c2-4c44-b8ac-aa11c34f89b3",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44dc7160-2230-46bb-a20a-828d28d5edd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da734a87-41d6-495b-a4ab-70b25e01577f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29ed5f6c-eedc-4771-9a15-11eefcc39f12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7853dadb-e7e9-4e17-94be-35fbc7b21f92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1ebb1e5-c2f6-49d2-96cb-717e6e584c4b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deff0bcb-b8fe-4c56-8143-c3ea67980c57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acc4a72f-d05c-4480-909b-0b726ff4e61f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20db4153-5cff-4a71-9158-20e04515bc46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4364aeee-f7c6-44f9-80fb-66ac83662920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0da599-b4cb-4a5c-8110-8070e43cefeb",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f50100b8-a5b3-4aa1-9cfa-4d550eed4644",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31996ff2-e1a3-47a8-b69a-beb337684ce2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "049cb77b-5ef3-4462-9b42-64fb954268a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12a3b1ec-a2be-4d22-886a-2baf91423e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77b6c33b-7f56-4d10-94aa-52d7ab339fe0",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e56b00a6-86a4-419f-aab1-89df9f114a81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ed5a5c8-e8c0-494d-942f-54dbdbb39795"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c5e54da-3fa6-498a-ae00-37cdfc46244e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b52adf0c-0748-4ec8-b9c7-9f8a0791bef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30960ab8-5e90-418b-ab4c-9c17cb91126a",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ba44fab-95bb-4de3-a884-dd2f0ab726bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe407b2f-a991-436b-aeda-7d115f8b4ef5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa98cca2-e78d-4ad1-bb7e-2d79d87f973d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaa88ec7-147a-4968-bc43-656db217d292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a92366-27f3-465a-affc-28168b8627ba",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af925dad-34ea-4cae-bfbb-3b765abfe0e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "232e790f-33f9-4ed4-a1a7-bd95da83a80d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d8de399-86e7-4a86-ba52-81e27284e56f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eab0cbb-aac6-4efb-ac93-34892c4245e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80898718-2d91-4d23-9411-a8f20820bbc9",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8c7fd7b-002a-4d06-8341-ce9af8559ef0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d298c34-5602-4049-83a7-573807c56b59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf353ebe-6f3d-4c23-9003-ff984e62e2d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9ee3700-abf5-4bfc-aa41-6e3addf92c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da96ccac-8eb7-4ccb-8b1a-cbbb079fc58b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8da6ddb0-3c41-43a0-8eba-3dafb69a2a65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a012e17b-4e96-4c69-b8ae-fbeaf7a2132f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "638fcd42-2d78-465b-b7c7-f2d23f8efd25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66cda83e-fc4f-4b28-91c7-06bf9d9b2b83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc7c9de9-c65a-41b4-9665-38a6ae68e444",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85821a68-d501-4f72-b62b-c15097bd7059",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8dd97aac-9dbe-4f75-8b0a-c156a764b5c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac209597-4215-4abe-a51e-9bd4b4290b70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6015009-aad7-4493-8485-578c4721ed14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4286b43-7665-47a8-8f98-1e1b3084caf0",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f66ee4-5c3c-4ba1-802f-4aac2f076920",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7cce21c-2406-4e27-9fc5-a21677c322c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec329dc-3b16-44ec-9552-bfa0b4a774ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45defb62-2ece-448e-8265-1b0d4971cd0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af8b4c74-4efe-44db-ad95-143f686a3aef",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e331e6b-86ab-4eaf-93ba-d7d40ca5dacc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "998bcfb0-86e2-4cb1-b8a5-7df05ca4c54b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a6217b-6992-4a6f-a1af-4e4d9bb8b2f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "142b5392-6a1c-4ddc-b57d-4bc4e016b38d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7793098-926b-4326-a933-d21d5e5cc390",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98194cbf-8eb2-438b-b281-4f9b50067a29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d803d6c5-061e-4b53-a01e-836c521322b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f09eeee8-fd32-494f-86a1-bebf6c122352",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9e9b6df-aeb6-43e2-a6c0-671393ce78a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49b0c86c-5773-4148-9232-25e6626455e2",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f70bea4-d1a3-444c-bded-27584dc7df44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6b2f0cd-2ff4-4a09-88e5-723d426e6431"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec76c45-7b7b-468f-8034-08ed7c401c66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50fc490d-595a-45c9-86f7-d3be466b5c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fedaa48-2a88-4750-8d14-bbc83675b30a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c31ad16-81b1-4032-89ec-349610a27de8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b22bc6e3-0565-484e-b934-09b4a2acab9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f6f58b2-99d8-4976-8950-247dc97aa168",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6862c7f7-aa37-4c00-9a55-5f0804d0d0e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b566e6-301a-4681-9582-6a725556fcb9",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cb8689e-398d-4837-bd0b-b2e17c906d74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a445ec90-b8c2-44e3-90c3-9936aa33b0a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba0bfa7-beb3-4e04-8ee6-be26092b3915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ee1b503-6f63-4e19-bd9c-e8cfef48a8fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b2d1de8-ec3b-4067-ab52-4bcd0247f4bf",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01361b29-86e8-4624-ad7b-5efb83974e98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a6cabdb-20dd-475b-b080-1d08ab87dc83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f68734-dc1c-4bac-98f6-545941cc736f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f596f08-2425-4d54-96e4-27b7202f17a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e92b08d-5651-45a6-88f7-725585c95315",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6511087b-332d-436d-b248-2380e4d48bbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c3f4fc5-cd57-4ee1-96fb-6402d38341af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf93f23-9eca-42f7-8797-7fadd799638d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e82a9e6-4726-4c0b-baf1-6c2619bf1054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f737bc3-c65c-46a6-b67f-9c2372b71848",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fda35888-8146-4625-aa1f-a8ae1addc349",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00772e24-664f-42b4-8b4d-c92698e3c437"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "588df093-a1bc-4881-b7a7-3556410d3d76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a70b273a-0ce9-4864-825c-999e4eb4fb08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ece5f48-06fc-4b87-84ba-3cdb67b02530",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7217a51c-4f6c-4ab6-b9c0-19560677bd16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6ff1e6c-6c63-4126-8be7-02b8b1d8fc81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b59baa4-92d1-44bb-b3c6-70498c5a55d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a38b8666-aa8d-4597-8f0f-cdad7ab3b1df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6ad994-cce9-45ae-9730-134a0b0a47ac",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cbd5c8c-ceb5-4d17-99a5-fa07c5e82d9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9183dac8-1a33-4179-b3de-e0eff0fe727a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9137b157-b07b-4c12-9366-3552d4fe743e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a642572-19cf-4436-9fc7-1b8367be5dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7bd7cbb-0d62-4833-9089-603dd226ae90",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af7c4aa3-0a90-40cf-8972-0628bbde9ade",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3edde716-f3df-42b3-af45-8e77a02d6189"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33b196b-6dad-4329-9dbd-1b77ef64584b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9572efc-d76f-437c-8d54-327fd7a67dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "845b7cad-eb94-41a9-be67-50f7733333ef",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "653aa02c-3831-4baf-8c62-9ab040b0b401",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f2b6276-49e5-43b9-a82b-e9c7ff4a4632"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f466a34-80b3-4ee7-83d3-1798480c2035",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6990558-057c-4c0b-832b-abd855f7db81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bebc4c8f-bb87-4837-943a-830be9730857",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f2a2954-c6ad-4a3f-a7ef-8b2b3c5effab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3399e1e7-03ae-4b72-9d63-ad2424cdbc5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6bbd53b-528b-4b3d-967a-4f324dc3337f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b7144bf-680c-47f0-abd4-72713c44bcc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab7a3402-76cb-4466-ad9c-60de330a9c3c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9340eba2-c329-426e-8f5c-2b1f176e9075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90a397eb-02e7-434e-8749-ca9e8c085694"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b728a55-1efa-4d9c-b6cb-991bb05cea4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5f13d2b-5c29-4c7d-959c-77f560099891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af512b27-b88d-4070-9d34-1dd0a6eeed8b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26041b06-6f0c-4c1c-bacb-f5043595632a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46200d7c-e91d-4f72-8f0f-522a82a423e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13facfc-6553-43c0-b867-9e557af700fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab348000-1ce9-427f-94d3-15516c5f55c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e93f4ae-15a8-4fe9-a2c8-7c4c6f06aa62",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5240a9d-94be-41f2-9166-1acdd469605c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11e93761-1198-438a-914d-c9a559c7ba69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "247ccd7e-b6af-4ae9-a24b-3dac3a5d7328",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18e200f8-2472-4c9d-835b-6dde54cbe18a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc845d1-afac-47ae-9a3e-6619fe2e8689",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6169e868-6d56-4a7d-98e4-ec7e7654006c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc0046c5-d4e9-4a31-b431-22e7d8db684e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ceb06f1-53eb-40e0-9cdd-a41a8f42c563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee209ed6-6928-4b04-a2f8-719aac2fe87a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b7a5011-b234-4969-96f2-372760b6188c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f02d6a4e-dbee-4fe6-be0b-31dbda0e6036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ce77111-950b-4b58-9a0e-51adfb7a1fb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37799361-eca9-4887-8701-f1ecc9fd8658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b428d987-6f95-49e0-a95b-d684574359c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a4bf5d9-66f9-4294-8b69-28ac8e4e69f3",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b005d704-761e-4b68-bfe0-1f647ae86fd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37ae983c-4ac2-4a13-a7af-255e1cde65a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "007133c9-e034-4b06-9356-17ae7233c7cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2242212-d887-43fb-9656-20ede6148739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb09a44-b931-4413-aec3-9bb62ea408a0",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01cd96d7-0acd-416c-a410-5ced727000f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0afba24-3808-4780-a2c7-d7207c678c7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a200d7b-115c-4f34-9a7c-6d848ec2d450",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e94f39f1-5da3-4885-a74f-7e1e1926e5f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d51edd5-8393-4677-b960-5213f4fde731",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9071d5c7-b809-4875-8d6d-2c97d7b809a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "190c4e25-c537-441c-85da-a0572c819b2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6aa328f-6511-40a4-ad0a-79f09c4087a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df624701-d90d-4d95-aae5-a8f0e2f9f59f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e31ff56f-6255-41ed-864f-92b007487483",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "214e8343-7124-4bba-9938-b73ea1e550fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ce3e993-43e3-4966-b153-eee0033f8965"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20fd41d7-b26a-4270-a7de-420a3f2df6f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3558c39d-d161-400f-b0ab-fac6640d6458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7aaf32e-0062-420b-b5e1-9daf4d6f4c0e",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80908334-1f62-457c-9c0c-847af1be262f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51b86bd0-b7be-4775-a98c-d15736547be2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec33238a-60d3-4192-9c9b-ea75c0838161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3430b76-34fd-48a1-a174-5c4ca667d283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb47c1c-39c1-4d84-bdfa-200778330149",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3c36653-5fb1-4fed-b2e5-3b976d1a9fc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3e4d20a-e36e-4451-8533-000c0cf66015"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94bfba46-b91a-420b-a388-278558f13e1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99f674c7-593c-4e1a-963b-300264b0605f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "317fd59f-6750-4e57-97ba-50350eed8e61",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e55f858e-209b-4367-8f01-eb3f3366108c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f49c6e4d-0bdc-4c58-973a-fc160adc7896"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9221a934-40a6-4e10-88c0-18e3a7f71b5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22cb4cc5-ef22-4b25-ba0c-11f1444de3d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "186c60f8-aed6-40a8-8a56-443f451af60e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f18335-f438-494a-a1d8-20674aa06c5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c25ed7b1-57cf-4010-ae22-3f766aad10ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab50f269-fd2f-49bc-94bb-232c24116278",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7cfdc78-4934-4af7-8a0c-ac375ac1b89b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "470a925f-4dea-4fb2-a0c8-af3489ebeece",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a5abb57-653e-466e-b9dd-5e44e2aa63aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f71f39ac-5942-46a6-bd39-e0b2d4f87eff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b95f29c2-e00b-46b4-96cf-625972619e54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b466a966-b1b0-412b-87a8-93dea6293932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40870888-11c8-4967-a2c6-b0427ecadacc",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb24641-51bd-4ab9-84d8-15d357bbd026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ceb5119-cbc4-42a4-b693-54ade76ffc84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01aeef8c-1915-4907-a370-b0d72a787c3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f00992d1-f82c-4bf3-963a-196a279f1d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b21bdc4e-cf10-4304-8234-2f9ed6e4e2a5",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b06c42-2dba-4729-8508-d6be8b5ce9db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0330971b-f3dc-407a-8d28-15afa14614ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4854e1bb-3637-4279-aade-e468149e8b5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5576c5d5-2afc-449d-a7d8-4519b618d857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c774dc3b-f1f5-4363-b569-56e0016a0789",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1247e805-e2ec-4e81-866e-5dc688fe3af0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "752497f1-dfb4-4770-9038-4b38d7eca363"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd90140-ba6c-4641-b734-59b54928176c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c216151d-5dcf-4419-b232-8d90d353a356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e639bc4-859d-4ef1-a65b-ca1828fe5603",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e15d59f9-5f28-4d5c-b914-097514edfa0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f706e73-e59e-46ce-ac1a-42baa10a003e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ece7454-d677-4486-8088-0627eb812233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5053b6d-30ab-4656-96c0-81ae75081ed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b0f50e-41c6-440a-acf7-8a8d145f3e25",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e67ad547-53d3-4070-b26f-f81f6b022f97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "295b8508-fbf1-4e01-aa53-d42eb4429f92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86c0761e-5203-45fa-86ea-9c38cbaf8e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a2a1360-7722-4751-a457-616a98e2e85c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d98c85e-0acf-4521-9aed-7951ff61202d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31b1a4b6-90dc-4f29-8b51-3788a95a21c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44f76f6f-f852-4fcf-a53b-5da9021f0dba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89771d6-a3a5-4a49-9b44-948c6453cf5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01ba3032-9c9a-474b-84f9-e4b7b77166bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fec687b-d50f-4a78-9e0e-f48a70c570d4",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8eb88ce-25ed-42ca-ba16-e7816c230fe6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "486c433e-282b-4823-8edf-b05d0dc49e4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18bb99b6-95e8-4891-8942-21ac6d2cf295",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b256bbcc-3200-4949-bd19-ae0920162b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bb5d35c-9ecf-49d4-ba11-1f0256480dab",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "763602fe-484a-4874-a7da-099ec5364232",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9632723-1e11-477a-9266-951c9b33eef5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "334c0056-494b-41e0-835c-fbd54ba72def",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce24ecc3-1c2f-4856-971e-857ee2f13fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e06f12-564b-482e-a2c3-c98140920d45",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe515a6c-57e0-4bae-a1e5-635bd5f1788d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0afdfcca-6aba-478e-ba83-172e2386035e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ad08488-703c-4fea-8b3a-42cec9e0d2aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4a7b22e-45a8-4c28-8537-5d2be50eb3e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c5e9f7f-ba3b-4247-bcfd-caf72baf425e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b004b292-56aa-4eac-ae78-c75464256368",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b61bdfba-0d63-4048-a902-b8a10d51fa1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db1cdfa-cb30-4bdb-9f9e-d9616ffcf5e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d152b751-9b30-4c4d-a608-df84592fbd13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a3e3e6c-0536-40be-9167-744772469b33",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f3abc7a-215e-4ffa-9d7b-2e7c20b271a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16299229-2d33-4df4-9760-27581c988656"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee46111f-4aca-442e-a7a4-4e5b09a4bf46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6878a9f8-0849-42ff-8f57-e3a158cf1e06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ece31f00-7b0b-4b21-be5c-853de4dac63d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc2d480-cca1-4e22-a818-2ac5f2da6544",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88a8bcfc-f43b-4b8f-af13-535c975b3a0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "515ff43f-a634-4a83-b90a-7cb1fb9cfdfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b887271-8392-4e12-b159-a861982e8433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b4baaa-5955-48d3-9d67-9a7a2f114c84",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "436b2d53-a100-4242-849f-6bea0088ee9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d35621f8-f83c-4a3d-b5c3-4435e45772f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e47b742-3cfe-405b-8884-868563575f7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa175309-2d2d-46c0-9a07-c67ccf7811db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff6e3fe9-5d60-4abf-aa9d-3725657ee809",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02d2fa6c-f84d-4882-82be-c248a9fe262b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f316137-cae7-4c21-85ed-7842c8fdc406"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcba91cf-2788-4bb9-90cc-3cac1ff39658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbc7c7a2-4f34-4aec-a5f9-d5cce12413f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f9f6ad-14bd-4834-9353-4e77b060a133",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "789b0521-1158-49b3-ae6a-cb9018961de8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "633b583a-1612-4ae7-bb46-41f1c8a17e9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5129283e-3ce1-4bb0-9f43-9a5d548e3410",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ec149e9-7e52-4961-a13e-21c3b6c2503c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "875f75e4-3d18-424f-b9cc-63dc7178bc3c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afdd59d6-8504-413d-b271-687623539edc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a32ae35-d4ba-4ed2-ab0c-d4303c3edb8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a464772-4bea-42af-89cf-9dfbb19215b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a1d5b3d-f3ef-4ba5-857f-fa22541ef201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7041c28-18e5-4f23-9399-87eb68cdc0f5",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bea71f7c-2461-4e43-a13c-6e7d638f2097",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cae77233-bf73-468c-bec4-8f43cfb05fdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be13fbc8-8d07-4ade-a54a-71118922f42e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcba812a-ff6d-431d-8a47-de2cfc512965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07fb19bd-fa81-489a-b671-3b7319d83ac4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e402f89-69d1-446f-b78f-e28ddf36ae0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c55d674f-e636-48b8-a723-1ec7e773a208"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33faaec-5a58-47a2-9f59-102ca87b4173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8274afaa-43ce-425c-8ac6-67313bd41b09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95d0ce0d-d4f5-4c8e-9b00-ca06dd5c8184",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "debd5ada-8012-437c-aa0f-53d6ba9010e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6664cd13-a13f-4a91-a961-8381c5683545"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef5a6593-c914-45b8-be2f-c89e4ff27949",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6e826bd-9cc6-44ed-a36c-b02ae1a300b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "938839d5-2b59-4acc-99f3-2a1964a0cdf5",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54233624-58b0-4d5f-9f0d-2912f4f4c242",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32e1b5c1-a097-4ff4-acc4-4e6d5db8e18b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef5745ec-3fe5-4d93-8a2e-3f9bbf7ecb5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa295fe7-d356-4e75-9983-82fe75195638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a8d40a7-c762-4e0a-8a60-a396508613f2",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce9ef91f-8bfd-4ece-a049-f63348964378",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a14a74a6-702b-4df8-b64b-64c724084333"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0534f4c3-24f5-474d-b4a2-dae0fad5d5cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8ed105a-3f4b-4594-a39e-0ad1000cfc97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56309b19-6e7c-4325-b217-2ed5c4cbe27c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d3305ed-fbe6-44ec-847a-baec57403003",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0945702a-1db4-49bc-97e3-00e224ce2343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66efed09-32eb-4623-bf1d-c3417b6efd7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9396e2f3-467b-47fe-9b8b-2d8f045920a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a98af8-9ced-4210-b8b6-d2a9e40cc5c3",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ea3027-fd20-437d-8d62-b35e367000a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4027ea1-b8c2-4e14-b932-f83583b74169"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c1a807c-4502-4325-93f7-b830ec77687d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f1edc53-68dc-4443-9acd-e3c607bad625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4eed886-7922-4827-bb2d-605807cc3ef9",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "575a411e-8687-4f8e-866a-4b72dcacb419",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "027c39e5-1178-495a-9d16-7d4ee105fd59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "970a867c-0000-41bc-9184-4d532fea3e82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ab64894-d8aa-4ac2-8195-1bda0548112d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f05a5f-509c-4600-a54f-d0fd93313467",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6cea70e-ac54-43bf-a3a7-6df67b21b24f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1976f45-151e-4fc6-b113-7b872d2e26d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5de23e4-510d-4ce0-8259-e50f3e8b5a14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1d9b5ec-9c27-4ba3-b5bf-253020dfa9f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b8b638-6c01-4d74-9a20-9c655bc76979",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ec06190-755c-4ac3-ae49-58ea6457fde1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f1c9934-aeb5-4174-a3c5-1e633cfd7527"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb9b6c7-b14a-4797-a9a2-7ca20ea0de2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25c45d97-80c2-4b1b-b3f7-39386ed4f60d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d69731c-a5b5-49ce-a272-f0fe8cda5eb4",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25234b04-8979-46b0-bff0-7aaa5cb72656",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55c64af9-b086-4f51-ae5b-e16c40494167"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90431544-e02a-44fa-8efa-f1c9de07af1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5a2fe48-ec6a-4025-8de9-831f3fac75a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ed85bd3-b013-4592-90cb-4f92eee9febf",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c872fd3-40bf-4913-830a-3415e642d8d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9be128c-4112-429e-9b27-8668334dea36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4af8d8b-ec4a-40d5-8189-0396f047c909",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab7e94fd-812d-497b-bd53-2b0030c30f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4b5bf68-0609-4a55-80cf-3c9b61cb5f25",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f2200a6-40a1-4290-a6ae-bea74b460988",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14073b0a-2f63-4bc2-b364-f16d5b3fcd04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7ff73d1-91cc-4e8f-9f20-ca9ef8cf65e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c2b534e-c3e9-4f4e-895f-8c8f1dfcc8ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1803543-585e-4a0b-b7ed-093e5906fa62",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1d1a29-fec1-44de-bc22-bb7897ff8a81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5050eb96-6bbe-4460-9283-412543e207e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c8f7628-bf0e-4314-b3da-0f6719899a5c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14382f1a-307b-4ca7-a333-b7f2e7fc4242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac05655e-d70b-4de7-87d7-916ae27a5042",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114563f3-b196-4115-995e-aec09904c74a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99cca9c3-4377-4223-9ebc-5ef2e69e6e98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f5b168a-944a-4c68-b7e3-733c57f6270f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99a698f6-4299-4d39-8374-f6bd91c8b75e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f6f1cb7-f0ba-4a38-a88e-e1fa3ab4a13c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a3afa47-89c0-428c-a363-0db486f444a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99f4314f-0d05-42f9-a236-1bcd2a5a7efe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73ae4233-0f5f-4d73-be48-2ad4937e8c7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a907c1a6-4c48-4444-b739-3be448452e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db1c980c-6fc8-41d3-b7c6-a05ebe9d58c0",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2294a8a5-030c-47d2-9994-d87df6ced620",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97de743b-5a43-4bfa-9357-a7814b30c7fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1f6c4e2-ef5e-49a2-b512-b53bb757abe6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbb03d1a-c1c6-429b-819a-c2fee9345cd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8796d8e-d9b0-4db0-9cc7-5a74ad260860",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f8cf24a-f9e2-4b4d-af40-de64fb1ad5be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cfbc841-a5f5-4dee-aa79-4b8b97c106a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b676106-5ef1-476b-abc6-e67ef698f8a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6823cb84-d4bf-4808-ba95-26dba5636b54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44b96b40-27d7-4097-919a-b1883254223e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b36f3e77-a029-4242-90b4-38df0a6d3151",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66d94df8-c458-4a88-84bc-048e6e285489"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e61c85-6b41-441f-acba-3eb9f9f9d3f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53d0cfd7-9d28-462a-a6e6-5b22348de55e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54636de3-23c2-4ef5-abc7-1eac84f54b21",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c408b29-b358-4dae-b72c-2734f4d81e70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "238c48c2-1089-4571-9327-ee511f5eb893"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9552238-4f5f-42d7-a15d-df438eff5de0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a22f4ad-b5e3-499b-97b6-0795f1914aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7503739f-3e11-4cf4-9f49-857185600c87",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8473204f-d514-41ab-a4df-e9ec67fd6e41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5baf45e6-db48-491c-8415-03d17451ce22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b74f5c96-7074-4b5e-b316-a20c82a0f2f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8235b2de-3c7e-4a4e-a429-7291681affd5"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "28384458-8c97-40b7-a6e3-e358ede6561b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dad406d0-0b3e-4e96-8a7a-adf6e03055d4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0746e505-d56f-4f65-9df0-3cef9bd1d960",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "01fa5492-27f1-4fad-8ef2-1339f3152002"
                    }
                  }
                ]
              },
              {
                "id": "559b531f-1fe9-4ad1-9448-a7aedc4aaac8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "181e00fa-568f-4ef1-be08-ca037246ba9a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f88134d6-8a94-4f7d-ab47-819f4dd74f5b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "54f37ee9-8868-47f8-983f-7d3d7877e91c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be8a129-0126-4ad9-bfeb-7bf011009a90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef40cf35-c305-44b6-b346-8eae3665a4c8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03b7f8a1-eabb-4acd-bc25-eeb3914826c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "acf07d25-4d80-4fd9-9f8c-014789f174e5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c5f8bfd-cb76-4eda-9c63-ee0863c62254",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd5533d4-a61b-4f0f-a9f8-7c18c765d1a0"
                    }
                  }
                ]
              },
              {
                "id": "6e8446b9-4c5b-43b4-9b60-d0ccfde12f6c",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "4f3363d9-3931-4591-9ab0-578ffa6929a7",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11e12664-56ae-4cd7-b159-2f43c07e8f8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "46861cd0-71b9-442c-808a-6056b3199f8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f2f9b2-6435-4c8c-b018-21bd9a95363c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d86a0b39-2ad5-46e9-a6e9-f367d83c152e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8979292f-1d92-45e9-8e66-3cb0fd4b8266",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5a7644a7-1f98-4dcf-b3a9-24ab5e7e9589",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "685d38b4-bcb7-4e73-946c-4a44d595ebda",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9cd10669-972a-44be-82b7-9eceddedd098"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "993c8de8-0019-4d73-b969-5255fe8f6e58",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1acfff9f-9bd6-4c00-830c-2e51aa96a8c3"
                    }
                  }
                ]
              },
              {
                "id": "1959b0e3-c45c-4230-b39b-efe3cfbd42a1",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d947417-3178-402e-851f-b3a1ee299dc2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b1516d1e-9ef3-47c9-b409-84a3c48e672a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "952613c8-475a-43f6-9427-b11c2e96c4fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c596e73e-8263-46a3-bd1f-daae3031af30"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e5118e50-4bc9-4d41-9270-4bc49f233152",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e46fefb2-813a-4ee3-a2a0-b31c76a9d111"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2250d678-82c3-4151-8b99-6fa09c8f3a2b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "41126445-238b-45b8-970a-84e79e6099f4"
            }
          }
        ]
      },
      {
        "id": "c9bc2a47-0669-4a07-a6b7-ec8a32a8df8e",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b6256d3b-f8b7-4a78-b637-315c2c733607",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eec67723-8c98-48c5-ab43-db8ed24e476a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "66ca99d4-5ab0-488f-a433-f7a03deecd43",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4083f687-31c2-48c6-a1ee-6c68484c240e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "643eda1a-674e-4552-8f6c-bf6530374a91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb8ff59-e092-4e30-9630-38f9ff6bdade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d8fe388b-9b11-4d89-ae95-3577cc3e6196"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7eb81ab7-2425-456a-814f-18fcb3ea1928",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee9f1533-dc4e-414c-9d6b-8d9822a11b55"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "584d726e-f20c-466c-a552-180caa4f0903",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "662a2b05-e2ed-4ee1-b739-5bb939d94ffb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "323225da-cb18-405b-8fce-6cc07b0d5075",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "79936c12-62bb-46bf-a66b-dba7a514f1a1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f29ca6a7-7a35-4c34-a373-d0ec32ae4b17",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "360107d5-0c65-497e-9bf2-9bee079cbb63"
            }
          }
        ]
      },
      {
        "id": "41a2cadd-ecff-4ef9-a375-4eeb0ddb7e94",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "0e3ba2b9-588f-48ac-b290-536910e6bd25",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2e161159-6950-470e-af01-4509757dc4e4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7b843877-967d-487b-a461-41214a154119",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55888074-ec05-4f5e-9e34-149d89d85497",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4fbee394-5aeb-4817-8f20-60caafc9592f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faba9dcd-fd13-42c6-8d24-13d94f03c8e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8a5e9533-13bd-4fde-981c-3acf4dc9fe2b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f11edff0-c890-4461-b84e-8168f92f57a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b2ead119-1f11-4260-8df2-8ddbd30b19f8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7b9a0c4-b21d-4a66-b171-2a7309bb441b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7793b6bd-08bc-4fac-8cc3-1f71d5cdef8a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6473b2e6-647e-40ec-a680-0ffb0d5d4ce1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c34e876d-64a4-4582-b4ed-dd0eebea02d4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4b33dff4-1786-4ece-ac95-d245ab459de0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9a8d76e9-7604-48fd-b4f2-9f44c2cabbce"
            }
          }
        ]
      },
      {
        "id": "2abcceb9-c06f-44ab-9796-bff1157b28b5",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "8a228426-a54a-4266-8cc5-1ede74bc3da0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b4128c0c-0073-437b-8fcc-436d20f97353",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fd655a61-b7c9-4ec5-b6f7-4d898478d9ac",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c48f5b77-d347-4b22-8529-9461c0c38b96",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e7a6d32b-7acf-4140-9d80-cd2ed95b6104"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba2fb04-3273-41a1-8ed1-0838ac4e6474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8a593763-6ba5-44fa-8fd0-81ede75a3402"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "73fdda5a-1d18-452b-a20e-34b8b7fa9862",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b86e99fb-cf2e-4196-8a2b-73d233729d55"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "926dfdfe-c28f-4bc1-90f8-5cd86fe79809",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0dc86864-8ad8-4281-b579-aebecfeb8cf9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "481d564a-6f4a-4353-b3b3-0bb20633d8e8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cc942326-b8f6-4347-98cd-c4cfa4e52777"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "142f1668-d61b-408a-8cc0-49f685278611",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3e1654cd-a851-4ad5-846f-5bdf99da9fc2"
            }
          }
        ]
      },
      {
        "id": "dff9a124-56ea-45e7-bf8f-ffc11fd37064",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "86c2da21-6661-4a00-8679-9738ba1d8a9d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "675f40ec-24f4-45a5-b2f6-9a09899e7fe3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "80c96977-a981-448a-a381-aa6d73fb6dfc",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bcb07fe3-8c67-44a5-a9dd-3b7751efa832",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6fface12-b392-4dba-bea5-bad4a00b1b73",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 132.08802816901397,
      "responseMin": 17,
      "responseMax": 2399,
      "responseSd": 278.27466925111247,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1693787599205,
      "completed": 1693787652538
    },
    "executions": [
      {
        "id": "8bd524bd-0f02-45e6-a81f-9eef6626e6d6",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "502bb629-bcbb-44c0-8a0c-975e2b62da3b",
          "httpRequestId": "bb15203b-9e29-46c3-a250-3159a230ead9"
        },
        "item": {
          "id": "8bd524bd-0f02-45e6-a81f-9eef6626e6d6",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "50486b80-65bc-45b6-a4f2-33590c4ea988",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 0
        }
      },
      {
        "id": "6062c5bd-ea1b-4b23-8201-ca71c93a2bad",
        "cursor": {
          "ref": "7bbf30f7-87a5-4d7e-9088-250758e7b979",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b452c031-3c9b-418c-847f-c43e712ba6a0"
        },
        "item": {
          "id": "6062c5bd-ea1b-4b23-8201-ca71c93a2bad",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "6a8490cb-d9ce-4431-9557-00d65485fb7d",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 0
        }
      },
      {
        "id": "c4bb954c-8b72-45c9-b4d5-9dd1eaf7343b",
        "cursor": {
          "ref": "86211735-b40e-45e8-9a89-12f8549de0f3",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e4d0b4ce-d848-4b90-b6e6-fa9ae258791d"
        },
        "item": {
          "id": "c4bb954c-8b72-45c9-b4d5-9dd1eaf7343b",
          "name": "did_json"
        },
        "response": {
          "id": "627c922d-15c5-4a15-a74d-13fcce347d73",
          "status": "OK",
          "code": 200,
          "responseTime": 353,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec22d235-1f6d-4a89-9ef1-5275245cf59e",
        "cursor": {
          "ref": "402cad72-9af2-41a5-b249-66d715ece9ef",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c8b2a7ed-75a1-4095-af97-ab328c12ab47"
        },
        "item": {
          "id": "ec22d235-1f6d-4a89-9ef1-5275245cf59e",
          "name": "did:invalid"
        },
        "response": {
          "id": "d2fa7c0d-fc0f-4f8d-ae4d-bd612eb0ab52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec22d235-1f6d-4a89-9ef1-5275245cf59e",
        "cursor": {
          "ref": "402cad72-9af2-41a5-b249-66d715ece9ef",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c8b2a7ed-75a1-4095-af97-ab328c12ab47"
        },
        "item": {
          "id": "ec22d235-1f6d-4a89-9ef1-5275245cf59e",
          "name": "did:invalid"
        },
        "response": {
          "id": "d2fa7c0d-fc0f-4f8d-ae4d-bd612eb0ab52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d23f4bd-dd1f-457f-afde-4edb8e36e976",
        "cursor": {
          "ref": "451e7bd6-f10a-4fd9-a839-8d562a5bd7b2",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "0d3781e7-14b4-42da-8a9d-0d9fbc5c529d"
        },
        "item": {
          "id": "7d23f4bd-dd1f-457f-afde-4edb8e36e976",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "89d7ce03-4a94-422b-837b-2ce7d792b16d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 120,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c342961-4ac7-4261-91c3-ad4d6cf2bd22",
        "cursor": {
          "ref": "994ea594-d590-406a-863c-3f8a7f25ba10",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "dc8d67ac-79ef-483a-84e4-bbd14dbe745d"
        },
        "item": {
          "id": "0c342961-4ac7-4261-91c3-ad4d6cf2bd22",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "55aa9a26-5785-4840-9077-59629aa9b4b2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 66,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6005b6b7-64c1-4d1d-b511-8a5cd2bff37b",
        "cursor": {
          "ref": "6db6dd3d-d802-4d89-8211-2863e03afc0a",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0c0c255b-fe82-49ab-98d2-afbe8b87040e"
        },
        "item": {
          "id": "6005b6b7-64c1-4d1d-b511-8a5cd2bff37b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ce10ff45-e441-4870-ad69-dc173722e078",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d93e1fe1-2378-4d3c-b360-18bac34b03ee",
        "cursor": {
          "ref": "f8aa786c-4f30-4ef0-84c4-13ffd3377cf8",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f93398f5-7801-4f1f-b05a-2c32ba0d66c5"
        },
        "item": {
          "id": "d93e1fe1-2378-4d3c-b360-18bac34b03ee",
          "name": "identifiers"
        },
        "response": {
          "id": "f078d1dc-6d67-4c15-a7f5-0f528ef8f62b",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "511b3a0d-860b-46b4-bf6c-cb34df52ab65",
        "cursor": {
          "ref": "0308d313-7650-48f2-b758-808d0f36d263",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6964ecee-e532-4dd2-b906-412388bb0ecf"
        },
        "item": {
          "id": "511b3a0d-860b-46b4-bf6c-cb34df52ab65",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c9a6529a-d379-4e3a-a39d-3f2afb31ed5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f35978fc-e13a-40df-85d7-e407a1d2fe59",
        "cursor": {
          "ref": "77460d64-c869-4712-bcdd-43a48726f71c",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0c7ba7a7-a939-4d49-8229-2647efef510b"
        },
        "item": {
          "id": "f35978fc-e13a-40df-85d7-e407a1d2fe59",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a54a7b5c-3615-48a4-af1e-e2a38a313ec0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8a08a84-f6fe-47cc-baff-bb5a64a8a769",
        "cursor": {
          "ref": "777bbaa2-5206-4dab-822a-4694114bf324",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "937e0dd5-8130-4f67-8a22-8a30703a28fb"
        },
        "item": {
          "id": "f8a08a84-f6fe-47cc-baff-bb5a64a8a769",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "788655c0-7250-40d9-a60c-1f78ae890fe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e6c81b7-2bd2-4d5e-a2ef-47c197421167",
        "cursor": {
          "ref": "497a717f-8ac2-459a-94df-889726b38e93",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5f77d42a-dc6a-4664-aa79-18c906c4fd50"
        },
        "item": {
          "id": "0e6c81b7-2bd2-4d5e-a2ef-47c197421167",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a10af094-b4ef-4ef2-9272-08fa89f69e6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aa2c986-df1f-4d17-9491-52fc688087e3",
        "cursor": {
          "ref": "cffce361-67c9-4ce7-844b-726e893f6b5a",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "101ca7a7-9695-4c38-b730-5e24c36c038e"
        },
        "item": {
          "id": "5aa2c986-df1f-4d17-9491-52fc688087e3",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "e8506028-0c44-46a0-bd2b-73389258f36d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "586a211c-a58c-45e1-acc5-3efef232e1c4",
        "cursor": {
          "ref": "5055fe07-46e2-4e42-89c9-ed5e5c96e6b7",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6fe083b8-4ea0-4967-8314-57f3edbe7fad"
        },
        "item": {
          "id": "586a211c-a58c-45e1-acc5-3efef232e1c4",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b202a5fd-6c0b-48a0-82d7-1b1110a69f48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65773312-bf74-4af4-981a-24addef2ab77",
        "cursor": {
          "ref": "2dfc837d-ad3d-4631-8b26-7a6f1edb0a00",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "77b7b717-d697-402b-b48b-bf6babacfec4"
        },
        "item": {
          "id": "65773312-bf74-4af4-981a-24addef2ab77",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "2ee0ad21-cb25-43e4-afc3-85e895bcb047",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c994fe5-dbf0-4085-93ad-0eed611641f5",
        "cursor": {
          "ref": "5795080b-4baf-408f-85b4-6d2351a3a0a9",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "a3b7c010-fb8f-4d89-aa12-136924570026"
        },
        "item": {
          "id": "4c994fe5-dbf0-4085-93ad-0eed611641f5",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "928916a2-74b4-44bc-bae2-8abeb2cdd97c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c298ef7b-59f1-442f-898c-e72514926706",
        "cursor": {
          "ref": "8ab1864e-5812-452b-b4a9-d826119095d5",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5a4058d4-6804-48d5-be78-6561d25184bf"
        },
        "item": {
          "id": "c298ef7b-59f1-442f-898c-e72514926706",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b993767c-7d66-4fac-98e4-e69e0f1fe972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e844b16-9624-43d8-9f28-57cd09fbe655",
        "cursor": {
          "ref": "22bb5aee-d69e-45a7-927f-716823855259",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "87308f78-618c-477f-9f8b-6976363b971c"
        },
        "item": {
          "id": "7e844b16-9624-43d8-9f28-57cd09fbe655",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d493ba38-2172-4bce-ac07-fffa955fced6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d265ef00-0908-4ab4-b463-8841539c559d",
        "cursor": {
          "ref": "5b9594d7-53e5-4611-9c10-8c5a881e1373",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "63f1e8bf-df84-4dde-b3d6-e5c606facec8"
        },
        "item": {
          "id": "d265ef00-0908-4ab4-b463-8841539c559d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "bb2f68ee-6d51-40ce-aebc-abb6726927b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dff68f41-4821-4e0c-893a-75a06194522e",
        "cursor": {
          "ref": "b6b67716-4573-4f0a-a900-e5d00e61cc76",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "49fd15d6-f4fd-42c0-99c8-693988d48b64"
        },
        "item": {
          "id": "dff68f41-4821-4e0c-893a-75a06194522e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "3f3b98bc-7966-43bb-9b6d-814e9826b06b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a19e1b3-1448-4e50-bcb0-75133f45a334",
        "cursor": {
          "ref": "2b6c6c7f-6c38-453e-aa1f-3665389bc281",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "e3e21de2-5a9f-4d8a-a179-52e764194081"
        },
        "item": {
          "id": "6a19e1b3-1448-4e50-bcb0-75133f45a334",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a256c734-422b-4333-ab99-d66615254e9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67a4c699-8223-4e24-b613-516c60a2b9ac",
        "cursor": {
          "ref": "536d53c5-b81b-4a49-9f21-76069c7ed3be",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "75852f3a-7b6b-4044-8d26-4198a8c620c2"
        },
        "item": {
          "id": "67a4c699-8223-4e24-b613-516c60a2b9ac",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d9c2a0fc-e937-42b9-ba7e-1d7aea0b6b57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f8d516d-5183-41e5-a3a4-82b8644b6466",
        "cursor": {
          "ref": "0c996e77-3d35-4ddf-bad1-fa08cbda5da5",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d5c46118-7994-4703-b899-408ff321118d"
        },
        "item": {
          "id": "0f8d516d-5183-41e5-a3a4-82b8644b6466",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "03b24e6b-0e69-4926-9626-ca2e08ccbb10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e694d32-de02-4f6a-b419-713b95f1f036",
        "cursor": {
          "ref": "6aa29074-4993-446c-82b8-47ab67cc2100",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ebae030a-0590-4c42-8f5e-ffb84d86dc87"
        },
        "item": {
          "id": "6e694d32-de02-4f6a-b419-713b95f1f036",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "6115796f-bc4a-4057-91c4-ea3e5aa1c022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1046b3a8-99fe-4c19-939b-56ac5ebb96d4",
        "cursor": {
          "ref": "e22fbd16-dec6-46b4-9c14-e5fc376acf62",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c2ecb461-4281-40be-9713-9f720a6a2088"
        },
        "item": {
          "id": "1046b3a8-99fe-4c19-939b-56ac5ebb96d4",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f25f690b-f1b0-47e0-b8ce-8f15cce29d0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d00d9136-004d-4f62-9fa1-cf406c1217d8",
        "cursor": {
          "ref": "33b93cfb-9442-49bf-bc5b-01eddb953223",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f9d50da3-109c-4f7b-8320-17684353aa81"
        },
        "item": {
          "id": "d00d9136-004d-4f62-9fa1-cf406c1217d8",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a357e8f7-e9fe-4b9f-9fb8-21845b3cc7e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7713be14-de7f-40c9-aa5d-1cf66c1204ff",
        "cursor": {
          "ref": "a4d8a7aa-312d-4f58-b48f-6daca1833131",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6bb99f4e-f6e6-43b0-aee8-058fd9386c7b"
        },
        "item": {
          "id": "7713be14-de7f-40c9-aa5d-1cf66c1204ff",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b4994ed8-fc1c-4023-a11f-67c0787ff796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f89d159-57b0-4f60-8e6c-e55809176234",
        "cursor": {
          "ref": "0d2a090a-4b78-470b-bc80-24c975c59aab",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9d52b48e-8b5d-4077-b8ff-c104db61cd1c"
        },
        "item": {
          "id": "0f89d159-57b0-4f60-8e6c-e55809176234",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e1e9ed92-c06d-42e2-8b06-974757bb6612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ebffa05-a2bc-4198-be09-83d3c6ccba6b",
        "cursor": {
          "ref": "337c9d01-ebcd-41a5-8ae4-d7338c7732d7",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d6e0cdce-d8e3-411c-9c0d-0ebc58a2f5c7"
        },
        "item": {
          "id": "1ebffa05-a2bc-4198-be09-83d3c6ccba6b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "7492f63c-0e3d-497f-ae41-66cd18cf6fdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbf3b7df-0cf8-45b9-8dad-281c0f7d986c",
        "cursor": {
          "ref": "9a54b54c-5ba0-4674-a390-8a43b89ad38a",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1252e8d8-207a-407c-a452-684079248700"
        },
        "item": {
          "id": "fbf3b7df-0cf8-45b9-8dad-281c0f7d986c",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "af307885-6f32-42f0-9d35-6c282ae9bcba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40ebd4b0-62e6-45ba-a214-81e3d7c7a09d",
        "cursor": {
          "ref": "c8e7615f-ed33-4c58-9fd2-3de76af5ba5b",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7655e829-1381-486a-8c1a-3ee2712473c7"
        },
        "item": {
          "id": "40ebd4b0-62e6-45ba-a214-81e3d7c7a09d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e37f7d85-8a58-4273-b26e-e76f0893ae2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "668995af-2e03-4969-a56c-84b669fd860c",
        "cursor": {
          "ref": "8035cb7f-7536-4bf7-95cd-2b3e695d2b5b",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "939a4c94-5146-4c93-b92c-a3781ff2fa05"
        },
        "item": {
          "id": "668995af-2e03-4969-a56c-84b669fd860c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "36a4c4d1-e36a-4bd1-a47d-36beb37c4ebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd2eb44f-41e8-4cb9-a823-8bc224041675",
        "cursor": {
          "ref": "6c01d24d-d73c-4a3b-b2e9-b0dd1d3eaa62",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c3027823-dd07-4c86-ad49-77acbdcab810"
        },
        "item": {
          "id": "cd2eb44f-41e8-4cb9-a823-8bc224041675",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "cc28bd64-d820-48c6-9357-71c42c619bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0d7cf10-97a5-4f8d-a268-6b89165229c9",
        "cursor": {
          "ref": "d4123b44-a668-4a8f-8a99-3acf05cfdc56",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c1506393-cfd8-4ca9-9c2f-71b1fa58e61f"
        },
        "item": {
          "id": "b0d7cf10-97a5-4f8d-a268-6b89165229c9",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "fe3f6725-d29a-4606-ad65-e90942b29d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cc7b74c-1a94-42df-9b9b-69f6b7baab24",
        "cursor": {
          "ref": "a17a9d56-3cc1-4a60-8181-8b3393dd170e",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a494dafe-0bde-4f06-ad7b-18703411d495"
        },
        "item": {
          "id": "8cc7b74c-1a94-42df-9b9b-69f6b7baab24",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "6876af8d-3756-4bb4-919c-f55ceb2657c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93189710-2c2a-4f4b-8abe-c87304486365",
        "cursor": {
          "ref": "e1e6fded-b60c-4b5f-9c67-7b59a2fa73eb",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ea543262-37d5-4953-9e8f-796a02f472e4"
        },
        "item": {
          "id": "93189710-2c2a-4f4b-8abe-c87304486365",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "22675cd6-812b-4af3-b1c9-cfc6cbd3bd6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04e68bd8-7da0-41c9-8e59-50df55a054e3",
        "cursor": {
          "ref": "853ac7ba-fa0a-469b-acec-4f66b12dc0ae",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "2513839d-7a43-440e-b32b-7a69f35efa05"
        },
        "item": {
          "id": "04e68bd8-7da0-41c9-8e59-50df55a054e3",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "34d8f697-5c40-42dc-ba16-52270bd8bb6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38cd2b3f-a71b-4fd0-93b6-c453aeba057a",
        "cursor": {
          "ref": "67614a61-9638-486e-800f-17e8473b9935",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "647ea1bf-5f82-4a3a-b7f7-67a9143557ff"
        },
        "item": {
          "id": "38cd2b3f-a71b-4fd0-93b6-c453aeba057a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "23689019-e87d-47e7-bce1-bdaf8434265e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa7cdd6-d607-46cb-8ce9-18ca5786ef8e",
        "cursor": {
          "ref": "25e4bc69-9926-4f09-b019-26c8d22f9dd2",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "566557b8-e89f-42c1-9f1f-972f339bc437"
        },
        "item": {
          "id": "3fa7cdd6-d607-46cb-8ce9-18ca5786ef8e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "25dc28ff-34ce-4db0-84d8-051579538214",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 73,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "92b95a99-7cf7-4952-9070-7a96bc4b239a",
        "cursor": {
          "ref": "eec03c73-f13a-4dc3-a157-c5eaaf73845a",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "68121332-17c5-48f5-9141-98396ed158af"
        },
        "item": {
          "id": "92b95a99-7cf7-4952-9070-7a96bc4b239a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "92139e89-7177-4a04-b678-d1608a70801d",
          "status": "Created",
          "code": 201,
          "responseTime": 2399,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "02c2564d-f6a1-4ce3-a47b-2721446314fd",
        "cursor": {
          "ref": "196523e0-4e28-439f-aa62-56565c89f155",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6acbc849-d6e8-4868-839f-22d839c368c5"
        },
        "item": {
          "id": "02c2564d-f6a1-4ce3-a47b-2721446314fd",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "573f10cb-2638-409e-97ba-c4b4ac477e68",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "74c7452f-9e54-457a-b9ec-94897ad3bad6",
        "cursor": {
          "ref": "088efa81-fa3a-4e99-95c2-4e06570a1eb1",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "be3e5dee-5294-44e7-abc3-8f4718e56ee0"
        },
        "item": {
          "id": "74c7452f-9e54-457a-b9ec-94897ad3bad6",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "e47b32e5-909d-4d18-aeca-bf2a5afdec6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1d677ae-4085-40ad-af30-6b3e26b9e650",
        "cursor": {
          "ref": "071b649a-6eb3-40d8-a7c6-e27784396b3c",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "45ae8463-d54e-452c-b058-ad1142893196"
        },
        "item": {
          "id": "a1d677ae-4085-40ad-af30-6b3e26b9e650",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "af97b88c-05e2-4d9a-9140-09762fac24c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "6cfc3bdc-b516-4efd-b803-ef8306c34891",
        "cursor": {
          "ref": "0c1eeba7-189a-4b0a-a9fc-a1fef6f79e7d",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "4cfb88af-89e5-4ff8-baf1-b263f669048e"
        },
        "item": {
          "id": "6cfc3bdc-b516-4efd-b803-ef8306c34891",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "9467361f-10a4-4260-a4ec-1d998c63408d",
          "status": "Created",
          "code": 201,
          "responseTime": 1647,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "5aafe74b-9b3e-416d-b9f8-613fd7000200",
        "cursor": {
          "ref": "06b46f89-374e-4b57-9944-4deaf187b64d",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6957399c-c3c8-4cb6-8b87-f9e9407be43a"
        },
        "item": {
          "id": "5aafe74b-9b3e-416d-b9f8-613fd7000200",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "7ff6ad10-5987-40d7-a52b-d36a2920ea4f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "694780a7-aa87-4266-946a-41564629b01b",
        "cursor": {
          "ref": "fd9e91ab-f245-4c40-9c62-732f535999c4",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "740b9571-c92c-4299-8eed-eb394f3c5efd"
        },
        "item": {
          "id": "694780a7-aa87-4266-946a-41564629b01b",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "984b2024-2112-4ab7-95d9-5cffe0102fc4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 830,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "f3601bdb-ba0a-4f29-8562-0cb5548b1f4a",
        "cursor": {
          "ref": "51ae0ec0-681b-47d9-93f4-360c37136b5b",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f42118b4-60b3-413d-bf09-4316a08ccd56"
        },
        "item": {
          "id": "f3601bdb-ba0a-4f29-8562-0cb5548b1f4a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "7931c004-5d69-4d59-9c13-bfec5a30f327",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a7d00beb-6db9-47d9-9abd-8d24725d2898",
        "cursor": {
          "ref": "9fe3cf62-45a7-4adc-a6c6-62cfd9fbf69e",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b225c022-01ac-423f-a805-05c7704d6321"
        },
        "item": {
          "id": "a7d00beb-6db9-47d9-9abd-8d24725d2898",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "4cb6d8b0-f4cf-4de4-ab57-16923c93dda7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "6b430a3d-f7ab-4647-a974-d1add2574ebb",
        "cursor": {
          "ref": "a2488321-7b0f-46df-9738-9dc13289b2f9",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b8a1d9ad-189c-4c35-81ba-45e156a48491"
        },
        "item": {
          "id": "6b430a3d-f7ab-4647-a974-d1add2574ebb",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d121df21-79ac-443e-8ad3-0bed1f7bce39",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "11f2b249-ac1d-4472-8f35-d29779565be1",
        "cursor": {
          "ref": "c801a3e9-738e-46bb-9d7c-48a20da06fb4",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "c8c3e1da-d59b-4b13-8b8e-d3e2ac19076a"
        },
        "item": {
          "id": "11f2b249-ac1d-4472-8f35-d29779565be1",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ab84835b-4cb7-4259-b4a9-e831cb4cb590",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "bc87b7d7-ad3f-4e8e-ba1a-f770e3f32054",
        "cursor": {
          "ref": "315ad2e4-c7af-443a-aadc-8ed9f3ea814c",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "0d62a54f-115a-4c7d-87a2-13baf1433179"
        },
        "item": {
          "id": "bc87b7d7-ad3f-4e8e-ba1a-f770e3f32054",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "0f8da7aa-a093-46f9-8591-6ed6a9b05cce",
          "status": "Created",
          "code": 201,
          "responseTime": 1078,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "2410f15b-e0a6-475f-aa61-16fcae271352",
        "cursor": {
          "ref": "9e619319-5ef5-4b1d-80b9-ab87171611af",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "6062f005-63cb-47c5-a5f1-b27836872f32"
        },
        "item": {
          "id": "2410f15b-e0a6-475f-aa61-16fcae271352",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "fef6451c-420c-48b6-9189-2e4774746f10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c11e9338-3395-446f-9e51-1b3d91c7b6ae",
        "cursor": {
          "ref": "6af086a6-a5b9-4054-859a-7702fecbacb7",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2a42b11e-c379-46bc-941b-db34daaa83f4"
        },
        "item": {
          "id": "c11e9338-3395-446f-9e51-1b3d91c7b6ae",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ee4f9d81-9a31-4ae7-ab41-a7cf90c89c8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b584d63-498a-4705-bff3-02d0a39fa452",
        "cursor": {
          "ref": "3b3b3425-bd4f-40f3-9d1c-3d3d401f5209",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "22b5b501-b5f6-48ee-9501-48bb75ff67ac"
        },
        "item": {
          "id": "8b584d63-498a-4705-bff3-02d0a39fa452",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "3fc6f762-d54c-411f-b4f8-355a5bbd5c96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f3af611-7855-4173-a16b-11087cad315a",
        "cursor": {
          "ref": "54bdf236-2cb7-42d0-a2f2-8204bbada681",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c44f7814-de32-4fd7-85df-b70f5eac40ba"
        },
        "item": {
          "id": "5f3af611-7855-4173-a16b-11087cad315a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4ffdc805-7e23-4fdd-89cb-ce3f5c18e1e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d30e358-86b5-450b-a07b-00e61a71c975",
        "cursor": {
          "ref": "86747953-7f37-4069-b779-346b77b34bb2",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7b58c9bc-ec87-4d07-9eeb-6a1acc347b0b"
        },
        "item": {
          "id": "6d30e358-86b5-450b-a07b-00e61a71c975",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "07612a00-2037-46e4-a637-1b4279b000e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d76b310d-5dbe-4415-9446-a7a8bdb05c2a",
        "cursor": {
          "ref": "b066ecf2-2777-4d94-beb4-f085a835d952",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "82571147-95f6-4f08-9ac7-5a62dc14d85c"
        },
        "item": {
          "id": "d76b310d-5dbe-4415-9446-a7a8bdb05c2a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "18a13493-d651-479b-93d3-190ca07b0cf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45ebb4c5-9a91-4b1e-924f-34841e8d6b59",
        "cursor": {
          "ref": "fb803389-8efd-47e0-b8e7-2b76cedc9cba",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "dec01671-2473-4cda-a80d-63576714ec66"
        },
        "item": {
          "id": "45ebb4c5-9a91-4b1e-924f-34841e8d6b59",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "59863c5d-a4d2-4e88-8395-7d93ff93527a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0c6389b-8960-4718-a930-e3b6acab1717",
        "cursor": {
          "ref": "4bb197b7-75bf-4730-a812-13e19ee487b5",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ab2085a2-8da6-4114-8caf-34dbf5a16fee"
        },
        "item": {
          "id": "f0c6389b-8960-4718-a930-e3b6acab1717",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "7bd63873-559e-4595-bb68-2abe04ec436f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2527621b-affc-462b-8d6c-07fee8cea148",
        "cursor": {
          "ref": "3712a716-9a8e-4cb1-9df7-94009e37c37b",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "cd348b68-1bbf-4d8e-834c-79464fe8f6a3"
        },
        "item": {
          "id": "2527621b-affc-462b-8d6c-07fee8cea148",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "1f25d6aa-3750-44a8-a143-f30d5f4e0066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68f93e86-37ab-420f-b137-a8ae3d16d736",
        "cursor": {
          "ref": "2d5459f5-6f83-487e-907b-d4b855674b40",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "fe252e00-d97d-4701-8633-8691ea0eb34d"
        },
        "item": {
          "id": "68f93e86-37ab-420f-b137-a8ae3d16d736",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d102657d-a71e-41c5-a96e-1267c0dd59cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "158005a5-4bd7-403d-acb8-6e88bc80ee96",
        "cursor": {
          "ref": "cce0a7d2-8f15-4ebb-82d8-b7de88e6db3c",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "44990c59-ce0f-45db-8942-61d8662bd1f0"
        },
        "item": {
          "id": "158005a5-4bd7-403d-acb8-6e88bc80ee96",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "aca2c48a-d76c-4ad2-b9e4-4692b30abb99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ed9e268-fcdf-4fd9-83fb-b93ee4519318",
        "cursor": {
          "ref": "4d973a5c-6609-4f4b-ba2d-53c71d0119d9",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "448ccb6c-4059-4810-a543-8f27372f1445"
        },
        "item": {
          "id": "1ed9e268-fcdf-4fd9-83fb-b93ee4519318",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b74c40e0-9907-4a28-8e3d-8c6c3cdf9144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "290e413b-b094-41fb-b3bc-e0de7ca4339f",
        "cursor": {
          "ref": "dc057d19-d832-49a1-9690-361daa2c48a5",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "96be2398-80ce-43f1-a70c-3207f5094e30"
        },
        "item": {
          "id": "290e413b-b094-41fb-b3bc-e0de7ca4339f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "0a04fb5f-df43-4b71-8b08-07351a7d6fdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70d10073-68af-4a58-bbcc-f6399c20bf18",
        "cursor": {
          "ref": "4c3051df-bdf5-47b3-8ba4-b77bd3837ebf",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a8bf72c1-7de9-46b1-b5cd-428a1a3df6c7"
        },
        "item": {
          "id": "70d10073-68af-4a58-bbcc-f6399c20bf18",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d062a4a7-b2a3-4ae4-be8d-cab960c5bb17",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 802,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "3d356086-dd83-4848-90bf-ba25ce6d50b0",
        "cursor": {
          "ref": "36c05d25-9d12-4301-822d-040734c68297",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "fe85f84d-03ba-416f-9835-fda257fd33d8"
        },
        "item": {
          "id": "3d356086-dd83-4848-90bf-ba25ce6d50b0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "54f25d78-4d15-48b2-9e58-230f611b9b79",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 814,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "36809e95-f275-4f81-b226-11836daf4d0a",
        "cursor": {
          "ref": "4e61c8ea-f08d-4266-83c7-015762674f82",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "aaab0a1e-d38c-40a6-a251-66d53ac02101"
        },
        "item": {
          "id": "36809e95-f275-4f81-b226-11836daf4d0a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "662b4295-34cf-473a-bc8a-36df360041c1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "a13d90a2-ee42-4bc4-8a39-de28c35a0cff",
        "cursor": {
          "ref": "17639ba2-d9c5-4707-a937-b43265f3e7c6",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a4674d5f-c160-4723-b24b-3cf0ac4a6b9e"
        },
        "item": {
          "id": "a13d90a2-ee42-4bc4-8a39-de28c35a0cff",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "b88a5f44-4e31-4ef7-9e12-b5c5eef05e0c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 809,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "59a4f043-fa06-491f-8862-409ad1f0f2f5",
        "cursor": {
          "ref": "5f9e21df-dd41-484c-9520-2a62c81e21eb",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "87eaddf1-c4d2-4101-978a-f8b10ce43c55"
        },
        "item": {
          "id": "59a4f043-fa06-491f-8862-409ad1f0f2f5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "4e09fea2-eddd-4f60-ac6c-f2b3d9574e61",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "2c299e9d-c8c1-43ee-9e45-f75a7dd7735e",
        "cursor": {
          "ref": "18081130-4781-4f91-a2e0-4b1f98ae413d",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "fd4654c2-99c4-4619-9427-fdd7c6133d08"
        },
        "item": {
          "id": "2c299e9d-c8c1-43ee-9e45-f75a7dd7735e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ae4e645f-2c4c-439d-a5d8-94d345b50c6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "751e5765-8aa3-4d13-9cec-846ad936b259",
        "cursor": {
          "ref": "30f3e104-68b4-4df3-b0b0-64bd3de545c8",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b8687503-338f-423a-bfea-da2391e08b73"
        },
        "item": {
          "id": "751e5765-8aa3-4d13-9cec-846ad936b259",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ac1867e4-83d8-48e6-b38e-0c23c1036a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf035673-25cb-4fbe-867e-da30a15f5d11",
        "cursor": {
          "ref": "ddaebc61-b1eb-46ed-a886-293c5a15cc35",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9c5b4a34-a2d4-4f09-97a3-db5328728100"
        },
        "item": {
          "id": "bf035673-25cb-4fbe-867e-da30a15f5d11",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8b64dc37-89b7-424a-a894-c137d6ac6398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6182a628-ed5d-4d28-a9cb-e840c2152146",
        "cursor": {
          "ref": "2819db4a-3f8d-40e8-8938-a5b6882d7cd7",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "68f4363d-eeee-4bcf-8679-cc99e38f286e"
        },
        "item": {
          "id": "6182a628-ed5d-4d28-a9cb-e840c2152146",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e54aa054-ac88-4ea1-9b9d-d8b282ed0605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cdd94f6-1b8d-4dc9-9ca6-9559aea86e8f",
        "cursor": {
          "ref": "7ea0ac34-d302-422b-820e-7ccc6a7f6a39",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "812ee882-9fac-4a5b-ac47-711b1d171e6f"
        },
        "item": {
          "id": "2cdd94f6-1b8d-4dc9-9ca6-9559aea86e8f",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "618229a4-8344-474f-b0bb-a47f9aac3d3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2338553-e442-44a0-a950-c9de3a76fdfe",
        "cursor": {
          "ref": "2308cf34-4573-4d5a-a846-8e083568e7fc",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "d257c66d-e26a-4ed0-82c0-a6c4bb55d7e2"
        },
        "item": {
          "id": "e2338553-e442-44a0-a950-c9de3a76fdfe",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "45b14f68-cd8e-441a-8c27-c01077fca4b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e07fc375-ca91-4b41-803d-ad73d647e800",
        "cursor": {
          "ref": "b856df2d-5634-4fd0-8e8e-4ec055886ac5",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b5df4408-e986-413a-bccd-c4999a15b429"
        },
        "item": {
          "id": "e07fc375-ca91-4b41-803d-ad73d647e800",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "08a099a4-298a-40da-acfb-c31587f78f9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c8fa133-408a-4bcd-8d47-0cad205ef886",
        "cursor": {
          "ref": "b77ff787-1df8-4b42-8677-5a6407470407",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c91a34ee-af51-4495-a671-460a92dd9d2d"
        },
        "item": {
          "id": "9c8fa133-408a-4bcd-8d47-0cad205ef886",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "4e77b43a-b08b-41e4-b733-0dd509ce52c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1b365ae-30d5-450a-bcbb-8e5097de87de",
        "cursor": {
          "ref": "8cc662ec-1663-4213-8896-8e2f478f28de",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f7488823-7f0c-4490-a256-b0d883126fb7"
        },
        "item": {
          "id": "a1b365ae-30d5-450a-bcbb-8e5097de87de",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b05e6fa2-503a-4455-bc74-4a5568a0b457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c4f6ce0-af85-4d67-9b25-add00f670506",
        "cursor": {
          "ref": "6fa0e9cc-8068-4d99-b72f-2314f64f5223",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "026ef602-834d-489e-8c6d-8c42c9014bf5"
        },
        "item": {
          "id": "3c4f6ce0-af85-4d67-9b25-add00f670506",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "1d8a4ba3-a334-4870-9f47-795a587684c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42db430f-f17b-4286-9457-0f6e5499215f",
        "cursor": {
          "ref": "e8433d8e-e984-45ac-b2d2-2b2035a54f65",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "e4578efd-fc3c-4ab1-b8ad-1306135c6560"
        },
        "item": {
          "id": "42db430f-f17b-4286-9457-0f6e5499215f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "d10f23f7-e5ed-48af-8879-f79c21a6e727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d31e916-52b9-4ff1-902a-0e0e79cd0442",
        "cursor": {
          "ref": "8861e4fc-6aaf-4711-82bf-60b4c36f005d",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "d522e8e5-0ddc-4b80-8625-853016a77881"
        },
        "item": {
          "id": "9d31e916-52b9-4ff1-902a-0e0e79cd0442",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "c6fc9935-d108-40b8-8458-c34accc49f27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b459301-4ad4-4742-b796-dfb7971ff5c7",
        "cursor": {
          "ref": "a517d9eb-581a-4d0d-b953-d6e166b69bb3",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "7bcbb4fe-46f7-4606-993b-bf517accf564"
        },
        "item": {
          "id": "3b459301-4ad4-4742-b796-dfb7971ff5c7",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c4032c4c-1c6f-4615-8f33-6960d899623b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38b00743-e885-4a3a-aeea-bb5c652849ab",
        "cursor": {
          "ref": "87cb9098-3e19-47f3-9de1-defd82e72269",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "d81f2fb3-0723-4720-8259-5babd042e4bb"
        },
        "item": {
          "id": "38b00743-e885-4a3a-aeea-bb5c652849ab",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "05b420b2-cab3-464f-95af-5f6abbf23349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8a6eaa8-6a14-4dd7-abaf-e9694b556bad",
        "cursor": {
          "ref": "3b6e5d23-44ea-4882-b27a-1a32b4b21067",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d0c298e4-7d0d-4167-b3db-aaa015d05dce"
        },
        "item": {
          "id": "e8a6eaa8-6a14-4dd7-abaf-e9694b556bad",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "8e9327b8-8c80-419c-a865-b21d6f581ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32851d6e-e866-4047-8f47-25ca50157959",
        "cursor": {
          "ref": "70090b78-0c32-40ae-921b-6478f097d3bd",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c3f74798-665a-4b69-8e9d-3413f820529d"
        },
        "item": {
          "id": "32851d6e-e866-4047-8f47-25ca50157959",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f5cab810-2f59-4434-9764-a2d34f1b62a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "826e0aa7-bbee-4603-b43d-96cae6404070",
        "cursor": {
          "ref": "ff7b9a42-2356-4b89-ada2-8b948e4b4c24",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "51078284-6f6c-4dd7-9351-b2f821a668dc"
        },
        "item": {
          "id": "826e0aa7-bbee-4603-b43d-96cae6404070",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "5ccfafc3-14a8-42ca-b54a-9d79c796e322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e499e7bc-5648-409d-9e59-3f4a4867a9ad",
        "cursor": {
          "ref": "4724964e-3792-4ef1-ade4-3238cf824c3c",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "4ec70534-089c-41d9-88ec-a496c3d17563"
        },
        "item": {
          "id": "e499e7bc-5648-409d-9e59-3f4a4867a9ad",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "7516c2d5-bfb1-4a86-8f01-a8f7c05b4252",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db75a85-5f6d-4cf2-b391-99e5fe5096fa",
        "cursor": {
          "ref": "c270610e-f45b-4495-8466-665f0b8cf8eb",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "3dd64c5a-ac0d-4ffb-8b2d-92856e43d395"
        },
        "item": {
          "id": "3db75a85-5f6d-4cf2-b391-99e5fe5096fa",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "1c0159d9-c9dc-4a9a-aa38-4fc392885124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f120d63-ddd3-47aa-9d70-49e4881209e6",
        "cursor": {
          "ref": "7ef97228-e29d-4e63-9068-b2f133eaf45f",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7332b8e5-e5ed-46f1-8628-2b4aa6fc69a7"
        },
        "item": {
          "id": "1f120d63-ddd3-47aa-9d70-49e4881209e6",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "1599fef2-3a5a-4017-a2e9-165870ba4cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02e1e828-77b5-4299-a964-0db18b60c689",
        "cursor": {
          "ref": "11b08e79-8971-4b3f-bcc0-45d7fc99acf1",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "339eb70c-7979-4d26-9c4e-fac262209f02"
        },
        "item": {
          "id": "02e1e828-77b5-4299-a964-0db18b60c689",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c9571480-abc8-449e-8f35-0fa7e1f5b28e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59e45257-a094-48b4-9323-af614754b4c4",
        "cursor": {
          "ref": "7feddb5b-cf05-468e-bc81-ff3ba7e8f291",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "e358dc1c-a682-4542-b8cb-e70cb98da436"
        },
        "item": {
          "id": "59e45257-a094-48b4-9323-af614754b4c4",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b94f1b97-40f1-46fd-a24f-1c410390cd32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c38f31e5-63ff-4c34-a03b-ffd38f0b4a6b",
        "cursor": {
          "ref": "bed7b6ea-b7b1-4662-8444-ebfec0cbbc33",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "b5c58541-0fe7-4c64-9125-56eb586d8c70"
        },
        "item": {
          "id": "c38f31e5-63ff-4c34-a03b-ffd38f0b4a6b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "8197cbd6-d629-4251-8982-27dacf89649a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbec9d2d-8690-48e8-9444-26ebced8314c",
        "cursor": {
          "ref": "7b9ce002-6de7-455a-b0f5-95d7fe84012d",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1a616ff5-d01a-4eef-a356-a42b1e8482fb"
        },
        "item": {
          "id": "fbec9d2d-8690-48e8-9444-26ebced8314c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a168ad67-7af2-466d-b339-848648d9f2cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "695a6ce1-cff3-4b33-a89a-2fd91dfff777",
        "cursor": {
          "ref": "c1186164-7996-48fa-a878-5197d9708d72",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "37f133f9-227c-493a-82de-bf23cc4f3eca"
        },
        "item": {
          "id": "695a6ce1-cff3-4b33-a89a-2fd91dfff777",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "7e03c24d-5657-4468-8717-4eebb0d12223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5c5b145-2ab6-4bd2-a7b5-efacf1c3fd62",
        "cursor": {
          "ref": "b736c6a1-2415-4921-b057-dc9abf06bb0d",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a0e1d352-d273-45e4-9a31-440f25bf4b9c"
        },
        "item": {
          "id": "c5c5b145-2ab6-4bd2-a7b5-efacf1c3fd62",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "43a0ff8a-283b-4cc3-bb2b-d176a8ce4244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5902949-2c22-4053-acb2-bf36d85910b8",
        "cursor": {
          "ref": "97807c34-67bb-44e5-8535-2d28d51ef188",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "928c23d3-eb06-4b57-9edb-4669c7b13637"
        },
        "item": {
          "id": "f5902949-2c22-4053-acb2-bf36d85910b8",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "25b4b266-23a1-469d-ae0c-e1fbbf1f2969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53735174-0f79-4011-8b85-d82030dfb879",
        "cursor": {
          "ref": "b061c08a-b5c8-4b49-9581-91bd2eb00279",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "fb86bb0c-a3bf-4522-ba18-b8ee4f38aac0"
        },
        "item": {
          "id": "53735174-0f79-4011-8b85-d82030dfb879",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "681ad934-b041-4fe5-a3d0-07b7ae519506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3b461d8-b768-4024-bd27-d0ed64e150a1",
        "cursor": {
          "ref": "8230b8d5-89b3-402e-901c-1c3129006e8a",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "69269b32-fda6-4e8f-aeec-1cb642171c45"
        },
        "item": {
          "id": "b3b461d8-b768-4024-bd27-d0ed64e150a1",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "56d9889e-cdac-4084-b583-f43cbbdc3b45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b70a3ac5-18e6-43de-b762-528fa162f7c9",
        "cursor": {
          "ref": "7dd356f1-1d15-4ea9-915e-a287ab9f9a16",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1443e08b-748d-4ab3-bced-27fea458c5cb"
        },
        "item": {
          "id": "b70a3ac5-18e6-43de-b762-528fa162f7c9",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "72bd7583-3437-420d-9ba4-b004554e2c08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "360c6ded-cfe4-4477-8f30-e79274b8f43c",
        "cursor": {
          "ref": "faecffbc-a726-4d16-a2a0-2f35fb9336a9",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "be7cb22a-36f3-4982-af88-81c1369b106c"
        },
        "item": {
          "id": "360c6ded-cfe4-4477-8f30-e79274b8f43c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ae625706-9e2d-4a1d-8ca3-e2f5603f4dc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c08f7c60-3d0f-4888-8886-e0d7371b6f1c",
        "cursor": {
          "ref": "1bd668d1-56ac-4076-8076-c85f6b59f8bf",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "a0b9090e-d108-47ab-8f3f-fd5dfdc9442e"
        },
        "item": {
          "id": "c08f7c60-3d0f-4888-8886-e0d7371b6f1c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "fb2cfe8e-37d4-481e-8bfa-c8bd2ae9f6a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6faea8a3-856c-4ed9-ac21-cde254a31a94",
        "cursor": {
          "ref": "7a39b93f-f300-4196-acd7-152eaa0f178d",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "75c78a56-ca09-4fc1-a3c2-5d760b1b113a"
        },
        "item": {
          "id": "6faea8a3-856c-4ed9-ac21-cde254a31a94",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f70d9290-2be2-4d2d-a8a5-a5bd58492601",
          "status": "Created",
          "code": 201,
          "responseTime": 1651,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "30a057eb-1891-4c07-95dd-2f066d00a079",
        "cursor": {
          "ref": "2a1f81fb-eb74-4239-ae99-26ac903ffc93",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "88c6974d-2472-4576-a655-45a90822e788"
        },
        "item": {
          "id": "30a057eb-1891-4c07-95dd-2f066d00a079",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "7f28ffec-de71-45b0-8651-31b5ad1887e8",
          "status": "Created",
          "code": 201,
          "responseTime": 1006,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b889e75a-8947-42de-9018-01d63aa4e131",
        "cursor": {
          "ref": "e4a494b2-ac19-4651-b1b2-e74721e44c86",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "06a44307-33b3-4af4-b936-1a6e326e0f68"
        },
        "item": {
          "id": "b889e75a-8947-42de-9018-01d63aa4e131",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "57cfbe06-f2f6-43a8-ab88-e5db6cf071bc",
          "status": "Created",
          "code": 201,
          "responseTime": 1052,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "260de776-c6f5-425c-967a-6bb88f468332",
        "cursor": {
          "ref": "4dfb82d6-78c2-4176-b23f-152059bc3727",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "6580138a-5684-4398-bc9f-56f9f3da6c5c"
        },
        "item": {
          "id": "260de776-c6f5-425c-967a-6bb88f468332",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4971d560-bfbe-439f-b987-c7b527509794",
          "status": "Created",
          "code": 201,
          "responseTime": 1052,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b215c13d-b161-443c-a200-cbdd00d76c15",
        "cursor": {
          "ref": "98609b6a-c437-4a5a-8855-3cc9bdecd673",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b800f2d6-e734-429e-ac41-5033efda6c02"
        },
        "item": {
          "id": "b215c13d-b161-443c-a200-cbdd00d76c15",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "da3b3b49-6114-4451-b835-a9f8b0fe0fa9",
          "status": "Created",
          "code": 201,
          "responseTime": 1066,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "6278684c-ab90-47fc-a1f7-90db9ba8d603",
        "cursor": {
          "ref": "0b1757da-4ef8-410f-841f-71b04aeba0cd",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "4b1d325f-89cf-4988-b6e4-4d5b135a8394"
        },
        "item": {
          "id": "6278684c-ab90-47fc-a1f7-90db9ba8d603",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1a546165-905e-4927-a063-e1f9ac363550",
          "status": "Created",
          "code": 201,
          "responseTime": 1064,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c5ada24-11ff-49b6-a180-75ccb9eaa7bc",
        "cursor": {
          "ref": "a47ee233-ddfb-4f4b-bdf9-d2f86b356e5f",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "24f32be2-832c-466c-be71-bc8ddc31facc"
        },
        "item": {
          "id": "0c5ada24-11ff-49b6-a180-75ccb9eaa7bc",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ea9ff2e8-b716-4aaa-85c1-5824b7a83ff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1b9314c-9b88-49f6-ae90-c36c3a215a1d",
        "cursor": {
          "ref": "67bc73c1-4fcd-46f8-8ac4-e2b6b52e7d74",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c7f65b95-dfbe-488e-b543-8a5b176e186f"
        },
        "item": {
          "id": "d1b9314c-9b88-49f6-ae90-c36c3a215a1d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d4bcc962-e38d-4bca-9969-c555e2953783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dd874d2-e0fc-49bb-a754-60bfa751d8c6",
        "cursor": {
          "ref": "bc3142b6-f01f-4f59-b6cf-85d2ba7e3b15",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a6567d86-6b91-4a39-8921-2dcbb319f4bd"
        },
        "item": {
          "id": "0dd874d2-e0fc-49bb-a754-60bfa751d8c6",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "66b32734-b779-4f55-a49a-3cb7c3686dcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aee0aa1-363a-4547-8ab5-3dd789cca266",
        "cursor": {
          "ref": "9579ec87-aaad-4806-a176-9a9c30ba8605",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "31ba8130-6c34-4783-aeee-aadc2e1e0418"
        },
        "item": {
          "id": "1aee0aa1-363a-4547-8ab5-3dd789cca266",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "0a160277-6c27-426c-aff3-eb6e2a5e97dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d3f7b70-c6af-41cc-a0ad-e7bf2bb76b3f",
        "cursor": {
          "ref": "08c8f9c2-6183-4710-a213-f936516f5503",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "babf1f0b-8a7f-4f0a-807d-f2ea61385672"
        },
        "item": {
          "id": "9d3f7b70-c6af-41cc-a0ad-e7bf2bb76b3f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "60c177e8-1f12-469f-a861-835272e1cdf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f98eba-ff4e-4cac-8c0d-f14d6b033f29",
        "cursor": {
          "ref": "078a4065-61c3-402b-a055-56a41fd7b962",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "81853c87-9fad-44b7-a84f-f0b99da09376"
        },
        "item": {
          "id": "36f98eba-ff4e-4cac-8c0d-f14d6b033f29",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "bd774dce-58c6-4403-80cc-55df26c27dac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e25fa43-5242-4691-9c9e-8bf12c0b1613",
        "cursor": {
          "ref": "800791cd-5d13-4b88-a58e-79dc54ecd36e",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f629523f-5b36-40bf-ac7d-57e72deccc08"
        },
        "item": {
          "id": "5e25fa43-5242-4691-9c9e-8bf12c0b1613",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3864a73a-03aa-42bc-8d20-5613dd330d82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "522aa847-393e-4b84-abbd-ea16b9e6897c",
        "cursor": {
          "ref": "787849d2-caa1-43fd-815b-37e148202b72",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "84aeba5a-ec93-4e9f-9cca-51a0f3c477b6"
        },
        "item": {
          "id": "522aa847-393e-4b84-abbd-ea16b9e6897c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "09b76488-f9e0-4c59-84e1-2f7d5c27c85c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f0aaac-8a11-4150-86be-0da14d531323",
        "cursor": {
          "ref": "7e90bcb8-0a27-4edf-8479-3f79329f0eff",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6df23071-3a40-4aab-b74e-41ba47b715f6"
        },
        "item": {
          "id": "53f0aaac-8a11-4150-86be-0da14d531323",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0bcb617c-747d-4963-a230-ab74eb1fcfe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c513c84f-3e45-47db-a6c3-f873020f1154",
        "cursor": {
          "ref": "c09bbd3c-d730-4f3d-a6e8-40b377b3ce6a",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "db5cf8e5-0b09-4d0a-887c-e55db7b8083d"
        },
        "item": {
          "id": "c513c84f-3e45-47db-a6c3-f873020f1154",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "68c1b2c2-cdd4-4f99-a37a-a006e9efa90c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "996067a6-003c-4478-b835-9cf493ab3d42",
        "cursor": {
          "ref": "a3f1e708-abb6-4b74-9b9d-9ad63de71ef1",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "85e17454-cdf6-47c6-b5c6-76a97f06030d"
        },
        "item": {
          "id": "996067a6-003c-4478-b835-9cf493ab3d42",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "803de002-ea41-4aa9-a673-f26bbc5fdce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e060e5-9bd0-4b73-a2b6-7b93f575caf8",
        "cursor": {
          "ref": "a8693f9d-9af4-4842-9a65-d48190ba1567",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "87e138c9-766c-49f5-91db-95ff41a9fb5b"
        },
        "item": {
          "id": "72e060e5-9bd0-4b73-a2b6-7b93f575caf8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8dbbf1be-0060-4593-ac65-561c470d9011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85c6d13e-4217-42c4-9e80-199f1bfec55b",
        "cursor": {
          "ref": "8d2d70b7-9eda-4d20-a2ee-b55743ee9fe5",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "bbac4e35-8eca-4614-bf6c-4f8ab19ab7fc"
        },
        "item": {
          "id": "85c6d13e-4217-42c4-9e80-199f1bfec55b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9dbcdb26-76f1-48fb-9ae4-a085a3af7eff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86ed5da7-c4cd-42cb-878d-f78caa4fdb70",
        "cursor": {
          "ref": "a3573a36-8068-45ce-9cd7-52789afee539",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "aac6b2e0-2385-4333-b83d-d5d042f5e0f4"
        },
        "item": {
          "id": "86ed5da7-c4cd-42cb-878d-f78caa4fdb70",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "cf41ec5b-ee9e-42e3-a50c-51dcfd20c9ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4b64b79-b21d-4017-a15d-2c0e62403582",
        "cursor": {
          "ref": "e9d25e5f-6b31-4bde-92d8-591c03197006",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "1dc1a3d1-8962-4f3c-bb8c-da20e2b35e41"
        },
        "item": {
          "id": "f4b64b79-b21d-4017-a15d-2c0e62403582",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6f1667e8-48d5-46ed-97be-50f95402f2d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c6f255-92ec-43c1-a135-729b4b2654b4",
        "cursor": {
          "ref": "b4698c5a-c615-4af6-9e45-a83a5fdef8f9",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "577a34cc-c3fc-4079-beb4-44b076ea8349"
        },
        "item": {
          "id": "82c6f255-92ec-43c1-a135-729b4b2654b4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2197587f-c181-4365-a265-7432afaf9391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73bf3d7c-27b0-476b-ae96-36e98d7e07f3",
        "cursor": {
          "ref": "87866d32-8931-4d60-9b08-4f9a7c30d925",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "aa7fb2ab-076e-4f9f-b0b3-e2fade53b805"
        },
        "item": {
          "id": "73bf3d7c-27b0-476b-ae96-36e98d7e07f3",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "200b8782-c085-42ee-a4fe-5a098b283956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "994aabc4-3910-46b3-b85c-4231d9bb0648",
        "cursor": {
          "ref": "6d1f8562-4a64-46c9-a554-96754c1c5346",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f37b375d-7154-4e8f-b560-27fea6fceb7f"
        },
        "item": {
          "id": "994aabc4-3910-46b3-b85c-4231d9bb0648",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "be61aacf-6959-4957-a96e-f7dd8bacaea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28317146-1ad9-4886-9b7a-f9085fb69b35",
        "cursor": {
          "ref": "8f6ae614-4974-4f7e-a1d4-fabe02e6726d",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "dabe1ae9-7a48-400d-90d0-292069b38fbb"
        },
        "item": {
          "id": "28317146-1ad9-4886-9b7a-f9085fb69b35",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6b618ba8-68fc-4d75-b5b0-f1763a21bc6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aab289f4-a708-4d79-b27d-f8547b9858e1",
        "cursor": {
          "ref": "e6a437d2-7787-4b70-aedb-6fe4b61a1e50",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "cadb7479-fbce-440a-9522-4fa5df406a2d"
        },
        "item": {
          "id": "aab289f4-a708-4d79-b27d-f8547b9858e1",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4b0286b5-c281-4fa0-bc36-b1970c2ea460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b40bfa2a-483f-4170-b56c-97a76d88c1fc",
        "cursor": {
          "ref": "b62cf59f-ea24-4c03-9488-03611651acc7",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "081a7077-7940-45e1-91a0-ad5a2d9be04f"
        },
        "item": {
          "id": "b40bfa2a-483f-4170-b56c-97a76d88c1fc",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e4bba9b5-ffa8-4504-87a7-4ace676035c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4cea794-b585-4993-8529-8abbb7d3fc31",
        "cursor": {
          "ref": "e2094a4e-30e1-4a02-b77e-0b7e65d018b8",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "58fc75d3-4e6f-48ae-a214-791597bc4fd3"
        },
        "item": {
          "id": "b4cea794-b585-4993-8529-8abbb7d3fc31",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a6b9f57d-b257-4b72-a962-e19119b737c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92a3240d-e0b3-46a8-8a98-d8bcf7ddaed1",
        "cursor": {
          "ref": "7e9f414d-9e15-4a08-b72b-5a7e5142ea26",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a063ed77-25d6-4846-ad1c-4f4c99cee4d0"
        },
        "item": {
          "id": "92a3240d-e0b3-46a8-8a98-d8bcf7ddaed1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "5e9e005e-4b92-4f31-af75-9f8cf00fe9db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d29498a-a299-48cf-989c-bdd0e6cedd2e",
        "cursor": {
          "ref": "05ebd8cc-a384-42b5-9f7b-d7526ac632f1",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "7a2af177-3070-46bb-8434-d5a369fcfc45"
        },
        "item": {
          "id": "3d29498a-a299-48cf-989c-bdd0e6cedd2e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f63ff519-5d9a-4886-8c21-e1ebe51eb66b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "336a1817-c36f-4d0f-b5e7-aad2f740dbe7",
        "cursor": {
          "ref": "bfdbf5a7-2cf4-4cf1-8f3d-56bf6ac7a909",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "89b4d237-45be-42d3-91a4-0f91866fc357"
        },
        "item": {
          "id": "336a1817-c36f-4d0f-b5e7-aad2f740dbe7",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5df98e1e-5311-4ea0-97fd-93ec0d6bac75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5238fa6-97c9-41c7-9724-d56ec8412e1a",
        "cursor": {
          "ref": "f9ac4f0e-0f27-48b6-ba9c-e805396ed1c7",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "67926b29-321b-4296-8e71-8f5402b0f6fb"
        },
        "item": {
          "id": "a5238fa6-97c9-41c7-9724-d56ec8412e1a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b3e6f782-c5f5-4738-852f-454f6652cc53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb50607-d90c-4acf-8f9b-123925558a05",
        "cursor": {
          "ref": "405f2fb1-e736-48c4-9a2f-f6e1e77baac4",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "56a08ac6-9af3-45f5-8416-8adc76202f23"
        },
        "item": {
          "id": "3bb50607-d90c-4acf-8f9b-123925558a05",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f08cff3c-876c-45a1-b96d-2d6f09de96b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0adc18f-d9ea-4540-a472-1a9d4bb07ddc",
        "cursor": {
          "ref": "3b0d8b0d-aba1-4e8a-a212-c03269c615f5",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "cb49ed1e-4169-406a-b12d-91a84b1e889e"
        },
        "item": {
          "id": "f0adc18f-d9ea-4540-a472-1a9d4bb07ddc",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3e7ceb4e-8012-45a4-99f1-0c553125a74e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cccd2f23-010a-4328-843c-159b15693d71",
        "cursor": {
          "ref": "42a169f4-a5ae-41a0-b2f8-f858937629bf",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "9a7cedf4-ac44-49b2-b3cb-37856a7dc488"
        },
        "item": {
          "id": "cccd2f23-010a-4328-843c-159b15693d71",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "dff4c287-0eff-4364-8c5a-70b9e9e63e67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "102d2349-3885-473e-9795-8ebff09748fe",
        "cursor": {
          "ref": "0e4536ed-73e2-41d4-af73-eaa7352317e6",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "fc5c013a-49ab-4929-b0b1-711d4045416e"
        },
        "item": {
          "id": "102d2349-3885-473e-9795-8ebff09748fe",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a3f2c437-9c10-4b1c-b522-4008348588da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a90f656d-7e5a-4aa6-800a-359cef48beea",
        "cursor": {
          "ref": "100bd258-a948-4334-92ed-a7a7f4f26602",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "5d53d852-eb53-4c37-b11e-d851248399c7"
        },
        "item": {
          "id": "a90f656d-7e5a-4aa6-800a-359cef48beea",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e633eb1d-c35b-4830-b94f-26d006f5db36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "656b39cc-c0ef-4347-aeac-de6188cf57bb",
        "cursor": {
          "ref": "622805be-50ad-4c9a-a135-2ebfae9df7bc",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "bed1ba6d-3a51-4ff0-9429-6780ea6f3a08"
        },
        "item": {
          "id": "656b39cc-c0ef-4347-aeac-de6188cf57bb",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "30c03dcf-372b-404f-911c-23fb0846ff34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "909a4aad-34d4-4b92-b5fc-2fc7b74f6d0c",
        "cursor": {
          "ref": "b6aba503-749e-4857-82d9-bd6e13d4ea6a",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "ab77071d-1555-4806-afb2-d7c5ac6050ce"
        },
        "item": {
          "id": "909a4aad-34d4-4b92-b5fc-2fc7b74f6d0c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4b072e89-8a5f-4d23-bd4c-4ceae46b59c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3b99bcd-c893-412f-9ed2-c8507dc734e3",
        "cursor": {
          "ref": "acb4e36c-8322-474f-9db8-50ec24b72db9",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "fc7dc84c-8152-4034-80c2-dbb969341586"
        },
        "item": {
          "id": "a3b99bcd-c893-412f-9ed2-c8507dc734e3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ac5a9fdc-0bd4-4c58-8c65-19b3ea3c6382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45c62ab2-9675-4036-bcb0-be5c18d0a926",
        "cursor": {
          "ref": "b09870a0-8be3-472c-bf9c-15da0f9f1df6",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "72ee2bed-8fd0-497b-bb65-22c042b32996"
        },
        "item": {
          "id": "45c62ab2-9675-4036-bcb0-be5c18d0a926",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8860c9cb-a6e8-486d-ae6b-7c0d5caa4814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b710433-7680-45e8-8599-2a48f871e977",
        "cursor": {
          "ref": "4a688f42-4c1e-410b-a21b-6eda534353b6",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1bf56c3d-ef05-428e-929f-b9b4c144846b"
        },
        "item": {
          "id": "5b710433-7680-45e8-8599-2a48f871e977",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "85c1b419-676d-413b-b7ac-266cb77b4faf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2287b2f2-abbc-4269-ba04-564abbb63841",
        "cursor": {
          "ref": "6032eeeb-ef44-46b0-9508-3430aa313b20",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "62b06edb-b7ca-419b-9e17-eb72fcd275b4"
        },
        "item": {
          "id": "2287b2f2-abbc-4269-ba04-564abbb63841",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3c5e5a53-c1a6-43fa-96d6-68bd608d02a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0ecbf08-7901-4b90-8fbc-bcf1f45746c3",
        "cursor": {
          "ref": "d9fd3143-c875-4fab-8a5f-08ca61122285",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "bcc33dc7-ba89-45d0-b27c-c570fcace4a1"
        },
        "item": {
          "id": "b0ecbf08-7901-4b90-8fbc-bcf1f45746c3",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a9c1c0c9-b84c-41c8-a14b-605761146e93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3788d5bc-56a8-48c5-a53a-d94fd191f435",
        "cursor": {
          "ref": "4c9c23cc-e7c3-4768-9819-81220b3ef69d",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f8a6f42d-a424-49b2-8516-d5837b9c7c20"
        },
        "item": {
          "id": "3788d5bc-56a8-48c5-a53a-d94fd191f435",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c3951d39-eeb7-4816-96ee-2b2ca3ee7e0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8125e094-1d33-4f10-9439-1e75467a6d69",
        "cursor": {
          "ref": "73e7a679-ffdc-4550-8564-efadc18c1907",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "8d5a7a89-52df-4e6b-ae2e-b925f1e134f4"
        },
        "item": {
          "id": "8125e094-1d33-4f10-9439-1e75467a6d69",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4a404832-62fe-46c5-bbec-abaa39e6a486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e438208-a8ad-4858-9edd-f627b5d16e0f",
        "cursor": {
          "ref": "027ea559-2e30-48a9-ab96-d8169afce4a8",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "7a90bccb-cc11-42f1-8a7a-1e1b39257444"
        },
        "item": {
          "id": "9e438208-a8ad-4858-9edd-f627b5d16e0f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "be254b59-4b92-40e4-81c5-d560c6d935d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb08ecc3-f1d2-4b77-8e7f-89cddea88db7",
        "cursor": {
          "ref": "c43b2121-b408-484d-b4c2-5b715b0fbd17",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "1cc64103-9f09-46d3-ab69-974784269222"
        },
        "item": {
          "id": "cb08ecc3-f1d2-4b77-8e7f-89cddea88db7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "679ba9da-35d7-46f9-b2f3-cc97dbf5145e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9368deb-79b9-4b84-964e-2880b8e8f666",
        "cursor": {
          "ref": "29a79d00-2333-48fc-b7f7-eb1c83bdfd12",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "560d95c3-76a6-4f74-8814-494798b5c60f"
        },
        "item": {
          "id": "c9368deb-79b9-4b84-964e-2880b8e8f666",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6a5678bd-985e-4fc7-a8e4-a78a3ee0ed79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e1fb158-fdd1-4996-8338-517564aa4479",
        "cursor": {
          "ref": "628953cd-aa7f-402b-9473-846e3986314a",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "3720601c-4f6e-436d-8fbd-2514f69c7b49"
        },
        "item": {
          "id": "6e1fb158-fdd1-4996-8338-517564aa4479",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a8b4077f-eece-44d8-b635-c974b1046471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c22c7665-7b39-4689-b640-1c5bf34a7548",
        "cursor": {
          "ref": "e956577c-5e8e-4342-8e9c-50074f7acbf4",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "df2f45de-a44b-4496-88b2-4ba2ed53b855"
        },
        "item": {
          "id": "c22c7665-7b39-4689-b640-1c5bf34a7548",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1b54e815-84c9-4e25-9419-a38933b09e45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db101022-8b0d-40be-a2ca-b6ae08bb0bb1",
        "cursor": {
          "ref": "7222ab76-c062-4be2-a045-4ae314d3db87",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "fb5b4a1e-6b32-4088-b059-3d53e4c910b8"
        },
        "item": {
          "id": "db101022-8b0d-40be-a2ca-b6ae08bb0bb1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "bb75de38-cfae-47fd-99a6-9dda0fba5049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3fd2527-4f21-4d1f-a5bc-001a61e007b7",
        "cursor": {
          "ref": "9f99140d-05cf-4573-9af1-88f70f2c692b",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "af12b00c-fc47-4407-ba8b-2fe93d286aa9"
        },
        "item": {
          "id": "f3fd2527-4f21-4d1f-a5bc-001a61e007b7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5a4ef2c6-4b86-48cc-b98f-094310650573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b45c4f6-e99b-404d-8058-b3cb15ded742",
        "cursor": {
          "ref": "0b1181a1-120e-4485-b46a-6bd2f854ab2c",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "dcd50256-d564-4487-b6f1-068a3b434b69"
        },
        "item": {
          "id": "2b45c4f6-e99b-404d-8058-b3cb15ded742",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "022e2706-3b96-4e07-b095-0da295de86b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30cafd14-a4ce-42e7-af55-21865fc9fda2",
        "cursor": {
          "ref": "f3b1ff17-c851-4404-91c4-58255d7cc595",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c23e8d51-e4f5-49c1-8d86-3ff0b3f5e240"
        },
        "item": {
          "id": "30cafd14-a4ce-42e7-af55-21865fc9fda2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c2c2b677-9e6d-4a2b-adee-0a7b5a225712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a3a83c4-ee40-45e3-97f6-c818f8e7065e",
        "cursor": {
          "ref": "b4438ecb-4bd3-451c-a327-5b86838b18c7",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e8ed22d1-5db8-4220-8a7c-eed231f1635e"
        },
        "item": {
          "id": "3a3a83c4-ee40-45e3-97f6-c818f8e7065e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f991ae54-964b-4bbf-8575-6d22d8775868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cdbd105-5b76-4069-8c70-9011e38d2dd0",
        "cursor": {
          "ref": "3ccd8e90-9b0a-49c5-b17f-6625c0cf2e07",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "0709577c-709b-4c8d-a036-e4d295e4442f"
        },
        "item": {
          "id": "7cdbd105-5b76-4069-8c70-9011e38d2dd0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "33539bae-6f13-473d-93cd-bd3ade678dcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e58328f-3e48-4b2b-b78c-f8e0fde3a2c0",
        "cursor": {
          "ref": "d7abb0cf-6fe2-45c4-8f21-a212bae04feb",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "67d5e206-2aa3-4bc7-b6a2-d1eadd7eeada"
        },
        "item": {
          "id": "5e58328f-3e48-4b2b-b78c-f8e0fde3a2c0",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9c4a7111-e93e-4a1a-b739-d628f52f4e41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41f53df9-8031-4225-be4b-a8247c6c4a34",
        "cursor": {
          "ref": "4a7273a6-185b-469d-a7cc-a737928c5d99",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "3cebc922-0d8e-4461-a9fc-d38204dbdc86"
        },
        "item": {
          "id": "41f53df9-8031-4225-be4b-a8247c6c4a34",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d6854583-52aa-4511-8014-806df6bdfd06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb7d3a8b-b674-44ae-9b28-94f00b68fa36",
        "cursor": {
          "ref": "9444c151-947d-49ac-a1ab-f97e6e646a51",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a0354cab-a76a-4450-b55d-7ba8ed77b3bd"
        },
        "item": {
          "id": "bb7d3a8b-b674-44ae-9b28-94f00b68fa36",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "61882fb0-33e9-4b53-9918-1d3220cedccc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1644c78c-32b1-46ab-8d13-3f22b6b09317",
        "cursor": {
          "ref": "551bc1c3-e84f-4b41-bce3-e7b14ed45a97",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "591d09b8-9030-444d-857a-9a23aeea775c"
        },
        "item": {
          "id": "1644c78c-32b1-46ab-8d13-3f22b6b09317",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "164bf4dd-162b-4d2e-915b-5164f15da074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b18097f-f608-4635-ada0-bdc85af83f50",
        "cursor": {
          "ref": "c1744809-aa1e-4d9a-a08d-bcb3bc5f6c25",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "41e1e911-bdd5-4ac5-ad2a-37c74f4de72e"
        },
        "item": {
          "id": "0b18097f-f608-4635-ada0-bdc85af83f50",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "382a8050-0c08-4bfa-bb6b-d261d140928c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e561da4a-b16b-4a3e-88b4-35bd4118da8c",
        "cursor": {
          "ref": "ec4c7d05-f052-41c1-8eb5-d9b2bba189b7",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "2ff63458-5a43-4cc6-ab9e-6a6295b2396a"
        },
        "item": {
          "id": "e561da4a-b16b-4a3e-88b4-35bd4118da8c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "21fdd377-097b-4fdb-9cac-803f124de2f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3876d06d-516f-47cc-8d21-5a22a1373144",
        "cursor": {
          "ref": "bd04533b-2df7-4680-8593-0fc9fa54f0bc",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "922248a4-d1a7-4ed4-9090-ec0da92e3bff"
        },
        "item": {
          "id": "3876d06d-516f-47cc-8d21-5a22a1373144",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "029a9301-c32a-41be-9e0b-0714de8e5c5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca9a0199-ce8f-457c-9060-e2c484ae4682",
        "cursor": {
          "ref": "eb42032c-a886-4432-b8bc-5ccf9d528d61",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e0cd9c41-2f37-459e-b8be-877318cb8247"
        },
        "item": {
          "id": "ca9a0199-ce8f-457c-9060-e2c484ae4682",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2ca6fe4a-4c54-4183-b861-21b0f743cdd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f742c7f5-6c5a-4179-a540-8acbda9262ed",
        "cursor": {
          "ref": "6cda454e-c04f-4e52-998b-211c9ee6d08c",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "4d1c657c-9a12-438e-9b14-55c2205f143b"
        },
        "item": {
          "id": "f742c7f5-6c5a-4179-a540-8acbda9262ed",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c2456046-ff8f-4ab6-867b-c0e0630ddef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28226998-f809-4761-967a-1e5324f90ea1",
        "cursor": {
          "ref": "b4808397-248a-4caf-9903-50bf7e5bcc54",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "2d0a5f0f-29a7-4bbb-8ac6-50fb40528ae0"
        },
        "item": {
          "id": "28226998-f809-4761-967a-1e5324f90ea1",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "9d5af490-a308-45bc-8ac1-743c7aec5a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1961b08f-a217-4280-9599-89dbfe2fb4c3",
        "cursor": {
          "ref": "0250a26a-366f-401f-9f29-9979fea4f724",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c0df8440-5d14-4abc-8856-ed1f1d96295c"
        },
        "item": {
          "id": "1961b08f-a217-4280-9599-89dbfe2fb4c3",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "479953fd-08ed-4e48-a111-d2915f079cbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "399ab075-8005-4d76-83f2-cfd1822da0ed",
        "cursor": {
          "ref": "a131ea05-3139-47ee-b7cf-b76bddc67a41",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "21fb7242-98de-4968-8463-4adf6b2da917"
        },
        "item": {
          "id": "399ab075-8005-4d76-83f2-cfd1822da0ed",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c012e963-3915-48e3-9486-6ac5e8bf574c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aafc498-ec46-443c-9830-a39d39a654e1",
        "cursor": {
          "ref": "c880306c-c9c9-475b-a80a-5c9b201af98e",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "842e57c0-2218-445e-bdbd-64b90c9dca24"
        },
        "item": {
          "id": "0aafc498-ec46-443c-9830-a39d39a654e1",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f5f844a7-2b3c-4d2c-a1cd-b220455b8f99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84e442ae-3f64-47cf-9b20-38aabe4c8c76",
        "cursor": {
          "ref": "ef974393-261b-48b6-8bd7-ee28a97e6dfd",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "3277dc0b-4bee-44b8-b0ed-e74e52f4c712"
        },
        "item": {
          "id": "84e442ae-3f64-47cf-9b20-38aabe4c8c76",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "2d3d19d6-f4d1-4651-8f88-fa8980b23c95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a53df94-69ed-4c65-996b-7078c42811aa",
        "cursor": {
          "ref": "9fd5acc2-0413-4540-96ca-f9de2c3e09a0",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "0a6da717-96e0-4615-90cb-d1d0c248fc8a"
        },
        "item": {
          "id": "5a53df94-69ed-4c65-996b-7078c42811aa",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "1a8b4eaa-e023-4e40-9945-4c8f4978ef6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ff9e1e6-f4fd-438f-a159-17d8e18f505e",
        "cursor": {
          "ref": "4ab6b11b-9321-4f74-972a-84e0501e6c0c",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6ef02274-a600-4190-8637-557b71913943"
        },
        "item": {
          "id": "6ff9e1e6-f4fd-438f-a159-17d8e18f505e",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "a6f0d262-be05-4522-80ab-470149b972ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e859a578-27f0-40f2-a0ff-ab5da3719c34",
        "cursor": {
          "ref": "26a9288b-9362-418d-9fae-b5e76c271a7c",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "057251ef-e30c-4307-938e-302afba7eebb"
        },
        "item": {
          "id": "e859a578-27f0-40f2-a0ff-ab5da3719c34",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "7d4b5754-6b7c-4eb8-9098-41f3d1b3bfd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30969068-4dfb-42f3-83b0-3ddcc0ad7dcb",
        "cursor": {
          "ref": "8210e412-0fa5-405e-acb4-bd44b5aff833",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "9f4b9247-00d9-4ae6-afda-abf68bd03c5a"
        },
        "item": {
          "id": "30969068-4dfb-42f3-83b0-3ddcc0ad7dcb",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "fc5bfa90-20ab-4699-bf83-26aec24112ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "078a2eda-2b73-4aff-b1c6-066ab1df80f4",
        "cursor": {
          "ref": "2b2225c4-da72-4a05-be2f-b9ed8e3b85ae",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7268be08-9f99-424a-8e90-73cbd465b35e"
        },
        "item": {
          "id": "078a2eda-2b73-4aff-b1c6-066ab1df80f4",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "2c416515-6c3c-49ef-af64-e39b1871fff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ce5322c-9275-4262-b23f-9bdc82d0c77d",
        "cursor": {
          "ref": "08dddd49-7433-49f3-8792-c665f68635be",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "c43c3e46-5b46-471d-aee4-1f1959a5d121"
        },
        "item": {
          "id": "9ce5322c-9275-4262-b23f-9bdc82d0c77d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9886088a-93e3-4b1c-89c0-20cb3287afe7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f19d278d-459f-4577-9fda-40169d4cd4ad",
        "cursor": {
          "ref": "8135b112-5efc-4d43-9193-2c1260eab9de",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "420e92f7-5f5a-4f70-a2fc-d476ee2267c0"
        },
        "item": {
          "id": "f19d278d-459f-4577-9fda-40169d4cd4ad",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b9154322-9a94-42ef-8512-290e8e7eb8c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dc1cc27-b73e-4a0f-aa85-6be8bc2e15b2",
        "cursor": {
          "ref": "1809e5e8-e4ca-4257-acf9-b245ca5f7124",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "1fc6e141-0e4b-4390-be47-93275b939d4b"
        },
        "item": {
          "id": "3dc1cc27-b73e-4a0f-aa85-6be8bc2e15b2",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "34a2efa3-05d3-4fbc-ac8a-216fba1df745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c16439-9e64-4ecc-bb40-1de5afa61dcd",
        "cursor": {
          "ref": "4536ad6f-b986-420a-a35f-a308a6663983",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1a917d8b-1be0-4a3a-a36d-5e9564f8fb4a"
        },
        "item": {
          "id": "a0c16439-9e64-4ecc-bb40-1de5afa61dcd",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "18255927-cb6f-4360-9fb6-aed2ec40c965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc1afbed-24b4-4e71-a97c-2f2f1f206a5d",
        "cursor": {
          "ref": "d23e77b9-cb45-45cc-b8aa-feb742f84903",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ceb2da81-0ce1-4603-b062-4b7d9599286e"
        },
        "item": {
          "id": "dc1afbed-24b4-4e71-a97c-2f2f1f206a5d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "cc04ce3a-e620-4ea5-bfbd-22433e890b33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "091c6654-0a93-409a-a359-a3ad7373f7fc",
        "cursor": {
          "ref": "7b90c7a5-44a9-423c-a420-b778c6547a7c",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "98218faa-07fa-4b49-9fc3-e81191b97687"
        },
        "item": {
          "id": "091c6654-0a93-409a-a359-a3ad7373f7fc",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "277eecdb-250a-4d83-865f-6a73b328bb81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17b77782-b14e-43d9-88d0-021c227739f2",
        "cursor": {
          "ref": "10862e01-15ac-435d-b58f-71eea5461d8d",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "8ba19b00-0b61-48a7-a360-0f8ccb89bffc"
        },
        "item": {
          "id": "17b77782-b14e-43d9-88d0-021c227739f2",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "ddabda3b-99e6-4b1e-b754-b9f98e91b5cc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "1405319f-f774-42da-b976-63ca9c1a8d0a",
        "cursor": {
          "ref": "af792445-14a4-47c7-8652-d313711f356b",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8ea05f9d-d524-4ee3-9b44-e8d5d5fcd768"
        },
        "item": {
          "id": "1405319f-f774-42da-b976-63ca9c1a8d0a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ecf55e0f-fff1-4685-a8bf-7b03749abc1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "529a49aa-6016-46df-9e73-1b79e03eabd7",
        "cursor": {
          "ref": "0f183763-cc2c-423a-9ae9-6e753c8b1fc4",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "f56eafdb-af00-406e-88f5-7c97397e9f7d"
        },
        "item": {
          "id": "529a49aa-6016-46df-9e73-1b79e03eabd7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a37a9f31-82db-41fd-b333-5efce1e7cd97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc747ee8-c9b5-4978-b899-24d18d729c7d",
        "cursor": {
          "ref": "0ea748d7-7d37-42ef-bb59-dd64c0948298",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "171891e6-b651-4a71-b1b6-1dd5e6cc71d9"
        },
        "item": {
          "id": "dc747ee8-c9b5-4978-b899-24d18d729c7d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "816ddbdc-61cc-4a55-b49a-6862738a981f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6659ca9-9883-43ab-a7e8-c2b5a1f866f4",
        "cursor": {
          "ref": "ef154fbe-9605-4c73-b17f-a1ec93659351",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "5c976635-8ece-4da1-a9f5-db382ad2622e"
        },
        "item": {
          "id": "a6659ca9-9883-43ab-a7e8-c2b5a1f866f4",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "cd1cbcda-b1eb-49f0-a389-470feec5b3f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9ea30ec-8b89-427a-8cbe-230baffa55c8",
        "cursor": {
          "ref": "62360b8f-0327-4a8a-b70d-019e2b4bba64",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a24e09b1-ce6e-45b3-ba14-325f889ec945"
        },
        "item": {
          "id": "f9ea30ec-8b89-427a-8cbe-230baffa55c8",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6530d39e-e3d6-4288-8806-867732d35540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20a9c4d2-eaf3-4bd6-95ef-0e983e354295",
        "cursor": {
          "ref": "26151285-c8ee-4ca9-93f9-20ed540f2317",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "09708c79-7b12-4ff8-807e-c40f4b711908"
        },
        "item": {
          "id": "20a9c4d2-eaf3-4bd6-95ef-0e983e354295",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "58bb1aea-c2b7-4211-bcd2-79d6576119e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60f6c8ff-8215-48fc-98bf-d879522ed5d3",
        "cursor": {
          "ref": "219098c4-f008-4ae2-9970-1f6994b69ba3",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "acef08ea-36ea-4930-87a1-e501a32a5de0"
        },
        "item": {
          "id": "60f6c8ff-8215-48fc-98bf-d879522ed5d3",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e3d209be-94b1-4174-b63d-bceced421933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee449edf-cbff-4471-b871-c98d7fcc91c6",
        "cursor": {
          "ref": "a893f4a0-f0ca-48a2-a187-0ebae3b11958",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5173bf61-cc0c-401f-ac0d-9e1379bf868c"
        },
        "item": {
          "id": "ee449edf-cbff-4471-b871-c98d7fcc91c6",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "19b5efc8-5103-48a5-8e57-fa4e4e30fab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fc691bb-b377-4312-9dba-949004ccd1ba",
        "cursor": {
          "ref": "1d4f138f-f74b-4afb-9dc0-9b4cb3f5b810",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "a8a8beae-34cb-4515-8952-ff7b3dcf4ef6"
        },
        "item": {
          "id": "2fc691bb-b377-4312-9dba-949004ccd1ba",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "b03814b7-00f2-44b3-bcae-98064e901bfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b82c423-d622-43e7-aa6a-e33cf994b992",
        "cursor": {
          "ref": "a0b5ded9-eb55-41aa-ae2a-ffb3463fa0bd",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "50152429-25d5-478f-8feb-d9ac80ece142"
        },
        "item": {
          "id": "5b82c423-d622-43e7-aa6a-e33cf994b992",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "c62fc382-56e7-4b93-a76b-80eb0272addb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7a7b41e-003c-4682-a8c9-306371a14801",
        "cursor": {
          "ref": "5d380e50-b8bd-4be1-a1b1-c34f8f578d4e",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "0d575a69-a5ec-40fc-80d0-8321e43adca9"
        },
        "item": {
          "id": "b7a7b41e-003c-4682-a8c9-306371a14801",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "98c4fcd4-edfd-4664-9ea2-dd90dfb7eadd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fcbd624-8917-4c9a-8df9-06a30de05738",
        "cursor": {
          "ref": "b39eded0-cbc0-4329-92d4-7603418f7813",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b3cc60fa-4761-4b78-8edd-49c57b0e7ae7"
        },
        "item": {
          "id": "3fcbd624-8917-4c9a-8df9-06a30de05738",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5b70afa9-88e1-4cba-ac4d-fa5c8a9db55f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84ab2091-57a8-4aee-bd50-2eab5d77d77a",
        "cursor": {
          "ref": "deea50bf-04fa-4206-b48f-4d60dc144ecc",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "0a62a6ec-4492-4c21-aa76-70ac94e0bfab"
        },
        "item": {
          "id": "84ab2091-57a8-4aee-bd50-2eab5d77d77a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1f6a2283-41bc-4b8a-900a-4978f8747410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaa97d1d-1655-40c7-9cc3-43eccf60c4bf",
        "cursor": {
          "ref": "40d6eb2d-ed91-40cf-8bea-55416aead52a",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "f36e71cd-99b2-4770-b86f-96c2afd871c3"
        },
        "item": {
          "id": "aaa97d1d-1655-40c7-9cc3-43eccf60c4bf",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "b5da2a93-0f1a-4f95-9f92-06a31f3f5dab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "383769f1-b82f-478a-a769-efa7225cbb58",
        "cursor": {
          "ref": "d7925b2f-e321-49e8-a81f-415c73d52053",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "e8f3206a-c948-45e9-88ef-fc60c0a777b2"
        },
        "item": {
          "id": "383769f1-b82f-478a-a769-efa7225cbb58",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f218d407-f3bc-4fe5-a441-bf25f78f79ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e516e68d-ef1d-469b-8f1a-b6b3215f575f",
        "cursor": {
          "ref": "e5299439-c1f6-4392-af7f-21ee4baa79c2",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f650ac77-d363-42c8-b648-4f84c5bf9b6e"
        },
        "item": {
          "id": "e516e68d-ef1d-469b-8f1a-b6b3215f575f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "b438e3bc-81a4-4c30-9870-6908dc5d780b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21bccee8-be91-43a0-8781-91e5a0e9f716",
        "cursor": {
          "ref": "b32a24f4-1b5c-4b44-9c2e-be61995d92c9",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "22d516ee-9a39-47b9-a5da-e8eb135b869b"
        },
        "item": {
          "id": "21bccee8-be91-43a0-8781-91e5a0e9f716",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "9752e804-7b59-4bfd-837d-e89c37073ecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "480abecf-11c2-4c44-b8ac-aa11c34f89b3",
        "cursor": {
          "ref": "29f97643-f846-483e-be6d-51dd3196bed6",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "71cf934f-064f-48d8-9e92-d3b1b52b58ee"
        },
        "item": {
          "id": "480abecf-11c2-4c44-b8ac-aa11c34f89b3",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "cf13757e-f4bf-4e59-90ad-26c10b4df0d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ebb1e5-c2f6-49d2-96cb-717e6e584c4b",
        "cursor": {
          "ref": "b63a163e-07a3-480b-86ac-b2225648c633",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "698050c5-5326-4f71-a826-c871f8e146e6"
        },
        "item": {
          "id": "c1ebb1e5-c2f6-49d2-96cb-717e6e584c4b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "197c4aa4-2106-425b-a35c-a0ab756324e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0da599-b4cb-4a5c-8110-8070e43cefeb",
        "cursor": {
          "ref": "008c14f0-6405-4f80-b1b9-7541c2ec362d",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "725933d1-c0eb-49a8-a849-48993a4850f6"
        },
        "item": {
          "id": "6d0da599-b4cb-4a5c-8110-8070e43cefeb",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "9f09d9d7-50b4-47fe-bc77-39de4f01de6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77b6c33b-7f56-4d10-94aa-52d7ab339fe0",
        "cursor": {
          "ref": "387d49c3-8482-4c00-9ecc-c41b41de047e",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "14e34f9e-b790-4d7a-b68c-7c05cdc9e2db"
        },
        "item": {
          "id": "77b6c33b-7f56-4d10-94aa-52d7ab339fe0",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "aaeecf3d-b4b8-4612-aa6c-5ae28ec4d919",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30960ab8-5e90-418b-ab4c-9c17cb91126a",
        "cursor": {
          "ref": "fadff169-b97b-4732-986a-3f3b06807581",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "296a7e9d-b83c-494b-a32c-a610184c4f60"
        },
        "item": {
          "id": "30960ab8-5e90-418b-ab4c-9c17cb91126a",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "fc3000f1-37ce-4f18-b1d2-a27285399f2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48a92366-27f3-465a-affc-28168b8627ba",
        "cursor": {
          "ref": "0f18cfc2-a1df-4991-926e-c90204887806",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "c7d2cdf2-18aa-4619-8aa2-bc9c14195111"
        },
        "item": {
          "id": "48a92366-27f3-465a-affc-28168b8627ba",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e4ef1a6f-5cc9-4319-ab8a-3778e0eb6c8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80898718-2d91-4d23-9411-a8f20820bbc9",
        "cursor": {
          "ref": "024b437a-8856-4314-b41f-82e11cd41bcb",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "4c7e2058-7eef-4363-9841-9e1cb222ace7"
        },
        "item": {
          "id": "80898718-2d91-4d23-9411-a8f20820bbc9",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "8d859b72-c8a4-4b6c-9544-9aa2cd2afe33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da96ccac-8eb7-4ccb-8b1a-cbbb079fc58b",
        "cursor": {
          "ref": "424a7515-6ade-47c7-bbbf-135c36c4608d",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "89d074d3-a958-46ac-a1a0-8cb17c9ef19d"
        },
        "item": {
          "id": "da96ccac-8eb7-4ccb-8b1a-cbbb079fc58b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b46ec376-7d72-4ffa-aefb-e54747e08e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc7c9de9-c65a-41b4-9665-38a6ae68e444",
        "cursor": {
          "ref": "fc0aa694-1982-41aa-8ceb-b6258cb22be4",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "8d7d4fe2-e2e1-4a08-8e38-7a265917c785"
        },
        "item": {
          "id": "bc7c9de9-c65a-41b4-9665-38a6ae68e444",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b0bd15ca-3c33-40aa-af2c-7da354f75f8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4286b43-7665-47a8-8f98-1e1b3084caf0",
        "cursor": {
          "ref": "9de6a3a0-bbbb-44e4-abd4-7114d850525b",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "12261efe-8cd5-42d3-92db-35aaf3a33b42"
        },
        "item": {
          "id": "c4286b43-7665-47a8-8f98-1e1b3084caf0",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "59891665-0b7c-4a68-93f1-0209d4849d2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af8b4c74-4efe-44db-ad95-143f686a3aef",
        "cursor": {
          "ref": "11544f2c-52aa-4d1e-84f5-f0e0d5a1591d",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "6ccd845a-df0f-434a-be6c-833629b4f928"
        },
        "item": {
          "id": "af8b4c74-4efe-44db-ad95-143f686a3aef",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "dee65061-3fb6-4dfe-85fd-baa51516f4a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7793098-926b-4326-a933-d21d5e5cc390",
        "cursor": {
          "ref": "40205331-f821-4bbd-8824-a4daf4dae54f",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "9c760021-d3cb-4cb1-99a2-11ef799bc165"
        },
        "item": {
          "id": "a7793098-926b-4326-a933-d21d5e5cc390",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "38b5dbb1-465e-4d01-96e9-c39b79976a65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49b0c86c-5773-4148-9232-25e6626455e2",
        "cursor": {
          "ref": "bf948f18-b114-4980-9bda-7eef6cb40c19",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6c2d3586-0da4-4088-992d-5b0cca768ec4"
        },
        "item": {
          "id": "49b0c86c-5773-4148-9232-25e6626455e2",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "65eccbbe-7952-41a3-b357-1cef3bd49068",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "1fedaa48-2a88-4750-8d14-bbc83675b30a",
        "cursor": {
          "ref": "370bbed8-bef6-4bd7-ba33-33d165b302f6",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "16e5f8e4-2f37-43a5-bcc9-97a8e13dff85"
        },
        "item": {
          "id": "1fedaa48-2a88-4750-8d14-bbc83675b30a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "0aa4f38f-44c0-4d15-8fa5-3210a72c62a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "55b566e6-301a-4681-9582-6a725556fcb9",
        "cursor": {
          "ref": "ecf8bf63-5f9a-449c-85a5-7f91b7383765",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "6ab09081-4b5b-41ec-a07a-cc26a5873abe"
        },
        "item": {
          "id": "55b566e6-301a-4681-9582-6a725556fcb9",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "7beb6c81-cff1-4d09-9c54-775045d231e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "6b2d1de8-ec3b-4067-ab52-4bcd0247f4bf",
        "cursor": {
          "ref": "96b20a73-6eaa-4655-a756-4ec5022b3c00",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b9ee96fa-6b50-4070-bee8-b9a2d3ac9e11"
        },
        "item": {
          "id": "6b2d1de8-ec3b-4067-ab52-4bcd0247f4bf",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "18d2cffb-4081-4d1a-bcab-67806a20d59c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e92b08d-5651-45a6-88f7-725585c95315",
        "cursor": {
          "ref": "16cdb5a8-99ef-47d5-83a4-6d0297ac0b14",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "34fca1b9-444f-4939-a27a-2a72cd903fc0"
        },
        "item": {
          "id": "6e92b08d-5651-45a6-88f7-725585c95315",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "d6816040-a15b-4a96-820c-1e513be5d915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "1f737bc3-c65c-46a6-b67f-9c2372b71848",
        "cursor": {
          "ref": "5486f863-634e-482e-a572-5a27bf53554d",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "58611aee-e761-4b26-b2b5-c668183b8b55"
        },
        "item": {
          "id": "1f737bc3-c65c-46a6-b67f-9c2372b71848",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "05d2b473-6526-496b-805c-deab007da80f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1391,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "5ece5f48-06fc-4b87-84ba-3cdb67b02530",
        "cursor": {
          "ref": "e2fe9789-839b-4c99-ba26-4d8d3145acbd",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "dc7a692a-1623-48e6-98ae-76f6419f5226"
        },
        "item": {
          "id": "5ece5f48-06fc-4b87-84ba-3cdb67b02530",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b16fbe78-f970-4700-a4f3-818139101782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "0d6ad994-cce9-45ae-9730-134a0b0a47ac",
        "cursor": {
          "ref": "d2f3cfaf-5399-40e4-8a80-f93d035992fa",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "67e46f70-758b-4d20-a27f-f0a034783484"
        },
        "item": {
          "id": "0d6ad994-cce9-45ae-9730-134a0b0a47ac",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "1a2db54f-2757-439a-a453-cf755c0a9c6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "f7bd7cbb-0d62-4833-9089-603dd226ae90",
        "cursor": {
          "ref": "302bd981-add9-4f26-b858-860cda9e21f9",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3fc31fcb-eb5e-4bd7-9c8f-8fccae977173"
        },
        "item": {
          "id": "f7bd7cbb-0d62-4833-9089-603dd226ae90",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "96dae20a-a57e-46aa-849c-44970807358b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "845b7cad-eb94-41a9-be67-50f7733333ef",
        "cursor": {
          "ref": "6667e8db-ffab-4eca-afe3-25c98e344245",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "15840c43-e03b-49a7-a5a2-b9fedec115ac"
        },
        "item": {
          "id": "845b7cad-eb94-41a9-be67-50f7733333ef",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "622ee3fc-29e9-4f29-8a13-1bf0e4a3f16d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "bebc4c8f-bb87-4837-943a-830be9730857",
        "cursor": {
          "ref": "11a78cb7-4dda-47b8-9695-1e766f10501c",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "7178f1f9-6e1c-4168-ab81-0e27157afbe7"
        },
        "item": {
          "id": "bebc4c8f-bb87-4837-943a-830be9730857",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "5c271261-1e92-40a4-b3e9-402991a319db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab7a3402-76cb-4466-ad9c-60de330a9c3c",
        "cursor": {
          "ref": "bf5d5f38-d45b-4f35-ba11-82642f79294e",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3bf8ab50-2676-418e-891e-1e8828e4c5a6"
        },
        "item": {
          "id": "ab7a3402-76cb-4466-ad9c-60de330a9c3c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "2276723e-3bed-4648-aafd-e31bfb9c95c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af512b27-b88d-4070-9d34-1dd0a6eeed8b",
        "cursor": {
          "ref": "d436732c-927a-4aa9-ba1b-da1294fdac89",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "a830036d-a228-4530-adc1-f4e4d75c508c"
        },
        "item": {
          "id": "af512b27-b88d-4070-9d34-1dd0a6eeed8b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "920007fc-02c1-4794-a74e-0619640b9151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e93f4ae-15a8-4fe9-a2c8-7c4c6f06aa62",
        "cursor": {
          "ref": "98ea292b-ccf9-46a3-9528-9a50fa526f83",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "b78ceb24-2a0a-4429-a86f-a7722584d736"
        },
        "item": {
          "id": "0e93f4ae-15a8-4fe9-a2c8-7c4c6f06aa62",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "43879753-d2bc-4881-8f92-3952a75b96dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc845d1-afac-47ae-9a3e-6619fe2e8689",
        "cursor": {
          "ref": "ccb9e2c1-ebb8-4122-9d0e-d50da2e5a071",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "db3e2830-34a5-493a-98ab-a63d8c2ec71f"
        },
        "item": {
          "id": "0fc845d1-afac-47ae-9a3e-6619fe2e8689",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "55367bdb-4589-4114-bf7b-8c1a6ac97126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b7a5011-b234-4969-96f2-372760b6188c",
        "cursor": {
          "ref": "c02dacd6-2c1e-4f3d-9870-964f2c6eb814",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "0ccf4d24-c6e1-4488-bbc9-ea0a32336ffd"
        },
        "item": {
          "id": "5b7a5011-b234-4969-96f2-372760b6188c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4581da47-4142-406b-b0e2-48ba44c8d4bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a4bf5d9-66f9-4294-8b69-28ac8e4e69f3",
        "cursor": {
          "ref": "2d2089ff-1e8e-4ba9-a0c3-1aec3aea0e0c",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c500d314-4994-4a7b-b641-8cdca8b5b329"
        },
        "item": {
          "id": "6a4bf5d9-66f9-4294-8b69-28ac8e4e69f3",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "357aa656-9871-4ca0-ba45-c97984781834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb09a44-b931-4413-aec3-9bb62ea408a0",
        "cursor": {
          "ref": "e6d7c774-334a-40cc-a937-412ba26bb2bb",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "6b29fb7c-2c9d-4bde-a922-8246ee235427"
        },
        "item": {
          "id": "5bb09a44-b931-4413-aec3-9bb62ea408a0",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c40e5637-075d-4018-91ba-70cf86dbbb9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d51edd5-8393-4677-b960-5213f4fde731",
        "cursor": {
          "ref": "86a3d3ff-4021-4b37-9ea0-a83e7697bac1",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7fec45c1-72e0-4c89-a346-3874f9766a03"
        },
        "item": {
          "id": "9d51edd5-8393-4677-b960-5213f4fde731",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "6eaebaf3-a6e4-42c1-b4d3-41c80b25363e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e31ff56f-6255-41ed-864f-92b007487483",
        "cursor": {
          "ref": "ef35765e-b348-4c2e-ba25-84c93151804a",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "94662c81-1032-44f6-b14d-3e6c6ef83795"
        },
        "item": {
          "id": "e31ff56f-6255-41ed-864f-92b007487483",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "517930e4-f853-43e6-8872-8583669635e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7aaf32e-0062-420b-b5e1-9daf4d6f4c0e",
        "cursor": {
          "ref": "9abd4bd5-6561-40e2-b634-b50ba2d9cd29",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "a446283e-16e2-43ee-9957-6fae60392182"
        },
        "item": {
          "id": "f7aaf32e-0062-420b-b5e1-9daf4d6f4c0e",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "642028d6-6e2f-4a54-99d4-215d6c35be25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cb47c1c-39c1-4d84-bdfa-200778330149",
        "cursor": {
          "ref": "cfa9e1a0-a061-4d40-a4e8-6223d5d6b86b",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c4df3f3d-8447-46de-b1cc-e0247bc2ba86"
        },
        "item": {
          "id": "3cb47c1c-39c1-4d84-bdfa-200778330149",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "01d902a3-738e-46d7-9e54-643402a2a850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "317fd59f-6750-4e57-97ba-50350eed8e61",
        "cursor": {
          "ref": "cbf559f3-e22d-4333-aee4-f2057277a1eb",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "9bf9ffb4-5e90-4ef5-b29a-2d19fd83ddb4"
        },
        "item": {
          "id": "317fd59f-6750-4e57-97ba-50350eed8e61",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "3c44b73d-c402-4903-bcb0-837effc8f2c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "186c60f8-aed6-40a8-8a56-443f451af60e",
        "cursor": {
          "ref": "df59062d-d247-47e0-8160-5b18a918206a",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "de19230f-8768-462f-a5d1-b218e39cc059"
        },
        "item": {
          "id": "186c60f8-aed6-40a8-8a56-443f451af60e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "01c9b8e8-ffe6-454d-b4bf-d1f270449c04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 788,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "470a925f-4dea-4fb2-a0c8-af3489ebeece",
        "cursor": {
          "ref": "91ac1d87-0e9b-4173-8279-48f94be435f9",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "cac0291c-462a-4374-b7f4-6ae77a5af9e7"
        },
        "item": {
          "id": "470a925f-4dea-4fb2-a0c8-af3489ebeece",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c0b23b01-f864-4e8a-8fbf-c4b30f4ebd84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 777,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "40870888-11c8-4967-a2c6-b0427ecadacc",
        "cursor": {
          "ref": "d6819c8e-1fe9-4c90-a354-ede8ae1e150a",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "9c11299b-4f51-405c-aa6a-4481d293c142"
        },
        "item": {
          "id": "40870888-11c8-4967-a2c6-b0427ecadacc",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b1b58784-e53b-49e0-9a75-b6a876abae2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "b21bdc4e-cf10-4304-8234-2f9ed6e4e2a5",
        "cursor": {
          "ref": "4d50f671-3544-493b-9897-b582a139c808",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "2a398575-be69-4992-bafb-fd15ffe5c849"
        },
        "item": {
          "id": "b21bdc4e-cf10-4304-8234-2f9ed6e4e2a5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "2676c94e-202f-41f7-9fc7-350331d17daf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 803,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "c774dc3b-f1f5-4363-b569-56e0016a0789",
        "cursor": {
          "ref": "7dd1966c-4355-4714-8a0a-a2a2f861430d",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "36dc670d-c4a9-47f8-9fd5-32a3b8001566"
        },
        "item": {
          "id": "c774dc3b-f1f5-4363-b569-56e0016a0789",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "fa7fc05c-20c9-4277-a361-6f1609fb8218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "6e639bc4-859d-4ef1-a65b-ca1828fe5603",
        "cursor": {
          "ref": "638aaf57-159b-498b-9d0c-e026812083d8",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c3a35f02-6db3-4f71-a467-e7321a6a6652"
        },
        "item": {
          "id": "6e639bc4-859d-4ef1-a65b-ca1828fe5603",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2cfaa6f1-bb9c-45c3-a7c7-6f887e0ffd13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b0f50e-41c6-440a-acf7-8a8d145f3e25",
        "cursor": {
          "ref": "8d10c8b4-57ca-4142-bd7c-5a788341ae9f",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "cf100bc2-9424-4d17-ab94-35e97e1a263d"
        },
        "item": {
          "id": "f9b0f50e-41c6-440a-acf7-8a8d145f3e25",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "1959fd4f-803f-480c-8d18-1594112a9c6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d98c85e-0acf-4521-9aed-7951ff61202d",
        "cursor": {
          "ref": "9d69e901-8765-4185-89af-b445be45d330",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "6da1ad17-20f1-4eb5-8c1c-675997143292"
        },
        "item": {
          "id": "3d98c85e-0acf-4521-9aed-7951ff61202d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "195b88e2-e8e7-4eaf-8b69-e4b6ea8e6e6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fec687b-d50f-4a78-9e0e-f48a70c570d4",
        "cursor": {
          "ref": "4800fcb9-63a3-4963-8a5d-b1e201704963",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "e2cc0c8f-51d9-473f-9070-2ddf91d5abb2"
        },
        "item": {
          "id": "6fec687b-d50f-4a78-9e0e-f48a70c570d4",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "370e9a4f-1c73-454c-8bf7-8d1099fac558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bb5d35c-9ecf-49d4-ba11-1f0256480dab",
        "cursor": {
          "ref": "a5d08990-6205-48ad-adf3-0db098f0e797",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "1a1f4393-c44a-4af2-b30d-018ead155c53"
        },
        "item": {
          "id": "4bb5d35c-9ecf-49d4-ba11-1f0256480dab",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "c3cd5286-59ed-4617-8e86-3e493338998c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e06f12-564b-482e-a2c3-c98140920d45",
        "cursor": {
          "ref": "6917a073-4f17-4025-9cfd-d5a0b1c1aa5f",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "68dcd850-43ca-4a48-8e41-f10b5a6083c0"
        },
        "item": {
          "id": "94e06f12-564b-482e-a2c3-c98140920d45",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "8c58f51f-152d-4692-81ff-78a26770a3f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c5e9f7f-ba3b-4247-bcfd-caf72baf425e",
        "cursor": {
          "ref": "d9b031ae-9223-44ca-9687-7627d170b710",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "51d6eb0b-14b3-44b8-9331-6dcedccc8e84"
        },
        "item": {
          "id": "3c5e9f7f-ba3b-4247-bcfd-caf72baf425e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "6fe046d5-bf31-4111-82f1-7ab55d3a37ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a3e3e6c-0536-40be-9167-744772469b33",
        "cursor": {
          "ref": "2579b538-e63a-476b-acf0-ed8645ca690a",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d9b44280-becb-46ef-8f94-7976b62f759d"
        },
        "item": {
          "id": "3a3e3e6c-0536-40be-9167-744772469b33",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ff9cabbf-3695-40ea-8a56-7a5651b60048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ece31f00-7b0b-4b21-be5c-853de4dac63d",
        "cursor": {
          "ref": "75872747-cdc5-435a-86e5-34d0e59c587d",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "570d1d17-b85f-44f5-b470-c20d069eaffd"
        },
        "item": {
          "id": "ece31f00-7b0b-4b21-be5c-853de4dac63d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "53815c60-75eb-4271-a110-f9c2f078e53c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35b4baaa-5955-48d3-9d67-9a7a2f114c84",
        "cursor": {
          "ref": "df24c8ad-df1d-4745-a56b-e86dd9a753c0",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e3c45d26-a9b2-43cc-a133-ed67eee99ed0"
        },
        "item": {
          "id": "35b4baaa-5955-48d3-9d67-9a7a2f114c84",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "114514e3-9bba-47cc-97c8-10851b920391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff6e3fe9-5d60-4abf-aa9d-3725657ee809",
        "cursor": {
          "ref": "afbe81ae-0790-4be0-9d05-5c285f422021",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "64dccef0-d842-4693-b633-e93467c17ef1"
        },
        "item": {
          "id": "ff6e3fe9-5d60-4abf-aa9d-3725657ee809",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "fc6a29ab-806f-4258-bcf8-25ded2d17266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f9f6ad-14bd-4834-9353-4e77b060a133",
        "cursor": {
          "ref": "14fb5d53-d2a5-4df7-bdd6-88ba04f8f39d",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "37dc2842-dda6-4b07-9d87-bc2cdeb645a8"
        },
        "item": {
          "id": "51f9f6ad-14bd-4834-9353-4e77b060a133",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "57d9e00a-d5e7-45f2-9a98-956d203486c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "875f75e4-3d18-424f-b9cc-63dc7178bc3c",
        "cursor": {
          "ref": "bafb8a6c-f096-47a7-8377-d5b38fa78269",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "d8a65bda-b285-4371-b587-5065b7cc77f8"
        },
        "item": {
          "id": "875f75e4-3d18-424f-b9cc-63dc7178bc3c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d2ffa84a-5a59-4afe-b940-cc19c1920980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7041c28-18e5-4f23-9399-87eb68cdc0f5",
        "cursor": {
          "ref": "16dcbcca-4981-405c-8bd5-308475a8c0b1",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "53d47121-3396-49e1-a2fc-5ad6737d5d6a"
        },
        "item": {
          "id": "e7041c28-18e5-4f23-9399-87eb68cdc0f5",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "cafdb276-d097-409e-a722-1d15ee80e0e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07fb19bd-fa81-489a-b671-3b7319d83ac4",
        "cursor": {
          "ref": "8d31f6aa-5572-4601-977a-c57eae72dc99",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "665a8c23-8158-4c97-98cd-f7e96605afc1"
        },
        "item": {
          "id": "07fb19bd-fa81-489a-b671-3b7319d83ac4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "aadeeb7e-6f19-4d2d-ad72-a907554b9cb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95d0ce0d-d4f5-4c8e-9b00-ca06dd5c8184",
        "cursor": {
          "ref": "252ed84f-db37-4f0e-9269-a855049144bc",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "0720d165-9225-450c-85f8-86b05ae7c882"
        },
        "item": {
          "id": "95d0ce0d-d4f5-4c8e-9b00-ca06dd5c8184",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ad4425cb-1e49-4aea-9274-0e82d1197a9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "938839d5-2b59-4acc-99f3-2a1964a0cdf5",
        "cursor": {
          "ref": "673d9014-a71f-4957-8251-62a0f9c5b99f",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "3fe98444-7aba-45d5-96f2-750f3437a060"
        },
        "item": {
          "id": "938839d5-2b59-4acc-99f3-2a1964a0cdf5",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "41e11d3f-5020-41b2-bf77-ec0a9dae83c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a8d40a7-c762-4e0a-8a60-a396508613f2",
        "cursor": {
          "ref": "2ae98f5b-2ff0-4c7f-9bf5-5e11802e4495",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "722e0d99-add2-4055-9317-d9965d6768c8"
        },
        "item": {
          "id": "9a8d40a7-c762-4e0a-8a60-a396508613f2",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "149068e3-fc50-43b3-8046-033f993eea89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56309b19-6e7c-4325-b217-2ed5c4cbe27c",
        "cursor": {
          "ref": "ef492133-a6f8-4c38-abea-78333d892555",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "c7f89a41-eb9e-4ccb-b7a6-8e80080de289"
        },
        "item": {
          "id": "56309b19-6e7c-4325-b217-2ed5c4cbe27c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5392e508-cfcc-49bc-b00b-010d856745e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a98af8-9ced-4210-b8b6-d2a9e40cc5c3",
        "cursor": {
          "ref": "9715a26e-c4ee-4b58-963a-4b417faa2df1",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "451d33c3-b04e-4331-9d95-045be2d0e1b8"
        },
        "item": {
          "id": "b2a98af8-9ced-4210-b8b6-d2a9e40cc5c3",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "813581ad-9c35-4cb1-b9df-46fbd4d45266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4eed886-7922-4827-bb2d-605807cc3ef9",
        "cursor": {
          "ref": "318243d2-6878-4d67-b970-714d56a2da63",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "7cc6c5d4-83a8-4025-b149-ba5b0856b3fc"
        },
        "item": {
          "id": "a4eed886-7922-4827-bb2d-605807cc3ef9",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8ba1fd39-e64e-4ce9-a4c1-949e640a26dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f05a5f-509c-4600-a54f-d0fd93313467",
        "cursor": {
          "ref": "57c72f95-5beb-4ac1-8b09-0b8b10ceb675",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "1e80317c-f2f4-4765-80aa-c4cd70080df5"
        },
        "item": {
          "id": "f8f05a5f-509c-4600-a54f-d0fd93313467",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "90e5948a-a275-4949-ae75-d24e241b2fce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b8b638-6c01-4d74-9a20-9c655bc76979",
        "cursor": {
          "ref": "86c91685-4f96-4f50-93c8-9f75601786dc",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "49c69084-4089-495b-83a1-323f99b6cb55"
        },
        "item": {
          "id": "76b8b638-6c01-4d74-9a20-9c655bc76979",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "5735fe3a-ac76-41e4-bce9-587d24d1b28c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d69731c-a5b5-49ce-a272-f0fe8cda5eb4",
        "cursor": {
          "ref": "4b28f9b4-f37b-4393-ad6c-436b66c7a30a",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "491c79c8-bce0-4b06-b31a-3cbe83044a1d"
        },
        "item": {
          "id": "4d69731c-a5b5-49ce-a272-f0fe8cda5eb4",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2b604f99-0c1a-4bc1-9270-fa6e2da0cb86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ed85bd3-b013-4592-90cb-4f92eee9febf",
        "cursor": {
          "ref": "dd457a8c-17d3-42d1-af1d-0a4295775d9c",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "bd45191d-1465-4452-9e65-c553d9d38eed"
        },
        "item": {
          "id": "3ed85bd3-b013-4592-90cb-4f92eee9febf",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f50fef32-c7e0-48b3-97e6-7464d20787a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4b5bf68-0609-4a55-80cf-3c9b61cb5f25",
        "cursor": {
          "ref": "238bbbce-9ef5-4dbd-8921-c71ef4f46c65",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "62c7f42f-ad4c-4cf6-854d-0093ad642150"
        },
        "item": {
          "id": "c4b5bf68-0609-4a55-80cf-3c9b61cb5f25",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "83d60a43-a055-4c3f-80d6-98eb74e1be6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1803543-585e-4a0b-b7ed-093e5906fa62",
        "cursor": {
          "ref": "bb3c957a-83c2-4e37-8d4a-e7361736606c",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "aec69027-5320-466e-97a7-dd957cd29231"
        },
        "item": {
          "id": "c1803543-585e-4a0b-b7ed-093e5906fa62",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "36ffe742-cf8e-4587-80a1-95610f0ba5ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac05655e-d70b-4de7-87d7-916ae27a5042",
        "cursor": {
          "ref": "86c2e780-a33c-4744-95cc-0cbbb0fbae28",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "458fc9a7-3943-4568-be86-698c8cdaa3cb"
        },
        "item": {
          "id": "ac05655e-d70b-4de7-87d7-916ae27a5042",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "28e2f1ba-e610-4fb9-a780-f5f0822cc8eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f6f1cb7-f0ba-4a38-a88e-e1fa3ab4a13c",
        "cursor": {
          "ref": "bb6913ff-0e6a-4269-86c2-f557b5cf0d40",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "de71cbd0-b889-4f2b-82a3-d80bd6a57955"
        },
        "item": {
          "id": "4f6f1cb7-f0ba-4a38-a88e-e1fa3ab4a13c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1dc7e575-d4b6-40ed-b1c9-00c835775be2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db1c980c-6fc8-41d3-b7c6-a05ebe9d58c0",
        "cursor": {
          "ref": "6c5928ed-4ec3-4eea-a9e3-cfcd5f6baa41",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "bd55df8c-e47c-466a-9667-1fb849e990b2"
        },
        "item": {
          "id": "db1c980c-6fc8-41d3-b7c6-a05ebe9d58c0",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "70363a70-0fc7-4e14-8afd-8c6e3be877f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8796d8e-d9b0-4db0-9cc7-5a74ad260860",
        "cursor": {
          "ref": "b17dd74a-87d7-402a-bf3b-411386a558e5",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "31034ea1-3521-451c-89ee-418e67ef5815"
        },
        "item": {
          "id": "e8796d8e-d9b0-4db0-9cc7-5a74ad260860",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "dab61c98-bf47-4d33-adaa-5de90d8daa6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44b96b40-27d7-4097-919a-b1883254223e",
        "cursor": {
          "ref": "10394a62-6eab-4705-a12f-285b6f8c1f3c",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "b210c0ab-87b8-47a3-a83e-ee7fb652742f"
        },
        "item": {
          "id": "44b96b40-27d7-4097-919a-b1883254223e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "3c791309-4ecb-4d5c-901f-fe307511b1d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54636de3-23c2-4ef5-abc7-1eac84f54b21",
        "cursor": {
          "ref": "51d12017-0c88-485c-8379-58db2f4f815e",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "ed9f00aa-2d87-46f1-985a-7ea03af767d4"
        },
        "item": {
          "id": "54636de3-23c2-4ef5-abc7-1eac84f54b21",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b8e61b29-6a77-4702-b442-01ace0cfed21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7503739f-3e11-4cf4-9f49-857185600c87",
        "cursor": {
          "ref": "6e6eb068-2c9d-498f-b640-02546d4dc596",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "f79e6439-201d-4011-a43c-422ee8506d17"
        },
        "item": {
          "id": "7503739f-3e11-4cf4-9f49-857185600c87",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a8489ca5-b959-4b00-a58f-b0b431057395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "181e00fa-568f-4ef1-be08-ca037246ba9a",
        "cursor": {
          "ref": "46fc7c0b-ae14-4369-860c-1c6925c39d8e",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "1534b160-d297-45b2-bd43-80dc886dd876"
        },
        "item": {
          "id": "181e00fa-568f-4ef1-be08-ca037246ba9a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f62d5297-dced-44ce-802f-3a0f57e1fe63",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f3363d9-3931-4591-9ab0-578ffa6929a7",
        "cursor": {
          "ref": "b0be2492-31a5-4246-9414-75760769c9c4",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "062234a2-3062-486b-8eff-8251351da0d3"
        },
        "item": {
          "id": "4f3363d9-3931-4591-9ab0-578ffa6929a7",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "0839dc35-ef51-4a93-9993-cf5ab20825ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a7644a7-1f98-4dcf-b3a9-24ab5e7e9589",
        "cursor": {
          "ref": "7ef97871-06aa-406b-a0e5-432141ad7b53",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "840067aa-80c0-49b2-a451-8cc9f86e1d4b"
        },
        "item": {
          "id": "5a7644a7-1f98-4dcf-b3a9-24ab5e7e9589",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7bbb5bdb-98ab-44ef-8943-f1b1fea5b625",
          "status": "OK",
          "code": 200,
          "responseTime": 802,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1959b0e3-c45c-4230-b39b-efe3cfbd42a1",
        "cursor": {
          "ref": "a2d9e80f-0649-4f0e-b7d3-0767fcacddb5",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "4cfc5a32-0fb1-4b83-affe-f20810c75acd"
        },
        "item": {
          "id": "1959b0e3-c45c-4230-b39b-efe3cfbd42a1",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "abd3a3c0-bb17-4d49-b74e-2f776965d076",
          "status": "OK",
          "code": 200,
          "responseTime": 900,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ca99d4-5ab0-488f-a433-f7a03deecd43",
        "cursor": {
          "ref": "0cfab72e-7f45-4932-bdf3-a8ce17cd13a9",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "4d8f1aba-435f-4179-9c67-6205a0235e24"
        },
        "item": {
          "id": "66ca99d4-5ab0-488f-a433-f7a03deecd43",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b827c777-5ade-4af0-ad03-a7dd56bd58f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ca99d4-5ab0-488f-a433-f7a03deecd43",
        "cursor": {
          "ref": "0cfab72e-7f45-4932-bdf3-a8ce17cd13a9",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "4d8f1aba-435f-4179-9c67-6205a0235e24"
        },
        "item": {
          "id": "66ca99d4-5ab0-488f-a433-f7a03deecd43",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b827c777-5ade-4af0-ad03-a7dd56bd58f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b843877-967d-487b-a461-41214a154119",
        "cursor": {
          "ref": "83edc186-bf50-4afa-9cca-ebf102071800",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "e8d4299a-749a-46d5-a362-52eb57751fe3"
        },
        "item": {
          "id": "7b843877-967d-487b-a461-41214a154119",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a244f054-a0e4-4486-a9db-adfb8ac6c747",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd655a61-b7c9-4ec5-b6f7-4d898478d9ac",
        "cursor": {
          "ref": "09b0799b-d644-44b1-b3a3-5b11d63d6cb7",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "05273f53-7147-438e-99cb-bc3d9222ab35"
        },
        "item": {
          "id": "fd655a61-b7c9-4ec5-b6f7-4d898478d9ac",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "5be5e30b-2e95-42e0-be35-0f1c68c3357c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}