{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "48222b2f-76f4-4acc-aed6-b7bd03f24ad9",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ff1bcf1a-8f6e-4c40-bfe5-c599de28d8eb",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e091fb57-cb65-448d-881a-2418c663970b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1ce817ff-fcf2-42c6-b662-e669ce77338e"
                }
              }
            ]
          },
          {
            "id": "17593cf7-69ec-4e16-a697-8e994020d3fc",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7223bc54-4210-4939-a564-dd00f517ca93",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4f070b36-3913-4b79-97b9-7b37b4379a8f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "fd532da2-4634-4855-ba44-617bb03eaefb",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "56b2e51c-1aba-4a8f-88f2-ff87ecbf434f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7232cd88-fd3e-40d3-a011-de7eee40b939",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7af339fd-ebbd-4208-86ef-04e02aeecf9b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2720583e-9cc4-4fea-84dc-43b2f8c56b97"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "601a05b7-ef50-4a4a-913e-2eca31e0ada4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e7a8cf99-0a77-483d-a6aa-921c27f947b7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c527a19a-7759-4fa7-ae4d-d6f56eb75c24",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9a1bfb94-e8f0-411d-99c0-3ee4a92e762f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2106a73b-c17e-4ef9-98a4-fa318be2b55a",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "e530f0d2-dcbc-497a-99b1-d261b49c24e7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8077d1b1-0dec-4377-9dcf-795d16eec2e7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2689fc23-d73d-408d-9c70-ba8946de657f"
            }
          }
        ]
      },
      {
        "id": "8c59dc5a-9e93-4f07-8560-1bb08d60b7a4",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "07cb8f55-e1ba-4998-a256-dab7ba02a5b3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2aaf39af-ed94-4d31-94a8-3d652810c5e0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "74641f01-2503-487b-9e83-8ce24f379311",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7e857e-eeeb-4829-b151-aee183126c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7844f870-30e0-4370-bc57-2bdde117bd9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e99d3b1d-a0ea-42c9-bf57-027edbd95381",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7db969e-bc42-4587-bb8a-3e22dda3dacd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "600c6187-1fbf-4585-a0bc-33c57f611dd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eded3bd-2c70-4e8b-955b-d78e28635a5f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc68251c-b48a-4873-aa9f-7c27bc492dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dcbc32d7-daa9-4a41-b3f1-b2a22fa9aeae"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4c2000f1-c07f-482b-bec7-cf948f7ec942",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c36bf252-3b3b-45b8-b259-f5c92defa402",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbeec9cc-5556-48ac-ba24-0870eff7f991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a9212e46-37f6-46bb-b3d0-8306d6bd51a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dba12b35-5f9d-4df5-9b54-4eb6909b0c98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fa16ccd-e3b7-4443-97ca-21e221681cb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5eaffd0-8326-4c68-969d-0e1c0269abaf",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7138a18a-0e6a-4449-b9a9-219b8d5dd0ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b3a280d5-cafa-4b9a-b960-3bce895f7824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f72a9c9b-3e0d-4813-9ac7-8ef52a1e83cb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "c48c1418-d5c5-4f66-86fd-5b83ff19c528"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5a0c44a8-f0d2-4878-bcef-b41aefb9877f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e9acd870-870f-4003-afcf-90ebca3f3495",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3132b912-f9ff-4601-b92c-a3ddca288e14",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b5c63340-4287-458e-84dd-03c733fa026f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "20982387-3cfa-4f67-87ac-2681d90fd606",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "891848be-2f56-4d87-8abc-500f20f3add0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "59c2c9d2-3cb2-414b-a182-4ca220a9bb2a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c31ac90b-b5a8-47ed-9020-95b48508ae9b"
            }
          }
        ]
      },
      {
        "id": "7bbcc62e-d1cf-4266-a756-20502dac0997",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "33567d87-27ac-431e-b959-029df1400bc4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1dceb524-48eb-42cf-9175-c19123d9c9d4",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "9368d681-4d80-499f-9d57-a2c93fc1d099",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a5e0154-c139-45eb-90d0-687ec977d73c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a5ce2db-197c-4ee4-871d-55b834339d6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c6d124-033d-4a43-bfa9-c66203ce80b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a310025a-d367-4b9c-9a48-aa8ea4c92553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1a9f66-aadc-4c53-a16d-0c00236deb22",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc9c7139-f6b8-427c-b6bf-e5ad22aab89e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3ba5148-e697-410b-a31f-de0f2972969b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8211f7e3-2ffb-45b1-a377-ada58476ba7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7df08ac9-3372-45ce-85cf-5f96dfb7d14e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dd8d3c4-efee-45bd-9cdb-ab1af7117ec4",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "181cc77e-a731-4d8e-86e4-8d471fb929d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db43d219-8088-4050-9602-8072af384e25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a363234f-0e84-46d5-86b2-9ad46313ed3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c684995-4823-46e9-b8ac-18629476dcce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f28ff695-e520-4bcc-b747-e743e28ffa59",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "314a81b6-2c03-4311-87c7-f6eda041de7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ae06256-1054-4ccb-92e5-fe091c941f4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "116ff588-51b6-40c0-a1f1-d53cc0ca63ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d311b69d-a67b-4686-8648-d87d5941368a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf7c8c9-23f7-445b-b6f3-8006bd30134d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28e9d3b-8a42-4cb0-be41-c0f9844cae5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "507a7938-cbbf-41f4-b538-48931e1cb701"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd0fe8e-e069-48f2-824b-8b4ffbbab99f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a62c040-af50-437f-93a1-a2d46ee3f5f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d4d95f2-442e-4063-8ce3-eaea4c0a016b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7493beba-edad-4886-91dd-eb3e1da636d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "095f9642-6d13-4ddd-9339-12a0287e650d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74af0f25-8d58-4c18-980d-f6cbdc0153e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46d95abb-6715-42ab-9405-db87d78cb09b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed400656-45cf-48d2-bf1d-e141d92af8ca",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "087c831a-c514-4b73-be16-c0df06822763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6fd3685-9f34-4069-9ed7-77243be7db5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6dbf1d5-e575-458c-89f8-1a29ac87da72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "371393a9-1af2-4126-bc5f-54b4eadd7993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "404ce9a2-afd6-40b4-bdac-7b42512c61cc",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee4d1ee-af2a-4f9f-bb4c-99c41a835b69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "498c98b0-0710-4b53-9aff-122614821768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4660beb8-5b07-461b-98c6-ce82ee254a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b468a8d5-5db0-42fd-b9f7-8de2fa1fc84b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b5ea56-a7d3-42c3-9317-da8fb40ab3b6",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed65d86-0bcb-4a6c-af2d-04ea605f7ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54d3ecb4-5e37-40cc-8b06-d989ab31f0fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "953c947e-64d9-4d5f-a397-bce92cc868ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00a63397-4a74-478d-ab8c-f72e326c6a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b799a2f4-b9b7-4378-88fe-050a8f060d5d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3411d81d-1f4f-460c-adaf-8f9587ee685c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf118956-0bec-479c-a4b3-16f84034f98a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5290cd24-8bc0-46bc-965f-d7477030426e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e249f5c-a256-447d-a99e-2462cc7bb687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00ba9b61-ae5b-4e4e-8df8-cf243d62fad8",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "167830bd-6e60-4c00-8762-46ac0c3e42cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "377220e0-0b58-4dd1-9fc3-32d5f293d923"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ebba8c-460a-4b6b-96cd-6f3c6348ee35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce8befc1-dd26-41e6-bceb-d51442d24e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "379b8ebf-6b72-490d-ae73-4ef836ca518b",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "908f657c-4fdc-4356-ac1f-dae6c443e2dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28890bcd-ef1f-48b5-9dbc-a782eafff158"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "182017b2-a5ec-4acb-b42a-1a8cd58d98b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85d7c370-0b23-47aa-b4fa-ff0c86370b85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49cfd428-6009-4d4f-b20f-524c9a621366",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5deb9544-9c7e-45fe-a847-05a9f3cde10a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6760b770-cab8-4452-b1b3-fb61fea5ed78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58afb901-d4ab-464c-83ba-6caea4896fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "06b8d488-a770-4709-a1dc-0dbfb3032341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac335078-c0ad-439d-99d8-ebf66f37091e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef9eea97-8354-4487-ac10-dbeb7ee59c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c1f5c31-617c-4766-a692-50dbef00c4e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "563ff687-795c-4144-a0bf-fb980ac206bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f96b58fd-64e3-40f8-9fc2-c631c5176e9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf7f5dbc-7be0-4522-9c63-77f7a0b2e350",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91991c8b-9a16-48d7-b4c1-da5448a4e4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b300d8b-48eb-4ed4-836c-9dac4d18676a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d5554fb-8a55-4c4e-9b3f-e2cb55cedc96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce3bc55e-c780-4209-b3a4-820787d40ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7373354-e4b7-4a23-93ef-cb189c260892",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f2e1c7-ba05-409b-aa0b-6193a004f256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c266e60-4714-41cf-9fc7-ce5a007181a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81271356-18af-4d48-a749-6524e8352745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c0c87a9-35a8-4266-a1cc-462efc77d5db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a4f6bdc-1bb5-46eb-a597-7b9b532e0601",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62476837-4709-44f2-93c8-af1d0a2053b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed4799a5-cb05-46ef-9d46-6b407703e9f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe5d261c-2b63-4bce-bc7e-cb3522c4a2b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db2d6088-9d1c-49bd-85aa-9ba657fe37f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c796eeed-9250-43d7-bdb6-16ca3ac28a32",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87aff97e-beb6-40ce-8a97-d8a00e43e97a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "221db050-69c2-46e0-bc65-b286bd8af92f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3280f6a-b30e-4ae8-b3f1-686e75da04b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c8e8c38-272a-46c0-9e90-e15ca85a9d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "203d4095-233a-412d-afe9-25af1acbad7c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa2c68c4-b579-4b15-b121-4e3e2d1ba3bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0f644f9-3b50-4707-8a40-2e346c416427"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08e15d73-0d5d-46bb-a7dd-4e6f41bccb2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "68a064a8-d161-4db0-9872-cd44a0535f37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a475b570-c018-4309-9392-0a213b1f1ee9",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8319086-1858-4445-9648-d23b46790f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7218fb21-d29b-4d4b-a570-e404f45c8075"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d53b28-0959-4f86-abc9-b1d79266fe08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ae2b25d-2238-4834-9365-7e9904577540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be3d259b-f04f-4513-a920-6371ca401911",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a16d8761-fcf6-4717-b474-6b899908cede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65d0bb77-93b8-48e7-8433-fc53b67a0c8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d00aa7-decf-4c11-a14f-1f15abf0d0f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "50e69a03-0b7a-4cce-860f-243c4eb6e577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33cffbe5-87f2-4a55-9e27-0f5aa69ee764",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a5f5fa-8e34-453c-9d42-ec61192f549f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01fe518a-8fe8-47ac-a581-d1c3bc6fccba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d20306-004f-4010-9f91-2345cc8c5d26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca320df3-f5af-4bd2-a5b6-ba3e724aab9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "893e7c67-0ffc-4cf5-bf59-cbe5efc3de23",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ba625b6-7bca-44dc-88c4-5b64f5e3ec11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee9a06de-cfb3-452d-99f7-d7fdabe093f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "840ad45e-fa2b-45e9-95b7-382bd356a1ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "65876a8c-b55e-49b0-9579-67eb21fbc306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "244e63a8-1af5-4cf3-aafd-8464a8246e9b",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a979aa1d-4eda-4c51-855f-8d620655261f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f483a9e-e69f-4a94-936f-e613fa04702e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "243c822f-449c-413c-be5c-169c8beb0a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "31edbfdc-8aa5-4995-8058-c70a188a3e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1bb1f0b-b3cb-4c0f-98b5-1aa22139dea3",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2584a4d-f836-414d-9b9a-5b5e857bf4fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b7a910d-d5c5-404d-abf7-22fdacb8c157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34e89be3-1fa7-493d-9a33-7cb20eff0995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "919a099d-6913-45e7-a754-6c8ebde9caa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99bcc5a8-3126-400f-a868-499a46dcddd0",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee5d1de4-cb01-4c56-816a-8215f7af9e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94eb9ada-9c8f-440b-9169-4c20005629c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "699b1171-fb12-4b25-85d6-bf2f98e6b981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "253bfaae-f155-4548-95d2-0af7d51a7059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c35d2aae-8e40-494e-b4cb-138ea3c010a0",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e095e7-5d8d-4d31-9666-3b709e42a920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f68806a-8150-4f91-9433-d17631c4a41d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9429ee9-35ea-41d0-82d4-6f1e57b2a788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d073b4e3-4853-4418-9d76-77c2d81e2f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4273ffd-9101-4d9b-81bd-ead582ee00d0",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce0dc4b0-e069-4101-bdc5-029a2f111186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "318397c4-4509-4819-adc2-8fbe3705f8ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2d6bb2d-f134-491b-870d-f55ca5edeca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "02b73369-81ce-41ce-ba02-cdd5005aaa11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f0288ea-1a99-4c35-8923-f587f59ec25d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f5b8b78-49dc-4734-b1c9-94cc4aeee35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75d3398c-c409-4899-9def-6912cf2d8a1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e89ae7b-e8d1-49cc-a91a-f9ea87c8a523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "427c5dd2-5106-4436-99fc-6a4502c9437c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea7d046-d3d5-4000-a2d1-b65373a172ab",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f4b923d-533d-4586-ab83-40a4899c8479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff5ecd0a-a15c-45ed-b30c-47877ee02418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a234152-5d66-4702-955d-f670db8d4d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f95f338-5ac6-4bd3-9891-623ecb405c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96dcc504-1e5c-4eef-9dbf-aaf2904c13f1",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "556ea249-c13d-45f3-bb99-8e184c7f9171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b45a329-e858-4539-96fe-0a5f465828fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d671f44f-aef3-44db-b730-327c13079171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "74f64004-d14c-48a2-ba82-f13fe7da79d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed28842-8841-4194-a263-619ad2aab2e2",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51079c0a-65ee-4f46-8e42-e02533fb6039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea5028de-7b6d-489a-89c1-120e09e69a32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2195a12a-a7b4-4fd5-9dae-8e4d39f74dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "db72e67a-261c-4f52-9389-1cbb2226ee0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24733b39-d7dd-454e-bcfd-cbdf0264a31b",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bd01b04-db45-48fc-9f18-0fede504fe36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21b65dd9-7db3-43d5-9396-b654ded94e86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5da97e9a-6cf9-45b6-a995-1fa8a981bf0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c302322-fc07-44a0-857d-55babb1df7b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77735d71-70a5-42f8-9c8a-380347d8ea4b",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af32148-a633-4af5-b687-afaec7d8b21d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e622dd70-3f96-413e-bf06-3407a5a5d0b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e53192-f2b9-4ccc-a739-ab5edbeac333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "13b21991-a5d6-4a7e-906b-5181f84bf7c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3081b5d-ec28-485f-8475-f5aca01780e4",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40442922-a288-4bfd-a13c-171810b4c57f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da30fe7c-5e34-44d7-8e6c-1d4ce044e6c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f22c3d6d-9811-485e-9704-d785e1bf0646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e4d7fb7-8b74-4769-8519-3fe16a3ba7ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9b29a0b-93b0-4946-afc2-312cc9244f05",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0ecaffe-4767-4a60-846a-158d260ded50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e663317d-2de3-494d-906a-bc3f8cab0425"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e5515b9-477f-43c0-87a8-bcbe7053b0d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "557c900e-aad7-472d-93a5-7c7f16e4c1e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb484669-117c-468c-a8be-c11dcc0122a0",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f7bad43-f0a6-4b4d-9e53-94dec0187550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f051bb9-87be-4506-ba26-20147c73447d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85896d0-b80a-4d54-a5c2-46bdb95980d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7f833ba2-dc75-42a9-80e4-5545d393d28a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9514f978-90b4-416f-af43-577ec47e75ca",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d42d224-2adc-41fe-8015-26ecacc6e248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc75cb0c-3470-4a08-8c0b-01e18b84e0b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02eb6da6-486b-4881-ab84-8b39e92bd2be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d5357c4-375e-4840-b4b9-a424b70534f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3d3c54-89d3-4eef-a4b3-bf89f13d097f",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f8df5e8-92c0-4181-8e9a-105fd08cf207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baba5f4a-93bd-4609-8abc-88344ce38706"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aebd327-e4fb-417d-8453-094989db79a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6aaf2289-5bba-43da-a736-7ee3b67aa1dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28c30943-9278-4a81-b9a8-6d4ad141e854",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "654fe5da-11cf-4c4a-b310-3cd38db592e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19c35dc9-40e7-4191-ba10-7ce508f5a9ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "711ed75c-c22f-4edb-82ed-2d334c6f795c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e9963d4-aaf0-432b-b8d9-e035daa6887c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf8b7aa0-91bc-4d37-b38d-6b450979729d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb8bf60e-5668-43eb-90ca-51f4c06dcd9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2933fce3-a32f-4693-a62f-9ab782777371"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3092458a-254c-4a3d-95bc-4a6b983412bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6be3ba4-846b-4aab-87f6-82b744d187e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b67310c-ccfa-403d-86a1-43f9902bf58e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71938b87-6899-4b1f-a06f-b444a019c433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9692e18-4c7f-42b3-86e7-049260c35716"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b56a249c-1d87-4fb6-847f-1b9e8385ee4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f6c7914-58d6-40e4-9938-e20f77cc3edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31cf2d25-9560-4824-be3e-0ae16f36b0e1",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07fd9ed6-f8b1-4a58-99f0-081c42a8cf0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be291a42-ae8d-4c29-9e54-16698b87d31c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f8f0472-e822-4dd2-be88-01b38d7ff63c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "dea90af3-ce7b-4da0-b912-3e1290f27a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "091453fe-258e-40f1-b8d7-944568e81aef",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "623c40c7-6325-4024-a5e9-ad6ea28255ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "932205ca-1506-4e9a-a6ef-9806235da61a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aa847c4-ca3e-450c-8613-d74beea79e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0dab8a97-52a3-41fa-a63f-1d6ff6c89eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62f0edcf-33a8-487b-94c6-7b983f3d08eb",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "633c8db6-52e0-452a-a93f-264541bc4629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6375cad-4f74-4e3b-a1d9-4d5703d3f244"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e92d3983-98a5-47eb-8ba6-2d22afa511d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d4aeb6b-a6cf-4527-bc7d-e201f1370ad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "519adab7-9086-40bc-bbd1-ae41e49063e5",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e05a3d3-2b04-4a2e-bf0d-31a7a5bd2b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0611abb-b7e1-4252-82ee-53786781d74c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dd082a9-6168-458e-be8a-6bb4f9ca2284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "19a1e55f-0a4d-4ec8-a7cd-04c8c65eb8ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c3c71c0-5766-4444-9e30-6e7fba6495c5",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c57db351-a4be-4946-90a4-6613951c4920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "707b7628-1de6-4ee9-b979-1a4bd23ce06b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a8311f7-dde3-42a4-849c-953eba194682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "505f7840-1425-4eeb-99bb-1710e2250999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bef6786-00f4-448d-bd91-bddeb5b27a2d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ed3878-04ae-43c4-9fb9-4f764063d8d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4da81237-fb3a-41af-b4a4-ac2909bbd427"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe885fcc-5707-4618-8f1d-80dd2d1419f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "486d74f5-157e-4ed6-8203-fd77b4927374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a997f7e8-28eb-4dd1-8fa5-bf5067922437",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da40315e-283b-40c4-9f4d-e376ac853734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d8dbcf3-54f8-4b18-a99b-977df14fba4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96da9c23-2a82-4413-9e07-8d084e8258a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4a7a8ef-b53e-4b66-9310-2556aec5e76e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17dff2ac-6349-43fc-86f4-b0da31ed342b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b54b4021-0604-4088-b5d4-13d3a1ed9abe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77b0692d-f0b9-4199-be54-6519a77b4d48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "293dca0a-25ea-4a53-a07c-0d4dd195de86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "635d0a9e-9f57-4fd2-9cb0-572536fc4192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca39d57-168b-4249-91d7-3195e40ca0ae",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "667e265f-2f29-44f7-a414-cb5fae12a34a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83fc9780-17b3-43bc-9591-12f0df3c2c3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "109e7d90-9678-45f7-80f6-6479ebc6d936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2768070b-2678-4ced-b0de-11455c178816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f381e4e-5c34-4a73-937c-732f270030df",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe48ca8d-b201-4ba2-a962-2b84ef6ca778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "959bee11-f42b-493f-984c-64a7eb1c8213"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20658d0d-840a-4065-93ff-3c6e0b65c80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "15318e42-8d02-4445-9040-486ac837f2ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecc1322d-5439-4706-bb14-7c8eda334f87",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4970caf-30b5-46ed-96e0-c490d043f5e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c445a46-f095-47b0-9292-ecdd9cd6ad40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a280127-b109-46f4-a694-c15eb4dd9907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "25f9bef4-69a6-4188-8bbb-9b315e4eef74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a35c50-e2b8-4633-802b-a7b1f808b8b5",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df3f0597-c3f7-471b-ba24-9641c410034a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eca9d1ee-aab1-4bda-8435-3e79e7a3388e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b6d97cb-eef9-415e-8a7d-1daf4a8c1c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b93bc75a-7068-4f4d-9453-1f9ad92821ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac46b0f-bd3a-4d0e-aaf2-233ad69e63e8",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf50c647-7adf-4be6-8ad0-9930893bc01c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de307c81-46c8-49db-88db-cd75ea3b5d93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c393ea-d089-47bd-8ff4-e7e7d73f8fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2fc4590-d233-44f3-bbf6-15681a0a0d36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "422d17de-1de1-4438-846d-f49850389814",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27319310-4602-4aeb-b201-aefe8a521493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc1c8772-8e3f-480c-9417-0262ff99bf1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c636556c-3200-4fc8-83fc-9dac83c21204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "98cb19c7-33eb-457b-b212-1430c53a0a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae70641-557b-4e13-aa9b-342f1c97c3e4",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d616fd2d-6ce7-4330-9693-89e8a51aaae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df1233a9-78bd-44f8-96f6-b6806eaf39bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2efd6338-7873-418a-bdb0-0b3a9d7f989a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "e0b2cfe5-a528-4a97-bee3-3e0ca9371ed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dac8f7e-f1cb-48c9-8fc9-298f02a6f592",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea273b43-d08b-4137-b169-31695e3ba46f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70d9541c-c389-4ca4-bd5f-5380b58851b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd497174-7c7e-489f-ac7b-0a5f0c46c04f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "14a32766-da6a-433d-8d39-ff22602a50e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb182c9-c29d-453d-b1b9-6843e18bf2c3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "268e2440-3ff2-4bd7-9ccf-7e62ab22c437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5f751f6-b662-4ed3-aed0-eb159d320847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b82c404d-f444-4159-abb5-76c7cadc2472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "21af0a35-143c-4654-b3c1-38132be9758c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "547ffc93-d3d4-4b2b-bc77-2f24377f06ca",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23615f87-e15e-4325-8138-8437c4e67303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cf383e9-afc3-418a-82f7-76c627a5be2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a14e0012-5dff-4e43-bfdd-ef62dbfec34a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a796601-8fcc-4a06-b4b9-7e1a35b5d8f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be48521a-3592-41dc-a2d3-f77a6172a458",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a0e0466-8c54-471c-830b-f5f471874aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36ac5c97-282f-4260-be72-c0ff0c767ace"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc41540f-8f34-4495-acc7-1ce241e47534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "82527833-81e3-42e0-8748-2af4ce2f33d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b16e293f-0975-4d8d-b0bc-c6469f26620b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2664d77b-7d57-4b33-891a-6fb2353cde86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3309a59-cf0d-4c18-b1cd-85567b524564"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac61829-d244-4c14-961a-da0db7aa8064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "97118460-8d6d-4b3d-ba19-a1dbd82114c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccde77ee-93bf-4c3e-91d5-a6537692dbd0",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec02db2-9790-4a4d-b3f2-8ab44b150c7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d156241-1651-4d7d-bb1c-7df8b59ebdf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "850e61e2-9851-4d3b-bdf8-d04405e923f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "efa7e12b-ddc8-48b2-bca1-3485c23edaa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e442206-710e-483f-bd86-8f70dcbb6e77",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9c95608-8d8a-43af-a3ae-59b4410949d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edd3191d-c667-4e1d-8f04-fc02d0af7682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20f4b7b9-1335-465c-a14d-23a5ba3d4495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b674fa3d-0d80-46f1-b749-d13a45480815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d184fd4-9ecd-4728-8903-8ff01dbeea7f",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "387f12e5-c7ba-4eef-83a7-0956d4adf7df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa3b09d6-b79c-485c-a597-3364ba9eec88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "742cfb55-e0cb-48ec-b591-92a41ccf1dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "23c26b34-48a5-4f47-8870-422eafd9d13c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a815a0b-6c07-4d9b-a01c-c320f84ed436",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e6d17e-1807-4ffe-846f-6da766131f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30341721-25bb-4b7b-bc28-9112d38e4c2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fe2e437-1d2e-4ce0-bbf8-9b159a54eb7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c3c1898-dd3b-4d58-b819-fc6b7a43f6ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1357d75-0fc4-43bf-8515-c937083aafd6",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27c16ace-18bb-4989-a853-b4167a2d7926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7265c9b4-ddf4-44bf-a9a9-41cec9849346"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a143125-8be5-4538-aab5-d02d7283fa19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6f2d95c-ca46-4a7a-984a-e16e685b32b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6afa3a00-a010-428a-bd3a-612557e9e50c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8cb70c7-2160-4eac-b6dd-99cfb8b823b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8381139f-db6a-4c44-9660-454e30300757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce2c2495-83e6-4a5b-b32c-cdd6d925041f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "786bbd2a-115c-4e0f-a323-d95898a12f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7de22ca-4096-4a22-8a87-84d019ffdfb4",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bbcf6e3-e631-47e1-ac02-5f805b512193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8caaa2e2-88f5-48c6-9c80-7a2278523a65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0929170a-d207-4b7d-909d-c7529d6b687d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "18704b6b-ab11-43b6-96c8-b8fd6e0a0d91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c65b0ae-dd88-4dc0-925b-29d7269c33e8",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41133ee9-2ec6-410e-9ff0-e7eaea034a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cab99962-f060-4552-9923-a933ec675a76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c500776a-aae0-4525-a62a-147dc70924dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3629a656-d14c-4fd2-81fc-c1152d10a250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4224b2a2-acba-4fdd-b684-a79d15272d5b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3665634e-c4ae-4285-8e6b-b5442ad0bd70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e60e3376-12b4-426b-a022-2125c582bab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e118157-058f-4c85-a088-27a17abb002e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "08009dc2-ae33-491d-ad8a-88e1ecb23225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0077446-0527-4613-9026-9313c6065ca5",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d406962f-c547-4bf6-953a-2312bbe73e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "320349ad-330c-4edb-941c-ecc67f9eabfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "505d0838-d95a-4b45-9439-963e7a1e74a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "41b5f736-e706-4ca0-8d95-5ce4dbd59341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cadb557e-e2f8-4dab-a5dc-bb3342fe9dab",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b9dc33d-c1b8-43a4-a93a-49f86b332a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a6aa96d-b4c6-41d4-bf8c-7f5a5c1529be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57411f92-ac9f-42ff-8258-1c884d17ccf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cceb78cd-1d98-4ec0-8de2-3fb37c28696c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac027b7-4694-41e9-9101-66b27a72bb86",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ecc197-8d3d-4cc2-bcb9-8e239d51707a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e79d494-3e17-4a1a-ba28-cfb2b624b00b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "906553ce-3f00-4edc-81a4-cc18789e1055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb2a715e-4cc5-4ea9-81c2-1ef60d2df22c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "301adf32-e21b-45a8-8081-d12bb34fdf35",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d8a15a5-5600-438b-ab99-fcf77c0b1d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "928704e5-4b7f-4f27-8a08-a03cb47cfdf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2827f024-74fd-444b-a05d-ab55215afe3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ef2516c8-2ffd-477f-9eb2-9be55c02f6d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e514130d-f575-41e3-8794-88b6f491fedf",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c8bc7a5-3a70-4316-a7b2-2ea3834067a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de8d2af4-ccf1-4cf0-993c-d38d3a5b7efa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d93a08-9ded-4696-b2fb-4b262081ebb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6504d6c-4a08-431b-a71b-7c84fc64441c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf81d810-f307-472d-81ca-e48c2c7ebfc7",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f9664d-28d7-46b2-8181-ad7c4c3b7220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d1d0f78-9214-42d7-bcdd-7270ff88a62d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "343739fd-5c3d-40f4-ba0e-e576944ef50d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c73c05e4-3839-40dc-a4e3-0aeb4d796a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e374f80d-9c14-49d9-9421-3b01f63167d5",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adec9997-e96a-406e-9e5b-c50b20a0f2e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fc57755-8169-4079-b898-6bea89993813"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ddc9ad-bb48-4d55-a5e4-74256c72a37f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "683734e2-5a85-4105-b24e-4475571c36f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3dfe584-626c-4cf7-be75-fe715cd5d63b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a7c39a-d894-47f1-8748-4ca163ffd85c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6db4fa9-2053-49d0-be13-c87f4b4de944"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ef4c17-b805-4133-a8cc-edb0bafe30a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6a8fb23-54c1-4767-9168-c97744cc7f4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3540cfc-5f43-4615-9348-d6b4173374bb",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "813921c4-511c-4f21-baef-41eed21aa9b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5de8aa0-b8ca-411b-bd3f-a972b99e3787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0719d5a1-6d5e-4df4-b2fa-7ed1381f6b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "276adb1e-aa37-447c-9351-bfadd214e158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bca56cb-dd88-4e00-b05b-f327a9f715a2",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "872170c3-259f-43e4-94ea-c182b295a980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88b6093c-b644-41d9-843f-e10636067317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cebfd33-e335-4d91-92b9-90f9db2f9342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2f61d500-7d49-426c-a3ff-c62c71a09b5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8427001-747e-403b-ac7a-e6d06bc4bd60",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2106a21e-aed3-4b83-836c-b0b5d491d85b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d4f22c2-09b7-4fa3-8de4-6ad001933350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6400d07-e1d4-4058-9d3e-1a6b81f5c7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0f3242f-4133-4be8-84b5-3cb4e439778b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ae07a16-0a73-4058-85b8-64b5e45cbea3",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dcfa901-d39f-46b5-8681-e5ebedb9f32a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "594c33d0-c179-47ec-8c9d-c5c511cbe1a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f54bbf8d-398f-4660-8057-66cc90a70221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec222252-be8d-4c08-b9b7-fe951bd39924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79edd688-74b8-4c4f-8d48-3d484a08d17d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f51b6ebb-03f2-48dd-9c81-9f363637963f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "302fa76f-dda1-4f38-a4a3-8b8e68d368b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e1c615c-9af8-4c21-82f9-2e81a350643a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b775539-252a-44a2-9157-4a487bd01643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2958bbb5-c239-426e-885a-eddfa3532b6c",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e85bff5-51df-4351-af33-4195570a8d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8db16054-d174-48be-998a-77850f844aaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9839fca-2258-4672-b043-a395cb11c2e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b960ff6-1854-4886-bdb5-175b3cac1bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39e1e9a4-19d4-486c-a86c-73ee0c4ffbf4",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d7188af-4b78-4f93-acf8-6e372020dbd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8743961-da85-40e9-970d-2b8d53369806"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ee0bf55-c9e1-4291-8a02-617c0ea57036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "588d9874-3e57-4838-9d1b-c94309fe2882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d48cca9c-69c7-4849-959f-c08e02770b11",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a2b869-4fdd-4ba1-b143-4d9d25f4d9e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a121473f-c88c-4422-aa9a-3031e1f380fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ee98bbd-97f1-4110-aff9-fa090f904af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cab0130c-54b3-40e3-83ee-fa16d5a9fddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72dd3f97-21d5-4d10-bdb0-ead2e49d56bd",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b515e76e-30de-4f65-856c-3bc0c1722c47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87156da2-698d-4613-ae77-78ee28c6d817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1085fa41-277e-4784-b9ef-ca6745bd714e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "916ab4ff-4c44-4d08-8ecb-92941163c833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b40e7029-8dcb-43f6-b5f1-afbe1544c086",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d75432-b6c6-478f-9534-a9ab41e95ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "191728ef-8662-4e1a-97cf-8e5264b04f47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "481c4a3e-7686-48b0-9a54-d8bbef44b3b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1e7003f-e1c4-4dec-a1b5-53d8ea2ed72e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9499ca57-51d9-435a-8f63-c6db3a04f818",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20315f1d-b652-46e0-a5fc-5016e0c31dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0896e742-2ae9-4a12-be10-34e44eb55b4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "556a5972-3450-48af-88a9-19a134940d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0100ec30-442a-4c5e-88aa-a1061536c7fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "593176aa-5bf3-45ab-ac1f-392b2609f79e",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee465e4-07d6-4203-ae38-6badb1608cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3132209f-a5e3-48d6-a45d-2c31dfc8c980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7b87d6a-7c66-4e44-b288-f493291e64e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b312a06-564e-4d1d-8aad-72abac0f337a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59146695-45ff-4849-9bd9-3816ab8fabff",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7216ba67-27ca-4ea3-9a05-d10add02a503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92f67620-af7e-4400-8d52-3adc521b218d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b1fead7-5ff8-49f9-b327-fd758228058d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "49b59f64-a194-4e69-ad67-a19cacbb463e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "961852f7-f670-4db9-b7e3-2c0d195bea5c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a31a25f0-53a8-4e0d-b3d7-34b1cad8f544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b726e6f1-8cfa-4203-ab3a-63c923d143ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26307b50-14a8-4df5-baae-f101c7614125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b67bcf3e-c879-44df-aa65-1014041c78cc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "87e3ff53-24fa-4217-960f-17359a3ddc9d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bfa1f658-8935-47cd-a1b9-a22abf8953e9",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c841033f-63c4-40ea-8908-9e146f8a1c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f1c2cce-a847-4fac-8f8a-8eba9f27067b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "057d6fff-ab48-44c8-a5ad-53d4b2b92d44",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "944455d9-9906-4eef-be6d-e54569c46bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a7616db-cb64-4170-a5de-6b50aac29e7e",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fce7507-c1e6-4963-bb60-c23d04eb6110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ab039478-260e-43bd-901b-b99b18121127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d0311f-d398-48b2-8c81-c8f600d993c6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "c0622fe3-4868-4546-bfdf-8b531ab7f3e9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ebba6bda-fd01-4b3d-950c-33e5fada71f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd3f903a-f36b-4839-b805-188ce0b27a5c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aea59295-5228-45e2-ac80-8ad0f054d1a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e4ecb26-f436-40ef-843a-1457d4b7b3ee"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8dd408c2-742b-41a5-8d18-11c222848ef4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "553399f0-824b-43e4-8c16-0279b811e76e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "71b04ed2-d82a-4bf1-8704-9fe646a79099",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fb9afec6-8c2c-4a03-9311-22fb780e7a04"
                }
              }
            ]
          },
          {
            "id": "8a1479e8-0ed5-44e6-b682-222223fbaf17",
            "name": "Positive Testing",
            "item": [
              {
                "id": "19dfeb62-a132-4215-83c1-c6e999c985a7",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "28f06dba-6ac8-4352-bbe6-6165a7227730",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "39acca2d-33f1-4161-87a4-5ad954de88fb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7dfb9e18-ab66-4ba1-8e73-faf10346d989",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e27a08ca-a87b-48c4-adf7-28bbc5b5558c"
                    }
                  }
                ]
              },
              {
                "id": "4e0ee73b-aa82-4947-b468-4816ec90cdfc",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bfd93033-ad7d-4dc4-917d-aa85f3cc4df9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1c17e591-72bd-486b-96d3-5c31296f3d33"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a3908b2e-d387-4a18-9513-59fcfb852096",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "69c825cc-6e42-4c66-ac9f-795ceecdad83"
                    }
                  }
                ]
              },
              {
                "id": "0f8795a9-0cd2-4331-bbbe-4d2c815bb655",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "44050c8c-f922-4971-ae81-e231938c9e38",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ef3895bb-9273-4a4f-8a8c-6fd1439460b2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d93b229-dfe8-404b-8a77-74071ba5e1df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "6f2cb77a-9373-43e0-810e-4a339b551fd2"
                    }
                  }
                ]
              },
              {
                "id": "75f90103-7785-4013-b383-4c3faf35f07c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "56777d30-1df6-435c-95cb-147e85bded78",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "59cb5401-f48b-4e01-a0ba-f6964686ac10"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8dda7d6d-710e-4357-922c-dfd61bf39e15",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "5d9587d2-0ccc-49a4-bc97-d4e14bd57a9c"
                    }
                  }
                ]
              },
              {
                "id": "78727660-d8a2-4eb6-a5b7-ae9a567a8da7",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "28a5b9bd-e33c-487c-aaf9-e9170ab950bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f0d7fd2e-d662-4a42-aff3-ab58397c0341"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d42b54f-61c3-4244-acad-28d5720ba387",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4da9a152-53f3-4cb7-bc39-a2e2f6401b49"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f2ea3f58-bddf-4619-9c97-5721b2e9f4d8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6eb270ca-f4c3-4133-8881-92e356d7d62e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "80250dbf-46bc-42b9-be55-ffc09ff1d380",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cc94eeb2-60a3-48ea-9530-ec2122587c7b"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4c91533d-b598-4b66-9fba-041b59ca0dda",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "8204612e-4fe8-4b8d-96a4-04885b23b3ec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bd5faff8-3d28-40fc-911a-c7eb033886e5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6c35dc93-2459-4afe-a66a-06e6801f7e60"
            }
          }
        ]
      },
      {
        "id": "918663f4-75ef-4d2c-bd36-c835e5667cf6",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "fcca5a36-ce4f-4cca-9027-847840b3cbed",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1c097f0a-9ccb-4b97-8dc3-36ee5247c42f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5c09c07b-486b-4462-b686-78881fb287b0",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e72dbb-1e42-4530-a8f4-abeedeb94ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cf93a5c-1ba0-41c0-b853-d75b1fea2dd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe5e887c-e38b-47bf-8d62-5f1c4b04d771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "0adda859-4fe7-4a90-8466-a9851d2858aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1695f1df-6efa-43e7-a268-85200ca7cac3",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b6cbbd2-fcb8-4c6f-aa82-e5a4edb1e12d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7b7621c-c55a-4469-9dc2-0bb659ac85cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "795b79e1-783e-473e-be8b-2b5e2218f870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dd3d1c9-27ab-4981-b611-fde066efed39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41c649e5-2197-4dcd-9c54-52dff6aef63a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "339f0d62-59a7-4e66-9d65-0d4bef2380d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a50cc825-e245-446e-872c-3d4fe56d4a0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4523222-6ba8-4397-a95a-f492f6d7f81a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d03813af-52b6-4976-b02e-75478e2f4b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b5c9d57-7d68-4c64-b063-bd4c5a214cef",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41d344fb-854d-43c4-8e3b-02c8346d3216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b5224e1-3160-4ea9-ab82-054d4552ffd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c4bfe6-6c3c-47b8-af22-2b9b9f71f0fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b633f26e-0841-4d83-9d31-b055c66f23cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07c69eb3-7464-4f27-94df-b92a1017da14",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c5a2e40-377c-44c9-b6c9-4c1c81866b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "787f1621-0e64-4f5a-92ee-e83c457253b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10bf7803-4ecb-4995-a171-9c88a4e0f248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6c19619-46cb-4ef4-aecd-6f30c4c4f56c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c934786-d771-4510-bc16-924312d283f3",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16779307-ddb0-42b4-bd70-a96c133daf70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7afe865-4946-49c3-902f-86bc4f9b9a7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a8022b3-2102-4cea-8803-23fcd578a076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6fe13cd9-b656-4de3-b282-272df06f2898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "293d7556-489a-439a-a86d-5faaaba3226d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d9c2821-9988-429d-8eae-79437e261ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47da62b9-dfc7-4c9d-ad92-d8f709bdb8b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e11456b-67e0-4f2c-b514-c61c2c9aaa1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea0a2c11-28b6-4aa2-9395-090f7b40d577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4453669c-f169-43b4-a4dd-d488f2d1300e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e73a332-e3ed-4737-89f5-09075def1fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2fe1c25-6a6d-4b82-af06-fb15486901f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "829d3255-92bd-45b5-8808-1a43c6a6c532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7708ce0d-b68d-4c56-8b05-14cbb8af6659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ec44e8-d351-49a5-a58d-1333992c9648",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fb573a5-94dc-46a9-9ec2-f2d0fcf6c292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fcc540e-2e15-406f-84b2-888153cf94d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e7bd47-846a-4282-8eb7-753e51304f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "785a41d0-0f02-4258-a610-eadd374ec546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "796560b0-43c0-452a-bc94-63542dcd46ea",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea50a06-be5a-4166-8733-d34c2f052cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f62d54ae-2d00-421b-9057-d4c775ca024f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a53686e4-a492-4f37-9d08-73ec56100342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fdb7926-fc76-4406-9a77-895bc0d0093b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ba4aabf-0180-4072-a337-ad522b296106",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cb74c5c-bb67-4820-8dd9-ce97f1ab6ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18a0b6f8-f68b-4028-9175-8e2711100be5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f07baa-3f6c-4dce-9b16-1831dfd3b6ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6d042c39-298d-4785-8d08-75c4e9bbde41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3df44f3-9e4e-43f0-b120-ed172dd58b59",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a40875-2eb2-4153-be16-f850f2833145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73c89aad-ab37-4ffa-acc9-f4e4a1d39761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de50d1ad-b089-4279-825e-c75adc2b3695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "527b652c-2281-4f8a-a846-17411b7ddf86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff38ba9f-ddcf-4f4f-b198-b5fe439dbec8",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b6d589-a94b-4ca7-8700-315eae8c9e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b78e9b7a-cc68-46d1-b6d8-5c6032653d84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d2cbc8d-cad9-4bee-94cb-a28c0fa72bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d72e3220-466a-49d2-b43a-63072ae4538f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3dc688b-b0d9-4aee-9609-a4d397355c8e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc162d9f-c13e-4698-bec5-3fb93a3981ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d0f3325-f9db-4b05-9215-d4051ca04e01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935322e2-86a5-4274-a820-22c22e0aa056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "04fbce30-5101-4dd2-8f2e-7536629c57d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03222d1a-19f6-481f-bb08-a178cdd2b73a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76862614-c088-465c-9713-8492004be271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "417fc022-3425-40aa-b22a-10469e050aec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a695fa-5648-40d2-ac4b-695db7583ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "caa6898d-636b-40a4-8be8-5eb2c128e40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24ce4f53-1b2d-4d57-9a2c-9083c09b4375",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a0c731-a211-474b-9750-6db99684dfa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f06a5432-78ae-41f5-8897-94e5529a7f8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a708186-e88e-4c5f-a425-dd210501d322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "238c1788-c8f1-4b14-938e-2e224df980f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56fe3a4c-762d-4391-a70e-156b6c7eebbf",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0069a0a4-9a04-4b7a-898d-9da473fc1dac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b675535-7ed3-44b9-8fa4-031d7c4d5995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f529cc7-dfa0-4253-98b9-8ea2d05cae5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ea3ee6c-1d06-4326-ab00-6683fc0b9304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a93d5eee-8dd9-4ea5-9c00-7f76eee76ab0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b219c44-f075-486b-a308-5dffcdbcceec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35d12f7b-7e7c-4f59-bc68-91a1f72434b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7dfba87-81a8-4be8-a767-f8947aaafc34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfa3dcb0-de27-4ce9-ad4d-66a03e3e56ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3847af35-c05e-4185-924b-d4385e4e315e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b22d10-31a6-47d9-bd5c-9e6ad454ed9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d18656f-01fc-42eb-a903-a1cb63c220ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c1f7be-2972-4d82-8367-2c087ff2eb5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98158878-8e68-4eda-b471-cca51bd280c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7f45fd0-100c-4a98-814c-6c885efc2a94",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e4a1533-b91f-4f73-9990-4c29bc45f0ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0d729ca-6ad7-43a5-914e-1dfbb72bc165"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a72f409-56a7-4d27-baf8-c00459c40c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "59661489-9e96-40c3-a42a-bf431794d53b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c4a124-2940-4851-ba30-86f6c91537c0",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0312813-34ab-4aec-9453-db8c5be6c2a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fa6560c-359f-455f-936a-487d128ecaec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e54319f0-4ad9-4313-a253-74e2374118bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c4248a4-7121-4951-9640-581853b01ef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "209b2734-ff4d-4a09-9946-3038edaaacef",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7440bf8-30e3-4db5-aa0b-8564322d5b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "788d462f-6586-4936-9255-a78263a591f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6410e50e-9314-45b0-86a0-3b6d05df6158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92db08f1-a87d-4fde-a740-9892e08dec6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "775a8c18-add4-4bf7-b173-7ede9a308623",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d0c1b6-70a8-46b2-9cbe-d9b225538862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1f37f8b-5dcc-42bc-a6b4-61c330893556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f82e5d9-af52-4bb9-8f7a-aff2b62336ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0091ccba-b87d-46db-bcf4-fa3efdeb70bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "587babb0-1d9e-4ef1-b0a2-18382707a82b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19397f54-9edd-4cb4-8b56-1928209795f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "351b45a6-404b-43a9-baeb-3ef0c26cf8d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e0c3415-8382-4e15-a386-09c4bde567dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63fac02f-498c-4c10-92a4-1c8b2ec0ef96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a937017-b11a-4cf0-8cdc-0bf224f7b111",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0275e860-1e8b-475d-a37e-dfc6a1da4342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "002d627e-d9c8-4a7a-b7a2-3f8db21468ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3bdeabc-50b4-44d9-b842-e2c21e2e13d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f81f54da-1a8f-4f16-bf9e-e0f4e99965bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "660c92e7-13c6-441c-937b-e93b628779ee",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fef98500-3373-49f6-9ccd-c0f2c84ae739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e029b3c-bb71-410e-8ef9-cfcdcf3c59a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1265db5-600d-4432-99a1-ba074d77ab5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebe5e702-4e6c-435f-a756-b5de28f088c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a8b7a7-1f93-4803-a2d2-54b9ce71df9a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc608ccf-27b4-4ff1-9f3f-b7c64d314e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97d20621-4aa7-4ed5-91af-279997b54013"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063070bb-4ca9-4499-9aba-511bdc6a73f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22af67c8-9ea0-498e-9fdf-eeff921c29a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b236e115-cf69-465b-8590-18c10852fd06",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da2276d7-bb49-47d2-9c98-a90e27c930c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34241a33-c420-4448-903c-cda660c03fbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6482ef10-b9d8-42be-ab65-8d5dfd61e523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ba24ddf-80a9-4685-b1d5-ee7c73d7d7a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac15bf20-1920-4599-b599-538869e8808f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5aef189-b611-4274-a07e-a80d34f913a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e8af5fe-d31e-472b-a0ea-0ecb261ee71e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "627344ee-46c1-44b1-8189-c81b708073d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60efea80-4e86-4053-ba37-038f30121740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff65559-8e20-4e27-a1f5-6981b1ae7a3a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76081ec5-24b3-4cb8-94e3-586b0936af58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fd291df-e979-4078-a2af-3daa7ac6193e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b20e68-4bb1-4e43-a0bc-29d9826f121d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c774c12f-0d97-409f-ba1d-44d9e1ee7d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06351d9e-5d37-4b5c-99e7-9730e8fe4b9f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f48122f0-88ca-4cd7-b260-3a51e72f9063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81c9824e-711f-4752-b4f8-7e85fb6ecabc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "481a95b9-f16f-4191-84ad-0f6df1db6951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "93f7a395-6fd5-4ab1-bf66-fec1541d3551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "154eecfe-7e6f-4a41-b4a8-55353b8ef232",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbfc756c-2852-4da8-8593-b56e86fa5a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "860e90a0-9819-49bb-a92d-89b674468ad8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf9b7189-4f1a-4153-aeb9-9c64fd300176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94a69c93-a3c2-4b37-8a89-d23fd3db2053"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7ce802d4-2fee-43f4-8441-f6937c0336ad",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b59d521e-05ce-41ff-aea5-dcfc94822819",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e27623f-25bc-4f37-834d-7b5b3b443bf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98b0204a-22f3-44a8-9eb5-953c868994e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6000f3b3-f464-489f-b41c-e2387a2ff71a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba3a71c8-4458-4785-8297-7724f2094547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc6e43ae-f239-4a0f-971f-10c529c6819d",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acc02c42-dcc9-4842-b959-9711759a9cb6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "f6c6a9d7-4a2b-4b4a-9df7-1a0f1ff9402f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6301315f-40ee-457b-bcc1-607e1a8bf8f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a38d89c-3bca-4b01-96f8-42e80a4a356a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c8552a0-adee-4d76-ab8f-3a6daac42ce1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78816b54-4148-4b7f-bfd5-a8d68c9d557c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2853a884-6dd2-4272-a111-feddd4c92794",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4ee5ba6-af31-4c04-bd00-28e0e457a618"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ad9c52f6-b4a3-4140-905f-f4e05ca37132",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b94228c9-d7d8-43df-9528-07f1a92841f6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a90a734b-6479-4b4f-ab7b-59b90c6db3f8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "90d540fe-0738-4098-a205-aeea64f26dc6"
            }
          }
        ]
      },
      {
        "id": "d8c659b8-51bc-464a-9699-8639ea3a4216",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b4b55c5c-1874-4ef9-b7f6-bbeb0365c036",
            "name": "Negative Testing",
            "item": [
              {
                "id": "91c9685e-dee8-4b65-a629-d2c284a84489",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5c44f9a7-2bfd-46ee-b50a-dd612f3c557c",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b03b600-b33d-4b2c-8768-817f5fd6b101",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "049737bb-c0f9-45e8-a526-4d753088162b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14bd8692-30e7-473f-8b36-afdafdcef585",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ccd3e44-b879-4b04-84fa-9d361fd1482e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec2ac0cd-bd0f-46ee-b823-6012986fe3a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b7989a6-521c-4549-a79d-7aa21e4d2df7",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67820eff-c38d-4388-b726-9d164fdafd7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37ffc15b-bc64-4cba-bc48-9dde845d5fe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b196ab95-9335-481a-9277-c5e14848e39c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca0d39f7-5557-4ddb-94df-03a84e799a81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "707ca69f-3b7b-415d-8a45-276562cd53e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f5891f4-775a-4dda-ab8c-5db7b816c4b4",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28933095-b889-4472-8cdc-3a0278067832",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ce00e45-1bdf-4fe1-a1b3-d58c69bbbbc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eca7467-596f-40a2-9c26-796f6b45c069",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4254391-a8b2-47e3-936c-2366a2b951a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2194a887-c0d4-49aa-9d43-f7e560537dc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d78c3e53-de99-4d7c-b27a-42177f52b315",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e1bfd59-02c1-4c4b-a0e2-d0a7fe687d82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4935bf6e-1e01-4047-9659-954e66590c60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24fb934b-9b59-461b-8f04-f45997711915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d38aadf3-c0d1-4270-a3b9-7858a847b96b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c01ed4e5-ff41-4478-8dd2-7b2a85b4dd22",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e0d543-8e38-4e1e-b565-2289e4047439",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb11c2aa-1409-40cb-8114-3450ab86d550"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01185295-9de1-411a-a347-49ea885fc4af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f441b54f-d2e4-4aa8-874e-2df6457be043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e35fa3e-02f6-4626-ac3e-fa5e8de5893e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "763c5d2d-98ac-4233-a91b-05682077c689",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d491480d-9f2c-42a0-99a3-4d493464cf44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c65117f-ffca-487b-babf-04ec101d5757",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e884995-b531-4931-a55a-efb8993c3b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bed6a48-165c-4aaa-b9d6-033e6cead5aa",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "464a6855-3a58-4402-b8f6-54f30943f4c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2ffc487-d2fd-42e0-8208-21efe5e56554"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d887260-9bf9-48bb-a33d-ff9cf63a68e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6466fefb-a4eb-444d-91b6-dc7a04f00920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87be901c-fd90-4585-9075-824bb45422ec",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f21a3aac-a2a5-4fcd-af58-4fafabeccf52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cc59184-931f-4488-84b2-aba48b8d9929"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d54b8da7-7159-462c-be03-872a9a627b25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "838a0b37-856e-4eb4-96df-6ce44af5e378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7733671e-1ccb-4b8b-86f4-1ec19b3824db",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccdc1698-d410-4c81-8253-7f1454bba896",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a1a6568-09dd-4ed5-968a-49954ec04321"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a60e437-4999-4b8a-bc2c-2d0be406e8fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "496b28ab-5282-48e3-8e18-9dd570036968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35220d8c-de08-4986-9462-38c4e99759af",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea09c685-5ae9-4386-bf57-41ff18a8c787",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c570ba0b-cfe8-4fdc-a4cf-195f963b68df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "012bb0d3-1040-4bb1-811a-7758a4dd1770",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8273df58-9e82-460e-b960-13ecb1c09722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b72b5f7-0769-4400-91d6-1b69b38b1da8",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee4b113-0082-41be-b5dc-b9cd27e12dda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82e3d06a-dbbb-40e9-84e8-ef27a51c29c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aed9e7b-f2dd-4f83-a90b-cf8c488b7b3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afcbf09b-3fb9-47e3-872d-7061fc93a341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a817531-8728-443a-9a05-48f76779b591",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5cd9e8b-8ae1-4874-a9f6-fba8929d7d5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ce8fadb-e360-4c95-9428-4325051df945"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ac1809-536c-484c-b456-6daa6be8994d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a58974b4-9c8e-40af-acd7-7db2ebb359e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25059896-fbaa-4d5d-8c4f-b4599b3a9c51",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b94da9-80ba-428d-84c0-15f524a6e0c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c0161dd-f086-4d48-859a-65f296f70bf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce00271-4209-4ff5-ab6c-e83f3af8e991",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab7471fe-0421-4c01-88c2-1aca7b50befd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "895153b4-ee3d-46b1-bb7f-c9d33417a448",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8323951d-03c0-44c6-8228-d7a6798e7239",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "357c4c18-783c-4705-9ab3-23ea147b9b27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f3c0fd1-7b7e-4517-b2c7-5c63b2ed5dc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c8a6a77-0d00-4942-873f-6c514b30a2af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e6491f-b9a9-443b-921d-f200f2258a93",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd4a55fe-0dec-4a0b-9456-2a8c3c7719a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e45b961-caa6-4d7d-b445-4abe4a31e1d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c43ed778-adeb-4e25-a2c2-033c8aea444e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36551308-82a6-4d8b-9085-7d46f5ebeca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78287608-330e-487f-bdff-4c76421d80ea",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "413b155d-ec59-4afc-89a3-f52dc234c95a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63cdd3c1-f151-4521-a451-513d193522fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df95a123-60fa-4d12-b30d-420ba148a08a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10163818-9d69-4521-86fa-df50d76f42b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46cfe9d0-4d1d-494d-b217-4a0424f37f49",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfbfb8e7-cadf-447b-933c-6433789c44fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a38bf8e5-1973-471f-b8dc-dee98a13aefd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36bdf6fb-2355-4025-8ef3-886ebf9cbfa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4392a53-625d-4ff9-a86c-b8fa6df79c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab97fa08-faab-498c-b11d-6d8aa5767df9",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47eae68e-52c7-492f-b9f9-c6486b8fbeb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccb17c20-3bcd-487a-8fbb-97c62d297f39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f406c0e-4804-4b9d-ade1-7b0b4b002bfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33902a55-151d-4974-bc49-4a5976d06cca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79ba0d4f-892e-420a-9c54-b563a6b03f2d",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a90c81-e7e4-4fa8-bba7-980e6c2da258",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74cdcea2-56a6-4ce8-a114-b07296c3073f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd8846f-11ad-458e-b032-a203961171d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd261a6-5ef8-4d38-9f34-cf157f0313db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b10543-76f6-4cbc-8d64-c3b268fd5e20",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa90966-49dc-4fef-b870-5b171091bac7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df142436-2cca-4bf0-8861-fc24f11d99b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68c4a95f-9ac5-405c-bd36-9dd423eae132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81b0d347-b201-4fd7-97ad-be8268f98aa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4239c71a-da4c-4f04-b8ba-329c5422547c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e84e9f94-3326-4987-85aa-bfd747a67479",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76bdb2e3-ed4b-4bf8-8cae-7eddfd70e5fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02419cea-c696-4b7f-b6c4-ef2a2b7ed703",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58c8ef85-ca0d-43eb-96ec-f5401afba9ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba5c4af3-c86e-4523-881a-720732653a82",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38c9cdc5-06ab-4166-9c6e-3d774d36fab3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e65fbf6b-7d85-415b-910c-7ad1d5a33e0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a115990-745f-43dc-945f-e39060507284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ca44a37-650c-4b27-bd7c-6650bf5a371d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8694ba34-7239-46b5-849c-f9be0bf46ebb",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf9799b-3488-4383-b013-d48e5fd9c491",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "484b7d68-629b-4710-ad5d-02066cd89b24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abf26e5c-0ad3-43e6-9ee3-61d1702d7d77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f67ced5f-57af-427b-a359-719cada8f200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9fa132-3b53-4052-83de-5e465c3341ef",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad35e21-ff0c-476a-962c-a91218b1f732",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a53ca77a-c518-41a4-bb8d-6f3c7533cf46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab9896a-9e50-4155-aaee-48d1f2242445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00b57e66-a7f1-4fc7-946e-51c8ceb74cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "353420c4-b1b2-45d9-bbcc-7d43cdd83f74",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb442ced-25d4-469f-9d79-7856dfd32707",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "796cd8cc-4c8b-4920-9481-6ebbddc4e510"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a130760f-53fd-468a-bd11-5f293087e6e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e2ed7fb-1799-4882-84c5-7f8242fb77e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20968834-abb2-41da-bba8-a422d7ca4a85",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4a50d5e-7f6e-4a43-953f-e13e67403840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "696fb57b-4510-49c8-8635-ff9279e540b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4cc4995-e298-483c-9b6b-78c7ea72684e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50d51dd0-6f7d-474a-b564-c9e95cb00958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df1e7806-1d6b-4e05-a918-1bd0e3796c82",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71770a6c-d529-40d5-8d4d-6b3f20696135",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3d279fd-3345-4c36-999e-36f6e0374d6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eeeb788-9341-4531-b006-528927345c72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4c4c680-c9bb-4871-a40a-2319f3d4add6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9360094c-93a5-4df9-8bd7-bfde1b6956ed",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3723a717-5012-4485-8706-e884d5621437",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37491735-b065-40a7-aa1a-cc1ce0ca6c4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0933857-e70a-40c1-9f1e-27934a141b3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fbb9917-64cc-43f9-bfbd-3b461494d7ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd2cbc0-80e1-49fd-a2b2-f81528b441ca",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4652ea36-0225-4a53-ac62-1cf5b9a5fa33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f982f77f-cc2c-4300-afb5-cdf3097deb33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "737aa12e-128f-4db9-a93e-a73dd70795ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba21b52e-d8e5-4fbb-bf89-e3bdc8bf06ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3aac724-a13e-4314-a3f5-e7e5df93a6b6",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "426f7d99-458d-4fa7-977f-faa03aeb39af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4099876-787c-42b8-87ed-69bfe682f3f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a466f41b-f2e9-4d39-bc51-b2b76c52968a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d30d30cc-3fe9-47fd-95cf-0f81475c3cc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a0c78ac-2c00-44cc-b7f4-9876b1a0e5e6",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd081c89-7044-4405-8694-872fc6721c9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b27c5e04-9161-48e7-9384-186dbd0d31e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7c7e8f-174f-4171-808b-f26c6f61ea0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1f6dc73-27da-43e4-bf72-cfd55336508f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b990dcbc-4720-4a22-a5dd-00f25265c21e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1838d49-e449-4ef4-b613-c5dd4c1f880a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72ab73b7-67e0-4426-972c-9b0744e52c01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c1e180-4730-4b77-aebc-5094d980ca28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc2a95dd-2c1b-4fbf-a78a-d0118eead0cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1822946-16d8-4a3a-8563-7921243b6b24",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09385da2-c716-415f-b48d-6d75f18c0fd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7676ff1d-71ee-4453-b798-7fa90145feab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c2bc5d-ca2b-4aea-b3ce-492e2bc8d7d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fd760c3-3c79-473a-b1f7-1eed6bcff976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb5df50d-bfd5-484b-8a0c-368b462d2a9c",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63e382a-6b13-4cf7-8e46-49266b4cb9fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5bc66ff-4a66-4510-b5b8-559045a11723"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "138a4c59-ab6e-4944-9895-344198121c59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0467e30-cb53-4cc0-932f-31b477393368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c342fafc-7c1f-41dd-a12a-5ccd6c7baa97",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c351420a-c160-4bc9-a018-6fd10efba78f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15c8807b-545d-4ca2-afcc-7795d2859482"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d62db01-7620-48b1-b66e-edac2ff58bc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eea4ff7f-79da-4aa7-9a4a-6da2a02e6c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faf2db5b-2d6c-4029-a80b-1d36335905a4",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d861a4d0-2874-4898-8aaa-75bcc0d2f845",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64f12e6f-be62-4a78-af16-97faa85062c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6245f71-24eb-4ca2-99eb-1136281004d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4d85a3b-d790-4120-89c7-185246e81f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de167490-3647-4300-88de-2fda518732a1",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9325116e-333b-4c1c-a607-d4b295e6616b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f89d54ef-d522-4c09-bae6-b74c4b232e5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b7724b-3eee-4820-97bb-4378580a5089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81791b4d-b891-432b-923b-c8cf5f6cf86e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39041efa-e741-436c-9abb-b499d995c329",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e16bbbd-2241-4740-879e-235ef154c078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86bcec81-36fe-40a2-8922-5a1417862ff1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bd4c4e5-56f5-430b-9540-c031a8a7834a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7878e7ff-909d-4c74-b885-8615f2fb7b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49d96856-928f-4e2b-b187-bd3b487a5d01",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08e3c377-f72e-4dd9-a3fc-43efcfe0523e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b7fd55d-ff67-4fbc-884c-f72347bfb56a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95828188-ca3d-427d-8a9e-7a0952a7fa1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6340ef98-d873-4c95-9a39-91f3f66bdf21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23f02b72-b03f-4f8f-ad45-d9e361d343d4",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75b842e5-27c4-4977-8f8e-4d5a6e2c1322",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37f0481f-6a58-4073-a2af-1661d88008e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc82758-ed35-4aa7-8f4b-8507b0fc9645",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3d38d1e-0709-4269-833a-bba954b49529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6acb0b79-3215-4fef-8d81-675c66840391",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f315e46-be77-4a48-ac0c-baefc1dd02f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b4e24ac-cac2-4cbf-9add-6e140f4837b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d17f90-f179-404f-9268-dea40e60b80d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d78cafa-df5d-4435-8dcf-ee223725a017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29b319f7-3e49-467d-9438-bd495681f1b2",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb4c2a31-d6c7-4b00-a12f-83f4d4a9f036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e73ac145-a56a-49c1-8ea6-83ad19495931"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c02557-6606-4896-a743-7f5fb9f0c03e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08802aaa-3770-41ad-95f3-db897e9df011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeca58b0-b695-45a0-878e-80a1490e5d64",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef4ae9f-e7c9-48d2-8aee-38aa34886496",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c8e65b6-874a-41b5-8f20-b3d73fb928f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d34b566-daaa-46cb-bfe3-d2499e7c5aee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caf1f724-671c-4314-bbf8-45bb4f0a890b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b74682f-bf1c-4867-ba24-63eb81114028",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbb5ed0a-5fc0-4211-8e6f-69f794dd3b64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "786299ec-2da3-4be4-b9b4-d2d49a1f66be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f7657d6-2132-4b76-81cd-f8f0565b8aff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e81ba16-c292-4bf6-8740-303c696c0a73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "608ee95d-367b-4133-8e2e-dfc456918aa5",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b756b1cd-75e0-47b7-8ee6-b089f62a5aef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "582d2560-67e0-4845-a911-be9f4e24b464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd1e600-afec-4f10-8912-1c0b1fdf7b14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d67ce98-7195-48e8-8cad-daf708f408f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "165728fe-76a2-4372-9c63-f70f09d1df3e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26805b84-a29d-4be7-af3b-2104b4086d96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e8c45ef-0f84-46b8-9fbf-538f5535ccb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c93a6504-0a8d-4993-9b85-35b33ce5f695",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05081dba-ae68-4a72-8442-4d425e0b9a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baf258db-f230-4448-a810-c517c70f93c5",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e258ab6c-9aa3-40b1-8bfc-b37459f418ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f43df1f2-5efd-40f0-bd21-c629c6ef8b32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6503cf2-bb2a-45a0-8eaf-90ffa715fd37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dca22d2c-d0b6-4bce-8fe3-0848184413ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae5518fc-6b17-4a40-b280-7e99b6c715fd",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dff78bb-d9cb-4787-a667-9f6883cc5eda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f6162be-0b3f-46b8-8589-ddf8a0257448"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a615f730-9836-4b20-aab2-77a4b8b72a85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8a2ec1f-2c1e-4ec8-ac40-e6120c45d270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca762482-7ac1-428f-bb48-886fef31e63a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0fb1d67-c4b8-4f2a-b42e-620860a4e7d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72f681f9-09f3-47a9-b288-23d724baa7b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4360b2c-1f19-4eb9-b51d-ecd5b27a9e63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "440d074a-d432-40dd-8085-c8f87150116b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc5a255e-af5e-498d-988d-34b41e64ce28",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3171018d-9ddd-40b8-824b-bab83b395ec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6b9f086-bb82-4c75-a227-09567d31f6c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "381e6714-d5bf-4ca8-aa3f-098b51c0141f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee71b6df-3b84-4363-8fcb-543e9397de36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "067a86ad-2386-4762-8f96-2f6ed9384639",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5de2c0b-4f00-48ca-bc54-9e9c2943bb70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9780eff-5c78-46dd-bf44-f0e983cd2545"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba1490bc-0f26-4895-9a10-1e49b3ea037e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a2c9490-435f-4596-bdff-fb43c62adb7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f95ccefb-a901-4245-86b4-42d0d38a020e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1bd723a-8b22-4d0d-ad88-f23c8e0243a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5acd00d-90f8-4e2e-b976-47f033eb2511"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6960ac3-13a2-4ae4-9a99-1dcac70a37cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e07c711d-b525-4e88-ba55-7af5b17eb255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd36157-d69b-4aba-858a-e0031c79369a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53dd7101-8d1c-41d6-94fd-1841e648120c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61695cd8-26eb-431e-aa04-d3238d345134"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b61253-7461-403a-9f98-e470359ced42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a921960e-7d74-4f13-8f99-bf20b6e7f687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72027b35-ac1c-41fe-ad9c-257d11077056",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01af8c02-539d-43b4-8a61-0ddcb2eae906",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8399d467-4701-4057-abb3-0132cf272706"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3ef3f17-d47f-41bf-b030-e2346837a198",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80ff8b75-181f-4113-b91e-f16404c5ac5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f854e4-415d-4478-96f2-d5725602be74",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b72d0a-5160-492b-b7c8-f2378ee6361b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30c027a9-b57e-4c2f-87f1-726a4122b010"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f389bad5-25e7-4206-b4e2-21cc238b6171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2812addc-00e2-42a8-8be6-64b8a90741df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "081d231d-688f-454e-b93d-f7ab138a37c4",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff81b14e-80a4-4333-92e3-12de8c8792c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c1216eb-dc7b-499b-b963-e2913ffc64e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d730b45-64d6-4eaf-8fee-2ff5c24a3fd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a293abb4-5e9e-4bf8-8d4b-e5df4f9e59e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "887e4e8a-ea1b-4a7c-9873-f9c9831328e5",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1738f1e7-6c55-4df0-925e-d00616c31561",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d844ebfa-c236-4345-ba6c-c74fe9c34f44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb23981d-1247-4e9a-b546-20a6758db012",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c45019f-37fa-4860-a1a0-2992cfaa034a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a1cac44-12da-4542-98fc-de429161986a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebe51825-f74c-4788-9760-9c4afd6634bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b928fbf9-e9ed-48d9-a2db-96f81178cf5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0118f0fd-f6c7-4c26-a02c-8840cd213df1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1635885b-f76c-46b5-a572-8f434ece0657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4428fec-246d-4edb-b219-1b5d60ddfb50",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df561e12-1525-48a7-b72a-48cbec2f368a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ecf7a6b-ef4c-426b-965b-3a3b0b02378d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41704767-1839-4de8-8242-9e6c8fa28cbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b02140b-9b9d-4527-86c1-91c8e2476a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1258c206-3487-4789-ac16-58e1224b5812",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "483a4212-f743-47d0-ba8b-2932ab8ece77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15a9d3da-45c0-413a-9066-e41c7f7220ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a87304d4-b45c-40f9-ad04-e32b88f7e5c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d55bb09d-0bac-41f9-b2cc-f99c16d802aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a68048c-2804-41b6-8cf8-d56668d2249b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e39461a-4dde-4059-bd60-8bb2b11c512c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84912ec1-72c4-4464-bf6f-3782054ac2d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af44130a-0b6c-40fb-98d3-e07db36661f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a408e211-562e-4336-8fc8-a9e760eb0076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1f0d98d-68b2-4d61-8bf6-53efcd3a7dc0",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c4ff1a-7fda-4cca-af64-31b74352570a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "375cd73f-0756-46cd-b1c0-3e22ae17ba97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3cf192f-4e4e-490a-b1cd-258b59c4118b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1074a4e9-e8cf-4c67-b0d4-d3a65b8af784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25ccde79-114f-4272-9e3c-d69b1958dc9d",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32af706f-13a0-413c-9df0-9f9542db816a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ab0e764-54c7-4597-8162-8ef41a399533"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8366d5ec-446c-47c7-86dc-1c722ed0641e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "365eb19f-fad8-4525-85c6-40c479aaa780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbe0d7c7-87b9-407e-b15c-ff31a7bf50a0",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84872370-da5e-4d8c-a8b8-d9a791ac2e5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e82e99ce-4a00-4f2c-a8c4-a7dcad2b0699"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb299c88-eb0e-49c3-9ad6-cca90b10d37b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "972cf077-4242-463f-8fb9-4f7d42468e5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c42463f-7a65-4641-8b63-183343eb675f",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ea45ba-5181-4c8c-8df0-48f4ab829298",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54f16985-0ac1-40d5-8077-041c70fdc0a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2767f775-ace0-4666-baf0-6fe1b60f2c33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ffd425e-5694-400f-9dbd-5975fd6142e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7be5e2b-81ca-4797-a970-ef853ad11b85",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a0e94b-a335-4acd-a890-8eede460fdea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eecb5918-245b-41d7-93bb-f01b3d2a36ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "653352ac-d6c7-47ed-b57e-9c0c1e6fb25c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67bb99be-0e7f-4cdd-b683-39d1a851ab2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a10e59-5fc2-4387-bd42-45452d5687e9",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2951b59f-3ce7-4c09-aa09-0b56c08668c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1d7ef9c-17c9-4af8-9373-7999796a64e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ca5355d-878b-4f24-964c-c220f78f01a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9de814c-9e1c-4a8d-8fa6-4ddbcc136abc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0ea7a8f-8700-480f-bd4f-086904d61c29",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebbe8ce4-279e-47a4-87b2-af629c498fc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "065132f8-fac8-43fd-a873-2a331b4e4778"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0607ecaa-8928-41cc-8c9b-86d7b88f64d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f944cd7-8b6e-43a4-bacb-1832e0521a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d300dd37-718f-429c-b9bb-19dbb4f456ed",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e79ea0-039b-476b-911a-5781689963f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17594299-f9d0-4e2c-a512-bdc971d8c6e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91f46e6d-76e2-46d7-9f8d-7179a8a81384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8be0aad9-1789-4693-b28f-ac7bf12cbf9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b975ee-dc70-4e22-93bc-22bcbb298f22",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af4cbeae-08e5-4793-9ee4-02fb63e07675",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8e5a0e5-5fd3-4307-9818-abc800e79de4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17a19be5-655c-4bcd-9d68-adbddf85bbc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd3067a1-109d-4e5c-b82d-63169108b29a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfea3c6d-c92a-4e7a-bdb0-7d0a8ffb6132",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c9b641-0a5b-4c99-8b0d-99b41a9ac5ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c12bc44-f9c4-4077-8507-15eaff007df0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f94995e-52b3-49d1-b287-9a44e02b50b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7206532-7644-419d-9345-daa872ce10a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef1d1487-af34-4f5a-b787-39ce6bde6dab",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9af6ac6-b2a2-4695-bad7-131c5b6c3bea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76fdf6ba-d129-4328-be76-54eb424d1eb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caf37301-fb73-408f-934d-d29356f83a6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0d22855-f7c0-4ce6-9965-8d299dcc33dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c6f9f8e-5df5-4824-98f7-7c078618d891",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96f5e9a7-5575-4565-87d8-5bdb08bf8fdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e593f81-1d94-4943-9cfb-c611d74a47ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9221106-46f5-4f19-81c8-6651efe5b76a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15804226-0df4-443e-aeb7-5ef383df3060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d837f0b-f70b-484e-a74f-b3339cf418d7",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "013dfe98-8a15-435d-a4de-53aa1a00aa30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "091b4f7e-e5a6-4fae-8fae-8f2ef659d4e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "399ec489-e928-4815-83af-d8688135fb66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb15767e-2b1f-4da3-a426-69a391ad1bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd707b1-9318-49ec-bfb5-c857973617d4",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ec4216-d25d-4597-8ff1-948301dc654b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2dec7cce-b1b2-43e6-b019-60ebcc2e6231"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3416ead7-245e-4221-b663-8ce946452caf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a91d7a9-e0e9-4dee-a1f7-103b5df439a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc13e114-3601-4c30-a10e-c175e66f398a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f19dfa9-85ae-4acb-9590-2d4899555365",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e9f1274-9154-41e0-b70b-42d73b038d96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a519a206-33b7-4e1b-9015-772472aa2eb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "565c30f8-d562-4b54-b6ff-1c0ce0354423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cb1d9b3-02c5-42a6-9d59-bb3eda2112bc",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc38305e-45bb-4841-a2d6-b82f7a864812",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a36fca0b-ee38-427b-873d-a89e04e243cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61994ec9-9c1b-48d3-b90e-90585653fc3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12045b99-afe9-49ee-a18e-0255ed6e5e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0a95486-6d5f-4fd2-bda2-9ecbce36345d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90d26501-a3b2-48b9-8d01-c97565b80476",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57b5c2de-96c8-4983-9f58-a3865c068cde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d5e139a-2f98-4f36-a9af-727bb356ea17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b7e75d8-fe83-4b09-8f6f-5754e20ecb07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42322610-24f5-482e-8efc-f8349bfa871c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17d7dd5a-e0a8-46b6-a672-ae2b95439e61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4aaae7dc-93d1-43d4-8ad7-5eb83c4fb77f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12772cfc-5bdf-46d3-9bd8-48ed1e398d0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f635c24a-88a7-40bb-a98c-edcfbe77f17d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6df6ab3-abbc-4637-ab14-28a4fc37890b",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ff43de-b71c-403c-8462-79c67ba959b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27f6eb28-1b15-4808-96ad-161aff9d55a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b4c2a9f-6b56-43a9-9060-d7ac69f8d5c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "786851c3-4c22-42ed-bda3-ce447bafc5fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "131f66ef-0bbd-4ba1-a670-2de5ffc09ebf",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "093d1960-d0a0-4284-acc1-7272fad1c333",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1dbda3ce-dbc4-475c-bd5d-b122679edb30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60234ccc-5730-423c-9e9d-e9674981d66f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b720e28-fbed-409f-8ab6-426b55da23ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af631284-97a7-4f08-b77c-0973fa38a2b8",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "566232f1-d98b-43e8-8e07-1b13f640c6ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7599e1c8-7111-42d7-af9f-428d13d3f67c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7269f0e2-2eca-4322-8382-a18d4c796ebf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91c61ed8-80dc-45f5-a04a-8feb140453db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6435feef-1e15-4659-b84d-452d00dea44c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "279bb69f-5ca6-41f5-95cb-982b902789bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2984b889-1943-49da-8963-cb0d280b47e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd0b04c-6c68-4630-a349-a924fe4cafe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8911583-dff7-483f-a26d-e31c478bd2fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b9839a9-6e45-4a49-ae12-100543aaab71",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b0ac40-4218-4e84-8324-4f732bbff49e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecbae7dc-6bb8-4a73-b2ef-9479316ebd64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e475d4-60ef-4a55-9746-4708366ea11d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ed2cbbf-e6ea-4b56-89d1-d84fab813c6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e62510d-195e-4060-879b-474a4c62d865",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90836363-1c30-463f-af6e-b318c95a9296",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bfbeb41-475d-4356-b452-16790c4f0e27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9209744-f080-499a-8a5a-dfa3e4eee9e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f08c3ef8-1709-4388-9a1d-59e3d744d79d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e811a177-ffc6-4a31-a6d3-c4e4d037c2d1",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c9a2a1a-ac13-4bb3-b5a2-9cb976187063",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e810159-d870-42d2-8187-a47ceef83d5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e3558c8-00d3-4a5c-8c7c-58aec21e20a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24b4fec0-cceb-47aa-8a43-ac26b8c27b76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "697f666b-9ccb-498c-88b9-cd6ea41de695",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56bc1c35-d574-4cf8-a70d-1fb75d06f81b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e0f21e7-2b24-42e2-9290-84d290b2891a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a6cada-fef4-4db6-a7d7-fc694e420e13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "121a5163-9478-451b-817b-52f3da928754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93d940bb-59a0-4136-a1a7-dfcbdaf604da",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a9dd022-70c3-4df9-909f-c5b5c9a2808f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37cbf958-1851-403d-a6db-6c23c9e8cc6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb6223f-c128-4422-984c-d7499357cc5a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f36ae219-c123-446b-aa5d-81e2a10a6b77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be47dc8f-6256-40a5-bbc3-1e049bfa117c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd4cfb5c-9356-4093-98cd-fe02c9cf872a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7af8c9d5-1dd7-4d9b-a973-f2248bcce8fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faf0be66-d33b-47fe-8923-b556493e97c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0f84aac-c9e7-40b7-951c-03c4226da7d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca41cacc-69dc-4b5f-a2a0-7bab4cec74bb",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6191120-141b-4c27-a346-d17d8c4ea4d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c9a29f3-d495-46ad-80ea-6c717809b792"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bbdbf1e-da2a-4dc2-840a-6c92feb6cb4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75779e1f-da19-47c3-9af3-58a6e1aa5f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7877ae11-8c4c-4635-981c-78e22ef16a16",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6058e95-0d6b-4c3b-b5ab-33573919cb23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5b810d0-e8b3-42d5-8cc8-628f481c48c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc7ede17-627f-4a45-a091-d47ff34d82c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf259ef8-94ef-4df1-a53c-9306bcd28a3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0ce673-0962-4bf9-af25-b8e0fed6b6f3",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0dcb12d-2003-4797-a1e4-e53b1ffda6ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31d7c4a2-578e-4020-b83b-fd19cd61724a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "039338a7-48ee-412e-8577-26ee74a17105",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ae224fc-5a8a-4de7-b5bd-87e470d30dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a3ec554-6e32-4b0c-a473-5955e0dd74ca",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7210031-321c-43cd-a520-8916ce657815",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04b54b8e-b76d-4a9b-93d9-c9de41851c5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "766c6e1f-483b-4cdc-8a50-3d48cf7ad08b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5fa71cc-8039-485d-afe1-ef6faf6ea366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d8b7fb1-3526-48c8-be89-d68d21dcb143",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "203659f5-f156-4833-a728-28f12c463ced",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02739455-6062-4e77-bc5d-5776f10275eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dc3e894-7280-47db-95d7-918ab4b54eb0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb1763e0-7919-4106-9a3a-39d942a1c00c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15fec74b-66b9-43ff-a809-dabfca76b700",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7791e5a1-7ec9-447f-b9bb-e6963e22a220",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5be6b3ad-83f2-477c-911c-c4c8dfabd0ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c5e4530-8a46-42d0-902f-fe8e0072dab8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96058e58-f517-4e18-81b2-7b3196b0dd6a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fac795bd-6f83-4d27-89c8-cfc0a12d2261",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5e5c8237-65d5-45ed-a508-13d01db60879"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fdd36ce9-5307-4c43-95e8-5df1155e160d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a43917f4-9992-4ac4-8bdb-7204d89fbd83"
                    }
                  }
                ]
              },
              {
                "id": "bacf64ec-10de-414f-addb-087179410ecc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "18de61bb-05c8-4d8a-b9d6-171fbc253037",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec52fba5-f90f-48b1-b9fb-244258a02061",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "85337bc3-aa69-420d-8eb8-57e6bfae921b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "983c49dc-4599-40cf-831a-549e8411e051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec137712-9801-4c33-b5d6-edc214069a29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98a6693-894d-4ef8-ac7f-e562e91a1df8",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75096199-12a5-467d-882f-a4934241aa85",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a8326bfc-9d3c-49c8-8b9b-a0f720d4a03b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0fafaff-477d-4f94-9081-0d7ea15176f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "56e0844e-b7d3-427f-9adf-238e7778f40b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16ede4a0-b875-4612-a307-a775c521e54c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a9588fe7-6354-42aa-91e0-b9ad7068ba4a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "43e3a8ff-cdc6-4253-b9c1-2560af0bb549",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a3dbb38-f9ca-4c57-a92d-773c48804013"
                    }
                  }
                ]
              },
              {
                "id": "61bfecaa-0676-43dc-bb35-43e76e0bbfb0",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "1bbd977a-2ea1-4e55-84b1-8dd176aded79",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d3e934-7da5-4eb1-a95a-d4cb86c1bf96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "485e2cc2-cf26-453a-868d-8645ef4cc5b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bdf10fd-8f72-4e0e-af17-5fd87e987751",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41a1c35f-b4ae-46a7-9e6f-4cdd6640bea8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2d417cae-9d98-4e93-888a-8247157fdd8a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0b79e8b7-02a4-4758-a8cc-b2c9f6048801",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c40b2cf9-58b0-4f5f-90e1-eafc04ae367d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3f28e7ee-50ad-41ef-b705-517cd38c6011"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b828772c-1d5f-4352-9b88-fd7068914bdc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "806ca9c1-a4af-40c4-9c86-c6f0fe030efb"
                    }
                  }
                ]
              },
              {
                "id": "47d2623c-8bc8-4cfd-8e04-346fa9d8515f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9a030d15-0433-4a70-818e-67c6f093079b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "244f6b37-eba2-45b4-aeb0-e6d6bf444a9e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "945bb5d0-f257-4eae-83ca-a55bae1b7f97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "25685c57-8059-4d5d-9a86-c55e96c515b4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d5a49b3a-f32f-44e4-9608-e40779c23aa8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e7912422-ce53-4c85-a523-deb4a38fdbcd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "be10b692-c08e-4be9-9ade-647313c26123",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "58c769c1-d021-4702-b8b7-bf169db251e4"
            }
          }
        ]
      },
      {
        "id": "e3b8accd-c5f0-480e-aa69-551670b8798e",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "6d6f41af-6244-4111-9ded-02cdaeae716c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0e617471-b214-43ab-a7c8-d5706d879ea1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1033d419-f8ba-4ce0-921d-ffefb987bbe9",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b065ed58-d1ed-4c34-b6ae-437e3f9544ac",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "db272556-61db-4a40-a18d-3b00dbc26a61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee3ca858-105f-4566-9fcb-c1de08b93088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7981a54f-5fea-4fb2-bb52-382c34837bbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4e019b0-6685-4624-86c8-ce22de0fb58a",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a480ad0f-66f1-46ea-9e22-55e5307729f5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "82fbe426-bdaa-476d-8dd1-e69c82dca9bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "299169a3-9b95-4816-8958-6cd2b4761bd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "57fd4161-ba6f-4dcd-bc3c-62ace97c3fdd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58e97c15-dc3d-476e-8522-07702aa0286d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "345e66b2-ed53-4a67-9d22-c5a490454b65"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d608611-96e1-4349-90e2-2070181fb037",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "efdbeda2-ee08-46e3-9a85-12da13fbd68d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "79e39673-1832-4725-bd1a-57cb084af8fc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "4dbc93bc-a820-4ae2-a982-544c562b9010"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1fb624d8-9432-4afe-a48c-4eedf6726f94",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d45420df-ec66-4f7f-a5e0-a4a26fa48248"
            }
          }
        ]
      },
      {
        "id": "e3d32aaf-32e1-468a-9ff5-1e9a4e0e6fc3",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "eadcd385-fa78-428a-b594-e9cea4881b8e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c9ebf8e8-c3f7-453e-b5f1-311a02daf0e5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "08d50e26-de0d-4672-aea8-78b6f2bc5869",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4f9a89-e239-44d1-a076-3c9c25aa056c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0137d8ff-ec3b-4f04-b6db-e198979024c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa0af35-29bd-4bae-8cb2-0ca230c2e81a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e4387c2-d3aa-4126-876d-c66410cf3464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d9c239e-5ef1-4ddf-b445-2d78ed5d4b08",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6fc10d1-94a5-43ea-9ff5-025653ab8480",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5a99a0b4-364d-4479-be14-53b09b3a69e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dc84c6c-a592-4103-b269-b4b84c9eb605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "775471da-936e-4230-93bd-8dadd3f1eb0d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8f9ffba-1b6f-4e7b-8037-ed7c1b1f5b1c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8653711-0edb-4cfe-a874-1c2d0fa306bf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7788b480-16c3-4e37-91e1-cfa33591ea3e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "16a2d00d-88f9-4d1a-a33a-43135cafed72"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "edb98ef5-de68-44af-9908-b47b636397ae",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "37cb55ca-a14d-4efd-9e5a-df5922276b0b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1ba14a8a-b0ff-4f84-b222-244142d99201",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "01647cb9-4aaf-4a3f-a8ae-5557d87dc777"
            }
          }
        ]
      },
      {
        "id": "a73e3bef-bab8-4980-80ba-5ffa9dcf82dd",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3973d1ed-fdbb-4923-bcc1-4555298fa8f5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "22b84370-86a9-413b-9f59-eeab2ce0357b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "12512582-72ec-4029-966f-9d04d5eb6c8d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a394d93-b8c8-499f-a8d3-c7c966b67b9f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "893ab30a-951f-4efa-bc08-ca9994a82169"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b97e16-01c5-4c0b-bb39-64f0d57f5a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b99d378c-bc78-4fc0-bb6b-976798843070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "890e5b61-9bdb-400a-a87b-75116936eca7",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3464937b-860c-4bac-8572-004d496d7bbe",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3bc79527-62d8-4289-b269-1814070fbb4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a641ed6-ae13-4593-a84f-e5bf00a28155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "285ebc72-e2b4-4384-abf3-b5205a56c727"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "83de2547-c685-4660-81c0-7230ff6e877b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4265b1a0-ae3b-4aff-aed0-21215cb9647f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc892c1c-e86f-47d7-8a71-3183c6cdc6d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56d7dcb6-9feb-444c-a000-84a711973818"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e1e468ed-cb7d-4e08-b9d0-9a94dae34dff",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "64eec7a0-96ac-4a4d-b952-a2a121f92425"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "111c63b8-7818-43b4-92e4-a113a18862f6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ad76f411-b2b1-448f-b4bd-e64212f3b3aa"
            }
          }
        ]
      },
      {
        "id": "fb0d6d88-9308-49bf-ba1c-92e200e12c98",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4ff0fdf5-cc98-4ee7-9329-2f1069b74bcf",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ecdd1d2c-4d9d-4b9a-8fee-7568438547b8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "5814352b-b553-4d2e-8171-fe79146652dc",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fed9b9d1-94b9-4e6e-9196-f7115cf7ad9b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "431b9715-636b-49c8-9c35-08daa51fdbf5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1917,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 515,
        "pending": 0,
        "failed": 39
      },
      "testScripts": {
        "total": 963,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 954,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 70.4789272030652,
      "responseMin": 8,
      "responseMax": 253,
      "responseSd": 27.69256052494336,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1676508047837,
      "completed": 1676508080825
    },
    "executions": [
      {
        "id": "ff1bcf1a-8f6e-4c40-bfe5-c599de28d8eb",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "9ce5d448-b59c-4657-8793-06ea293d5ba8",
          "httpRequestId": "d241dda7-7939-437a-b69f-9fdeace7f8b3"
        },
        "item": {
          "id": "ff1bcf1a-8f6e-4c40-bfe5-c599de28d8eb",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "60f5ffaa-1f4e-43c8-af34-09d76ae774b1",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 0
        }
      },
      {
        "id": "17593cf7-69ec-4e16-a697-8e994020d3fc",
        "cursor": {
          "ref": "73f8013d-5962-4e6c-bb0e-beda0cd04411",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a9ca73f9-3a21-45fe-86ad-5b5b0245a519"
        },
        "item": {
          "id": "17593cf7-69ec-4e16-a697-8e994020d3fc",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "b2ee05be-57f8-40ac-b2d0-f29e1b870ee1",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "7232cd88-fd3e-40d3-a011-de7eee40b939",
        "cursor": {
          "ref": "a0c4d8d7-0597-4b01-8b15-c8f726da3f0e",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6ca4aef3-a09f-4255-8991-3af1ee74d1ca"
        },
        "item": {
          "id": "7232cd88-fd3e-40d3-a011-de7eee40b939",
          "name": "did_json"
        },
        "response": {
          "id": "0c05dac3-00ff-4ad8-8c89-4368afb9c3f1",
          "status": "OK",
          "code": 200,
          "responseTime": 253,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74641f01-2503-487b-9e83-8ce24f379311",
        "cursor": {
          "ref": "9676d96c-89c1-44b4-8bc5-2f9cb5e4c751",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "fb397768-1c91-477c-9cb8-82e625e042d4"
        },
        "item": {
          "id": "74641f01-2503-487b-9e83-8ce24f379311",
          "name": "did:invalid"
        },
        "response": {
          "id": "d4d2d5b9-e68a-4d23-bc50-1c15762b145d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "74641f01-2503-487b-9e83-8ce24f379311",
        "cursor": {
          "ref": "9676d96c-89c1-44b4-8bc5-2f9cb5e4c751",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "fb397768-1c91-477c-9cb8-82e625e042d4"
        },
        "item": {
          "id": "74641f01-2503-487b-9e83-8ce24f379311",
          "name": "did:invalid"
        },
        "response": {
          "id": "d4d2d5b9-e68a-4d23-bc50-1c15762b145d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "e99d3b1d-a0ea-42c9-bf57-027edbd95381",
        "cursor": {
          "ref": "8e4cbdcc-27cf-489b-9eb8-dbc1b41d0335",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "25e80cf3-1064-417e-9594-9a949f8458d2"
        },
        "item": {
          "id": "e99d3b1d-a0ea-42c9-bf57-027edbd95381",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "576c2561-2ed8-4c1d-b037-8c150356a2bd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 113,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eded3bd-2c70-4e8b-955b-d78e28635a5f",
        "cursor": {
          "ref": "ff1536a3-5d4e-442f-93cb-97011c912553",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6bb17655-5dff-4dcc-81ba-25d921f27658"
        },
        "item": {
          "id": "4eded3bd-2c70-4e8b-955b-d78e28635a5f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "5da9dded-3ce3-4649-9705-c65724867ea1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c36bf252-3b3b-45b8-b259-f5c92defa402",
        "cursor": {
          "ref": "ecafdafd-e6a7-4dbd-9d46-fa82eb5da60c",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "5fdd89b3-387c-461f-aafc-177b8db9982c"
        },
        "item": {
          "id": "c36bf252-3b3b-45b8-b259-f5c92defa402",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "cb0f7988-23ee-4698-9254-fdced1c99507",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5eaffd0-8326-4c68-969d-0e1c0269abaf",
        "cursor": {
          "ref": "37e38358-4eb1-412b-8845-e3703bd2c188",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c5322c7e-3e20-4316-84dd-ef5de04488c7"
        },
        "item": {
          "id": "c5eaffd0-8326-4c68-969d-0e1c0269abaf",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "07dccfe8-0d0b-4c4c-835d-7e71d70b48e1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5eaffd0-8326-4c68-969d-0e1c0269abaf",
        "cursor": {
          "ref": "37e38358-4eb1-412b-8845-e3703bd2c188",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c5322c7e-3e20-4316-84dd-ef5de04488c7"
        },
        "item": {
          "id": "c5eaffd0-8326-4c68-969d-0e1c0269abaf",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "07dccfe8-0d0b-4c4c-835d-7e71d70b48e1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9acd870-870f-4003-afcf-90ebca3f3495",
        "cursor": {
          "ref": "11bc6bc4-8658-4be2-9b79-597bd0ed2a88",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3ab1324e-49f7-441c-b841-3b4c79ba511c"
        },
        "item": {
          "id": "e9acd870-870f-4003-afcf-90ebca3f3495",
          "name": "identifiers"
        },
        "response": {
          "id": "89a3a531-ec11-47ed-beff-ee0bdbb6b086",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9368d681-4d80-499f-9d57-a2c93fc1d099",
        "cursor": {
          "ref": "0a9c3ce6-67a2-4d9b-8709-5c70f122810c",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0178149c-e87f-4f17-9240-69c1e0ad680e"
        },
        "item": {
          "id": "9368d681-4d80-499f-9d57-a2c93fc1d099",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "58da740e-113f-4710-b80c-f4865509abd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9368d681-4d80-499f-9d57-a2c93fc1d099",
        "cursor": {
          "ref": "0a9c3ce6-67a2-4d9b-8709-5c70f122810c",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0178149c-e87f-4f17-9240-69c1e0ad680e"
        },
        "item": {
          "id": "9368d681-4d80-499f-9d57-a2c93fc1d099",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "58da740e-113f-4710-b80c-f4865509abd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec1a9f66-aadc-4c53-a16d-0c00236deb22",
        "cursor": {
          "ref": "3d29935a-e6a6-4039-84f2-354aec06c310",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "50e14459-8cdf-42cf-8bf7-29aaba8f7067"
        },
        "item": {
          "id": "ec1a9f66-aadc-4c53-a16d-0c00236deb22",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "6b579d48-e376-42f1-b10e-e7056e5885f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dd8d3c4-efee-45bd-9cdb-ab1af7117ec4",
        "cursor": {
          "ref": "873782e2-3d26-4f01-b1cd-1b4e4937ea63",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b5bf9720-1f81-468f-be29-4a79db43e617"
        },
        "item": {
          "id": "7dd8d3c4-efee-45bd-9cdb-ab1af7117ec4",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "89561986-05b6-4bb1-b835-636b2a07f06b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f28ff695-e520-4bcc-b747-e743e28ffa59",
        "cursor": {
          "ref": "fc095cbf-2191-4754-9bdb-629c79e40751",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9fe0d0ab-6f15-4955-b585-e1f8330b8560"
        },
        "item": {
          "id": "f28ff695-e520-4bcc-b747-e743e28ffa59",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b8029a92-8110-4866-877f-b5166b81ae3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bf7c8c9-23f7-445b-b6f3-8006bd30134d",
        "cursor": {
          "ref": "0c959d70-70bd-4fd4-b450-6f2aa7fae52e",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "c4d434bf-742a-4e6b-ae0f-dffacb488354"
        },
        "item": {
          "id": "5bf7c8c9-23f7-445b-b6f3-8006bd30134d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "e70034b5-1c80-4bff-8bc1-9a93f7d62fb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d4d95f2-442e-4063-8ce3-eaea4c0a016b",
        "cursor": {
          "ref": "c0e08c8a-43d2-4600-942a-b7a35529114f",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "be42cef7-466e-430d-934c-ff616f812195"
        },
        "item": {
          "id": "2d4d95f2-442e-4063-8ce3-eaea4c0a016b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a3b558e5-74a5-47de-9dab-1fbc2be5c4aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed400656-45cf-48d2-bf1d-e141d92af8ca",
        "cursor": {
          "ref": "96672c7a-1e39-4d10-81ee-f92231ca8d97",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8ebfce10-cc99-474a-9646-dae9f0a7d4b6"
        },
        "item": {
          "id": "ed400656-45cf-48d2-bf1d-e141d92af8ca",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f8fd6872-bd93-407c-b162-6b77f56b7cbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "404ce9a2-afd6-40b4-bdac-7b42512c61cc",
        "cursor": {
          "ref": "f6ba9db3-25d5-46ff-a262-4833e71e016f",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b52643f8-df2a-4c93-89e1-84e78f854fb6"
        },
        "item": {
          "id": "404ce9a2-afd6-40b4-bdac-7b42512c61cc",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "cb5238e2-9b3c-4db7-bfc2-e648f0073aaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90b5ea56-a7d3-42c3-9317-da8fb40ab3b6",
        "cursor": {
          "ref": "f714c586-5e5a-4ccf-8bdb-e827e26dcf16",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "11d5f33e-ab7e-400b-bdcf-9958673af94c"
        },
        "item": {
          "id": "90b5ea56-a7d3-42c3-9317-da8fb40ab3b6",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "bdbd6578-e3a1-4655-81d3-b7b97f9292bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b799a2f4-b9b7-4378-88fe-050a8f060d5d",
        "cursor": {
          "ref": "f419b6ce-7318-4385-a53f-a0aed945aec9",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4c404cee-ba9f-475e-beda-d045dea382c5"
        },
        "item": {
          "id": "b799a2f4-b9b7-4378-88fe-050a8f060d5d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "c075b94f-3e7c-44d0-955c-52f85bc134b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00ba9b61-ae5b-4e4e-8df8-cf243d62fad8",
        "cursor": {
          "ref": "3f18855f-c96e-4e1c-a319-d2171f470e06",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4573d9a4-3157-49f7-b5d7-c4a7c95701c3"
        },
        "item": {
          "id": "00ba9b61-ae5b-4e4e-8df8-cf243d62fad8",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d66f6269-28ee-4c34-80af-221a799396b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "379b8ebf-6b72-490d-ae73-4ef836ca518b",
        "cursor": {
          "ref": "bec60208-d5fc-4c85-b26b-d59ef876bb91",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d538af92-f6ce-479c-b9bd-47b92a2bc88a"
        },
        "item": {
          "id": "379b8ebf-6b72-490d-ae73-4ef836ca518b",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "896a70d6-4746-4c63-aa6b-8c11f2ed73e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49cfd428-6009-4d4f-b20f-524c9a621366",
        "cursor": {
          "ref": "9026b977-1629-4fc8-8383-000797ab93e6",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "7d12deb6-7442-468c-8563-0fa687a0bb19"
        },
        "item": {
          "id": "49cfd428-6009-4d4f-b20f-524c9a621366",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "4000bca2-d556-46c5-acc2-e7a81030a581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac335078-c0ad-439d-99d8-ebf66f37091e",
        "cursor": {
          "ref": "c7bf1853-576d-408a-85a5-7ef5aa59566d",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "fe6e533a-ab95-44bf-8363-6001e8c6d82d"
        },
        "item": {
          "id": "ac335078-c0ad-439d-99d8-ebf66f37091e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ffae40f2-596e-4fa8-a48a-e99bf019f97c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf7f5dbc-7be0-4522-9c63-77f7a0b2e350",
        "cursor": {
          "ref": "a79fdb68-fd8b-4fcf-9ac8-d83130b4f0d1",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "2ce1b416-00cd-4ba4-9ce7-d86187658c00"
        },
        "item": {
          "id": "cf7f5dbc-7be0-4522-9c63-77f7a0b2e350",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "6830b078-ddcc-47bd-8850-4939bb450d4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7373354-e4b7-4a23-93ef-cb189c260892",
        "cursor": {
          "ref": "a1f57c99-9c78-433d-bbf4-d3268111d113",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "43258ff2-e041-4e85-82d9-c2fa471c87c3"
        },
        "item": {
          "id": "d7373354-e4b7-4a23-93ef-cb189c260892",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "8cba6a30-009b-46b0-8ec0-e4c4fd0a9529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a4f6bdc-1bb5-46eb-a597-7b9b532e0601",
        "cursor": {
          "ref": "ce35d5e6-6045-468c-b701-9cd625217944",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "9006f6d6-2dbf-4e82-a2f6-200268e603b1"
        },
        "item": {
          "id": "6a4f6bdc-1bb5-46eb-a597-7b9b532e0601",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "55337c57-a959-4529-af88-3d2181f00db4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c796eeed-9250-43d7-bdb6-16ca3ac28a32",
        "cursor": {
          "ref": "22774a91-c71d-4e79-9b0d-8eab83e6ed14",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "bd1b181c-bc3f-432c-b668-28e49ad8f98d"
        },
        "item": {
          "id": "c796eeed-9250-43d7-bdb6-16ca3ac28a32",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "3d20d9ee-1487-45d5-95c5-6aa96715d2c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "203d4095-233a-412d-afe9-25af1acbad7c",
        "cursor": {
          "ref": "5a3cfb68-14eb-4e15-9143-aec481d328d9",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f4b6fa7f-8b79-4f04-8452-be5090406729"
        },
        "item": {
          "id": "203d4095-233a-412d-afe9-25af1acbad7c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6075973f-6139-4316-87bc-88695659610b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a475b570-c018-4309-9392-0a213b1f1ee9",
        "cursor": {
          "ref": "3451e267-260a-47df-9854-be0175da91e0",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8c1ec4db-4151-434f-b53e-cacb311fd17f"
        },
        "item": {
          "id": "a475b570-c018-4309-9392-0a213b1f1ee9",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ce0b6744-e7bd-4a3a-bd4e-8acf167112d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be3d259b-f04f-4513-a920-6371ca401911",
        "cursor": {
          "ref": "96ed93f6-e807-4332-ac3e-577b0ef0a1e5",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "43aa61e0-122c-4b2c-a705-8f0368d4f834"
        },
        "item": {
          "id": "be3d259b-f04f-4513-a920-6371ca401911",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "c92b7115-2385-4b89-8d9c-e90e264cc4a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33cffbe5-87f2-4a55-9e27-0f5aa69ee764",
        "cursor": {
          "ref": "ce4d12ee-afc3-4b08-b0e4-80f42d870548",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "44bafb98-1e57-4e28-aa69-e0532152032d"
        },
        "item": {
          "id": "33cffbe5-87f2-4a55-9e27-0f5aa69ee764",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "c93b9150-635a-4b19-be01-aa8f43ed463c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "893e7c67-0ffc-4cf5-bf59-cbe5efc3de23",
        "cursor": {
          "ref": "162b0209-29ac-4593-be32-dbf0f9bb6537",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "41afb6b9-122a-47b7-bda9-38e7fc90dc5b"
        },
        "item": {
          "id": "893e7c67-0ffc-4cf5-bf59-cbe5efc3de23",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "402160cf-ff44-4719-bdea-a3890135b2d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "244e63a8-1af5-4cf3-aafd-8464a8246e9b",
        "cursor": {
          "ref": "60671a47-4ba4-4963-bd01-2e8c50b3a1e0",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c864731f-38f7-42eb-a582-1b1487fc3067"
        },
        "item": {
          "id": "244e63a8-1af5-4cf3-aafd-8464a8246e9b",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "19483216-99df-409c-870d-9e9bbce5999d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1bb1f0b-b3cb-4c0f-98b5-1aa22139dea3",
        "cursor": {
          "ref": "4e24e8ae-4314-40df-ada8-1ca5926c252c",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "23a711db-0800-4e9b-b8cb-21de634c6666"
        },
        "item": {
          "id": "a1bb1f0b-b3cb-4c0f-98b5-1aa22139dea3",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "95f2abf7-0f13-48c5-8b5b-991b5d8d72f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99bcc5a8-3126-400f-a868-499a46dcddd0",
        "cursor": {
          "ref": "baee671a-35e2-4665-ac1d-4d62ea2d9a60",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a2eac98f-988f-4ade-a375-7817af99f7b1"
        },
        "item": {
          "id": "99bcc5a8-3126-400f-a868-499a46dcddd0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "66bda0c6-d590-4775-8f7e-9a316e0acf88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c35d2aae-8e40-494e-b4cb-138ea3c010a0",
        "cursor": {
          "ref": "c65b4754-d475-4c0a-9512-1413519a31c5",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c7804681-1bbb-4608-9ac1-93e01d8c0948"
        },
        "item": {
          "id": "c35d2aae-8e40-494e-b4cb-138ea3c010a0",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "24a5100b-1537-4550-ae48-77e399e8c1c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4273ffd-9101-4d9b-81bd-ead582ee00d0",
        "cursor": {
          "ref": "e2d148c6-8b4b-4ce3-bb25-43b4c5aa3912",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "17bccad4-484c-4213-8b56-954f2ef383c9"
        },
        "item": {
          "id": "e4273ffd-9101-4d9b-81bd-ead582ee00d0",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "0f60810b-c3f7-472b-b70f-9f2124d8e67b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f0288ea-1a99-4c35-8923-f587f59ec25d",
        "cursor": {
          "ref": "de0215c8-842e-403f-a8d0-b9f9a0edfe14",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5324c520-7e51-4bb9-9750-5fe6b5189fd4"
        },
        "item": {
          "id": "3f0288ea-1a99-4c35-8923-f587f59ec25d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f3cf0003-74c2-4068-a3f2-086230b126b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea7d046-d3d5-4000-a2d1-b65373a172ab",
        "cursor": {
          "ref": "130ccd9d-f783-4f18-84fc-c39ef4013ea0",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f82a0d0c-3dd8-4307-b4d9-6c483bea7bd7"
        },
        "item": {
          "id": "0ea7d046-d3d5-4000-a2d1-b65373a172ab",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "012281f4-ca62-48d7-bc88-a5336e30c3ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96dcc504-1e5c-4eef-9dbf-aaf2904c13f1",
        "cursor": {
          "ref": "34a63072-1cb2-4ea5-a13d-2f0970d0e6bb",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "5c0df77c-5f78-424c-a570-beae32a8addf"
        },
        "item": {
          "id": "96dcc504-1e5c-4eef-9dbf-aaf2904c13f1",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "8f64ce7a-982c-40c2-865b-bd0901d2ec41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ed28842-8841-4194-a263-619ad2aab2e2",
        "cursor": {
          "ref": "b4cfab5c-f58d-4844-9598-2cd2942e93eb",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ee95f0a5-b07f-4cd9-9d04-4fc4aa097129"
        },
        "item": {
          "id": "7ed28842-8841-4194-a263-619ad2aab2e2",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "4d16ab27-d73c-4daf-8bd5-bfc0283a8d44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24733b39-d7dd-454e-bcfd-cbdf0264a31b",
        "cursor": {
          "ref": "b36880e7-5e61-4e64-85ac-c66bd09f673f",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8eeef30c-5976-4a10-9dbf-47a2b9b1b61f"
        },
        "item": {
          "id": "24733b39-d7dd-454e-bcfd-cbdf0264a31b",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a086b0ea-4a8b-474d-bb22-3d9f21621f4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77735d71-70a5-42f8-9c8a-380347d8ea4b",
        "cursor": {
          "ref": "c64fe5f0-6710-4962-9790-f98a9ffb1b69",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f7d82757-f5b2-42d0-917f-79c1de13fb77"
        },
        "item": {
          "id": "77735d71-70a5-42f8-9c8a-380347d8ea4b",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7ac9b9bc-6708-4db7-91be-be59eee56e13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3081b5d-ec28-485f-8475-f5aca01780e4",
        "cursor": {
          "ref": "1804488a-902f-44fd-941f-254f95c5555b",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "92af8bb9-7d00-4f71-a775-04781df64dce"
        },
        "item": {
          "id": "a3081b5d-ec28-485f-8475-f5aca01780e4",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "9f9e0de8-d845-42f5-9843-e319be50ae4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9b29a0b-93b0-4946-afc2-312cc9244f05",
        "cursor": {
          "ref": "394c4c97-5429-4775-814b-fdb6cb426c59",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3e298bd0-3c6a-431c-9cd9-45b61da98d88"
        },
        "item": {
          "id": "b9b29a0b-93b0-4946-afc2-312cc9244f05",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "0db5059a-affb-4c99-ac05-d1afcae553e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb484669-117c-468c-a8be-c11dcc0122a0",
        "cursor": {
          "ref": "780a1aca-6114-4357-a131-0d12001fc972",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "09c958e3-5aeb-421c-ab12-43048f82379d"
        },
        "item": {
          "id": "cb484669-117c-468c-a8be-c11dcc0122a0",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "7fa1cec0-41fb-4d8e-bb11-de20bd03a11a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "9514f978-90b4-416f-af43-577ec47e75ca",
        "cursor": {
          "ref": "0c810e11-a451-48c8-940a-807029fd3e22",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3797bfa1-5346-49df-80d7-07b940395a18"
        },
        "item": {
          "id": "9514f978-90b4-416f-af43-577ec47e75ca",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "319522e0-39ec-4409-8fac-897a2e257d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc3d3c54-89d3-4eef-a4b3-bf89f13d097f",
        "cursor": {
          "ref": "e44e5ea8-0d2c-4360-a7dc-329e37bc8254",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "915b9576-b36a-407e-9ece-fc1029d85934"
        },
        "item": {
          "id": "cc3d3c54-89d3-4eef-a4b3-bf89f13d097f",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "0459fa0b-2255-480c-bc2d-352b4530103d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28c30943-9278-4a81-b9a8-6d4ad141e854",
        "cursor": {
          "ref": "c94cec56-d337-4ed7-9649-4979bc03c479",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c4c8f5fa-a785-4976-a744-ff4c68dbd6ab"
        },
        "item": {
          "id": "28c30943-9278-4a81-b9a8-6d4ad141e854",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e59ce112-750b-436c-9170-faa61976a5d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf8b7aa0-91bc-4d37-b38d-6b450979729d",
        "cursor": {
          "ref": "aeb89cab-a283-4593-aaf8-c8b4877840eb",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "156c6ecc-ac8c-4edf-8bbf-982ec5c79a7c"
        },
        "item": {
          "id": "bf8b7aa0-91bc-4d37-b38d-6b450979729d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "59076cd9-8da1-4a28-a5a1-b3275530879d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b67310c-ccfa-403d-86a1-43f9902bf58e",
        "cursor": {
          "ref": "c46657ef-ba43-4e99-ab55-2c89321f199f",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f9ce9865-668e-4115-a7b3-cd35a5a563f6"
        },
        "item": {
          "id": "2b67310c-ccfa-403d-86a1-43f9902bf58e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "2a86770a-3b94-4686-a5a8-9d70ac3fa9f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31cf2d25-9560-4824-be3e-0ae16f36b0e1",
        "cursor": {
          "ref": "962b3330-ccfa-4791-b4f3-1b2437a2d692",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "91e132cc-2df1-4cc4-9918-2b74429066f1"
        },
        "item": {
          "id": "31cf2d25-9560-4824-be3e-0ae16f36b0e1",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "bd47aace-5b14-493d-8c60-2f3fba93a1ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "091453fe-258e-40f1-b8d7-944568e81aef",
        "cursor": {
          "ref": "b7e034a2-de20-421b-bedf-92ef9eb98c49",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "938c6a0f-8f9f-4cc3-9ebc-dc3155cfe740"
        },
        "item": {
          "id": "091453fe-258e-40f1-b8d7-944568e81aef",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "2f287346-68c9-4e73-b52a-38de7f5b2ce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "62f0edcf-33a8-487b-94c6-7b983f3d08eb",
        "cursor": {
          "ref": "9cf7f179-531a-493c-bd18-c60a0d76800e",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "22a60e88-6d7b-4456-bf47-2a6cf498b362"
        },
        "item": {
          "id": "62f0edcf-33a8-487b-94c6-7b983f3d08eb",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "fc4f4ec8-78ea-434f-8b0e-c9151aebc039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "519adab7-9086-40bc-bbd1-ae41e49063e5",
        "cursor": {
          "ref": "a237211a-3a8f-48ce-9c0c-3ef8814f2184",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "5f62fa31-6d5c-43f6-a06c-117e91c1e246"
        },
        "item": {
          "id": "519adab7-9086-40bc-bbd1-ae41e49063e5",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "6b40a43a-adae-4730-9655-4e588fa889eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c3c71c0-5766-4444-9e30-6e7fba6495c5",
        "cursor": {
          "ref": "de9be08d-047d-4f5c-b311-9b75e7b7636b",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4699281b-883a-4e90-bc1c-953a47c86b3b"
        },
        "item": {
          "id": "5c3c71c0-5766-4444-9e30-6e7fba6495c5",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "99b9fd70-9c3d-4943-8efc-7d9d14eab983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bef6786-00f4-448d-bd91-bddeb5b27a2d",
        "cursor": {
          "ref": "1c7862d5-c162-4d16-a3a6-5d7422ed1b24",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "284cb685-2c0b-4101-a229-67208ce80f06"
        },
        "item": {
          "id": "0bef6786-00f4-448d-bd91-bddeb5b27a2d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "fdeb8c18-8249-43f9-bb25-dd46d3267ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a997f7e8-28eb-4dd1-8fa5-bf5067922437",
        "cursor": {
          "ref": "1f3e741d-c907-45c0-b8c9-2f6b15bc0a6d",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e1a72c9b-5e7d-4034-896e-b92c9c2b8de9"
        },
        "item": {
          "id": "a997f7e8-28eb-4dd1-8fa5-bf5067922437",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "94a820de-da0d-420a-9e52-c9c9580106e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17dff2ac-6349-43fc-86f4-b0da31ed342b",
        "cursor": {
          "ref": "a47545e1-92c1-4851-b152-501504c4f0ba",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6e923a7e-94a2-4356-ae6b-b8c5686aa976"
        },
        "item": {
          "id": "17dff2ac-6349-43fc-86f4-b0da31ed342b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "69b21f94-9269-4044-8553-64ddff3695c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca39d57-168b-4249-91d7-3195e40ca0ae",
        "cursor": {
          "ref": "d06e683b-2f0b-46ec-9946-139cc9bbd826",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f4ded0fb-86eb-4731-a119-eca73cc0aa8c"
        },
        "item": {
          "id": "6ca39d57-168b-4249-91d7-3195e40ca0ae",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "ff517d4e-98d2-447d-88d3-247708c93ce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f381e4e-5c34-4a73-937c-732f270030df",
        "cursor": {
          "ref": "5c945753-431f-48eb-88df-9a19b5c01571",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f341549e-5f36-4366-bac3-54137d990208"
        },
        "item": {
          "id": "0f381e4e-5c34-4a73-937c-732f270030df",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "54d64f42-6785-4686-9b6b-f1cce8689e3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecc1322d-5439-4706-bb14-7c8eda334f87",
        "cursor": {
          "ref": "f6ab44a6-d1d5-4242-84ab-49b62f66813f",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "5bcd4e5f-62a7-462a-aaca-ec2064525db0"
        },
        "item": {
          "id": "ecc1322d-5439-4706-bb14-7c8eda334f87",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "92da32e4-5e40-4c19-916d-02d0c4fac641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a35c50-e2b8-4633-802b-a7b1f808b8b5",
        "cursor": {
          "ref": "2bb55922-915e-4c8b-b9a9-e527e83c3921",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "2c293ed6-ca16-44c9-a997-f97915524f36"
        },
        "item": {
          "id": "96a35c50-e2b8-4633-802b-a7b1f808b8b5",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "503cf898-386f-40d4-8923-61e95e5db13b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac46b0f-bd3a-4d0e-aaf2-233ad69e63e8",
        "cursor": {
          "ref": "aad8ac17-baa0-4b02-b64a-258060fbd744",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "1ab6b7b3-6215-4b93-bb22-8a1df025b9af"
        },
        "item": {
          "id": "cac46b0f-bd3a-4d0e-aaf2-233ad69e63e8",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "eac5b73f-c826-4aa1-a3fe-eada4954f23a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "422d17de-1de1-4438-846d-f49850389814",
        "cursor": {
          "ref": "07fe9260-7f54-49bd-a79c-99e87cffa751",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e452d776-4701-4dec-8f5a-4f83220cf5f9"
        },
        "item": {
          "id": "422d17de-1de1-4438-846d-f49850389814",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "04e4c4ae-c8db-454c-bfa5-73dc3b959cbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae70641-557b-4e13-aa9b-342f1c97c3e4",
        "cursor": {
          "ref": "6cb70b11-03a3-45ee-b0ae-9c83e8315c1f",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e74e68b4-9c31-4e0c-9f79-fd2cc92ce8c0"
        },
        "item": {
          "id": "7ae70641-557b-4e13-aa9b-342f1c97c3e4",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "0a15b0c8-7667-455f-8a82-47ea20b81892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dac8f7e-f1cb-48c9-8fc9-298f02a6f592",
        "cursor": {
          "ref": "27404cc3-7500-4329-ae71-4122c770ee3b",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "515fec71-38a1-46f8-b947-2d4f80603342"
        },
        "item": {
          "id": "1dac8f7e-f1cb-48c9-8fc9-298f02a6f592",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "6ee9b19e-b9db-4701-87c1-f6e96da611af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb182c9-c29d-453d-b1b9-6843e18bf2c3",
        "cursor": {
          "ref": "4c25eb30-23cf-4684-a495-4c6d7954594e",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6640f6de-dce4-4626-8e07-93e8872fb96c"
        },
        "item": {
          "id": "2cb182c9-c29d-453d-b1b9-6843e18bf2c3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "e58d1e59-7d88-4bca-8914-daba01cd69d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "547ffc93-d3d4-4b2b-bc77-2f24377f06ca",
        "cursor": {
          "ref": "07aeb62a-030b-4065-90d8-420ccbccb4be",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f30ccb1c-a11e-420a-b570-bed50c8c58be"
        },
        "item": {
          "id": "547ffc93-d3d4-4b2b-bc77-2f24377f06ca",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "5690d968-cf43-427d-bf1c-a4fab0c09296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be48521a-3592-41dc-a2d3-f77a6172a458",
        "cursor": {
          "ref": "a6badc4d-bcae-48aa-9476-d11826787832",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c093bf4f-d973-441f-bf60-a962d5622ba7"
        },
        "item": {
          "id": "be48521a-3592-41dc-a2d3-f77a6172a458",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "f99401f7-6407-4ad5-b7f7-f2b1b311c64a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b16e293f-0975-4d8d-b0bc-c6469f26620b",
        "cursor": {
          "ref": "0616607a-a684-45dd-a0a4-7b323f63a8e5",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c03ce0cc-264f-4223-90b1-5ae117749597"
        },
        "item": {
          "id": "b16e293f-0975-4d8d-b0bc-c6469f26620b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "87fb7199-b148-4c18-b776-faa26b855d1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccde77ee-93bf-4c3e-91d5-a6537692dbd0",
        "cursor": {
          "ref": "281b342c-f216-4ac4-8db7-01ea0c280f56",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "bd648f00-67df-49cc-b2b3-295af34991b4"
        },
        "item": {
          "id": "ccde77ee-93bf-4c3e-91d5-a6537692dbd0",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "54e9cbf7-fba1-4d86-a028-9972d4f7e2dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e442206-710e-483f-bd86-8f70dcbb6e77",
        "cursor": {
          "ref": "b4a632c3-2d0b-472a-87d9-756011fd9496",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e3078d64-e919-4548-bd20-36d0bbe16b32"
        },
        "item": {
          "id": "3e442206-710e-483f-bd86-8f70dcbb6e77",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "d8d01e9b-e112-430c-b1ec-d2bf567e9aff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d184fd4-9ecd-4728-8903-8ff01dbeea7f",
        "cursor": {
          "ref": "00a0cf6a-08b7-4681-a6dd-d2db30e909f7",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8a90edd9-7ae9-4b02-97af-81b23ad77b21"
        },
        "item": {
          "id": "7d184fd4-9ecd-4728-8903-8ff01dbeea7f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "1f8d5fe6-6d0f-41d6-ad9c-155cf512362b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a815a0b-6c07-4d9b-a01c-c320f84ed436",
        "cursor": {
          "ref": "a36bd11f-5fbe-4b38-be60-6d6e8979361c",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a330a868-2d59-4c5a-ab68-23ebd7bd81e5"
        },
        "item": {
          "id": "0a815a0b-6c07-4d9b-a01c-c320f84ed436",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "056768ef-e330-44dc-b12c-4ea71040ee15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1357d75-0fc4-43bf-8515-c937083aafd6",
        "cursor": {
          "ref": "b42e06fa-56d1-4ef0-92fb-94ffb0990ca7",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "17d4aa41-6f46-4be4-a4b1-642193c7f592"
        },
        "item": {
          "id": "b1357d75-0fc4-43bf-8515-c937083aafd6",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "2ac0dbaa-9982-48e8-8ae7-1a3b38df1c59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6afa3a00-a010-428a-bd3a-612557e9e50c",
        "cursor": {
          "ref": "4b0ece0f-0d15-4b17-bdb5-586434a021b2",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "8123a2aa-cc3f-4516-8d6c-21e67f08d889"
        },
        "item": {
          "id": "6afa3a00-a010-428a-bd3a-612557e9e50c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d30832f8-880b-423e-a552-09828c136cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7de22ca-4096-4a22-8a87-84d019ffdfb4",
        "cursor": {
          "ref": "c453b632-b6ff-447c-93f9-2203ff8cfbfd",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "c0c258ce-c5da-4294-9b28-dd0e211a86d5"
        },
        "item": {
          "id": "f7de22ca-4096-4a22-8a87-84d019ffdfb4",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "005ee343-6f7a-4ad7-bc8f-2e9e3f7471da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c65b0ae-dd88-4dc0-925b-29d7269c33e8",
        "cursor": {
          "ref": "f875bf98-0730-4e99-b05b-aab0a2fb87f4",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "2f58d745-f116-4ca8-b0a6-bed12295adec"
        },
        "item": {
          "id": "6c65b0ae-dd88-4dc0-925b-29d7269c33e8",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "6a43fdfe-6d3c-4d44-885a-772f75f36566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4224b2a2-acba-4fdd-b684-a79d15272d5b",
        "cursor": {
          "ref": "be995587-b53e-4817-90ea-f71d29d2b96b",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "af45a3f8-2975-4c3d-b9e4-955070c6e5e3"
        },
        "item": {
          "id": "4224b2a2-acba-4fdd-b684-a79d15272d5b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "5ff90e4f-6b33-4b74-bf7c-45b406bb5d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0077446-0527-4613-9026-9313c6065ca5",
        "cursor": {
          "ref": "9d3134ee-343b-433e-b6f9-bd079debe2bd",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "bb9c7870-3491-479c-8827-ed96189a2222"
        },
        "item": {
          "id": "c0077446-0527-4613-9026-9313c6065ca5",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ca62607d-a0f3-4e30-8e21-e10a607c6eb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cadb557e-e2f8-4dab-a5dc-bb3342fe9dab",
        "cursor": {
          "ref": "36a9fd18-419f-4638-ade8-8d47058c4109",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "2975551d-8786-460d-9744-1bb5157784bd"
        },
        "item": {
          "id": "cadb557e-e2f8-4dab-a5dc-bb3342fe9dab",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "34091165-5745-44c0-8b08-bea40810c075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac027b7-4694-41e9-9101-66b27a72bb86",
        "cursor": {
          "ref": "3a048951-fd0c-461d-8156-66e9186af041",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "dedce950-81c1-4172-b4cb-b1f265fc29bf"
        },
        "item": {
          "id": "5ac027b7-4694-41e9-9101-66b27a72bb86",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "99c3abcd-e044-4ec5-9204-fb3a1007476d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "301adf32-e21b-45a8-8081-d12bb34fdf35",
        "cursor": {
          "ref": "7b6fcc18-ac65-4201-a183-de3cbb65b8d8",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "80b5a237-e9e5-4f23-8e71-0370bb66ba28"
        },
        "item": {
          "id": "301adf32-e21b-45a8-8081-d12bb34fdf35",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "121910be-1f1f-4dd7-8326-ab56120d009e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e514130d-f575-41e3-8794-88b6f491fedf",
        "cursor": {
          "ref": "197b0438-698d-414d-824a-4fe590694ac7",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9423a912-0014-4a18-b3af-b7a1990309d3"
        },
        "item": {
          "id": "e514130d-f575-41e3-8794-88b6f491fedf",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d96d1e86-6b50-4b8b-bbb5-7f99dcbc7a86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf81d810-f307-472d-81ca-e48c2c7ebfc7",
        "cursor": {
          "ref": "07b12214-5917-4dc8-9db0-5b7d83c7e98d",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ef84c8ed-3b4c-4fb2-9fe4-eecfe5b2b722"
        },
        "item": {
          "id": "cf81d810-f307-472d-81ca-e48c2c7ebfc7",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "69b529b1-59c4-4d97-8fea-3e69d198106b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e374f80d-9c14-49d9-9421-3b01f63167d5",
        "cursor": {
          "ref": "881f1c05-02aa-4833-b2c7-d77bd6f91428",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "975ea438-fbcb-4647-b371-946b07ae7b16"
        },
        "item": {
          "id": "e374f80d-9c14-49d9-9421-3b01f63167d5",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "08c3f068-f23e-4915-88f4-307f5ac7f13d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3dfe584-626c-4cf7-be75-fe715cd5d63b",
        "cursor": {
          "ref": "612865e7-ac2b-42bf-906b-0055ae5a0ec3",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "396825b7-3f20-4c1c-8732-82a672944693"
        },
        "item": {
          "id": "c3dfe584-626c-4cf7-be75-fe715cd5d63b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "7cd5a03c-7aa3-47e5-9ecd-9ddc57eafd1a",
          "status": "Created",
          "code": 201,
          "responseTime": 122,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "a3540cfc-5f43-4615-9348-d6b4173374bb",
        "cursor": {
          "ref": "80bf2eab-bac0-4cb6-a338-7b854947d09f",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "46b033f7-3235-4774-a919-5f875bd99c54"
        },
        "item": {
          "id": "a3540cfc-5f43-4615-9348-d6b4173374bb",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "365727ca-7241-48d1-8860-7c86784aadf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bca56cb-dd88-4e00-b05b-f327a9f715a2",
        "cursor": {
          "ref": "a37d5104-95fb-48d7-8e0c-5a1c7695fd98",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "8a078732-6545-4ea6-9b0f-0fa4207e7ed6"
        },
        "item": {
          "id": "3bca56cb-dd88-4e00-b05b-f327a9f715a2",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "7632bf39-a603-4f6e-8504-da54353b0797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8427001-747e-403b-ac7a-e6d06bc4bd60",
        "cursor": {
          "ref": "d837d864-febd-4ab5-9bc3-d999fac13e28",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "290f3ef6-c644-4787-8f5c-db2f3e4ee937"
        },
        "item": {
          "id": "a8427001-747e-403b-ac7a-e6d06bc4bd60",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "a2a967dd-a5a6-4088-a943-234d00a3dfe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ae07a16-0a73-4058-85b8-64b5e45cbea3",
        "cursor": {
          "ref": "2f2e03e7-881c-42f7-8b93-7c179de74bb3",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "fd11e261-2675-4b26-87cc-745eba7f4b40"
        },
        "item": {
          "id": "6ae07a16-0a73-4058-85b8-64b5e45cbea3",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d31e6edf-fb2c-45eb-abaa-818064603f2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79edd688-74b8-4c4f-8d48-3d484a08d17d",
        "cursor": {
          "ref": "62a97d83-0fd3-4eaf-9f0e-c5b770fa018b",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c78bfc2e-3202-47b3-a2f8-ba88e61b8582"
        },
        "item": {
          "id": "79edd688-74b8-4c4f-8d48-3d484a08d17d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "861e6f32-1e24-419f-9e40-14adde15d5d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2958bbb5-c239-426e-885a-eddfa3532b6c",
        "cursor": {
          "ref": "144319de-440a-4422-9661-41c0cc8b497a",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e98b18c9-d96c-4efd-9a0b-550449597f5c"
        },
        "item": {
          "id": "2958bbb5-c239-426e-885a-eddfa3532b6c",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c7a1b9e7-4053-4691-80c1-b626d334effc",
          "status": "Created",
          "code": 201,
          "responseTime": 83,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "39e1e9a4-19d4-486c-a86c-73ee0c4ffbf4",
        "cursor": {
          "ref": "b320b06f-aab7-4765-9bc8-6fb67e3bd81d",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "9b53ba61-99ec-45cc-9de6-dd28f81f9841"
        },
        "item": {
          "id": "39e1e9a4-19d4-486c-a86c-73ee0c4ffbf4",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "dec42847-72a7-4cda-88ee-97fa26af2b19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d48cca9c-69c7-4849-959f-c08e02770b11",
        "cursor": {
          "ref": "51f93cec-53e4-4ba6-b213-80bd1f8b0b9b",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "39b2f2e1-e461-4cf1-8e64-5d43dc1ebfd1"
        },
        "item": {
          "id": "d48cca9c-69c7-4849-959f-c08e02770b11",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "8f788cf9-c100-431e-8ad7-a8e711f14e31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72dd3f97-21d5-4d10-bdb0-ead2e49d56bd",
        "cursor": {
          "ref": "73e20ca1-8dfe-417c-b1e2-b6d3832b984f",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "01668d33-2241-43dd-b86a-dcf86f0e3289"
        },
        "item": {
          "id": "72dd3f97-21d5-4d10-bdb0-ead2e49d56bd",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e6f3d928-0ccf-4d5a-9896-20bd03da21b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b40e7029-8dcb-43f6-b5f1-afbe1544c086",
        "cursor": {
          "ref": "df6fd071-210f-48f9-b95f-c36f32ed3b08",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "af957b5b-4fe5-4541-a999-0235c08afcb3"
        },
        "item": {
          "id": "b40e7029-8dcb-43f6-b5f1-afbe1544c086",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b38172c2-268b-479a-9b49-81f2b3738ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9499ca57-51d9-435a-8f63-c6db3a04f818",
        "cursor": {
          "ref": "8d30f6fe-840e-4912-be77-0df05b4c1ce1",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "d048406f-38af-4db7-a7e7-75cd40866a66"
        },
        "item": {
          "id": "9499ca57-51d9-435a-8f63-c6db3a04f818",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ea130873-c7bf-4928-8ac7-ef08c1ae9213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "593176aa-5bf3-45ab-ac1f-392b2609f79e",
        "cursor": {
          "ref": "1aff047a-f398-435e-adc0-fb1e075753e1",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "fd72c166-4d64-4f30-9926-22c56c6eb3f2"
        },
        "item": {
          "id": "593176aa-5bf3-45ab-ac1f-392b2609f79e",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "80547fe6-e9d5-4fe9-8380-0b834a805cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59146695-45ff-4849-9bd9-3816ab8fabff",
        "cursor": {
          "ref": "bcb89e1b-611c-41ce-9610-884e779b90a1",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "9957eeea-9450-4410-a9ed-3002a08760cc"
        },
        "item": {
          "id": "59146695-45ff-4849-9bd9-3816ab8fabff",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c567f1a4-fd14-4ca3-b13f-0a1dd7f465b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "961852f7-f670-4db9-b7e3-2c0d195bea5c",
        "cursor": {
          "ref": "740b506d-1665-48d4-9d4b-9b8bdf8b0b7c",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "8ef5ebcb-b52a-4ec9-9cd5-b83823a76976"
        },
        "item": {
          "id": "961852f7-f670-4db9-b7e3-2c0d195bea5c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "dfb52de1-555d-4420-9f5a-b16e27315112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfa1f658-8935-47cd-a1b9-a22abf8953e9",
        "cursor": {
          "ref": "b61eaeeb-5670-4136-b0e9-f592fcda56be",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "bb4025d4-33c4-4808-9bd4-776d62e37106"
        },
        "item": {
          "id": "bfa1f658-8935-47cd-a1b9-a22abf8953e9",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "6bddea14-0cbb-4857-bfc6-27df0e4ae676",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "7a7616db-cb64-4170-a5de-6b50aac29e7e",
        "cursor": {
          "ref": "d0739452-d4e8-43d0-aa26-7e78daf5ccb0",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e865523e-03ca-4ac9-ab5a-c11c78b177ad"
        },
        "item": {
          "id": "7a7616db-cb64-4170-a5de-6b50aac29e7e",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "c8c71143-5150-47df-85a4-36c5d5abbeae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "19dfeb62-a132-4215-83c1-c6e999c985a7",
        "cursor": {
          "ref": "25c8b4c0-15e0-46db-8abd-5aabdadba4d7",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "672262df-da8d-4810-8489-d177a7155a50"
        },
        "item": {
          "id": "19dfeb62-a132-4215-83c1-c6e999c985a7",
          "name": "credentials_issue"
        },
        "response": {
          "id": "59bc7d25-1c76-4003-b7e2-91c81be7f22a",
          "status": "Created",
          "code": 201,
          "responseTime": 83,
          "responseSize": 642
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e0ee73b-aa82-4947-b468-4816ec90cdfc",
        "cursor": {
          "ref": "e38daf29-e0ca-48df-b851-5766d1267132",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b152c345-6bd4-4401-9c00-f1cee060d421"
        },
        "item": {
          "id": "4e0ee73b-aa82-4947-b468-4816ec90cdfc",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b08c7d4f-8fa8-4ef2-8008-ea14f3bab2c7",
          "status": "Created",
          "code": 201,
          "responseTime": 82,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f8795a9-0cd2-4331-bbbe-4d2c815bb655",
        "cursor": {
          "ref": "fe58d4df-3854-4d19-9ee6-748d258f587a",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7202fc30-1095-4e66-a510-1a1f8ed40c2c"
        },
        "item": {
          "id": "0f8795a9-0cd2-4331-bbbe-4d2c815bb655",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4bce5c0e-a16d-4301-bc3e-804f42a390e0",
          "status": "Created",
          "code": 201,
          "responseTime": 81,
          "responseSize": 665
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "75f90103-7785-4013-b383-4c3faf35f07c",
        "cursor": {
          "ref": "fc3c87e9-df45-4d98-a3db-7fd32aeebaef",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b609369e-ed73-4b19-ab1d-df7dbf376dd2"
        },
        "item": {
          "id": "75f90103-7785-4013-b383-4c3faf35f07c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "fc757b4d-c973-4e90-b518-74bd5dc646b3",
          "status": "Created",
          "code": 201,
          "responseTime": 82,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "78727660-d8a2-4eb6-a5b7-ae9a567a8da7",
        "cursor": {
          "ref": "e256afcf-dd14-4d43-aa47-19544d437a76",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "81768670-da3b-4488-90a6-09894b62a1ac"
        },
        "item": {
          "id": "78727660-d8a2-4eb6-a5b7-ae9a567a8da7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e0bb0c31-9a8e-47aa-b0e0-95423bef4153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:109)"
            }
          }
        ]
      },
      {
        "id": "5c09c07b-486b-4462-b686-78881fb287b0",
        "cursor": {
          "ref": "d43ac141-fa17-4e39-9ffa-d4352e4254d8",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3bceebd5-796b-4923-b010-9eb9ff2313a1"
        },
        "item": {
          "id": "5c09c07b-486b-4462-b686-78881fb287b0",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5bb1d3c2-4e11-4622-be95-2373c301e650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c09c07b-486b-4462-b686-78881fb287b0",
        "cursor": {
          "ref": "d43ac141-fa17-4e39-9ffa-d4352e4254d8",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3bceebd5-796b-4923-b010-9eb9ff2313a1"
        },
        "item": {
          "id": "5c09c07b-486b-4462-b686-78881fb287b0",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5bb1d3c2-4e11-4622-be95-2373c301e650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1695f1df-6efa-43e7-a268-85200ca7cac3",
        "cursor": {
          "ref": "0f604ffd-dd8b-4b4e-8e76-449af43e2563",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "273bf08f-b30c-43a8-a437-9c3a08859141"
        },
        "item": {
          "id": "1695f1df-6efa-43e7-a268-85200ca7cac3",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "36f216be-37f1-477e-a07d-7efae8d9bbc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41c649e5-2197-4dcd-9c54-52dff6aef63a",
        "cursor": {
          "ref": "ffe8e31a-e2d9-4c05-8df3-3bd0179fb267",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ade8af38-ae77-4b8b-ac2e-a892280a1e2c"
        },
        "item": {
          "id": "41c649e5-2197-4dcd-9c54-52dff6aef63a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9c365233-4725-4cb5-b515-89937d7b6cbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b5c9d57-7d68-4c64-b063-bd4c5a214cef",
        "cursor": {
          "ref": "7d0a8699-46e1-424d-90f4-b3c521c41a35",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "1dc56b9a-e32a-4ecb-b899-152085384071"
        },
        "item": {
          "id": "2b5c9d57-7d68-4c64-b063-bd4c5a214cef",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c38498ad-b659-487c-af85-aa1a354cf5df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07c69eb3-7464-4f27-94df-b92a1017da14",
        "cursor": {
          "ref": "7f20df8b-4de2-434d-961e-97961a2c2b2c",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "e5183152-8bcc-45e3-836a-b34da867cd05"
        },
        "item": {
          "id": "07c69eb3-7464-4f27-94df-b92a1017da14",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "dd98081a-fadf-4a98-97ef-b202970712e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c934786-d771-4510-bc16-924312d283f3",
        "cursor": {
          "ref": "2e5e17ca-64b0-4d2e-8aad-d7a698abb381",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a67c4a98-436c-428f-b22f-741447a147c1"
        },
        "item": {
          "id": "6c934786-d771-4510-bc16-924312d283f3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "93bf0dcb-7a5d-4e55-919a-8743da4cecf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "293d7556-489a-439a-a86d-5faaaba3226d",
        "cursor": {
          "ref": "3e31b4a0-8c33-443d-ac7c-35c7d9c07a13",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "04f96b6d-02d2-42ca-956b-bc88a4c307c8"
        },
        "item": {
          "id": "293d7556-489a-439a-a86d-5faaaba3226d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1a31a426-44e4-4688-8375-a5c68f48e7ec",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "4453669c-f169-43b4-a4dd-d488f2d1300e",
        "cursor": {
          "ref": "94d44a64-756f-4648-a138-0190af70e2ae",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "5d8c83f9-9cdf-44a3-b6f2-9fbd650e6481"
        },
        "item": {
          "id": "4453669c-f169-43b4-a4dd-d488f2d1300e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "217a2006-2c1e-43b9-8859-8a3faa8d9690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ec44e8-d351-49a5-a58d-1333992c9648",
        "cursor": {
          "ref": "2fc408c5-851a-4e20-b951-c924e1cb7d95",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1ef09d0d-49e5-47cf-89b1-300b78e3c415"
        },
        "item": {
          "id": "91ec44e8-d351-49a5-a58d-1333992c9648",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "34cbde33-e2bd-4457-b259-98f713b8c155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "796560b0-43c0-452a-bc94-63542dcd46ea",
        "cursor": {
          "ref": "e7689a5e-5cad-42be-a46d-a23477a3f0fd",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "00058b19-ccec-4ef6-aa91-26d3db87b4f1"
        },
        "item": {
          "id": "796560b0-43c0-452a-bc94-63542dcd46ea",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5da28afb-8f21-4805-bdac-c1869468a7f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ba4aabf-0180-4072-a337-ad522b296106",
        "cursor": {
          "ref": "6423de60-b46d-4524-bc47-a2e3ce628387",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "f602ce22-c633-4d26-9d26-fb3cf0ac298e"
        },
        "item": {
          "id": "8ba4aabf-0180-4072-a337-ad522b296106",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "107880d2-3a31-41c8-b3db-58cd54906882",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3df44f3-9e4e-43f0-b120-ed172dd58b59",
        "cursor": {
          "ref": "1bde177f-3371-45e6-9f2b-5de5b5144090",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "64855ec2-def2-47f0-9f3f-52e17326b240"
        },
        "item": {
          "id": "b3df44f3-9e4e-43f0-b120-ed172dd58b59",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8bf2391f-a346-4577-84e1-967501009699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff38ba9f-ddcf-4f4f-b198-b5fe439dbec8",
        "cursor": {
          "ref": "dee20c00-0b1f-4b8d-bbf2-56a14716301b",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "2d140dd1-3b0f-48ee-a1b3-66dc2f10055b"
        },
        "item": {
          "id": "ff38ba9f-ddcf-4f4f-b198-b5fe439dbec8",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b75b9dd5-7783-4eb6-8d7e-39362c118951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3dc688b-b0d9-4aee-9609-a4d397355c8e",
        "cursor": {
          "ref": "f4205bdf-d19e-4527-be47-c1beb2f519ca",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a4bd8fcf-55f1-4640-a406-79ac5d413074"
        },
        "item": {
          "id": "b3dc688b-b0d9-4aee-9609-a4d397355c8e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "354424d4-f18b-4c9d-a313-cab4d3184771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03222d1a-19f6-481f-bb08-a178cdd2b73a",
        "cursor": {
          "ref": "734ed78c-922d-49dc-b56e-bcc239363fab",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "06e854b0-867c-4d94-a385-1afebf4bd5d8"
        },
        "item": {
          "id": "03222d1a-19f6-481f-bb08-a178cdd2b73a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "fc250c15-7b10-431a-a7fa-3c0279c0281f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24ce4f53-1b2d-4d57-9a2c-9083c09b4375",
        "cursor": {
          "ref": "8706a0b3-408b-4b01-9d16-54a19c137ba5",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c4b7470c-9909-44e2-92de-f5c546b3d602"
        },
        "item": {
          "id": "24ce4f53-1b2d-4d57-9a2c-9083c09b4375",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "853fe1a2-77ed-46d4-9342-b33b7d343533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56fe3a4c-762d-4391-a70e-156b6c7eebbf",
        "cursor": {
          "ref": "dff489e5-1c5b-4982-827a-1ab1dafa74df",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "962c9ad6-bd69-4f03-b974-28aeb0652703"
        },
        "item": {
          "id": "56fe3a4c-762d-4391-a70e-156b6c7eebbf",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "7b58b55b-070e-42ed-b51b-5bf247423d3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a93d5eee-8dd9-4ea5-9c00-7f76eee76ab0",
        "cursor": {
          "ref": "a9c9cc5d-a6cd-4cc0-a52d-3d4df19304bf",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2b8d69f2-2ff7-43bb-9889-2ca6d85a3f14"
        },
        "item": {
          "id": "a93d5eee-8dd9-4ea5-9c00-7f76eee76ab0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8d846cce-2d94-451b-a18f-50e430ff71fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3847af35-c05e-4185-924b-d4385e4e315e",
        "cursor": {
          "ref": "216a1202-f12d-4879-ab0a-7d713ec86e00",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e5d86a75-82ee-43a9-8ed0-744485c41a73"
        },
        "item": {
          "id": "3847af35-c05e-4185-924b-d4385e4e315e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a6cb1bb1-4881-48de-a869-5b3073bc7b82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7f45fd0-100c-4a98-814c-6c885efc2a94",
        "cursor": {
          "ref": "13df97d7-a976-4a9c-b374-3fd1dcfe61ac",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "63adf7ba-07c6-4a71-8cdf-a4c2597edcba"
        },
        "item": {
          "id": "f7f45fd0-100c-4a98-814c-6c885efc2a94",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d6458793-5ea2-49f6-9350-da5d4895806a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5c4a124-2940-4851-ba30-86f6c91537c0",
        "cursor": {
          "ref": "fdc111e2-0905-4e24-9474-5030b9a13aa4",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "73e36f7d-daa5-4d73-afd4-acc9f2b4ba0c"
        },
        "item": {
          "id": "a5c4a124-2940-4851-ba30-86f6c91537c0",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "faf3461c-971e-4c59-99ca-f094c0efe84f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "209b2734-ff4d-4a09-9946-3038edaaacef",
        "cursor": {
          "ref": "e3236b12-ecbe-495e-bd84-0e6af1a05dde",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "5007e5ec-ecaa-479f-b163-d72eeb504b26"
        },
        "item": {
          "id": "209b2734-ff4d-4a09-9946-3038edaaacef",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5c6f1514-0cfd-4987-8417-3ead79628766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "775a8c18-add4-4bf7-b173-7ede9a308623",
        "cursor": {
          "ref": "1b2624ff-1992-4fbf-9b67-9c1b227d1eae",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "c288754f-f0e5-4a70-a2d9-23acbf1c5af2"
        },
        "item": {
          "id": "775a8c18-add4-4bf7-b173-7ede9a308623",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "48091814-aced-4498-816b-cd42e1d7c724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "587babb0-1d9e-4ef1-b0a2-18382707a82b",
        "cursor": {
          "ref": "bed822d5-ad07-4963-936d-eb12c147e983",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c8bfd0a5-1f0d-407d-ae2a-b923eefc7cdd"
        },
        "item": {
          "id": "587babb0-1d9e-4ef1-b0a2-18382707a82b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "51d15fc2-3560-41c4-aa71-6dcd5e5605a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a937017-b11a-4cf0-8cdc-0bf224f7b111",
        "cursor": {
          "ref": "3043d6c2-0e80-4d9d-983f-d069901e44ac",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "ee954574-9752-4a51-826d-2ca3bebd991f"
        },
        "item": {
          "id": "9a937017-b11a-4cf0-8cdc-0bf224f7b111",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "9d0f5ee1-7d88-4807-a903-0af7324b7b76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "660c92e7-13c6-441c-937b-e93b628779ee",
        "cursor": {
          "ref": "cf694817-3cdb-4738-a21f-a0132cafba1a",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "070406a4-2d1e-49c3-9793-0928f3a16a6d"
        },
        "item": {
          "id": "660c92e7-13c6-441c-937b-e93b628779ee",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "70fcdb40-f1d2-41d4-adc5-8498a9c11c45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48a8b7a7-1f93-4803-a2d2-54b9ce71df9a",
        "cursor": {
          "ref": "74c31c81-7bd1-492d-928c-7d8af528f151",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "00d14b33-9a61-48fb-b7f2-662df88230ff"
        },
        "item": {
          "id": "48a8b7a7-1f93-4803-a2d2-54b9ce71df9a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "0a7efbd3-16fa-4007-9cc5-7bb0e606e73a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b236e115-cf69-465b-8590-18c10852fd06",
        "cursor": {
          "ref": "3b5fa32e-9335-482d-a511-da36efdb862f",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "51749340-bc84-41e6-81dc-18d604381422"
        },
        "item": {
          "id": "b236e115-cf69-465b-8590-18c10852fd06",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "61a32106-05be-417e-9d91-e45f0c112b9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac15bf20-1920-4599-b599-538869e8808f",
        "cursor": {
          "ref": "538f76ee-f913-41f6-ba93-1ad2a68c18fe",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "0807e7e8-dcf4-4f29-ab23-bd03ae31a69e"
        },
        "item": {
          "id": "ac15bf20-1920-4599-b599-538869e8808f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "957fe197-7d22-4833-8bc1-20e67dee6876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ff65559-8e20-4e27-a1f5-6981b1ae7a3a",
        "cursor": {
          "ref": "cd877c7b-8353-4914-a899-a38a0c1c259b",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b708baaf-12bb-4b89-b836-c18ee1c7d9fa"
        },
        "item": {
          "id": "2ff65559-8e20-4e27-a1f5-6981b1ae7a3a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e01d8543-ebd0-4598-8a45-37ecc7e8e556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06351d9e-5d37-4b5c-99e7-9730e8fe4b9f",
        "cursor": {
          "ref": "d0067fd6-6438-4521-a05f-0511794603cf",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b6a620c5-ccc2-4ce4-b3cb-ba0c045cf47c"
        },
        "item": {
          "id": "06351d9e-5d37-4b5c-99e7-9730e8fe4b9f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "3e144ba9-62f2-41aa-b8fd-7363bfcc500f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "154eecfe-7e6f-4a41-b4a8-55353b8ef232",
        "cursor": {
          "ref": "827f8711-b58e-4700-9bf0-b737ce312f43",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "32876940-d28a-4cf3-881d-d57b83867467"
        },
        "item": {
          "id": "154eecfe-7e6f-4a41-b4a8-55353b8ef232",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "2dbd3ab1-cef7-4aa0-8c1d-9b8b2a29aa27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b59d521e-05ce-41ff-aea5-dcfc94822819",
        "cursor": {
          "ref": "a8de5135-588b-4fa3-939a-89fe2e4b4b34",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3cee66ed-5cc7-4aee-8de5-da7497e990aa"
        },
        "item": {
          "id": "b59d521e-05ce-41ff-aea5-dcfc94822819",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "fab7def6-6937-4bd0-a799-566da91d6d60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "fc6e43ae-f239-4a0f-971f-10c529c6819d",
        "cursor": {
          "ref": "cb9a42dc-a3e1-4247-966c-4fd1a743872d",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "870b7833-9d12-48c2-acd5-99d777c344bf"
        },
        "item": {
          "id": "fc6e43ae-f239-4a0f-971f-10c529c6819d",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "24cc86ce-d6cd-46b2-8bd7-ae06396dd14b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "5c44f9a7-2bfd-46ee-b50a-dd612f3c557c",
        "cursor": {
          "ref": "fccd2abe-711c-406f-83c6-6654b135a264",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e726663f-226c-4b1c-a7cd-36856a0ba07a"
        },
        "item": {
          "id": "5c44f9a7-2bfd-46ee-b50a-dd612f3c557c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "78fa48af-001c-4451-8eec-e7a1400b2e70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c44f9a7-2bfd-46ee-b50a-dd612f3c557c",
        "cursor": {
          "ref": "fccd2abe-711c-406f-83c6-6654b135a264",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e726663f-226c-4b1c-a7cd-36856a0ba07a"
        },
        "item": {
          "id": "5c44f9a7-2bfd-46ee-b50a-dd612f3c557c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "78fa48af-001c-4451-8eec-e7a1400b2e70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14bd8692-30e7-473f-8b36-afdafdcef585",
        "cursor": {
          "ref": "f221bea9-ceae-4abb-aabf-19cef4716d06",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e34b5201-8b76-4489-b6dd-5ce1ec66654b"
        },
        "item": {
          "id": "14bd8692-30e7-473f-8b36-afdafdcef585",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "8d5e1fe2-a03b-41fb-a51c-c025608ed9b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b7989a6-521c-4549-a79d-7aa21e4d2df7",
        "cursor": {
          "ref": "9b656f2b-d8d7-4147-b23b-b44fe00be83f",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d9145570-76c7-45b7-b452-750724f62b6c"
        },
        "item": {
          "id": "5b7989a6-521c-4549-a79d-7aa21e4d2df7",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "75687b1a-dff2-430b-b134-d813c17a58bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b196ab95-9335-481a-9277-c5e14848e39c",
        "cursor": {
          "ref": "dbcc2a9c-0f16-40fa-8ee7-8d9e57e50710",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "a0520af8-a777-435c-97c3-ba5b07ab6558"
        },
        "item": {
          "id": "b196ab95-9335-481a-9277-c5e14848e39c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "54d479d0-0021-4893-9955-ebe001ebfe57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f5891f4-775a-4dda-ab8c-5db7b816c4b4",
        "cursor": {
          "ref": "b91689f7-a208-475b-abfd-96e446678ae6",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "cc1b80b3-8d2a-4b07-b058-8a2d3fa207f3"
        },
        "item": {
          "id": "0f5891f4-775a-4dda-ab8c-5db7b816c4b4",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e9eb98c3-53d8-4a7b-93a5-434b11768dd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eca7467-596f-40a2-9c26-796f6b45c069",
        "cursor": {
          "ref": "41834403-3e0f-4f72-8a13-78806d439984",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c1fed5c2-18c2-42b5-9242-caac7c311971"
        },
        "item": {
          "id": "8eca7467-596f-40a2-9c26-796f6b45c069",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0b59799f-b2db-4eba-8232-67ae33802891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d78c3e53-de99-4d7c-b27a-42177f52b315",
        "cursor": {
          "ref": "8428bfe5-e247-4da0-a161-2aeede9f0641",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "0d3b88df-e77a-4ba9-a1bb-2ec1337b093f"
        },
        "item": {
          "id": "d78c3e53-de99-4d7c-b27a-42177f52b315",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "94d4d9d3-9638-4853-9578-f90ed6067060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c01ed4e5-ff41-4478-8dd2-7b2a85b4dd22",
        "cursor": {
          "ref": "8ba696ea-3cbf-46d4-8651-81cc652aa0f9",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "5f8e9e6e-9ab4-4a69-bff7-cad113d75172"
        },
        "item": {
          "id": "c01ed4e5-ff41-4478-8dd2-7b2a85b4dd22",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "267a2fb6-190d-46a9-a344-413cfa75bf77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e35fa3e-02f6-4626-ac3e-fa5e8de5893e",
        "cursor": {
          "ref": "b599ad07-80b0-4d2c-b1c3-29112b977b38",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "238f5374-2381-49d3-b34d-09eb3bbd1252"
        },
        "item": {
          "id": "8e35fa3e-02f6-4626-ac3e-fa5e8de5893e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "3d173445-aa2b-4941-aa54-b7518e9e9d74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bed6a48-165c-4aaa-b9d6-033e6cead5aa",
        "cursor": {
          "ref": "5c224ff6-565a-4f0b-b154-a4625bfd9f1f",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "c75ea868-4502-40d3-af51-55e28414669b"
        },
        "item": {
          "id": "6bed6a48-165c-4aaa-b9d6-033e6cead5aa",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "4d149f94-0890-4439-9702-ecc0c239478e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87be901c-fd90-4585-9075-824bb45422ec",
        "cursor": {
          "ref": "9462438c-d5cf-4a7b-8fb5-3a89194f7e1f",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "4ddb6a13-2245-4331-83e0-9acd534e9aa6"
        },
        "item": {
          "id": "87be901c-fd90-4585-9075-824bb45422ec",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "49cd1b62-dcb0-452c-bcea-5aa12aa70f19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7733671e-1ccb-4b8b-86f4-1ec19b3824db",
        "cursor": {
          "ref": "c66c4608-95c2-4d3f-a2ad-3fc91dcc8fdf",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "63d103ba-61f3-4ef3-a390-bd44cf3442a5"
        },
        "item": {
          "id": "7733671e-1ccb-4b8b-86f4-1ec19b3824db",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "cbb885dd-b88d-4a8a-9309-0ddbd6034574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35220d8c-de08-4986-9462-38c4e99759af",
        "cursor": {
          "ref": "2dd012f8-9a7f-429b-a19e-f36896fb227b",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "acca5ff9-decf-41b0-ba78-6a7ae11a2b25"
        },
        "item": {
          "id": "35220d8c-de08-4986-9462-38c4e99759af",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "865e5e14-cddf-4f8a-b6e2-96bc3b91a302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b72b5f7-0769-4400-91d6-1b69b38b1da8",
        "cursor": {
          "ref": "413dd617-a61b-4eea-be13-37ad73459405",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6bf11f7c-3abe-46e0-a689-73ec5e7dbc96"
        },
        "item": {
          "id": "4b72b5f7-0769-4400-91d6-1b69b38b1da8",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "9518b803-88f2-448f-b8d5-e169724e3788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a817531-8728-443a-9a05-48f76779b591",
        "cursor": {
          "ref": "31674394-2e33-4830-8b62-5bd796da7c7b",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "65e24dd3-113c-4b68-b2be-6a8b04f4d725"
        },
        "item": {
          "id": "8a817531-8728-443a-9a05-48f76779b591",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2f46c936-29de-4960-b851-f08902a9915e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25059896-fbaa-4d5d-8c4f-b4599b3a9c51",
        "cursor": {
          "ref": "33709b5f-9782-47b8-b35e-8366c6b98db0",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e76b8215-d10f-471b-921e-ee9b17dcc649"
        },
        "item": {
          "id": "25059896-fbaa-4d5d-8c4f-b4599b3a9c51",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "99a4ba68-1598-4d0e-8004-bc4c94218c78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "895153b4-ee3d-46b1-bb7f-c9d33417a448",
        "cursor": {
          "ref": "2c73d6e2-ec7f-4340-80e5-60c76e9b9633",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "69dc683c-fb38-4532-ad2f-5ce013d81baa"
        },
        "item": {
          "id": "895153b4-ee3d-46b1-bb7f-c9d33417a448",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "75f591d7-c2c6-438f-978c-d200c8508186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e6491f-b9a9-443b-921d-f200f2258a93",
        "cursor": {
          "ref": "84b7632a-4929-43d3-9306-252559e1a02a",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7f9e5ced-fcf9-475b-9a76-867a747c8d40"
        },
        "item": {
          "id": "c3e6491f-b9a9-443b-921d-f200f2258a93",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "ba856be4-18af-4692-b1e5-851f93a59143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78287608-330e-487f-bdff-4c76421d80ea",
        "cursor": {
          "ref": "de72beec-bdf7-4e28-9747-49f3a05fa417",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "13140c4c-7036-43b5-8bd5-8fb7693438ca"
        },
        "item": {
          "id": "78287608-330e-487f-bdff-4c76421d80ea",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "a4496461-94e0-4a19-8db8-624490dd2398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46cfe9d0-4d1d-494d-b217-4a0424f37f49",
        "cursor": {
          "ref": "0904a43e-e1d2-4907-8761-614c9b6f329d",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "426f58ee-632e-4b0b-bde9-a04bcf804a86"
        },
        "item": {
          "id": "46cfe9d0-4d1d-494d-b217-4a0424f37f49",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "44f4c3de-7c29-40ec-a270-70f7315100da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab97fa08-faab-498c-b11d-6d8aa5767df9",
        "cursor": {
          "ref": "d85eea8e-aa57-4e9c-92c0-23e0cf116cac",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "5a00d1bf-4f7f-4926-bdc6-ba815a1d7857"
        },
        "item": {
          "id": "ab97fa08-faab-498c-b11d-6d8aa5767df9",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "3b42f159-3228-43a1-8592-6672820a908f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79ba0d4f-892e-420a-9c54-b563a6b03f2d",
        "cursor": {
          "ref": "08d00568-c88e-4bdc-ba96-9e310239bde8",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9f29cac4-2ae6-422e-abc6-b535e5735ce5"
        },
        "item": {
          "id": "79ba0d4f-892e-420a-9c54-b563a6b03f2d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "650d4fbd-11d0-4563-b3b8-91d88120d45d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b10543-76f6-4cbc-8d64-c3b268fd5e20",
        "cursor": {
          "ref": "64cd6b86-b624-49f3-a758-09772ddef551",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "3958e5a1-a02d-4a5e-a43a-17b12577aaff"
        },
        "item": {
          "id": "c5b10543-76f6-4cbc-8d64-c3b268fd5e20",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "5126bd27-e623-463f-bedb-c60a77e2db55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4239c71a-da4c-4f04-b8ba-329c5422547c",
        "cursor": {
          "ref": "c522ef85-5589-4f05-ae2d-44e69fb8d58b",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "1ed8a9d9-39c9-4cff-a28a-d7daf87ab82b"
        },
        "item": {
          "id": "4239c71a-da4c-4f04-b8ba-329c5422547c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "210babc1-8b30-480c-9e87-da42c6d80973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba5c4af3-c86e-4523-881a-720732653a82",
        "cursor": {
          "ref": "21802ba2-fe99-4b5d-8b56-2f92c2d90a77",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a984b562-6f63-479d-b81d-88287d9b9d8a"
        },
        "item": {
          "id": "ba5c4af3-c86e-4523-881a-720732653a82",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "faf26ebe-7680-4498-9e55-74f439b7b17f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8694ba34-7239-46b5-849c-f9be0bf46ebb",
        "cursor": {
          "ref": "1c867e4b-144e-49ca-8220-d8aa79a8c84a",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "af09b331-c85f-47c3-bc98-4e32d0374d0a"
        },
        "item": {
          "id": "8694ba34-7239-46b5-849c-f9be0bf46ebb",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "8ec1ca4e-4aa7-43af-a0a5-fad0792fd492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de9fa132-3b53-4052-83de-5e465c3341ef",
        "cursor": {
          "ref": "67505dbb-26cd-46c3-b5c7-1b4e3658a166",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "01a98cd9-761b-492b-b8e5-44d20edbcf4d"
        },
        "item": {
          "id": "de9fa132-3b53-4052-83de-5e465c3341ef",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f3384dab-f869-4dc3-b27e-f57d1f9ad883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "353420c4-b1b2-45d9-bbcc-7d43cdd83f74",
        "cursor": {
          "ref": "9065722f-f1e4-46cf-a5c0-fe92a082232b",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "f3080c17-3471-4729-a94c-78707a3e1326"
        },
        "item": {
          "id": "353420c4-b1b2-45d9-bbcc-7d43cdd83f74",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "dd1c141b-8241-483c-9c50-40094a84f70d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20968834-abb2-41da-bba8-a422d7ca4a85",
        "cursor": {
          "ref": "b2c931df-a1f5-4c3f-baca-775e7afdcf38",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "137d2dca-f235-42a0-b408-979cd22e1334"
        },
        "item": {
          "id": "20968834-abb2-41da-bba8-a422d7ca4a85",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "fc8b5959-5616-4d5e-856a-1b36c50fbd91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df1e7806-1d6b-4e05-a918-1bd0e3796c82",
        "cursor": {
          "ref": "e26e8d45-0e24-4855-bea2-5ac77ca07e94",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "0007bb12-52ec-419c-9b42-11bc09c0a16c"
        },
        "item": {
          "id": "df1e7806-1d6b-4e05-a918-1bd0e3796c82",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ff8626cd-be66-4663-8d4e-63cad3a1ddd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9360094c-93a5-4df9-8bd7-bfde1b6956ed",
        "cursor": {
          "ref": "795b3e06-e042-4110-bea9-6c5471cf326b",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e1732807-e723-408c-9e0f-4886d84da1fd"
        },
        "item": {
          "id": "9360094c-93a5-4df9-8bd7-bfde1b6956ed",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2afbff11-478a-472e-9fb2-d1680ad908c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dd2cbc0-80e1-49fd-a2b2-f81528b441ca",
        "cursor": {
          "ref": "c6c6122b-9803-40f6-9d8d-461883fe1896",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "448c7600-4285-475c-b1dd-22b8b0aecebe"
        },
        "item": {
          "id": "3dd2cbc0-80e1-49fd-a2b2-f81528b441ca",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "9a2682d4-c244-45f3-bd6d-d7c7ab2c6809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3aac724-a13e-4314-a3f5-e7e5df93a6b6",
        "cursor": {
          "ref": "7c70e11b-5a3a-4e13-8b96-c4a3a38c4d36",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d1108469-0637-4717-90e6-51bf2858a32a"
        },
        "item": {
          "id": "c3aac724-a13e-4314-a3f5-e7e5df93a6b6",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "1b7db396-e739-407d-8233-76d38f637efb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a0c78ac-2c00-44cc-b7f4-9876b1a0e5e6",
        "cursor": {
          "ref": "40ccb3fa-ae23-4ff5-a2dd-852046e37012",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7ad11c56-e1da-4836-857a-0d89ab54dd53"
        },
        "item": {
          "id": "8a0c78ac-2c00-44cc-b7f4-9876b1a0e5e6",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "14bc088f-3d27-470c-a66d-a04f609784b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b990dcbc-4720-4a22-a5dd-00f25265c21e",
        "cursor": {
          "ref": "7a228e77-21d7-40c7-ad8c-36bd3934772b",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "847f05c8-3ebe-4855-8c33-23a55ddedd17"
        },
        "item": {
          "id": "b990dcbc-4720-4a22-a5dd-00f25265c21e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "dc4a58b1-b7db-4df4-b047-47eb8b8ebec0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1822946-16d8-4a3a-8563-7921243b6b24",
        "cursor": {
          "ref": "0da1b9de-a2d3-4e1b-9996-584662b1d468",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "b14e724e-3357-44a8-b22e-bff37d2bc696"
        },
        "item": {
          "id": "b1822946-16d8-4a3a-8563-7921243b6b24",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "fb20d037-dd07-4c67-8899-b07e97d7c0c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb5df50d-bfd5-484b-8a0c-368b462d2a9c",
        "cursor": {
          "ref": "34eded3c-1a6e-478d-9aa4-838e4bb2caa2",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "29c616e1-b711-4647-9301-94a50c251e36"
        },
        "item": {
          "id": "bb5df50d-bfd5-484b-8a0c-368b462d2a9c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "d14fe7e2-707f-41f9-ab07-bc0916e510a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c342fafc-7c1f-41dd-a12a-5ccd6c7baa97",
        "cursor": {
          "ref": "ddbdcf02-e89e-4650-a07b-0e35313e3eb3",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "49950c9c-e712-458e-a138-3ac0fa8a8686"
        },
        "item": {
          "id": "c342fafc-7c1f-41dd-a12a-5ccd6c7baa97",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "fde0d39a-965d-4b96-a4f6-6859cfb06e77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faf2db5b-2d6c-4029-a80b-1d36335905a4",
        "cursor": {
          "ref": "c239043b-0cf8-4ce1-84d0-573a37d489c5",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2d884b1e-4b9d-4afc-81b1-826460edea35"
        },
        "item": {
          "id": "faf2db5b-2d6c-4029-a80b-1d36335905a4",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "4b8610cd-28f5-4781-bb21-e7684a393956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de167490-3647-4300-88de-2fda518732a1",
        "cursor": {
          "ref": "0f56b2b7-8838-4263-91f9-5e000d0baf5b",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "3d4c0605-8185-49f6-a12b-50137781d263"
        },
        "item": {
          "id": "de167490-3647-4300-88de-2fda518732a1",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a9efbbcd-aacd-404e-b4d2-fefecf1ffa20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39041efa-e741-436c-9abb-b499d995c329",
        "cursor": {
          "ref": "49479d61-9bce-44ca-9b24-dc1c04217e7a",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "17880028-3df7-4745-a390-4db3a159550a"
        },
        "item": {
          "id": "39041efa-e741-436c-9abb-b499d995c329",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "c0ab556c-9e54-4e19-a99e-556f8749e132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49d96856-928f-4e2b-b187-bd3b487a5d01",
        "cursor": {
          "ref": "7fa10d76-b0db-44e3-ba97-66967854a135",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "7e391075-4527-4cad-8509-58e28c1b75c2"
        },
        "item": {
          "id": "49d96856-928f-4e2b-b187-bd3b487a5d01",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "4f8ea28e-87e6-40ce-b475-8402d7c1b75a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23f02b72-b03f-4f8f-ad45-d9e361d343d4",
        "cursor": {
          "ref": "483d869d-f5d5-4fa9-b85e-6e3faea93752",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "8f243af0-4695-460e-b492-4da356621da8"
        },
        "item": {
          "id": "23f02b72-b03f-4f8f-ad45-d9e361d343d4",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d7b0e63b-abd8-4ebc-a84a-69bb5cff901a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6acb0b79-3215-4fef-8d81-675c66840391",
        "cursor": {
          "ref": "7359d4a7-338a-4dd6-bf27-f95306832c6d",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "c0f520c7-e4fc-43f7-a5e0-69631bcb4b2d"
        },
        "item": {
          "id": "6acb0b79-3215-4fef-8d81-675c66840391",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4c672e1d-18e6-4879-ae73-c2e9641078dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29b319f7-3e49-467d-9438-bd495681f1b2",
        "cursor": {
          "ref": "e84c3a0b-19f8-4827-8837-cb2194a18500",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3a157f35-262b-4ccd-832b-473a4bfa4a32"
        },
        "item": {
          "id": "29b319f7-3e49-467d-9438-bd495681f1b2",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ef877af6-9542-457b-b675-4aff68dcb8b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeca58b0-b695-45a0-878e-80a1490e5d64",
        "cursor": {
          "ref": "80bffc89-fe4d-4281-942e-9cfb805b4695",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9983fbee-6d94-4386-b3af-a9a346c132ac"
        },
        "item": {
          "id": "eeca58b0-b695-45a0-878e-80a1490e5d64",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "4bb6944e-1117-43f9-819d-abff2759b56a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b74682f-bf1c-4867-ba24-63eb81114028",
        "cursor": {
          "ref": "2dea01c5-b683-4774-aba3-dd8ab803d457",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "dd89297e-8f50-4302-83a6-7cada2615688"
        },
        "item": {
          "id": "8b74682f-bf1c-4867-ba24-63eb81114028",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "7bf9dec2-5bac-45c2-80da-cc3e68a650bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "608ee95d-367b-4133-8e2e-dfc456918aa5",
        "cursor": {
          "ref": "d3cb1f48-48e3-4bdc-b7c2-efaea418b789",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f0f0d045-e24b-42bc-8497-cbda670bd8c1"
        },
        "item": {
          "id": "608ee95d-367b-4133-8e2e-dfc456918aa5",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "dcad7516-42e6-4ced-b758-1b79ef60b902",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "165728fe-76a2-4372-9c63-f70f09d1df3e",
        "cursor": {
          "ref": "9128eb2d-3e42-4744-8c40-4e4c21a311a8",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f20a45f6-fee5-43b5-8140-699ae9d466af"
        },
        "item": {
          "id": "165728fe-76a2-4372-9c63-f70f09d1df3e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "af3bbe7c-5e8e-4dde-9591-4ba610cd8d7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baf258db-f230-4448-a810-c517c70f93c5",
        "cursor": {
          "ref": "376a8042-8eb8-4553-9e64-62137ba93eb2",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "73622ce9-c367-470f-b255-c1ef5c632681"
        },
        "item": {
          "id": "baf258db-f230-4448-a810-c517c70f93c5",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "75f9d123-c133-4e15-8a71-3d0e80a9ce55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae5518fc-6b17-4a40-b280-7e99b6c715fd",
        "cursor": {
          "ref": "61a44b00-1350-460d-8049-ed01e1d02ca6",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "6e75ae0b-558a-44a5-a410-ca9fb8f2b3d2"
        },
        "item": {
          "id": "ae5518fc-6b17-4a40-b280-7e99b6c715fd",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "3c550eb6-be31-45a9-8108-4a0737eda1c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca762482-7ac1-428f-bb48-886fef31e63a",
        "cursor": {
          "ref": "fcb80e1f-7dfc-4a88-b2a7-f0a2955eb719",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "060f7503-2e1e-4d1b-ab4c-5e19540df615"
        },
        "item": {
          "id": "ca762482-7ac1-428f-bb48-886fef31e63a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "afa09210-100a-4ce8-adbb-d0bc1d399ccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc5a255e-af5e-498d-988d-34b41e64ce28",
        "cursor": {
          "ref": "f4b3ba04-aea6-44ce-9222-4284de5e0892",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a08fae9d-f730-4d70-b002-5d977b4d19a0"
        },
        "item": {
          "id": "cc5a255e-af5e-498d-988d-34b41e64ce28",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2f67c200-fdae-4394-aaa2-17674ababa53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "067a86ad-2386-4762-8f96-2f6ed9384639",
        "cursor": {
          "ref": "9f90393f-f524-48c7-a165-effb5c06b03e",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "8fbdb1e9-615e-4cf5-812e-cbfff3726872"
        },
        "item": {
          "id": "067a86ad-2386-4762-8f96-2f6ed9384639",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "04f055bf-b408-4142-9aaf-36f6c7894ceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f95ccefb-a901-4245-86b4-42d0d38a020e",
        "cursor": {
          "ref": "1bc5b93d-8d97-4c11-a69a-081aad182476",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "3691a057-0eb4-4694-86c5-4be216dc01c0"
        },
        "item": {
          "id": "f95ccefb-a901-4245-86b4-42d0d38a020e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "33f210f4-de4c-44b3-a49d-243b5e28c850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edd36157-d69b-4aba-858a-e0031c79369a",
        "cursor": {
          "ref": "0a73b4f5-c18e-41c4-8639-2941d786c0f8",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "cf430a20-28b3-4216-9e0d-7b7b21bee2ad"
        },
        "item": {
          "id": "edd36157-d69b-4aba-858a-e0031c79369a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "d1c958a8-491a-4585-ab95-f4498df410b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72027b35-ac1c-41fe-ad9c-257d11077056",
        "cursor": {
          "ref": "d36980ea-a9c9-43a1-8476-698cd70d98e4",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "c2f811f0-b5c5-4af6-aa5b-f4f9bce77347"
        },
        "item": {
          "id": "72027b35-ac1c-41fe-ad9c-257d11077056",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "37ef973c-c13c-4a0e-a895-d880fc33da35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24f854e4-415d-4478-96f2-d5725602be74",
        "cursor": {
          "ref": "ae9b6fea-334a-42d8-8a9f-3b7a946f1c1e",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "fabbca5e-0628-4b55-990d-7b53ddf91fad"
        },
        "item": {
          "id": "24f854e4-415d-4478-96f2-d5725602be74",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "7ac8518c-13b3-4155-8e11-7e9e7cf6df8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "081d231d-688f-454e-b93d-f7ab138a37c4",
        "cursor": {
          "ref": "f7fe143b-bad0-4d57-8715-ea1f83102c5d",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "97fc0858-7a7f-41ad-9362-86d8dd3038ea"
        },
        "item": {
          "id": "081d231d-688f-454e-b93d-f7ab138a37c4",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "1f2cfef3-6c62-4d6f-8053-d8232113fa8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "887e4e8a-ea1b-4a7c-9873-f9c9831328e5",
        "cursor": {
          "ref": "1e9c883e-4311-4cab-bd25-47801d9e2b67",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ab5e7878-d0af-4b07-a31e-a8914016f773"
        },
        "item": {
          "id": "887e4e8a-ea1b-4a7c-9873-f9c9831328e5",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "1708c2e4-ba0f-4dd9-a03b-35ea46f17b53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a1cac44-12da-4542-98fc-de429161986a",
        "cursor": {
          "ref": "785908e7-03fc-4f93-a6db-d700b20f608c",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "80dee635-692b-412d-bfe8-1531caa9c2cf"
        },
        "item": {
          "id": "4a1cac44-12da-4542-98fc-de429161986a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e702c0bf-546b-44df-8c70-de2868430455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4428fec-246d-4edb-b219-1b5d60ddfb50",
        "cursor": {
          "ref": "a4b7aa79-1de4-41d8-82ad-89d4ce41f55b",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "28add904-dce8-45e6-8fad-f48c3d79af22"
        },
        "item": {
          "id": "c4428fec-246d-4edb-b219-1b5d60ddfb50",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4295c592-4618-48ad-8cee-3df99a5686d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1258c206-3487-4789-ac16-58e1224b5812",
        "cursor": {
          "ref": "b6c2fb4a-6641-4251-a2ec-b08228e412bd",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "3318fab5-e5f2-4b40-9540-1b0c65806b5e"
        },
        "item": {
          "id": "1258c206-3487-4789-ac16-58e1224b5812",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "7c5f6f93-9994-45f8-82ab-e0c02f229d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a68048c-2804-41b6-8cf8-d56668d2249b",
        "cursor": {
          "ref": "c0b553b6-49a0-43da-9f30-d4f2e0c2fcd6",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "0807e1a9-9b07-4990-a922-56deab4a4c3c"
        },
        "item": {
          "id": "9a68048c-2804-41b6-8cf8-d56668d2249b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "1d73c742-c531-48f3-86f9-2dcc35da757c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1f0d98d-68b2-4d61-8bf6-53efcd3a7dc0",
        "cursor": {
          "ref": "b038c6c0-59f0-49df-a2a0-7c40edf41218",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "207cb408-ec08-43c3-a1a6-672fcda0e064"
        },
        "item": {
          "id": "c1f0d98d-68b2-4d61-8bf6-53efcd3a7dc0",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ffedb791-fea9-4594-ba21-8f54bcc8adff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25ccde79-114f-4272-9e3c-d69b1958dc9d",
        "cursor": {
          "ref": "6f0ac35b-ba56-4e92-b435-ecb72ab6474b",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "934f5b6d-d290-42d1-811a-67a22426a929"
        },
        "item": {
          "id": "25ccde79-114f-4272-9e3c-d69b1958dc9d",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "f30a3d80-7e96-4caa-8600-f2b2837692d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbe0d7c7-87b9-407e-b15c-ff31a7bf50a0",
        "cursor": {
          "ref": "90af7a62-5508-4f49-9e3e-ab87d115c1fe",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "09a1c664-17c6-46ad-b6cd-78fe4c46f0e9"
        },
        "item": {
          "id": "dbe0d7c7-87b9-407e-b15c-ff31a7bf50a0",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "612fe448-28fe-41e8-b9c1-34884daf7961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c42463f-7a65-4641-8b63-183343eb675f",
        "cursor": {
          "ref": "c3d1bce9-a679-43bc-8309-33491e3557a4",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "ab6e57d6-d148-4fdf-953d-cce54d1d9ff3"
        },
        "item": {
          "id": "1c42463f-7a65-4641-8b63-183343eb675f",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c217629a-27b1-428d-a774-7c4dfbb45322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7be5e2b-81ca-4797-a970-ef853ad11b85",
        "cursor": {
          "ref": "ac526797-4fed-463e-94b2-966fd9b7c0f8",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "5b638d4f-a0b0-4e82-8880-c77a71034746"
        },
        "item": {
          "id": "a7be5e2b-81ca-4797-a970-ef853ad11b85",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a3720dc9-0f3c-4f1b-a571-3fdbd252a179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a10e59-5fc2-4387-bd42-45452d5687e9",
        "cursor": {
          "ref": "911ff621-6654-4fa0-9baa-60b00259c525",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "92aa901e-21b5-4213-a035-a321297d3a2e"
        },
        "item": {
          "id": "60a10e59-5fc2-4387-bd42-45452d5687e9",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "8291eb3a-a4f6-4996-b887-214a64a13981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0ea7a8f-8700-480f-bd4f-086904d61c29",
        "cursor": {
          "ref": "8f004b5e-7a79-472f-8214-7d30062b7d75",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "59d1dea6-db5f-4dc1-949f-032d7c13b79a"
        },
        "item": {
          "id": "a0ea7a8f-8700-480f-bd4f-086904d61c29",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "5f67d797-b982-4e83-a896-487a57590d9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d300dd37-718f-429c-b9bb-19dbb4f456ed",
        "cursor": {
          "ref": "6ba7183e-ec38-4e1f-aac9-9d7eb74d0440",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8480f1fe-ad16-43b7-8c50-7a044cb100d7"
        },
        "item": {
          "id": "d300dd37-718f-429c-b9bb-19dbb4f456ed",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "890d47f4-be2a-499c-b3ec-e9684c8928a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11b975ee-dc70-4e22-93bc-22bcbb298f22",
        "cursor": {
          "ref": "901908e4-5609-4f59-a7c3-94410441175c",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d7d02ad5-0d86-4cc3-a213-7b37c4e38e0d"
        },
        "item": {
          "id": "11b975ee-dc70-4e22-93bc-22bcbb298f22",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f8ceb99a-3b06-421e-9895-c900636ae34e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfea3c6d-c92a-4e7a-bdb0-7d0a8ffb6132",
        "cursor": {
          "ref": "d007ddb2-dc8e-4048-b477-eb8bea388328",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "62d07372-c10f-48f3-b2c2-dd8ed5b72897"
        },
        "item": {
          "id": "bfea3c6d-c92a-4e7a-bdb0-7d0a8ffb6132",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d35259d0-43ef-4d0b-b65e-5de433fc37cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef1d1487-af34-4f5a-b787-39ce6bde6dab",
        "cursor": {
          "ref": "1223c7d2-2bd5-4947-a434-0fbf411fe1db",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "0c016e63-8525-47d2-9de7-d29b9e1b6335"
        },
        "item": {
          "id": "ef1d1487-af34-4f5a-b787-39ce6bde6dab",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "cdbe5e90-224d-47fc-8c78-50e930dd9bfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c6f9f8e-5df5-4824-98f7-7c078618d891",
        "cursor": {
          "ref": "19a72e37-4318-40d7-8bc7-2f6712e39a9c",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "fa2bce2a-8f11-4fdb-bce2-d6e9cf141e60"
        },
        "item": {
          "id": "3c6f9f8e-5df5-4824-98f7-7c078618d891",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "bfcd1ff3-817e-4757-abab-0fd0e9ffa24d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d837f0b-f70b-484e-a74f-b3339cf418d7",
        "cursor": {
          "ref": "dd53b494-f97e-4382-ab08-76681089e233",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "41d9b54b-74e1-472d-9966-3600240757d6"
        },
        "item": {
          "id": "8d837f0b-f70b-484e-a74f-b3339cf418d7",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "054719b8-204c-4b96-928b-a58fa1d199fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd707b1-9318-49ec-bfb5-c857973617d4",
        "cursor": {
          "ref": "1b2a7882-a13b-4834-9289-4ea2ecb73845",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9cba5999-123c-4287-bf55-38b023716c34"
        },
        "item": {
          "id": "9bd707b1-9318-49ec-bfb5-c857973617d4",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "bf1d18c9-7a0a-4ac3-b545-b8f2094166a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc13e114-3601-4c30-a10e-c175e66f398a",
        "cursor": {
          "ref": "f5a6f312-dd65-471f-80e3-77c243b60a88",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c3fe7d09-b23c-4428-b277-7666de3361df"
        },
        "item": {
          "id": "cc13e114-3601-4c30-a10e-c175e66f398a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "1feb282a-a677-4e68-9291-f1487d898d3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cb1d9b3-02c5-42a6-9d59-bb3eda2112bc",
        "cursor": {
          "ref": "1c6928ab-ee89-4a32-aaec-a979f416f621",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c76808b3-d3a3-41df-8600-d761246a4114"
        },
        "item": {
          "id": "1cb1d9b3-02c5-42a6-9d59-bb3eda2112bc",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "43305fee-26bc-4aa6-9cd5-c9275cf5e263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0a95486-6d5f-4fd2-bda2-9ecbce36345d",
        "cursor": {
          "ref": "0fd2ca47-d97a-4087-95d3-ec179281363d",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c4b933d4-2662-4417-99d7-9ca2db334ef1"
        },
        "item": {
          "id": "c0a95486-6d5f-4fd2-bda2-9ecbce36345d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "cd359ab8-c04f-4672-8d7f-4695f7abbdec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42322610-24f5-482e-8efc-f8349bfa871c",
        "cursor": {
          "ref": "f8c40ad6-258c-442f-a0b8-e3d92f3d90f8",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a2116c77-5a42-4fdd-b3a1-4bf40abfbb47"
        },
        "item": {
          "id": "42322610-24f5-482e-8efc-f8349bfa871c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "5447f210-cc25-44dc-bc1f-b136db791709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6df6ab3-abbc-4637-ab14-28a4fc37890b",
        "cursor": {
          "ref": "68d2f79a-2af1-4829-8fa7-5e0de4a7b0a2",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e31e2520-6117-4403-abe5-c7bffd40925c"
        },
        "item": {
          "id": "e6df6ab3-abbc-4637-ab14-28a4fc37890b",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "1ac915e3-fb95-44e1-8a5d-0783354f8b41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "131f66ef-0bbd-4ba1-a670-2de5ffc09ebf",
        "cursor": {
          "ref": "eb8f1c90-6d15-469a-add5-dc23b5ebd9d5",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "412e0e7c-6576-4e8b-b872-b5e87028113f"
        },
        "item": {
          "id": "131f66ef-0bbd-4ba1-a670-2de5ffc09ebf",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9ee6e1f2-b7b7-4f08-8564-ef40d6717df4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af631284-97a7-4f08-b77c-0973fa38a2b8",
        "cursor": {
          "ref": "a2cbb3f3-6dbe-4f83-adb0-14f29da9d675",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7c0d16f1-4515-4051-8729-c0918bd6ef53"
        },
        "item": {
          "id": "af631284-97a7-4f08-b77c-0973fa38a2b8",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "1a2f2fb7-a7ea-44e1-bcb5-b93fdf42e4c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6435feef-1e15-4659-b84d-452d00dea44c",
        "cursor": {
          "ref": "35705d9b-0e3b-418e-95b9-2a0c4789c089",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "85960562-ead5-4dbd-ad83-591cdaf7c6df"
        },
        "item": {
          "id": "6435feef-1e15-4659-b84d-452d00dea44c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "f1c239b2-93c7-4716-a673-f3c003de8295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b9839a9-6e45-4a49-ae12-100543aaab71",
        "cursor": {
          "ref": "ddb0be17-b27d-49da-97d8-ef1f25bec57f",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "356458cb-4d87-4c8e-94ca-3c64d6a34b50"
        },
        "item": {
          "id": "7b9839a9-6e45-4a49-ae12-100543aaab71",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "4a1560a2-6f29-4332-85ac-e03cfa3a2b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e62510d-195e-4060-879b-474a4c62d865",
        "cursor": {
          "ref": "d003bdb2-887c-4342-9999-0b1bc4250600",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "fa919e26-6366-4bd1-b0a6-9f3c2678ecce"
        },
        "item": {
          "id": "9e62510d-195e-4060-879b-474a4c62d865",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "71926577-4a01-4376-8192-6a7daaa028ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e811a177-ffc6-4a31-a6d3-c4e4d037c2d1",
        "cursor": {
          "ref": "07f7bd80-e976-4d2a-86a8-aa0f94e5b364",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ab94115c-3bfb-4925-9147-79c7308a624c"
        },
        "item": {
          "id": "e811a177-ffc6-4a31-a6d3-c4e4d037c2d1",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "252ac8d6-9e0b-4cf2-802b-0911ccf9c717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "697f666b-9ccb-498c-88b9-cd6ea41de695",
        "cursor": {
          "ref": "e0bf5da9-7228-470f-bcfc-919ecbe9d208",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "6475773e-fe29-4ebd-b54d-00cd8bb6cbb4"
        },
        "item": {
          "id": "697f666b-9ccb-498c-88b9-cd6ea41de695",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2d90b31c-d68a-4159-975f-245f4326c074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93d940bb-59a0-4136-a1a7-dfcbdaf604da",
        "cursor": {
          "ref": "400ee1b5-e348-4746-8642-85eefbeb672f",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9b0998ad-b911-4bbf-9e48-82225e57046f"
        },
        "item": {
          "id": "93d940bb-59a0-4136-a1a7-dfcbdaf604da",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "ee600338-2b37-4ba0-b19a-40d30f4a1f59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be47dc8f-6256-40a5-bbc3-1e049bfa117c",
        "cursor": {
          "ref": "63a44146-00bd-4dd4-b6b7-4b1c307e99c2",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "5ad66c10-312b-4d25-9d17-54965ef33d84"
        },
        "item": {
          "id": "be47dc8f-6256-40a5-bbc3-1e049bfa117c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9d26a4ad-4b25-416b-91bb-cdbfe2262ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca41cacc-69dc-4b5f-a2a0-7bab4cec74bb",
        "cursor": {
          "ref": "7b94fd5a-e357-469a-9398-710da68c4f80",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "4a0bb8d8-c407-42d1-80ac-f6b57a77f4a4"
        },
        "item": {
          "id": "ca41cacc-69dc-4b5f-a2a0-7bab4cec74bb",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7269b7df-a61a-43ce-af6c-5287a7c37b79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7877ae11-8c4c-4635-981c-78e22ef16a16",
        "cursor": {
          "ref": "4652fc57-ce51-481f-a0fd-0f37c8e6dfcc",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "78ff7f2c-d5ce-458e-937e-367d893e9c83"
        },
        "item": {
          "id": "7877ae11-8c4c-4635-981c-78e22ef16a16",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "896518e3-cff7-4a97-924e-8ec9a675055c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0ce673-0962-4bf9-af25-b8e0fed6b6f3",
        "cursor": {
          "ref": "8f63256b-129c-4139-9adc-1e9da5c048f6",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "77c4f154-ae11-42c1-98c9-ed891aab75b8"
        },
        "item": {
          "id": "8c0ce673-0962-4bf9-af25-b8e0fed6b6f3",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "619a9271-1801-49a3-882d-e0ca07891da9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a3ec554-6e32-4b0c-a473-5955e0dd74ca",
        "cursor": {
          "ref": "755a6c9a-cf67-4860-96e1-e6000309809b",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "cabf3f8f-0024-4ba5-9fd3-a1f308b73a21"
        },
        "item": {
          "id": "3a3ec554-6e32-4b0c-a473-5955e0dd74ca",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b0dce756-7aee-4eea-893a-6dd09627bacd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d8b7fb1-3526-48c8-be89-d68d21dcb143",
        "cursor": {
          "ref": "4898c15c-7516-4d13-9399-a80db2824cb5",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "3b84720b-1887-414a-b115-e64d12b4de67"
        },
        "item": {
          "id": "5d8b7fb1-3526-48c8-be89-d68d21dcb143",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "dbad06fb-7f0c-49de-b6f8-bed36cc76da9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15fec74b-66b9-43ff-a809-dabfca76b700",
        "cursor": {
          "ref": "bf5b6cfe-a92f-4aee-b6df-5de391d437e9",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "872c5e66-12d9-4b86-ae3a-0219b2323758"
        },
        "item": {
          "id": "15fec74b-66b9-43ff-a809-dabfca76b700",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "30d60565-949d-4236-bf82-519aaa567373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18de61bb-05c8-4d8a-b9d6-171fbc253037",
        "cursor": {
          "ref": "59c2d599-8935-42f2-9b47-737c23c4082d",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "4657b324-6b4f-41f8-a599-78ca3ab9163c"
        },
        "item": {
          "id": "18de61bb-05c8-4d8a-b9d6-171fbc253037",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7fb7509a-9806-4aad-beeb-3c98d6b256af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b98a6693-894d-4ef8-ac7f-e562e91a1df8",
        "cursor": {
          "ref": "a8d689e4-6361-487d-975c-f88a5bffd7f0",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ea1f85a5-73e6-4deb-83ad-c6b9345dd043"
        },
        "item": {
          "id": "b98a6693-894d-4ef8-ac7f-e562e91a1df8",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "6a4d25de-ba3f-4dd9-9cfa-b14f4b99d75d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 63,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bbd977a-2ea1-4e55-84b1-8dd176aded79",
        "cursor": {
          "ref": "4cf23b6a-ff2b-42c3-970d-53f95c367753",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "9e811423-1d02-4ca5-891f-e9af3206cede"
        },
        "item": {
          "id": "1bbd977a-2ea1-4e55-84b1-8dd176aded79",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "06ea3b3f-fb81-4a0b-b23e-529fc5f7f22b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "0b79e8b7-02a4-4758-a8cc-b2c9f6048801",
        "cursor": {
          "ref": "d6857fa0-f11c-4ec4-8665-d2c356f8cc95",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "1242e724-5443-44e9-a2c4-4aeb795abb4b"
        },
        "item": {
          "id": "0b79e8b7-02a4-4758-a8cc-b2c9f6048801",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a0a2a09e-fe2f-470c-a45c-246db810bab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "47d2623c-8bc8-4cfd-8e04-346fa9d8515f",
        "cursor": {
          "ref": "2010f820-b0af-442b-a72b-325d6191b682",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "06982267-4f96-4147-9414-745501a85f9d"
        },
        "item": {
          "id": "47d2623c-8bc8-4cfd-8e04-346fa9d8515f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "2573238e-d89b-43f2-837f-38a4a254716b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "1033d419-f8ba-4ce0-921d-ffefb987bbe9",
        "cursor": {
          "ref": "1382fe5c-892b-4103-8bad-1cbc419e98e4",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4065d655-68a0-413a-bd85-357e7443f199"
        },
        "item": {
          "id": "1033d419-f8ba-4ce0-921d-ffefb987bbe9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f2b7a838-4790-41c4-a3c7-58ce607f8582",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1033d419-f8ba-4ce0-921d-ffefb987bbe9",
        "cursor": {
          "ref": "1382fe5c-892b-4103-8bad-1cbc419e98e4",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4065d655-68a0-413a-bd85-357e7443f199"
        },
        "item": {
          "id": "1033d419-f8ba-4ce0-921d-ffefb987bbe9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f2b7a838-4790-41c4-a3c7-58ce607f8582",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1033d419-f8ba-4ce0-921d-ffefb987bbe9",
        "cursor": {
          "ref": "1382fe5c-892b-4103-8bad-1cbc419e98e4",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4065d655-68a0-413a-bd85-357e7443f199"
        },
        "item": {
          "id": "1033d419-f8ba-4ce0-921d-ffefb987bbe9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f2b7a838-4790-41c4-a3c7-58ce607f8582",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4e019b0-6685-4624-86c8-ce22de0fb58a",
        "cursor": {
          "ref": "f4c82673-1372-4216-894f-8148ac6219e6",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "666f3c83-2a13-4355-b705-f17d24fce695"
        },
        "item": {
          "id": "e4e019b0-6685-4624-86c8-ce22de0fb58a",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "e60f3522-1f5d-4568-ae3c-d28851aaf49d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 63,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08d50e26-de0d-4672-aea8-78b6f2bc5869",
        "cursor": {
          "ref": "300119a2-f5c1-4269-a858-dfff7d98a922",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "649e54ea-ac18-469d-bb66-d850ca754f04"
        },
        "item": {
          "id": "08d50e26-de0d-4672-aea8-78b6f2bc5869",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "757c78d9-61b5-450e-9610-64d25e4f1208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "08d50e26-de0d-4672-aea8-78b6f2bc5869",
        "cursor": {
          "ref": "300119a2-f5c1-4269-a858-dfff7d98a922",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "649e54ea-ac18-469d-bb66-d850ca754f04"
        },
        "item": {
          "id": "08d50e26-de0d-4672-aea8-78b6f2bc5869",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "757c78d9-61b5-450e-9610-64d25e4f1208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "1d9c239e-5ef1-4ddf-b445-2d78ed5d4b08",
        "cursor": {
          "ref": "40904f9a-f689-4548-b7e9-86fc792117f4",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6b8018f6-eb19-4408-b3b4-2574df6dd683"
        },
        "item": {
          "id": "1d9c239e-5ef1-4ddf-b445-2d78ed5d4b08",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "3bd9b043-be52-447d-acb6-7aa51c456705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "12512582-72ec-4029-966f-9d04d5eb6c8d",
        "cursor": {
          "ref": "bf2f90bd-82ec-4f7b-a9b3-a57e3631603f",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "f6916fac-51b7-4f71-bb4c-86a703991583"
        },
        "item": {
          "id": "12512582-72ec-4029-966f-9d04d5eb6c8d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "82e42451-910f-4853-8333-4eed652277ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "12512582-72ec-4029-966f-9d04d5eb6c8d",
        "cursor": {
          "ref": "bf2f90bd-82ec-4f7b-a9b3-a57e3631603f",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "f6916fac-51b7-4f71-bb4c-86a703991583"
        },
        "item": {
          "id": "12512582-72ec-4029-966f-9d04d5eb6c8d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "82e42451-910f-4853-8333-4eed652277ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "890e5b61-9bdb-400a-a87b-75116936eca7",
        "cursor": {
          "ref": "7470f71b-7871-48da-b022-3be8d7d474e2",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "b0d858b3-ca5d-409d-9e38-ec0673a117e6"
        },
        "item": {
          "id": "890e5b61-9bdb-400a-a87b-75116936eca7",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "3445e255-28c1-41aa-b85f-929ae582ec43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}