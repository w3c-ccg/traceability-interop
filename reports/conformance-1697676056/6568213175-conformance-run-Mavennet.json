{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ff12b17f-365e-40a6-ae5a-c1848aa6b075",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2758c4cc-11ab-406a-8f03-7e36815f4b60",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fa12b13a-173b-4aa3-8047-cf233488ed91",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "63abddb9-2b73-493d-ac24-2415880fda00"
                }
              }
            ]
          },
          {
            "id": "1e445292-d78a-4cd0-8555-e781d4fde965",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "33cbac2b-cd72-404c-9e0e-29c4f07f2244",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9d75bad2-aa8c-4ff0-a46a-e485fb72af02"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2adf29ca-fcbd-4bde-af52-a9c4f5cd12c5",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1b13b9b0-7718-4057-83a0-f0cfc659b7dd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5ef8f63d-51ed-4561-b1a0-3cf468c7c81a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "13a564df-1603-43f1-84e3-620f7aa34f7c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "40d998da-fe82-47ac-b86c-1d9b7c2a382f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f45e7204-20e1-4ad8-9a9a-d290791612cf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f264d8d4-4740-4c68-8395-c8ed759829fd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7412429a-a60b-4579-9da3-b997a79b2d12",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "af2c355f-9be1-4d79-b3e6-36c103fe84c3"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "121c7795-637f-4c01-ba64-96d3858a14ab",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "fb9847d3-2eb0-47c5-98f4-81f2f56a0e1a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a1dc5a3b-729c-4021-8c5c-abebee34a6e7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c96004a3-605a-4bf6-a73f-46c5daf99602"
            }
          }
        ]
      },
      {
        "id": "cd70a17c-706d-45cd-8c70-eb8e9600df64",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "78eb9a33-ac77-42fb-9a7c-505513771f4f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "751989fa-6d72-430e-b2b6-f374a8220591",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6beafb93-0b1f-4406-ad9a-52804ff5483d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e119560f-2e65-4c2b-9faf-0321d0a9b5a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec7a4dc6-17a6-4f65-91b2-50343587791e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb53df9-8259-4f96-9e8a-f84cc5f14388",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee3d662-39ea-4e17-90cf-c4c16835e546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "524d1f52-eaf2-4650-9248-79fe5e9bfa70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70fa0820-3b6c-49b6-bb6d-5940248f31bc",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fbd09ac-6f8a-416a-9dff-5ebabbf9a2cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "018bffde-f8ad-426d-a2ed-dbfb90e14a2a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a0cc9569-f305-41a2-a6c2-c7961d81f711",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "85826cd7-5b47-41f4-898d-dc190cdf3471",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e863bd64-3294-4a78-a3ff-0eaf7e9edcec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "971c318e-ddc0-4aef-89b7-ce2e24327477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "953141b1-4bb7-470b-a7d0-e8b41c614fcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9dba36c-7d30-4a8f-8c38-c9706e5be069"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8f3baf27-16d5-4994-a8ea-3c6dee538924",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6c0983f2-2e2c-4d2f-bb4f-25904269d069",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7dafc136-f808-4f64-baaa-f702d8472e03",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f1aff5f9-61ac-49c2-bb1b-703d1f2a813a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d2ff4450-e80f-458f-b84d-e15d441decb3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "ba0a8bfa-6ad3-4dc8-bed1-34ed3b4c2409"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "72ea6f71-cd65-4829-8a6e-f5d439b99864",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ba0e24a3-bc21-451d-9379-59d99aee5611"
            }
          }
        ]
      },
      {
        "id": "27ac9e80-ea1d-44df-85b0-b7b22cf9bd72",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "d43f3bc8-c75d-4759-a29b-d6e899abcba6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "31b291ec-58f1-4d10-8cab-ff037ade5e7f",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a17b77e3-709b-4592-b511-be1274450c1d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d27411-059c-47ac-8bee-837c14cd862a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c4b2b63-7f07-469b-890f-23ecee53547e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce1d0a31-3604-4d2d-b6c4-144c42cc0ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb612b49-849f-4ad9-b57d-b1d3ad1b3b17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c212801e-79d9-4843-acc4-9b0e353421f3",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d90e4cca-2dd5-440e-abf8-f3956b8b4904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a492c239-c4ba-4d86-a0d4-32fac2d9d3de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a28e5312-f739-4e73-ac92-fb38bef1dda9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e46af4a4-4426-493a-8aa2-ad7c76cdc997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15032add-1665-4e65-bdc3-a1647d4367c5",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a36d02-7fb0-4c9f-b335-d7ebc7f96a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "694ff1f5-04c4-4321-9c13-4e9a6ebbccc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a611b537-4000-4d2f-9453-0bb5ac9ae903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d87b5ea1-cc2d-4c3f-9078-95397e548354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af807fba-8028-44aa-9f70-935769080010",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d5f74d3-adef-4227-a4ac-800784350456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0de8a5b0-822e-4871-b26a-5c8f0d76105e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24f2e2a4-2478-41d5-aa03-8bb23a193e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c2d3caa-25eb-45c0-944c-599afdd38197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e277a6c7-cf1b-47de-a683-dc4dd794ead4",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fec65ed-d9f8-45a5-99c8-dd11f52dc341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afdddfdc-6fdd-4829-a875-500eaef3cc57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d472b14-0097-412e-8f92-914000c5ca4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "06b37db9-cd95-41f4-8256-6361994cc83d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68306c15-5068-4d32-8e00-f9c448a9c7d0",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "259b5007-8501-4438-8353-c33ee5ae73d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d88e0226-350c-40b1-84eb-fef37ce0aa5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "004ed6e3-09d2-4641-bad3-528b56b274a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a685a194-4d3f-4df3-8249-f4ccdabf1dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a0ef32e-05b3-4efa-b339-d5904147a136",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7095ddb2-d5aa-4757-aa4c-2a59e7b2265b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35c9aceb-1f06-4ee6-8fa0-3653e5c445ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6318dbf8-dac3-45e4-8779-91c6eb11c403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "973bcdc2-b25e-4613-87ba-a1bc5cc82fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "440e5339-a005-4f6e-b3ff-df1b1425bf75",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05b12988-2acc-4a2b-b0b5-d8d3754b56bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6092f553-4fcc-42e8-945e-933949a8ddae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a2376c1-27ee-4abe-9166-a6c7434bd9bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c636de0-85db-4479-98bb-e9598d2525c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4f1730c-bc37-44c4-b356-95d809c5f075",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d49a4c87-b4e7-4801-8aeb-fccc657b9374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e45bab4-5a28-4115-b0d1-770c1beaafd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f6c1a2-e085-4ac8-87dc-5cc3789c6b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2bfa9d35-53e7-4997-85c0-6dcf04976bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e30afc-062a-4817-a74e-4058e5ee38c7",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e412c05b-d82f-4975-b55f-91c93911d14f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d574f9d7-2425-4018-91b6-d02366f9b8c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24257150-2258-4ec5-95e3-8420f9ab2c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84cda997-542c-4d37-8532-3607ad13214b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a5906a-9cf5-4c1c-b365-4cf9e0a7cef6",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f62d459b-e1b2-44bd-aa5f-9cd64cf14df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4407d31f-58b2-4c9d-b8db-0b8aa37a0247"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d1f123-83ee-449c-b231-3f00f5657bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47101f29-1d5e-483e-917a-030dbdc6cb78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e29e8a1d-7e9d-4def-ad16-cd87f2e67756",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec36706-6925-4723-8663-723cba2f0514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0746d41f-d88c-41bc-aa7f-a220b8f0b2ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49601b98-1c14-4c19-aa05-fe77931a7b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab2f433b-18a6-4aeb-b3c6-5797a7d8a537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ca8b15-1612-46dd-b065-7e9a2efe126e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d04194f7-fe25-469e-9d6a-3353af7c772a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31f5f219-878f-44fb-8658-d15911861949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ea8162c-66f6-4ede-adeb-ecbece8b27ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "15d41219-3552-450c-8bf9-05344ea12941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd3ea8e9-fc39-430a-8de9-9a0e76a8fd59",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d6700e4-691f-41b9-a92f-a143726f4c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02ad927e-0c04-4b94-9f53-e14ab7c8d4c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91aa9636-d4a0-42b3-a3a1-b793ad77ff32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "034e736f-c690-43f7-bef1-f9ccabe8d66f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db021e3-8733-49ec-98fc-d9024a427aaa",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad10bdc-8b8a-40bf-8f79-44a510532059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8753bbbf-837f-4230-9f2e-6130acf9be31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c567c8cc-af25-4178-b354-8c2e4ce251e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c81aa4e2-6145-4923-b50d-2a12226d47bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398b6cab-ceee-41c2-92dd-4201277e6224",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5339ed6-7a2e-4b77-b00e-e5796960112b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05a1d333-6c91-4ebb-a5bb-51d5ac053393"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6aa266c-33c1-45d1-8797-98baafcbf659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16e58c73-c66e-4942-b1d1-4aa4806afd1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fabb8200-d1d4-4c3d-a042-b99b0fb3c50b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "114649ce-abd3-4e63-848b-cf13aec9115d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c108065-12de-45ed-81ed-16a0393d5820"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "601838e5-b65a-4e48-a648-9ab977f79aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e1c9ab06-028c-4df0-acbd-a2edc9905eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3848f758-9507-4859-b8b9-ec0c6bd4c76f",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd559e8-69b4-4d9f-90a1-b3f88a95608f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94c53f9c-eab5-4327-b64a-76b08383cf2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ec319f-ccb4-4ef9-a2d3-a92ece2ffed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f421ef54-5ea3-4cbd-a67e-54616924ab95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "972e1b8d-468c-43c4-aa74-6092c0416dc7",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc30e95a-b0f4-4417-b704-e9eab6447bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5b87bf3-77d3-4bde-b5e3-4b65e3a52aa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e90aac90-e144-496e-9615-6fc3e5d3e1c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5da0f1a9-73d9-4826-93f9-3f39e8e4d4e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "630189df-258d-4cfd-b7f9-61cc8239b7e5",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8b556c9-4cac-4075-8d9b-747553a4640e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05ab9ff9-7def-4df1-8a60-6c5babe52a82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c1b38c3-b243-408d-bbb7-2e8cdd6ff515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "532c6fd2-22cf-4524-a565-31201d7a1696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "916cc6ab-dc95-4beb-a195-a6ad7d1e6224",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eab8261-501f-45dc-aaae-de66ebc66dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d02af5b9-ecc3-40cf-a17f-fdc3e1e2ea84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c9bc56-cef4-4880-aa74-7144fd11fa84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e09ed8b-c7f0-47fa-b699-e3231fe5eb0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f8aea7a-6f41-4795-9ad1-b2b6cbe7c103",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e8192c9-ee0b-4d19-9925-f1770c5aa469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e296175-4fbf-4e1f-846d-f230e225814e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5013aa4f-d7bf-4450-8322-4795a36a70b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a13aca7-2c6e-4713-8097-1bef0bb0a9b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a168677-f911-46d8-8e69-e8b9123dcac0",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e10adaea-7374-4667-8d44-b8630355f28a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b16f9e5-ced8-485a-a7aa-1b14976ae293"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0e54e42-148d-47fd-b271-45e2af120c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b2e22817-6097-46be-a11b-849a59b97b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4ce3c2f-443e-46ca-96f8-d52847f2a7f3",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42475664-3d24-4740-87e7-889a669c0e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f60ae92e-a196-4d8d-8361-a1b235eb97b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f09d2f13-866e-44f7-b4f6-c803f5251b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "03cf104a-f5fe-4ade-8549-d5a86d1fa724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80901074-2a54-4edc-a4eb-ffa7fc28a31e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9991bdf3-985c-430f-bcf4-9f52454bfe4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f22b0ab-de5b-4cde-86f1-a5cb542ed5cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e689671-b758-4ca2-b46d-f978b5ad8e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d0225ec-901b-4897-bb78-6eaec6b3e57c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a5f7da1-fcc6-4689-b7d2-e88377735cdb",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ba39fd-eef7-4e2c-a91c-4f5a99ad0097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b389a7ce-7a97-4fac-9886-df61a68cba6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d3abfd-b190-4991-a050-db3cd9ee9e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f590536d-75c7-4346-ab31-8842aae599e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d6e491-b6c7-4cd6-8a67-2021e80bbe64",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c85d71e5-305b-43f8-a663-af0e7077be41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a69ab621-54fb-4ddf-8666-3c5997b3d093"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f0d422c-6338-4b78-96fc-d0cee8949d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "02049f9b-3bfd-4192-83b7-03403e2672a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a4e6f4-b729-410a-af12-a792f0bac9ad",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70bcc02-bf19-4fc1-86a6-344e2fd0a222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fc531bf-1d6d-494b-8d8d-e6b3e0e67a9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "468a6f55-ad2f-45d4-b669-10d8df2ff240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "04bcda00-299d-41d6-87ca-5604b6265418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93069540-f5a0-4cc9-a4a8-f32b3e369643",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb05416a-868e-4ead-9e36-eea5d130df60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63dd3e34-edb3-4987-bdb2-ab4f86223649"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61e17a04-791b-46ca-bdfa-61e11685f16f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fba19b08-6673-4814-9aa8-cf0846a4ea5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60927666-6c73-4900-8ec3-91f96a1a1bdd",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfeea0df-444b-4d88-9d11-d02d2ea25173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc5ad26d-d8ff-4706-b71f-0676cdbc9bde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1febfaa3-063e-4ea0-a190-10cc2a6b9fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea9c8840-5a84-47dc-8944-12d531c6683d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "153dca5b-6451-4ca2-b77c-848de9a5e5b2",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b6e63cf-2dc6-4af9-ae6c-fbbdf7674f93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe8257ec-ec95-4827-94de-aad85bcf7571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baade8a1-3df8-4a3c-a20c-243a73530dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7cd5bd1-423d-4352-a54c-4a88a4b231d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92711677-7de4-4a62-9fca-b6bf80fd5e54",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4e4d00-c179-4832-b9dd-c052259806db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d7f9ad9-ea6d-4903-a5ef-417a34295663"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f96cc19c-6e7c-446b-89e4-6677f583b94b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "72d87cea-96ae-4892-ac36-2ad73ea8e443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf0fd1a-163a-4556-a5cf-78fe31446cb0",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e25674a2-ea52-4d23-a6d2-13a853ea02ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b4b9a22-a1ad-4613-8077-fd8ccd5993f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20d733b9-949a-44b2-96ec-c18e355f2934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "efab7f7a-d63f-4c1c-b795-f764e162088c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd7e91a0-5f6f-4abc-a086-9c841c634f5d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62e9993d-5740-404d-8744-1dd46daf2fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "830ba6fe-fd6b-4db3-8774-fb4296f203dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "094885f8-3753-4dc1-8f63-1da36372a35f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6932880f-ba97-4c60-8dfa-d039b10a0f22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d470cca0-addd-41f0-9e6c-58cbc4b7e9ff",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e343270d-6332-435c-885d-08fae461aa60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fd4a051-6754-47ad-aba8-3a8682885f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "054b9085-53d1-49a3-96f0-3d5b6007e4e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "fbda56e0-07be-4bf5-a13e-9a419b28014f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe0e32a4-09be-4a50-a972-c1a149f640a6",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d19666f-ab13-4b14-a5ad-91993f279bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f7d65e91-bea7-43a4-ad21-be5b428c4327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ce0006-cc10-4c6b-9f6e-b08bd1d3dc5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c6eb9da5-3a41-4482-b95c-675881bd1d3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "244bd11c-1800-4f4a-9387-1f8f23ec296e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "150e4558-8936-42fc-9d1e-e10cd5d56f46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6f6edc0-4019-496d-a470-8fba8cf44b5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f23d73-55e0-4413-8f90-fac039712546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "be364c53-ef05-4dfc-946b-7baaf8cc2656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56ef9eb5-1620-4f05-a903-dc3e2696e40b",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aae9f73-ad66-439b-a377-787b4b5daefe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e642a976-21ff-4ff7-9ba5-62b7d104cd33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a8a7173-6c26-4a67-9c8f-d6ba220a1f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "035c032b-3805-4d18-ac97-59545d158c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "754751c9-7534-4938-8610-c95450080e35",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9231cb0-6cb9-4c94-bcd8-68ef25adf2d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "911ff3e7-55c0-4ccc-bffa-cb7011c9649c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dcf0ea3-ef79-4c69-8854-83aa8c08a2ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "957aa58e-0c2e-41be-b9fc-532c414037d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c68975c-f517-4942-ba21-49320b81eb6d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de10f606-3dcb-46b2-8075-47c2e21fef3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f05cf941-2659-49bd-8ca2-65e8517d792e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c5a6991-3370-4918-8615-e9a7ecd30324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b472ea3f-2d6f-4732-ae2c-7aab8f9f3448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "003a97aa-0f9d-4c3c-b0aa-5be627398986",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b329bb86-4b6e-4aeb-83cf-926428a3784c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "325b22df-96a0-42ce-8250-8e4341f8d040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "746f798c-7431-401c-9d20-35597fa3b561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a065dea3-3cf2-4935-b300-4c510b9b5540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a4ee20-c73d-41b6-b145-8888704e644f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f156ca0-a9f4-4881-875b-4577c7ea522b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe2f0225-3705-4f30-9b33-0c343b219e25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba6da5fc-1322-4a76-ae62-ae225efaf2d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "999a7f5f-b9bb-4c7b-92cd-df465d8b00a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b1ad90-4d26-40c9-bedf-f5950e60444f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa5890c-258b-4c3f-ab8c-1f50d650ee38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69851d56-3a72-4d71-9faa-71f06f58f1ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67346c0a-0ab5-4117-b01e-4860fa7993bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4fd19d8e-3f19-41b2-8aa9-b081c82c6ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3458b118-b91e-409e-9e99-d0a3fec399fd",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d13efb0-64e1-400f-a8d7-20244bc22abe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "610d2d63-a60d-4c5f-864a-15cde3ee165d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83067786-e98e-4665-9a79-e6ef94aeb799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "1559e230-73cb-4070-9b5d-4292fee9faa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad3ce83f-f065-4d42-adb0-8723c50abd47",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f6511b0-3683-41aa-a3e1-f1129dba010c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a1ae8a6-d245-4bce-831d-9e976796e1ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5444202-098f-48fb-8bf3-97d6fc264748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3b5d605-f8a4-4c18-8a27-9d7c81e8a74c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2acce81-a0d9-42e7-b6b1-aecc8df2fcb0",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55b7bba-90d0-4b3c-88d7-b70bfd6c5fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2c0e624-a263-4247-94a6-cfbba4cc3330"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f0a7a4a-1575-416e-9cf3-fd79101a8bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "edbda32c-8a7c-437f-9455-ca940bb599f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bebbaa81-d9a2-4650-94a3-1e8140998373",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee8c7ed-9fc6-4261-bd1f-fb0b78943125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70163c65-1735-4177-a030-39d6cb2dc3e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff753a7e-84ee-4a22-b5cc-08de2d76988d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e0666a2-9ab4-4e87-85b5-593b38baa221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e455fae-8fc5-4f5a-a6ff-e0f9c02e53b1",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "375724da-9416-4612-831f-04f3513c7ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b23ba31-eed7-4e1a-9a76-789452861c6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abd82a3f-f649-485e-9d64-fd5ad1995fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0622c86a-d62c-4576-ad1e-e2314e33b9e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caec35a5-aa53-4c9a-b942-80ad8fa45bf1",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c36f671b-4fad-48af-80b8-5b64a0f044b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e094f8d5-2672-453a-87b5-099119d1e442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0456ecdb-5910-45d5-ac32-faa83fba0ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "42207d2f-d2bd-4f4c-a2ad-e40eeabc1ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f8d96e-1055-49b9-a8c3-2d54a8df9589",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb946f7b-d19e-4487-ad72-8b9cb6d1111b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "907be0da-6f2a-4741-91eb-00dfcf931f92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cab5adc6-2f38-4bd4-ab67-40061659b18c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0e859a4a-9e02-4d9f-ab70-afb380dd1779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0894efa7-72cd-42d5-9c0a-dcb5b4e9e414",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "799b8cb6-d7be-401e-b3b8-0221afa00761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc34ba3d-eab0-4ad9-90ea-c4825cb75f3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ddb7541-68d5-4258-9de4-f25279bbc2f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d643116-394b-4280-ae72-ad55d5f05341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d5db88d-a987-49e3-bcbf-f718d4987f24",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21978f95-a419-424a-bd12-ca517af47afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa8a75e3-c9cb-4af5-af79-1f60395ccb7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ae82f6-5f42-44be-916a-b80ba98f22fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a30b43d8-ab3b-4ca6-97ad-303ef953714a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afd70f46-96d4-4372-93dc-6778c23f2472",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "360d450a-42d3-47b1-a288-b75291c19ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f658d128-eace-4966-99c6-3986065ca12c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9509278a-65ca-4432-a2ba-c03934ff7fef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d01c7333-4df2-4566-8a4e-d4e44c62abed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "379748e3-4e34-451a-bdb3-550f4f797a0f",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d0cd9b8-8d2e-4083-b243-666a3eaff744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7a5ec3f-7901-4a28-ad40-4081f9535720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5daa21d2-29b0-48c9-b0b7-16b2f6f4969b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "419cfb86-e1f8-4180-910b-f0b2e80cff57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1df16e46-67ca-4728-91c8-923c4039f35e",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a83ad22-1d68-40f8-860f-6818fdffcce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffd87b87-85e1-42ca-aafe-cd2c8dea08c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa7923b6-ded6-48cf-ad2f-c67a7ca5ad2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "be1bbf05-3cfb-4426-80c4-82a662bc65c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdcdf53c-50fa-42e4-89b2-7b8cdec104f0",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de836d7-fff9-48e6-be55-fe0756f8a50d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47c9f047-aa65-4964-9365-3a65cdf13ff2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d366f8b-a9df-4d73-b5c0-b8de346ce028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "9ee5a640-645b-4c50-9fc7-eb2eed3a7a9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "875f3f39-ace3-4e91-9fb2-7fae6de4be7b",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1bf8e4a-dd75-4755-85f1-200e24484630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf15ade1-d2e0-4367-bf72-17cfb963c6b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dd7eca4-2adc-47f7-8956-069d2a184f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3649dc5-249f-4876-b053-57c1408ca249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee4bba9-f2f8-428b-bc40-f4b07c669a73",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "999fa32b-b20b-458d-81c9-e2d12b41c56a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "930cc0e9-e8ab-490f-befd-63412b9a7004"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04df9ac2-fd6b-48f7-af9d-d669d2bd01e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c7ec9e6b-5b50-4ff7-9389-db2863ee9cc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19777b63-d545-4835-8fd3-2a272aefbcb0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c65f8b-29ce-4d68-9cb7-eff403fb531f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "738bdd7c-e5b9-436a-8044-d80397908df9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6654392b-0b18-4221-a5f8-9eb66fc9880a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "050d1d06-735b-4abe-acea-d99e643a6e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79577b14-d250-4241-80c8-d4b6d0bc5f1a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b1715a5-3d1f-40f8-9b69-a7bda6cde678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e854c122-e8f1-4e38-b587-8eb5bc6b5dd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb38bcb-dece-40f8-b393-f69effc1bd9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "61caf3b6-3172-41c7-a068-0d9a4f4fbcfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d6b81d9-86d4-411e-b57d-408da6b53e62",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bce6158-2d86-4481-962c-b7ada873aeaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30bf2b6f-7980-498e-aeb4-79a68e6501a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ce3bbd7-712a-4528-ab22-edbac1829a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "159ac2f9-3796-4be6-b3b8-0e98b19356f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e849bf-4ad3-4f22-9449-9b39d5b7f20a",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3810b28-c464-427b-bda7-1a632e837bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2780186e-3751-4bf5-9e3c-694a6cef7f63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d38c20-0f38-4367-8703-fda6444c0557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "edcf8560-d973-439f-8443-d78656ee7148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55cddb55-f503-4b9d-8063-a88ad8bc27b7",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93de127c-d041-4ded-b831-a844a43971ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3da3ed17-d32e-4dc9-b9b5-35cbda173c4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4cf6bc2-16f2-4d0f-8f6f-02a271701a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fa7a178-c949-4f72-aad6-4da35d7219fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28db6728-7ad0-4290-985c-a9df4d4ee9e8",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcbbbd89-9e58-4df7-9791-9d82f3594014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4053de17-b8af-4b32-b577-a3e9f54fe295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8034dac0-381d-410d-b547-861969c1d0a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3624a527-d9d6-44c5-9501-b9201c9704f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278c91dd-a751-4f70-8b91-34e3957f5751",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e50488-87c5-4668-bb57-331cc30c3481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "416317d4-2e6a-406c-87f0-19603312c7d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85ac6459-4f16-4854-9391-04232fd74bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d941b7f4-afa2-4190-a6a3-d8dbd01eace9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e92045d4-a623-421f-b092-52abbb887a82",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf4e1fcc-66a2-48bb-92bd-caf2a4d1c2de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d65f89ee-03d1-4e9a-9bef-3b56b14574a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c7d5d3d-fe0f-48e8-bf33-8aacc2ba67ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b479d1e1-5c50-4c7e-ac1e-440f27122109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3911e92d-ec5f-449c-ac0a-91caf484ea3b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e31fd9f4-7c4d-4c21-bc0c-b5d7234abc59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e83460bf-1dd3-4b8e-9c9f-74ddcdbc9ae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc81a778-59c2-4d22-aaf6-6eef5d1bd5ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7c7cdfe3-6d46-478b-a1c1-05140b6ec5ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f5ad09d-1c0f-410c-931c-4e16a0567186",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a70929c-7ee5-4c5a-8d40-d5129e29cab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85aa3058-66d8-4f64-8c84-69ee15f9c290"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f728afa-e624-4e94-b4d8-88099c604bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "08fef6b3-6678-4297-a827-3ba4f8726876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b42054ba-eff0-412c-93a4-50e282561cdc",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00c17eeb-f203-4d2a-bc62-bf93a1a911f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c46673f2-c978-46a9-82a0-8f620f5e3b00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46ed2b83-864e-4f5b-ba67-514be3262f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "642522ca-2eda-48d5-b409-c89cba5d9fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7983500-50b2-47ed-8989-9b1e2a3600d2",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee56e65-4dc0-4406-80ab-bb4c8abd23d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bba6e0b0-403c-42ed-b793-bd1688332830"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5375f34b-08e5-4990-8b93-ffaefac56fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8108089b-3444-4ef5-ab9e-95fc4ae5be88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f6f0dd4-868d-400b-922d-5e9ad8033128",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1df716d-0cb2-4abf-82f7-b1561c2dba20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a783894-ce43-487a-9324-a8fc401fc03b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57766907-4195-4fc5-8249-7ad19c837d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed6db864-a5ad-41b3-abbc-b1b671027714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26ca0e11-36d4-4393-81cf-b519c57e8238",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d34a2f43-b3df-4a54-b36e-9deb9397e286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c6ebbfd-7aae-4534-a5d6-730cdc406595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "947b135c-6c86-4da6-9558-6af81c456705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe015937-cf76-4b96-bb80-54900b8ac900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c2449c3-69af-4a7c-9f47-5d429ee121f5",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47c5944d-1d1e-40ad-b110-2ffac102f52a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90fdd3fd-9f44-4dfd-98fd-a3e21c6d507b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9212b929-250a-42a1-8611-d6b371dc16dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f81685b3-894d-496e-a406-41bf560646b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e159ea05-e6fd-4134-afe0-d5d7084da066",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ef3a25c-cb29-41e1-abe4-9544ea2fe9e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8850c6e-ee62-4b45-85a6-5e159e76d570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d520f93e-006d-4d05-8db8-edbccba90bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "47d63909-5ecb-48dd-a268-e394e10400f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d88a5f1-078d-45e0-bc7a-6040bad3f6a2",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdcf13a5-d434-4833-b52c-6d4f27352534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17769982-48fd-4678-803c-9ad0d2a6f387"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1f9618e-5618-43f1-867c-ed03271f0910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3379e36-79ff-4e6c-9670-fbbc57d07646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad0f0f8-50c9-41de-975a-a808f9d21761",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea4f80af-e61d-4fe8-800b-47d16d10945e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51aab670-9f0c-4e2d-9144-679b1dfa0156"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b29b006-e8d0-4c45-8a3a-72e8c6b5b5e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0d72ecb-41b2-41ab-a420-4eb299bf8003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d37feb0-2167-4cf9-be05-f9656b214c78",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd19325-bb77-4344-8d2d-ad5e29929ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1287e6e-28e7-4cea-989a-5c2be7c33ced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b07f33-dc90-4244-8f4c-dccfd610704e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "20127927-54cb-439c-a2e8-8a2e44ff688b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3cd3a3-52d4-4e0a-9d0a-ecf9c99fc154",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4216eed4-4a75-4454-ba88-260bc76e46fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e405ef9-1c50-44dd-a008-576699890632"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d4a9dd9-8fba-4e73-9e77-33b54f3290aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfc257a9-be75-4f15-b034-a71b18b1d017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b07c3f37-20f0-4226-ba81-a32468222860",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed23d553-f0b2-4a7a-b4f3-8b26212b6a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a8fb623-9380-4962-9adf-d89bcaa83c31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb8b1ec8-73f1-4f53-ae21-3b224091fd58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a15a8bf4-4f0b-40d4-95ca-10be9852c3a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aadbcc8f-8c1c-4007-9c93-36ec51d6390b",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fcbe15c-39d1-4e7c-8cbe-5770e5e848ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b11f756-6cb3-45b6-ac7b-670db59796b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "664225d3-a20a-4543-8617-fbc89d4f408f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e0821877-03ac-4848-99c7-00a7848bd1ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f4cc65d-b720-4d06-8784-51d084a7e17f",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b99baa37-05c4-4a03-a3e4-7ce2428aa649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a46f33bc-29a4-41dc-89e0-2012697860b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36d45c5d-f2cf-4a7b-99bc-fcd1274cbf0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7e85b52-2fa3-4bbe-b0be-b77931a6a80b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "403eb0b5-b3a1-4f4f-ae9a-72845e6867ad",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30137c36-0fdb-4785-b49f-7c45d2aeea7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55bebc24-5024-4501-bec3-140a6c58ae61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd90e4d6-bba9-4a8b-a0eb-cbf31b541123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf9dd6c3-c5ab-4d9b-926d-32598a0a5d88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f368b3-6d59-4ffa-b516-44136bf251dc",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aa7f2f6-f4eb-4336-a0fe-338110d32cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "665303db-4712-489c-8376-1df392309bee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f036e1a-8f1a-4fad-9f8c-93d83dd7fa9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f074c770-bf66-4b66-81d7-635945c52b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc54c07-f200-4c74-a114-32f42922d9e1",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da62b43d-3904-4586-af1d-fabbf2727904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28cdab2b-7230-40cb-a507-d93fca962816"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a37dba9-6909-4f47-b3fa-b7aed87203d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "924a8116-544f-4aab-8c60-7692d3fcee8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973a429b-83e6-4f31-9d30-af08a8c7a398",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d8ef351-4a8a-4750-95b4-50fe208a4fc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8332fb6-8707-48ad-9fc8-c6aba7757c42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c678b86a-c0b7-4b3f-a867-dd9ba961fba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bd52238c-9a41-418a-8a66-f2defee4f285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49d9f4ca-d092-4f22-a89b-f31f5f8ee137",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af1cecdd-c0a8-415c-a547-4cd168276050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87ffb3a6-42d7-4099-ab72-2b2ceba5d079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e863db8-ce59-47b1-8d61-3710b11ba335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ece39075-7d3d-45be-a2e2-040ede422ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a649a316-0834-4438-9ec2-7db05eb3f8b6",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de8ac36-4405-4da1-bbc0-34b1f7f84b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b1f531c-0644-4443-a701-8bd21ce36d70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0c6cdd1-de87-42ce-9431-a2f27b38c2c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "139b9ccf-94e3-4d04-be56-76d6d1751d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cacbbe24-d928-4443-8490-de02ad4f1c71",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd148142-3384-42a2-93a5-ed7e4f45c152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa4c21f0-ae8b-4d08-955a-0103d8f03b5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00955299-7738-4b20-ba00-b92c1302ab31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2fa2e04-4eda-40c2-9b03-d7947ae20a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24696272-b742-4ce0-8d3d-768545bad137",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f42912-fd0c-4196-a4ba-f19a10820fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "153bd7d3-5c9a-4ac6-9da1-e793ffcd5328"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc29b6dc-3cf1-40fe-9f66-f1605c1c375f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "842a4dcd-e9cb-439e-8563-1df87da54817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d73d62a-3fa3-48f1-a3d8-2f1ec0c7cb5c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77156616-b586-46c5-b95c-6e34eac7f4f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a7ab42b-9fc4-4877-9a11-2dce807c6ccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4cff32f-17dd-4e16-802d-53a5372290cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ebe2e5e7-9793-411e-bcd6-470845195418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e68f658-5351-4a49-ab1d-5d41d9fc3212",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a700ff26-530e-4b2d-8395-e0d1123fe02f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1feab71c-7165-4282-aa55-06dc7563e8f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcbfea41-5f1b-4b29-b3a1-1d29c1fd0c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2431965-7fc5-4c3a-ae28-8e66f2420a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8285656-9535-4a71-8d42-7ab1999564eb",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0a70267-1511-423f-822a-a77c6fe66764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "90e6f2d9-4973-46a4-8f6e-6803036b13b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f80c8dd-d995-4fa7-825e-eb2dff87aac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "043bb72d-001d-419b-96dd-b12d389ff42e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "281a8101-463f-4252-b8bc-e873cdb5cbcb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f309f95a-976b-4093-bd9e-249837698c4d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16f6822b-af2d-4c0d-b21f-140075a31de6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "163093ca-5eaa-4ce6-9739-99ebe4677c9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b59b555-5abb-445d-a0a2-06261b694c60",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ea37165-28a9-41eb-a56a-9e59f325d49c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8fae0a72-a451-426f-bc94-e6a6cde6fc8d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b7ddc0f-3036-428c-8e23-013dbf2e199c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "adcd756c-9407-44b7-9f1a-1f00064152f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "64cafb6a-da11-40f5-a594-434d6ffb6bc1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "344aa09a-6093-4e4a-af6b-a51a2f44f094",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bd3758c4-5fe3-4df8-ae13-ea86e85ce661"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0019e700-bc1c-4aa1-acae-eea0474ea585",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "364820b3-5915-4c37-9606-15a15ae2766f"
                }
              }
            ]
          },
          {
            "id": "01da4433-076e-409c-9d1a-0b86634db6b4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "32ee1e18-dcad-4f18-9b91-e7be57161baa",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "fca55e8b-a4c5-4785-953e-f27d6bfa50ff",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b116a294-a1fd-4514-9bbb-b7fa6bda0aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c3bba733-3478-4d1f-83ad-2a2c4edc4e92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99d52e1-3ba9-4003-8950-94adca7a80c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4350860-2a0b-4534-9d0c-e70a2cb66d45"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f3e9cb1f-6a70-406e-8adc-3ba10bae6f4a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "13020e15-665e-499f-bd10-2cb100cca031",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "353c9305-6924-4bb2-8ccf-352b87bd6d92"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13a09f8b-5100-4dc5-abe5-09f826c6aade",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "55fed58a-5565-4fb6-b84d-ad330b76766e"
                    }
                  }
                ]
              },
              {
                "id": "d363e850-5974-4a71-b0de-c03bc52d44f9",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d1c41427-b791-4a98-9077-8e3be2bdeebf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "373db8c5-b1d3-4818-afca-178d3ea78055"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d74098be-e763-47e0-a9fa-77f1e5c45778",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "22808fe4-1be0-4289-a5f5-f21eac0786d4"
                    }
                  }
                ]
              },
              {
                "id": "27c1b21f-7e4e-4ca5-aa4c-0bfd449904a7",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "45437acd-1c94-40a1-83d7-1f8b25b5cc08",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ce2514d1-8a05-4034-8697-2d03c164ead4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3556003e-0af8-4233-a2a5-cadcb8bf6d0c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ea9d1d63-06d0-4d68-8941-a38f04f69abf"
                    }
                  }
                ]
              },
              {
                "id": "3cbb702a-0be7-43cb-bb20-0f0bc7ecbc93",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "64b2656e-b0f3-4d85-9c60-42a012109bbb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2c23860a-f50a-4ca3-a384-ded9b64df4ae"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74a04de5-452b-4242-acaf-05c61942626d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "f80357e6-6065-4e6d-9633-48769c364af7"
                    }
                  }
                ]
              },
              {
                "id": "b2e5e87c-4e63-40ac-bd6e-92a5667a2883",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6278099-38a4-4740-a49a-8d088324d815",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7eedad9d-0fea-4fa1-9401-aded1f6dd4ec"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "576b0ca3-42d7-4a30-b124-190d668ffc89",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "1b864a3d-5fbd-4c56-8820-80576b4cf6bc"
                    }
                  }
                ]
              },
              {
                "id": "2f9016d4-4b64-4fe3-a80b-cb3fa4e0e7d2",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5db77aa8-07ff-4b4b-82e7-9446e7e8b1b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "36d3c4b1-21b8-4314-8d88-7a704265071b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9cd895b4-2194-4381-aa89-1ffce5901103",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2cf2cbd1-2192-43e6-ab89-dc6c30915721"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7b4ae9fe-f703-4beb-9885-0d40d9e1ebee",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "04990e4f-ecc2-4884-bc39-71fdb2d6aea7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0ee4eb4d-a35e-45e9-9501-b657df33f4b4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eb800b32-11d4-4964-995d-3d270c2c10f2"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "659bed18-50ae-44c8-afe0-a54ccd6eacda",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "1324fd3f-85ac-4df3-b5e1-e3da366cb1df"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2ebb1e53-30a1-4f9b-8dbf-e86df5f3b607",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9c542ec4-0d5f-4cf7-bc6d-ab952e2cb194"
            }
          }
        ]
      },
      {
        "id": "233490a8-9435-4a8c-8e1c-bc654845dad8",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "15b732ae-92db-4491-862d-9c5973448a4e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8006603d-f13b-4133-8a20-e000008e0f1d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a70c8c39-49da-415a-8331-a228198e4175",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf101cb-ab7c-4d34-ae54-c16967cd13cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9047730-ad89-4c2f-83e1-2985ca567c98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd7dc61a-905c-4938-bd26-c62acb1f80fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "06bc0131-696d-4f27-ab20-8d855afff223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4aef399-9f7a-408b-a064-3b8de36de8c6",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "970b186b-4e0c-446c-a126-cd41cfe1a400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3ad554f-d50e-4c1b-9b57-9441ee9671dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91c2bf7b-658a-4c80-a226-829c192b444e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "be743f06-972c-42bc-bfe3-b346d774810e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c85fab2-a172-4e73-8aed-a8c7c1db1a90",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "019d0c4f-d5a7-424b-87d1-aef2e8f5ea6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beefcfa1-6a2e-4e84-ac7d-c45c0bed4803"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "020ba3be-4e3f-4578-b3cb-7d8cd401bcb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2ab70f9-4e07-44f0-ac6f-b5a5070384c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e046e190-d003-4944-92fb-2b81e51f580d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d6f5a3-e712-4959-8fff-e26210aa662c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a8da1d2-df25-40c6-b2e2-54def480e7d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cc067cc-d225-4d6d-9ac6-fef3fe9ef92a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2374bbe0-e412-4b3f-b91f-ae49c74c08da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad6ab3a-3a6e-4519-9944-42c5bb1e1e5e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b61fb4ea-4b0a-4d5c-be2e-fe727607d6e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56a1a6b7-9900-4a4a-af7b-d834d0b4df68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d126f0f1-7726-4f5a-a558-e9b164a511f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f5a7316-3c1e-4034-938b-be4a5777a35b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19e33f82-6a4a-4259-915d-bab5cc234180",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fff1f13-e12e-480b-a372-56fead577a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0174c4c0-1185-43be-8010-bfd7593f7f49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35fe7216-0fae-451c-a51b-ad95a4aee2b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9da872bf-bd80-4333-87ce-fef5eb4a4b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47caafe4-e97c-4bbb-baad-157086c55e38",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e107cf-4d14-4b31-b8c5-f23803b924c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bdc8fc5-70d6-491c-8fca-88f56582208e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e292afb-bda4-4817-aa3d-5aa0870ca522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ddcabc9-cf45-43a4-bf4a-854bded482f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "841d4ac4-f3a8-49c1-868e-20c2e56ee9d2",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "944f3a4c-e5ba-4c4b-a44f-87f3ae3051a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3caf3e9-1813-4d20-8a57-d8e296ab3011"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87751b83-3d8c-4aa7-824d-420d24585c8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c695d39-ef76-42ba-982b-4c9ac59f742c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6f338ee-cac7-460b-80de-8be45ee33350",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "249b361a-56b5-478e-bc92-30a09550d92d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1f7f947-78e7-48a0-909c-63256ced4987"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f105a618-15f8-4195-be85-e7a16638c6ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d13516ea-e0cf-4eac-98d0-fabda6a5d9ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e1d373-45ce-44f6-b6a1-75602a2c83e5",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60fba6ce-a4ba-49fa-9c5a-c7120e509ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26db0665-2e25-4b7f-8996-327011bb5297"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "688ac9c5-d912-4e8b-8ace-b5516e247896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "062c693f-84bb-489d-bc1c-5dbe3bc41787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263105cc-cf47-4ea6-99ad-76342c05d6bf",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a858f29f-2954-4320-a1a0-3e95baccec93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "702facff-2943-45df-b4d6-c1afafc9009d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c56f123-fdb6-4840-9686-fa120faa3726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "7fdd1b03-92fe-42d4-baca-9500c33d766c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3db25e-30f9-498e-8936-c5f3fc7bf6dc",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fb1f90a-defc-41c7-bc71-781e250673c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40c3e3af-b220-4763-8da4-dc4469cbff14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75444334-c920-468d-bdab-fc74cfc9cd26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cfcc8f9a-904b-4d8b-b0c9-f05012cf8ff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74d7b74-dc01-4835-b2de-7198d443a7c8",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2096a5ef-56ff-47a2-8c5e-e39079e3d834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d12bb51-0aff-487b-bd56-045b8739bfe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ba8773-6277-4aed-97fc-84da4649e2ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9c9b5a4-4374-41be-be44-508ada69065b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c8465c6-2624-4669-97fe-267c1404ea87",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf9b225-71fb-40eb-8199-f6be185e4225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1fe44d0-64a0-4a52-8bbe-c4212d4fc332"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a2c80e-3d29-445d-823d-45b00e073a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a61b9ed-4852-49b9-b1ed-81292fb08444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c785abb-15d5-4e36-a72a-1658b80dc47e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f2b291-029e-4b8b-9552-7608a8c2733a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e361d28f-afc2-4117-9da5-45160839745a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa53b422-7fd8-4c96-8d12-cccacd35546c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "35774b89-9762-4b32-b715-f0970b8b9abd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1922335-3a5d-4f2b-940e-4dd51d4a385e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "639fb4c6-3e91-4e9f-bf60-91123f6eef13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be76a5d1-41e3-4c2f-bfda-b56591c0413e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "169ed56e-d23e-46fa-9b4e-28aa4e997d3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "2eb954c9-fb07-4d6d-9fda-56f122a8b601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "500221b2-3cba-44d9-9c64-ae08bad903f8",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab733ea-0cf1-4895-abca-efaf66eff8c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6590f560-fa9c-450c-a743-613cdf64fb37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2968e386-6e18-4714-818a-4a8b48e4f9f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e73f4bdc-1ef7-410d-8f1f-0069332f7573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30a11cf2-14fe-4451-bcc6-1b8a0944bf54",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98980fb3-54cf-4bb4-b390-e84b5fed4a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71c178de-72db-4cda-86c5-689bc853a0f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca2cb44d-06a3-4ff8-bdd7-781a153581df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1b5a489-3a54-482a-a4e1-292ac4ab519c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a778fe22-8d41-451f-92c2-436e368e9e15",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e1ad318-c95a-44b7-b359-db1ff181e782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f93be3c4-84b8-4c3d-92d9-89ef8fda0c0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93cac77a-9398-4c64-b38f-104b9f7310a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51880f27-3246-4967-afdb-69d054290e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7c223d4-6ef1-48c5-b50f-31bd10a43fc1",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c9cd7e4-3bdf-4c3e-8972-345ed813d760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c4674f9-8463-4983-a5bc-070eb8e7249b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "979d2ac1-442a-47c5-8a83-d89eb74387e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae2db203-5f31-4fa4-8196-230c27106656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b43d1a-d9d5-44ea-bf8d-4de1db4023d8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2e9d14-1ee9-4266-a90a-189869717a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f459e734-8f3f-420f-abcf-e936c5eb155d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046f4d14-09e5-45ef-9a07-66ff45651f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4e9a5fc-a500-490a-979e-1ee01f57b21d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c51ff6c0-0b50-4aeb-b626-e7efacc669b4",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17b18c08-5ff1-4ce5-aa79-5107e48e2414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37e2eb01-d430-49c5-94d8-2ecfc23815f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8508aef3-2bc0-41fa-a91e-bac176df066e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29a3c62d-4727-4b97-b554-6a7b98dbd1c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1db6d8-2c85-4ef7-a553-155ae6ba3dcd",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b5b1df-01ec-4d5c-a0c9-24255f25522b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3917ef93-2703-4d15-b24d-4887ba01c226"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b66b0405-da16-410f-b2d1-f598bcc70756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84fc3aff-9fae-493a-83be-f2f98a4e5e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4b41d9-c841-4b6e-91de-dae5d1954dfc",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "045828fc-8840-4223-af7a-b1bb303ebc5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2a0ba74-8025-4376-a229-9b0423f4f9d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9787e1d-339c-4db4-8509-874ba14c17b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82188348-afe0-4866-ac4a-b1bc3ee33780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff54c1fd-fbc6-4611-8e5d-ee3a2d864baa",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d512fe-266c-40fc-9b8d-ea6b8577e67f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c9f1321-13d0-4c6c-ae0e-62676d8ada1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9212bfb2-c54b-4497-9393-214ab0fa5fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d65526c-c99d-4382-9e9b-2b5b08e66228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14e6a346-55b9-43e1-a856-62ed652fc0e7",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a70d6a3-969c-42d8-8f43-fe5a94a4db14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31c90ebf-03f4-43d2-bd04-03337af3dc05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25f70f1-cae8-4286-b780-10ec6a0be891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3104e95-c981-410b-b501-ca9dd6d01240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b05593-f801-42fb-ac2c-9550631aa18a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae7867a9-0349-4d50-a757-f375c7c01409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c31e455-eecf-4132-b1bf-7fa9697c2f20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbc5de9f-7242-4b33-8dcf-cf3818f3a544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02a4d27f-a145-4231-867b-36818d2664f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1363529-331f-4d3b-ad42-f5f98c51aac5",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d38e9ce0-8c5e-4d27-bb2f-fb6f006f2240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c169d70-6ab3-409c-8428-d958fc5f37f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21aa4ca0-2a01-4e2c-b150-76dbe429abbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05bc45b0-8227-42f1-b62d-e7d565d56c9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e217fda8-ca0a-4aa5-80ca-c35b8229e4a8",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81584de5-0d34-4a75-b56e-128fde1e5ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d95e2e9d-4ef5-4364-9b13-575dd47a1edd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb80d41-6c40-4c43-b3e8-d94d6ab8fc87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41da8c78-5e61-4686-8df5-e390d00b61e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da9052f2-a855-49a9-a432-12ba89018344",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce4bb8e-5ed5-4e71-a641-252aeb52ea39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faa765a1-cb1a-46d3-8ff6-aad05bba670d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70ffca0c-7442-4080-8b6b-2b9ba6b8d04b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d06932cc-5a4c-4aad-9c30-ca93763064ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30a26695-7b66-4807-833a-9945cec21692",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f51e2a1-5e9c-483f-8424-abe7e1a3b56f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93c0e704-8023-4e67-8c65-9fad3ff2540a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac8aa15f-f47d-48b8-b304-19b0b5f4b5db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a65fcda-bc0b-4a01-8bca-29c9e6f46510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15f7d156-a2a4-497d-bb3e-162a7a442a47",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c65fad4e-41a1-4125-8d7b-57137779ba83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91429d73-62e2-411c-b6fe-ee6e176ac3ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d9f9234-4f52-4385-bb49-256289681659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "767197fc-5c32-43ec-b03c-8334d5135c4f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6061df4e-0d0d-41aa-9e08-7652cd472e02",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9932405a-448c-4ff8-95b2-ca1c21eb1308",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc82f819-52b8-41bb-af4b-17266b289d44",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ccf9153a-4e4b-443c-8487-757a9dd813f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af94fc12-1f5b-48c0-8ca8-81be4a09f81b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e92e4f4f-c05e-4874-a397-c182dbe1ea82"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e7ecd112-a578-4810-8f8c-18a0619575ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9485cf38-a755-480f-88a1-ca5fc9f07ea9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "39f47993-fc2f-4927-a99c-5f11ded90824",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f44d2f44-44f4-4a55-b234-8d0e1be5134d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ca77e442-e79c-45fb-a3e9-972505a7c812",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9c1a289b-4cd2-46cf-9295-ae537a911ae8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a8f29dbf-3f65-4905-9513-011fbeabe5b9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5b0bc8e9-176f-4cc2-8d77-7e3d2db65095"
            }
          }
        ]
      },
      {
        "id": "37ba1f5e-b54c-4d8f-900e-09f91c0e9c0b",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "650d2b5e-fde5-4d06-964b-dc0a1bb6bdcc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "45d8b2ff-813c-4ccd-94fa-a58e71cc9468",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "400e8824-46ee-4de2-b571-318783c4e32d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acec7a63-8ff8-4cd1-a3e2-6ba217fef8de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae5ec6bd-8346-4a49-b6a6-dbb307e5474f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56de579d-7879-4fd8-88ce-729aef883c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2042aa5-5bda-4cf4-9be1-57a3360e5535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f5dd9e-657a-48c0-84d6-18337e54eb82",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5a53b7e-5a1b-4b95-a8ec-2018c7cd6fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3ec4a43-7a12-4bf7-90ae-7a353febbf81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ce1e71c-0f3d-4954-96b5-51ba4606661c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "79c0021e-43d6-468a-b8e4-f59a12ee7221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82ff092f-7bc1-4c06-91a2-b8171dbc7488",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d12289-dba8-4e85-bdfa-25b8735307f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3df6778f-48ab-4a86-89cb-56eb3415a44b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e17acde9-2bd3-43d7-8e9f-9f47036cb9ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ca83031-9e04-48a2-9672-c11ef0153251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5182429c-0deb-44e1-8cde-1bcad704b589",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c136e9-5326-4bae-9268-2ab132220009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a4bdd7f-b540-496a-8575-51c586b5c6b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26ed29b-9f10-43c7-a5de-71ec8c61bae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "20ceaad4-6f9c-4acd-a2c2-7b70b322ba8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37dcb1ee-4635-44ba-b129-19da8688b261",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e7d70b0-f7b6-469f-9f7f-3f1d99334d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b9e56eb-79b0-4013-89cb-5bc21068e988"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8952c4eb-4c0f-4eff-97f8-ab8de1b02031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a67a5f6-8749-4669-b7de-bb8879e8991d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a39790f-d011-45d6-b234-20f8959e1b6f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b970b5f7-3091-4df4-aff8-3d4bba81face",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5b0c3ef-9d10-4640-887e-3ef6f98cf6cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0816908f-6167-4352-a5b9-948626ba609e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "62f4c30a-4860-421b-8e45-4af9a4dbfdf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb1ef6b6-ea5e-4d63-82fa-51b69c27bf44",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ecd9da-2c79-4833-9f5b-f4e3c4cb6f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b016bcf-c687-4422-ab36-c9e6114d2e65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e2450d4-679f-49fe-8313-fc3058eb5984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "86b1f1e0-76f4-4c81-8ac0-a95ab870f26d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ec527d-2bd2-4714-afdc-5e257ecf55e3",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a166c5-4f78-4bb8-a05d-52443b2b7d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a94d518-1539-43c8-8dca-8b8a770dfb39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08ff313d-c7f2-4180-97eb-1303dfaed9a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1396684b-88a1-4e9a-894b-9da4d0f1665c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44b75e45-24d5-49ef-9b77-29d08f0ae4d7",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1f0dce6-3345-402c-ae29-3931774ca93b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04e22d11-6c71-4e9a-8220-76f3dcc6ca27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c398c19-37b4-4f8e-9dde-5d9447dd55b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0e7113a-3e94-4726-91fd-3bf4a783d739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bed44d4-a2b6-4e79-a82c-84235b961995",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f05fcd3-ddfb-4153-9efd-54b2f02613e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f79c918d-9447-442a-b116-bf0fcc2fe688"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ecb60bc-cefa-4cc6-9ee1-3689d38efd7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "894020bd-e2af-4195-b122-72edb1fd829b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29c5f9b2-59b9-4fa9-9311-32ea73fe75e8",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "725e39e6-7839-4cc3-88b1-e0da5a5b85e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d888889-92c2-4d4a-9747-b0b39f8ba0c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b431155b-141c-4bce-9a3a-72d4c0af40b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a5fd793e-7317-41f9-8415-484b834612fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdd03884-58bb-4cd4-9258-0370bb66d4d0",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b2f0202-2e2f-4b87-89c3-aee3e4dc2901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "242edb48-5da6-4eb3-9d7c-5003ffcd9311"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a8c20a-a7e4-4937-b674-c2fa638467cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b7a1d75f-ae59-4af1-9f14-5e6dd107c35a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77779698-6954-42a5-a7f9-070cd4a32a63",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0081839-5b09-49dd-87a8-c5ca9e530ea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce8f2dc9-bb14-4ef0-957b-ccc2065c7ef7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa1df6be-9cd6-4e2c-aaa7-85c76d3e9791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a28de6d-1f87-404c-a066-b778829b9a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a315d88e-edb8-420e-8323-7e7f16d4bab5",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0460657-f0fb-4fa9-b87b-c5244dc2095e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "149ae975-4c13-4ea9-93f1-b6218c92fe5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ce6dea5-35f4-4da6-91ef-aeafc7eea08a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "74bd455a-6332-4840-91c6-8cae91783f5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fada2b9-6118-4f49-aba4-45421f5d5daf",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfd448b6-5cf8-453e-b73b-3e92a2ef9cc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bffe84d8-46b0-4efb-b9bb-8ccd2690cbbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74687cf0-291c-4447-a540-82fffa8b790f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "aaf8b0c9-94a7-4f8d-8fbb-a691691f8379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "444b7859-39d1-4180-b64c-1759a507adc2",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc2222e0-8861-4e02-bed1-4618389a0a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ee5a676-abfc-41a4-863d-b767ac1fa117"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ad5620-7a20-4515-b67b-a60edf35e4a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "32c90823-7551-4f95-afdb-72105c92a0f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2855c39-24e7-4c7f-93a2-b6c2cbe1932d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d915bd14-a310-4745-b7a1-6e927ad6df49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4fe66bb-0e4a-41bb-b1c0-173e62194b58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0960cf44-c0b5-4abc-91bd-853dcbf2b181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8fb4d86-3be4-475c-b999-1731314eca1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "168bc84a-f312-479d-9bc6-5aaf6b5ed896",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ecc64af-50c8-4f1a-9504-f9f4342a3b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c76b181-f7f5-40c8-8824-5e0ebd1091ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb34c3e-b4da-490b-b008-32fc5613b728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "128959fd-81fc-426e-b6cf-471620a0190b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "294b6fd8-3b74-4245-b4af-6a801aff59ee",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1083fef-092f-42e6-a397-381e8868a9a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b759f79-8d7a-4186-a344-f37fbbe6ae70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38185452-78e1-4c83-992d-b5683f18c2ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "457db983-7d5b-42e6-8a9c-8ca70052ef70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b42cd4-5c09-4184-b7ae-6ee4ea915066",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eec548b-2666-4f5a-9b22-2082cb577cac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27c385da-71bc-4b5d-a40a-5ffa0cbc7173"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d56f423-b880-42f7-aed7-03c4d750f9f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f49c432b-c856-4f29-a0cd-b24be79e6c18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ef2404-be45-43d1-a57b-d7d86ea938e4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "502241c9-b43c-4037-b75b-7d73b074b12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8a02d48-8d34-4199-9a89-88217142c4f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "264f8ce4-0a95-47a4-a8e4-2b9ca3467a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d54d769a-95a6-46ca-b10b-659b774d3f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a88cf1f9-30b6-4df9-a61e-32ba87a37c3e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce20db2-ade8-4249-a475-7c7f31a5b6b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9a942be-c649-4127-b54c-d664b03c7230"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d85ef65d-47ed-4c58-a176-2f4df2496297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4eed0048-1878-45b0-8c61-ba92d78a0a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24fa8ae7-5498-40df-91eb-45ac6a33a38d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "834356f9-f5b6-40db-9623-0964d457e4b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cabda5c-306d-4f4e-926b-4c234404dfb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a0f9caa-0c07-4328-9971-5d1fcf6e92ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "165d763f-3910-4c0b-aeb1-68990b5ff117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06c7078a-cde6-41c9-bc2a-cf5b6555ef5a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e18a93c-d855-4eac-a88f-1add5fa8686a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5a577f9-d29c-4a50-8791-91ddc5c7b9cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10df754e-2571-4655-b13c-95735206a6a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4eb700b2-3a21-4e4f-b92e-11554cb2e467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f6b85d-a095-465e-92da-ebbd445bda50",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "650bde03-8955-436b-ae76-e8180330f296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edfe4442-9dc7-4804-adbe-8bc0e777db5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acc91d5d-7802-42b7-9a3a-2a7a7a6024da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c78de742-23ca-4581-8391-ae74f1bd1f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d78fdcff-e686-4238-a869-6b4bb80c0fdd",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a16d3abd-b8db-4662-a4dd-ab1492d78236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efdf1c80-2b95-4800-8fb1-671005af2ac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae71948-47b9-4be0-a6fa-31642f031058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6a89180-4d9b-4008-93b9-bd2a32557492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf2318d4-c840-407c-95cc-af8de25d6c70",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5efbdf6-8aff-4937-afdf-3601ddf6273a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "251e9531-2835-40ba-a934-9a749159a59b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba16a22-b367-40b8-b46c-1ee488f3e51b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7360d69a-14c3-4a15-8ff1-25aae4255772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5463f99e-0b3f-4172-84a3-6aab93abe26d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f47e1d-0706-4691-b0c7-01316f7549dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "173782da-9276-4716-8115-e8900c3aaf85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6490f4d-39d0-4844-a10f-df2995c086ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68bc8d4c-0e3d-443d-9b56-c2b9f3e30059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7213c7af-ac81-44eb-9f71-be8d5530027f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c38d3e0-f823-4c80-9c1b-e2bbb9a8b23f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edab1922-6ab0-42b4-a668-abbe78ffd46f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "220739af-4362-40cc-a025-54483e10a1ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce07d46e-e3d8-4480-8e34-20f00d6ad09e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f595da49-bd68-43bb-a303-cf2a7a1e833f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "480abfe7-e68a-4d42-b35f-78497cff17dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48ce625e-2d45-40b6-84d3-b87ccbf3cdcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bfc424d-d433-46d0-a65f-d0a6daae329a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98b9dc69-2719-4ce4-89c3-fefc1e0fb03f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "197f8186-29eb-4364-8349-674de21f5a32",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93ca510e-6734-41eb-b622-6aef3988cdf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "819c35c3-70c7-4669-908c-886f51d34c6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea003f1-e870-4510-8890-cb5847ada8c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91fae69d-80b8-4853-a8fd-048cbcb180b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6007978-8ba3-41c7-add7-f98379497ff6",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87152a84-bbc6-4e02-8048-376454ce5f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70672ce5-ee99-4026-98aa-ae197f726afb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af7a395b-caa5-4222-9c0f-f4746da507fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68c4b29e-e4fc-4ba3-a573-5f647f137a38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b785446-46e0-4c50-9ec1-07b4194f470f",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f99dc41-bdf5-4756-87bc-c5cb142a7cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2696f5b1-4a38-4515-b20e-5947dc310c0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8c722ed-702c-413d-a5b8-62ce35f16422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "676adb25-2b31-467b-b1ea-9b12c5dfa74f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2450fdc3-b57e-460f-a0ba-43825d0a9c9d",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9655f29d-db87-4aab-9851-0cc9935d90bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4ed8622-261f-4802-8036-66b156f33111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8a6975-3223-4806-b8a0-c0ca68e7de6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1e18018-3823-4eb7-8795-0f28e4a2f9f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad201bc-da20-42b8-9cbc-984984e52a4c",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e3a1377-686c-416d-971f-4d18bcfb0eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2fe4a69-6216-428b-b15b-f08f72a09efc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01307175-f9b0-4e1d-bd67-53bcde4be2d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92e3db30-008e-4188-be1e-8312a62edfae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "542b1e95-4106-4acc-8ce5-9691a4cb3018",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22c70405-5bf7-41da-a75a-b35db282c349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e43a1a16-b90c-4754-8527-823d9722c63f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9f8f1fc-27d2-46fd-bab9-cc820f061b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f419fd64-2e46-456b-afa2-555ff91d3b63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b97ef8db-e6fb-4969-b282-e0b2344b8a83",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d691aacf-ad0d-456e-b220-6b52cd4eba12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dc96302-bb4a-425e-9b85-f6e70369e2a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddf68a90-af0e-446a-8517-fabf5e2acce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a68a9e09-bef4-4ec0-b8af-525789279be7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "06be72b2-debc-4d49-b619-aeef962b882b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7cf39707-b5fa-45fc-a61e-129a5cf79be0",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0031d5d7-7cf8-4836-8ff0-faa22b7684c9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a12fbfef-856c-4f83-9028-8af04a6b0c37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b0a51da-fb45-4b08-b5b8-8c5f2e3e3d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "55d8799d-5a48-4ba7-8c02-63c4644fc78e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b2a57976-1c50-43aa-9310-930ae9cb45fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5918d30f-2a6f-4ab1-894b-6efb2cb480dc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "db1fb57d-dc36-44e3-9d03-cbf6e4fabc74",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "430cb43c-2a3c-4258-87c8-98ab37331388"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "36e73d37-9942-4b19-b1bb-1eff8330dbfb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ccf7a5d8-0b73-4a40-91f1-29a7faaf814a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e4c0ef2e-0406-4065-80e9-d881d2ac1608",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ca7824cd-51f5-4aef-834b-fd13440eeaad"
            }
          }
        ]
      },
      {
        "id": "ebcce583-06ed-41dc-b25d-d3062ba8171e",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "fa4291b6-9309-4e71-8302-0d07f18190b9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f176870c-f97f-4b3c-9d9c-f5bab1be900b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "31281adf-bcef-4b39-ae4e-b0c26ed1fdeb",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d5e9a3-6299-42e0-8ce9-4f961fd6dae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71291baa-d9f0-4b84-8d72-9c0d90dc5bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab356204-5a2f-4148-abd8-194b238937bc",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed7e12a4-0379-49c6-802d-e829f0d3fca7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b751f2be-0d4e-4e5d-aa7e-93ed8fadffb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ef52d8-4d37-441a-b227-1704d907763e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "067679b9-6a78-455f-be1f-f69767695f05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccd38e3f-2c5c-4611-80d5-0c9a7cad43e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e46842-d5c8-4cf7-a51c-6ded5db406d7",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff50ff7-282e-4949-8879-718a8f8b0713",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8edf07b3-7556-437f-9fe4-f2268ee51e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "810cd091-95b1-412b-b55e-9956fb4e23a0",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d663e87-1ace-42e8-a933-0dd6fdb12395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73b82f68-e531-4a92-a60e-67fd5c73ab2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6059c96b-e542-4cff-8767-3036f7f67d3b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55d0778-ee7c-43d8-bec0-f3dce88bfed5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba699786-25bc-4f2e-b432-67a0aa94c621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1e8fd60-3012-4da0-8f62-443e25cf5d09",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b2aed0-e198-44e3-940a-200982132a46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffa520e4-6c62-40a6-9547-cfa71c3e680f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "331fd525-3b6f-4db8-9fb7-89e8983cd376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dbe011a-d27e-4142-ad07-f51f85e4d8e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67604aad-b3a5-46d1-b90c-b253155bb849",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f5ab85e-90bf-4d13-bad4-722aac032260",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72b4921c-d66c-4c72-9847-0ad52029a9ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "040c1c69-bc40-41a2-b9bc-6d38ba6e89ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba6db861-323a-40c9-b4d0-270f3a2311cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0159c254-368c-4f80-bc0c-d795850d9f2b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31676c8b-6e45-414a-8d19-940448a960da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25efab93-a6d5-45ed-9734-84b23cbb2128"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4539a2b-a9cb-472c-98fe-591b736c000e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a08ebcc2-32e2-41d7-ba33-45fd9119aab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e0781a-802c-4a7c-8291-839cfaa200fe",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c251fead-6201-447a-82a1-9102b99f2cb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97b0005e-4c45-453a-8a52-853aee3db101"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e07ac44f-7a4d-4a07-8982-b129b556c384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d965de56-c2cd-4095-8b66-ba8eb412417c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7821f5aa-5aeb-4c5e-a67d-6160bbf49308",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d1dd2eb-6328-4deb-89cf-e8d0c78993b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13f06256-a03f-437f-a5d3-42106dd30016"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac6cd76-44b5-470e-8413-997d9b448943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b979d01-95fb-4654-a574-dd545103221f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8709d4eb-8eb0-40fc-8807-07315d27dc5d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98fa1ab2-5316-454a-868e-29a00aba135e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f483b4f9-ad96-4ad3-aefe-f26af6017665"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53a99588-1268-4686-b9e9-9bd96c74c156",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8420c6d2-e5a5-42a0-8584-ee4d9ccadbc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d13cf131-67e0-42e5-9f02-1fef60bfdf7d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b0f4437-2c74-4c01-9d54-3ddab09224b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e121227-4ab2-45ad-b50e-df72a9d07660"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9296d648-7e3b-45eb-a17d-77e9393c4ceb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fc8849d-1330-4619-bdfe-7b38c97bf2c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67cd46bf-c5e7-4d83-8bbb-f7d51f9bb840",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bbae8ba-f4e5-4408-ac11-c6e68b547df2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eee8d486-784a-4833-9dc2-d92ffb64a5c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e1be1a-379e-418a-a1ca-0ad8ac63471b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f410a435-d221-4528-945b-852cfb334c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3701293-28ec-4ff6-980d-687a244de89c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a9ab9fa-e669-4843-8578-a06fca544fe0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb936ec2-3932-439e-90a4-d1a51a1fac72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72ff289a-4218-4f68-8a07-1f566f5e2bb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc103b98-e732-4adb-959c-09e5bbf2368e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f83e8e9-658d-4515-8a83-86f1a80af3cb",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c5f4503-0dbe-4944-a061-c06b315bc742",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "282764bb-3bda-49ad-a498-d331adaa6221"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade5303d-15e9-4dab-b666-e9ab1b6603f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8218bb6-4171-447c-ab3c-4245d74c0a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b5d5600-239f-4de8-9d1a-8e6c501d4f9f",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c59d867-ac4c-4645-846d-d8e67e1a95fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a81f6ab-fa25-4829-8905-10523165c7bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23572b5a-90a5-4b3e-ac1e-f256a2383b8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6be6268f-7604-4fd2-b0c8-95ca23e93330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dd19422-0272-45f5-989d-abc818741f76",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb93dd43-2eca-4a35-bf5d-b584434ec6f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68307abe-38df-42d9-bbbc-35e03de6d2d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22042da7-3230-4672-a24f-f3a861a84b3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bad29fb-86cc-4699-abfd-d9fbdb495236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b76e29d-dd93-4ba1-8e2c-814b82d8dc62",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f1b2f70-0544-4f23-bdf1-e25047593dbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b322f6e-d1b7-444e-a500-e7a092ec85ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8fc8648-803a-46dc-abf7-69484ca37749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d84409e-9296-44ef-a20b-78b6ca7f3ff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08de7e4a-9f1e-4e43-a9bc-c6949f14f943",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f3b4b5-7aae-4d55-8983-625157cfde66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2da79a68-83af-4abc-9e41-a51eaa7f4527"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f013e9-592d-447f-9876-1339f8b7541c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73ecdbad-55c3-44a8-a259-175fae71bb5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2890dddc-d65e-461e-992f-360e409110c6",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60c9d35b-fb4e-4f8c-94e6-ce107aca3cb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58f63397-f574-4cef-805f-29c1e0066fe1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fef6d7d-1d0f-441b-9c43-5a7e67ea4d52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a33a619-8628-40b5-a274-897f8d7479d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c90aae0-f701-47aa-9ae3-a6e3f237d562",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07a4788e-92a1-40b7-850b-0680b661b34e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07d3c5b3-750a-4d1c-b3ea-b83780c8c414"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5524e2c-1035-4e0c-9ffb-86f4ddf03a50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f3515c0-44f7-4190-a045-4422c58c3cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "759b3cd1-8eb5-47b4-8cac-7b7906480ef6",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abac2683-9b50-4c24-a35b-5e244a36fa65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6633cfd9-22d9-4b68-9e7d-834a6bfa8c4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d467a742-beb8-4f92-bdee-38721cb2cfb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56d47e9b-7c6a-4570-be17-15e7d3fd1566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ebe4c7-38df-47fb-ab87-7fdffd6f090a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15cc21da-da11-4a41-9e90-5847536ddc04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8d580cb-593e-4c60-8ae8-8e2e4461ab71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2653223c-c6d6-48b2-b932-6f4ba308cbc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2229fe9f-7554-443c-ae17-e76da8df5fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a260d08-180c-4bfb-abe3-51986d811d6d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "067cb32b-ce8b-414b-b4a3-f09ae9144de5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bc59566-e960-4ec3-bb10-59347c910848"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d9b223-d2ea-45a9-9b27-907e5b536179",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7143d59-fc3d-4246-ab75-3dbff884c044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44b9189d-b6d5-4f0f-b25e-62997f47fa6a",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a519794b-d44c-49f3-892a-e6da05a6037b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7788c04-11a0-4009-bd62-6ddc804bbd91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "198263a4-d312-4efe-ac00-e14041edd83e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61eb0900-090c-4273-87f3-80bf798e66ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "152fdce0-9ed8-4820-a49f-7d3fb4c5172a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f7ab17b-887f-41f8-9530-a5660e758b75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbf1bb14-5a58-47b7-9cfe-6a88627035c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8deb917d-2a5b-46f4-b3f1-a8a3a0dfdb88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deb1d6eb-2f83-4ddc-a48e-f93f9093de1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3da8e47e-4634-4774-ae3c-12f31a46811d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4ccea97-d992-4c23-8eb3-1fef80dcacf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b69125ab-0e3b-4b4f-bc4d-dbb798a66392"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab116e1c-6ffd-4533-866f-69e4e5cd21ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c46e8907-1672-4e34-a30d-d7dd26e5058b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b29e37d0-15b4-4dea-aaf7-c1d6a62872a1",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48755374-c57a-4df3-9b0c-f906bb66f17a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "553de7e8-239a-4356-a079-fe96d687fbd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d283ef-7fd4-4321-ac33-d7f286cf7d3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca14745e-75b3-4389-993d-fce381c16cf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1296074d-9657-46b4-b4b2-8fd67c3817c4",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "957b5c96-bb16-4912-b3d8-50095486e88d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4df515ea-954d-4025-b334-0839453b8e11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d672da85-b93e-4a2d-ac00-d6e27a31a469",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99d3aeb8-f459-43d4-9b72-f856a185b299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74cbc2f-1a62-4d5d-bdae-9ec37810a00d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3449c576-4fbb-4391-b0ee-7cdce3087963",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d36d6974-f246-4285-9f89-55597ae5fd80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdfc2324-445a-43dd-8c5e-f8852118f876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2363e1a-78bd-4577-885f-4a5f50b40da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c6cd4b-20f6-45ea-bbe5-fb25c32ca622",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d76019f4-f8e3-4e59-bc9a-117c10890785",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d1ced11-ffe5-4106-84b6-060035470aa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f03c4835-03a9-4fb5-ac57-5509f4d9dbc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b4a1527-10cf-474f-86d3-3bd5b731dd8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9e5bb9a-72f2-4caa-9aa7-6d717a5739fb",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d741d3b-40fe-4590-8ab1-f2024dc3fcf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19fc6676-ba3f-46c1-85e9-b770411acc5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6a18378-163b-4e70-88a1-bb7585032568",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81c2445e-9106-4d52-8193-dacaad191725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c618e39-4d7d-4a9a-9005-473efd55ee64",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b392879-abd0-455a-9898-9a38aa7d9d1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b3ec66a-aff3-4484-a2b3-9c90314ea752"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e719638d-15d0-4fc1-aa79-825e798f59bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea0c7d0b-3b36-4794-92ca-d05985bf73ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce42fd2-2645-4dbd-9f89-13aaa9be7e1e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6078ba77-0ab7-4bbe-93ad-9f5e55e5c429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e83ba1e7-0373-41c6-bfb9-8cb4709f3a3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7e2da65-2abb-4fea-bc45-bc4693fb5b11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b364ba31-abd4-4f4e-9dc3-1221aae6d10f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0864e34e-85f7-4f17-9438-032cfc980f2e",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dcf09c0-4678-4b64-9447-a588bef8fc34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8112ce30-d644-42c2-90a5-817d37d287ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c802d7d-83e4-417e-ba87-2e92563986b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0a93a01-d45c-4357-af22-0747f13e7e2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "214da20d-e78e-4235-b6ff-d96204a54948",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b1092f3-38be-4a89-8d28-b6a5c7c61b0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e352def-8f33-4227-83ba-b81ab1984d62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05cb19d4-cf8e-4bd8-a091-cd353a89d825",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42efd9a5-bdd3-4dc4-8891-9e95a3a95ccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b36f6f-56bc-44c9-8487-60819c6a33db",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd55945-6d7e-4ef9-a9b3-c4e7eb59cd1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8c1601d-aa21-460b-ba0c-cfe8b4df64c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c531664-8c77-4a19-9e9c-d4859655c6dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79bb0cb3-5d60-48b8-a29e-c399851fc602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a7f22f7-c8a0-49bb-b61e-106f88e2fb5b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "622daf52-8fb0-4a9f-a75a-5a790d0ad750",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6ef9197-9d27-48a0-9138-5edc9db65e36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ab853c-f3f8-4b95-88fd-831df9f1c792",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce2240e4-6037-42a9-8944-75c105d040f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dceeb52-fba9-4f0d-b5aa-4d1b52eba3f2",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "104e8fd8-9760-4b4d-ab85-eb240aa83456",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fbde941-a300-4856-bb14-bdb4bf1fa34e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32f82a18-4d30-444e-b270-1c9458a243f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dc0266f-e716-4eb7-b7d7-699411168cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a74574a-26e6-4124-809f-889c5741394e",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b51ff0-e40a-4cd3-80e9-ef49f7f91fec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d31ca33c-7fc5-4620-bcd8-468d1526b80e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaaebde3-a332-42ad-8d7a-d82f4ae616bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92f5243f-45a6-4372-965b-f571fa60b64f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0381b1d6-c82c-407b-ae19-000936f7b04b",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae928aa7-85cd-48e9-8e2b-dc16b1938c86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dca6ff11-3023-47ad-a275-b966ddab58ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e328b257-e71a-4ece-9e50-f46122f9d9dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caed2c79-6026-4e45-9695-c789335ece4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f96273b-3d5c-4136-a369-d76ab02a0369",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea3d4bd-e9c1-4941-9cfa-3c8755f57bbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29d04eed-6660-4242-947a-9bf024b6316f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "745989d5-76a1-46fe-9502-07aa0f19e71e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b32dd766-dec6-4400-b477-1753dbf32d49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a829673c-3043-4bd3-acc6-8c46bb05352a",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b14d01f3-40c9-426d-8305-270fa4731f59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7368d0b-a113-4c42-88fa-bc429e1f91dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfdbc2b7-5791-4ee6-88dc-f6ad611513ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "239ea833-c5e0-4d48-a15e-28073e49a098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c808987-a010-48c3-8fa7-b56315239b73",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac03aed-02b6-41bf-a5f8-1f1f29594ed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f5c06fc-999f-4e39-85ff-737dd98f826b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5240671e-3ff2-459d-a668-9d6024dfe791",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bf2681d-56d9-4cf0-a570-bdf81aefa0a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68d11c72-fef8-4610-a6fd-a54a001c0b40",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de632b5a-201d-4edd-b612-e5efaefb9751",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "270af3c5-4a73-4726-bb4b-ff5c06931d26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2cba08c-94c8-449a-8163-9a3eff01fd97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3648db75-abd1-4515-883d-df7bcc9a72bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44b6721f-111e-40e0-b4d1-8ec113ba5e64",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f8fa6a-2b36-4343-b13d-d5f569c50f31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da198dcb-8362-4941-ac1f-9a49907c05ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "951633b4-a526-4d18-b40f-4b721e2ca5ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76d8ba0c-2f6d-4a1f-b814-17bd2cf150c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec4d504d-7bee-438d-b908-0f4c99562290",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20581895-2af7-4410-bb0d-6353085f910c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8435c77d-47d7-46dd-bd52-7a89dfe11f0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "774b1f68-76de-4b5f-b0eb-26ce2e97b9d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "def20592-9c92-4c31-9313-263a60aeb04e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b78dff78-5126-4766-9a31-cc36b02bb8e5",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59007b6a-b8e3-41f7-9c45-7825e9f981d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd400a7d-4299-409e-9fb7-565e97f16c2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91328e18-72e8-4612-a899-6314467536fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a99b205-2750-4609-bff2-88b52350edd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4733622d-12bb-447f-9a89-19872855796f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eb1b5b1-4709-4549-8aab-29ca00d9899f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1183bd16-1a68-4b0e-831b-12a88aa4296d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c2bbaf2-bf98-4ee9-8291-e8c9fdef0c06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17c7d632-a9df-456f-af12-7fddd1e36a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5779b22b-5525-43a9-8a9e-2e46f187c1a5",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ae2697-cb52-4764-950e-ed605d525038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d33d1ee7-3964-46f2-a19d-26b1b5c0d239"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "135ed3ef-25b5-4ea7-b03f-f75d318d2e90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "517e9873-1f17-4608-9561-ba20d080902d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "628e5b00-0237-4560-a256-b2225776ed63",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6166ec45-1e2a-4218-b5bf-f09864f8963a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f220bc8-fd59-4a1a-b5b1-e853f8bfb7d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "978a8d31-5a32-444f-bc76-820307479ba4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b462ce95-ada3-48eb-b607-368ca8bba3f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c741bec5-77a8-4359-8a61-50c66a0976c8",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f35df98e-feb4-44d5-82fc-0c914ec1aaab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8777477-4f53-4bce-871c-e2ad47dadaf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05bb49a1-4212-4bab-93fd-5f2333e8c884",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15903d42-67af-4d4c-a639-c4f135de3aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ea3cdc-5ec1-4a1a-ad13-16c9e61bec77",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e795980-1513-4bd5-8428-9a91f020def7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "187107f1-e295-407f-b7d8-75410531fa47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad153b0f-f98a-46c2-adcc-ff154e193d06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "218906f0-e154-49e5-be0c-960708e8b236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "571c752b-dd51-4cbe-8866-1e601bd3bdd9",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e1dbf50-87c5-4c23-9ffe-2ed11f42e95c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8506643-685f-40b1-baf4-b0dda1316b86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d74962bc-c5e9-47c0-921a-9856abf0821e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d27f79f8-dc0a-4bac-9fe1-2638aed64dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb8f8000-298f-4105-8002-2aa5b01803d7",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33207254-78dc-4ad9-87ba-576170c4dae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edd61809-95de-420f-ba88-2f7192ffe1fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c82d694e-89e6-455d-82a3-5813e00345c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16e06c26-bd00-459f-8a58-0a622cb4b2dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1ae8d51-aca1-47a1-a03f-250eb73dd424",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e21c2758-2709-4096-8c22-3a61dac9ee60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11c7540e-110a-4f9f-95fa-7352081a1b86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d79d7a54-85e5-4ee5-b6af-44afb122a32a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9619442a-38c5-4a85-8832-cad2aed7cd2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "244835bf-0bb9-41b4-a7fb-0a4a2440cad5",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ede102-98c0-4e84-b3d8-b78b9a0aaf09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2373af6-f440-43c4-8d63-b4059922eafd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce0e650-a5c7-4aea-8bf2-36b9d47b3993",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61eaa109-1810-4e43-9184-04804eec94d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfcc6d37-2b51-4eaf-9ccc-6cd7703b49d3",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4034fd90-c143-4f07-94ef-56110fb17736",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06f4debd-8dd2-4291-a33e-41ad3ae20ef2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e37119-c182-439f-976f-841da79b9ed7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fc2004e-b100-416c-8ebf-e23d6cc5090b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c071b12-a5ac-4144-ab57-0215c4da953a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac7bf533-4a6f-452e-a5e3-abd0d75bcbb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "383dd400-a85d-46c6-b108-62a860733474"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0164db0c-b959-445a-b0f8-a68668180569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89e314ee-bee7-438a-921b-206441c74f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe00633f-013e-4b8c-be50-015d12dc1312",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60aadbbe-fa8c-4e79-93d2-40159376d9d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfd385cb-f0a4-49f1-88e5-84563ef20e49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6102f04-286a-4ef8-ad66-463af45fca9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "862604a9-8bcc-4643-8a6b-5fa9a3e5f087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63fe355d-3576-4277-b6dc-4158680bbaf8",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "621005ea-94cc-4121-8fbb-badf2eb5992b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06fe18a7-7229-4b58-a8ee-814c702152bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9521730f-9c4a-4dcb-afa9-c2113df48c5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6290c7e5-6dda-47cb-8add-f29afe954a38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "510ee466-803c-4d58-9b5f-98ac74c86950",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31b5ee78-1f49-45ed-9e65-5b23d19d0b6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56ee2edd-daf7-46db-ae12-5b7e43176edb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1952ed37-5a79-49b8-8e7b-4f8200145e20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e07c2f05-53d1-4d9c-81c2-237c0b159e43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c48cb79b-0490-49bb-9210-f71b94a27000",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf379569-2098-47f7-a50f-709860b78e74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0198ae6c-307f-46e1-aa9d-53599a0f6fbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f7a391-fe8a-4e61-9fe2-285b3c4e95cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "274e56f3-e9ed-4e05-9f06-71e3567561f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef4d9dd8-933d-46e7-9a5c-31af927f352b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a9dbc0-c13d-4665-b837-0560da8b4845",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06cbd7e4-21d3-45f4-9f3f-18ee44863e97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceed2096-99ee-486e-ab82-4ab7de19763b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9937151d-ad3d-44f5-bc94-7177d6623293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac0dc43-4436-4cc6-ba59-e7ae88212401",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2381d82a-f95a-4d10-a440-d03737f3cbd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5f44d0e-e0aa-4a1c-9825-27672a11ef41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f79a7d67-8982-4a5e-a95d-907c8c766c86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0583cdee-bf50-4be3-9a45-36547591bc24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba9f0a8e-1993-4871-9724-c194c1b7bd37",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f082ddce-4e8c-4c8d-8f16-c025309c68a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aec685b3-3935-45ad-8916-ae919a97066e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b6c285-48eb-47fe-adc7-be72f8073f51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37cbb6a2-8ea4-4f9e-873c-9d400878d565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2117c1b6-183b-4caf-a717-3f61f69b5dd5",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c01baff-c926-47c8-8605-2f36af3e7e87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19e8e5bc-d759-4514-aef3-398b0d2e61d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e31ca008-cd34-4b89-be60-0624673cc40a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cdb9689-cd5a-4c77-af4d-f239cb47406d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30fca070-f82f-47b9-b85b-825b34d997c3",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b641d0e5-faf5-413e-97fc-2d3ddb2db39f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c596c79-9e44-410a-abbb-6bd950a36339"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17da1c27-d4f8-4ec2-b979-b1f18a64d6ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fb70fe4-b32e-4642-82d2-428bec91d88a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3980a0ef-ea5c-4a8b-9780-63894de3e56c",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25bcae9e-7ecd-499b-bfc9-130dce5c1526",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6f5dc6a-3bec-4c6e-93b9-519707b78615"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da2a0bd-d014-4edf-a744-f7b33fc021f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee9a10ce-de23-4a51-9524-6d2136eac83b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0b1cbb9-9dd8-494d-a226-765527b0463e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51bc9da5-bb2b-4363-8b2e-ec760fddf295",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e969fa16-67bc-4de3-a70c-8492e198bdbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e133c80-c1fe-4b2d-a9c9-ce270cbb27f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1ed3ec4-d3ca-406a-859f-087a9f325a3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe0c472a-7039-4871-bcde-69b93b317c18",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7baf56a5-cb6f-4def-9117-ed8feefe7aeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a16d8898-6ff6-4dec-95e4-f2d5280e378e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21bac209-6d43-479d-a235-8f640abc5497",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a5fd63a-9f99-4397-bd36-063add8cad7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "666346bc-0289-480a-a8fa-bad771fb81a3",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a001c9-2af8-4e09-ae56-59611b46513c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6444ca6d-3d68-4eba-9d91-b2a371617c48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c6b242b-5c1f-4aaa-a8c6-b2c9d095f5df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10291b52-08a4-46fe-85bc-1582d6076f6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0043f3d0-6ce6-49ed-a3c1-b4dcdbf8858a",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e13a873-c57d-4dba-9fbf-6c2096637365",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0265bb7b-b3b3-4756-8220-ce84b1d7adc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3769c16b-8fe0-41fa-81e1-b85a81204aca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b2e346d-ab0a-49a8-b797-93d5535f015d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b68dba31-cc2b-47ff-9201-4098ad116b4d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61c56dda-a025-44a6-9212-d700b40199c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dafa1868-501f-4c61-bbb7-e05eb3015f73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e360762-24bb-4b14-bb2e-6f83d6bc24cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a98522a-877f-498b-bbe7-8842bf4c9de7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb420b34-bca7-426a-88fe-09c8d2592cca",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f4075f-906c-4626-9def-cb76233a330a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "342dac36-2b78-4240-b131-aabc170b4072"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e71df7-5fbc-4d41-bdbb-54f2ad5b5a78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e02cb5e-095d-44d7-9c78-214b79c4a534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6809ebe8-a6ef-4f74-ac40-0abc14ad9bdf",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4167b58-f3f8-4f09-9e5c-fee63f5d1da4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08401552-123e-45b3-b7a9-4667bf39d0f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a36fd6ca-5cf3-40e0-b1ab-7c2e33e2bb27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b7f3535-8f13-4279-ada1-49193821e359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e3b8cc6-0fdf-42df-956d-346741049bb1",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c3b743-21c4-48c4-ade1-e9fec578a2c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5604e62a-3c76-4267-bbab-f06dd111085f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2efe1c2-c6d1-4198-b8b8-d3a149395f3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e958415-d082-4e31-afc5-1bff6d75bed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d05c9279-9fa9-479b-8aab-1e6eb8fc8f9e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d5ba4e-d7ee-4fb8-9e71-2dec34e6ddd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a95193dd-cd84-4b2a-9e5f-e53a6074eae6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d93f40-ce18-4092-82cb-871fc44ea105",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bef2f91-3c5f-421f-b0a3-b94a881ea475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28bc6723-9273-40aa-a5db-5de338307acd",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "229c21cd-1f11-4ad8-aebb-2800c6f7f1fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38ddae81-8e48-4fe3-9009-cc386339e298"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99cf7708-b475-4c4e-9eab-9e6313d7be7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e0067d7-7522-4f43-b995-1f9f3f286756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383fb140-1a11-4302-a84b-9ef739990169",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88725cce-d449-4970-a4e1-0389bbeb833a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91780eee-74a9-4004-8eb7-859ece7a598e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ed666e3-c8b2-41b3-b1c7-2f4e7d2ffa79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3b7abd1-24e1-45a7-9e9a-726694c28052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "479139e0-dac8-4872-a03b-4ce75164b930",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d738b6b-5e1e-4a81-a2ce-4426ed11ec6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e331ce72-5255-4381-98b2-9f99e27e684b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ca417e6-0bf6-42ce-97b4-bddb10eb3d2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e506cd6f-110d-4aa4-a7b6-ff70f658cd27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "520d1ece-f6af-42e4-94ff-ab86c4094043",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf135cb-7911-4836-b94d-a79efb94b471",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5de64e9d-cb0d-4469-a19b-8cba88507f30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e7a1102-2956-4220-934c-2a19d59967a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a09460c-2fcc-42e2-9c96-c55600e0869d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad62c84a-5a25-4508-94f6-5085bfa1890f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48055e9-40ec-4b06-a241-c04b3f960a79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6973d343-b56e-4267-a760-ce595772849f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "decc7408-71ae-4686-882f-b0fb2198a852",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4cd6b14-8382-41d1-9fde-b09ee27a1e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c0e48cd-64ae-412d-8f44-13ec9ab882e5",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35daa044-0022-4809-b7a8-a69e23e0aa6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2144fcb-3e7a-4228-a659-d88d91795598"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aefaea7-1add-41a9-aef3-3d1b687e2d0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "230a5dda-d2cc-4171-9772-2870290cf3d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c93ce3b5-29e6-4372-b442-d1ba0262fd60",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09985e1a-42e6-4ec6-9cad-2576cabef46f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b17f1e4e-4e3d-4d83-94d2-94119881e8d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bffbadd-26e5-4c4b-bb15-8304a950b40a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f34b8881-1878-45ee-88df-6f64b5c8b000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3dc3a91-3b0f-40fa-b947-fe22fc8a7e07",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8d7bbf7-ad40-4434-98ae-01a4c77a637a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5db83d2c-1e5c-4c83-8c8a-42563b336f2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f743b1ca-9606-4085-acec-09f88adb90ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33e0236b-09d5-45e6-9f36-fd7e4a33dc36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbe56895-cf87-4305-940d-ec798ebed9bb",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bbdef6a-d7de-4b1f-af34-e1e3f2b0428b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d55af81b-7ec2-40b4-b656-3959f1f4542d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8f2f39-8eaf-4b8a-b9aa-9c1f7543b0ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f72ab16-2bd6-4c04-9fe5-de0f185be83a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8421ddbe-f9f6-48e9-9b0f-efbf3b4317f6",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a257b291-5a47-4be5-89cd-cf0f19543f6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4612e632-2821-47c0-a0c8-09f7eddcc72e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edffcf63-83e7-4d93-9abc-063a5f6c562f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d98de548-2b6a-414c-ac8a-59d13948b298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce886f4d-da0f-424c-a227-860d9dfbed93",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3226131f-9b61-43b2-b2c9-447a64790d84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66131d5d-ba6a-45eb-959a-72f2a0645dd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b94c10-f4cb-4c25-84c6-15fbab39b594",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4565f2a4-3abe-4525-b5d2-5759554123b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ef8f8a-eebf-4c7d-b290-ba413efd9c54",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cbdc36f-f02f-4986-a2d5-16338f29c4e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc9ac655-fbe5-4434-a9c7-f95488a3beea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64789f2-b357-4bf9-955a-2aec6e84c083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d995299f-3c79-4fcd-9b85-026478653fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69168002-4d34-42b1-9271-af95950c4ee6",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee2d2d3-6f41-40a8-8f03-6b1235fcef56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d541740-1558-44d2-85dc-f4ec849527ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f5173a5-7a7e-44c6-a236-1031fbcc1665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5261bd8-99bf-4373-8b24-ac086cb1892d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02352bf1-c6a8-4cae-bd1d-c79f39b07b56",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd93d28-82a8-4138-b877-38477f7918ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de533f9d-f481-4f6e-99bf-83efabb7b0e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d3d93e1-6a8f-4351-874a-3cdbe65a29be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e045ffd8-8d1b-44ba-b7dc-5377241b03c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c585e0a3-3c41-42f8-a2b3-571b21959a96",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f274d182-69dd-4871-845b-2ebad7bb5e4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c375e1ba-63ec-4859-b2c0-c1957415dfcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be797bc1-420b-4b52-b7d5-fcf1202bc12a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "676736af-62fa-43f4-9f07-2b2e0dd3bdb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e02f7f47-2079-4f94-bd4a-169a45f639cf",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26bb348b-a807-49b2-939f-b01c1f4d5901",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18fc293f-1f23-4094-a042-d3e70f9f8f2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee550616-2a1a-41a4-b11c-3f81d9caaa54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16dba0a4-d7c0-4d7d-bb2f-caf70fa4a4ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ba2cdd-1116-42f3-81f1-4e63bdc92454",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f993a453-c7df-4da1-8860-0579dab21846",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b8d74bb-b21b-4975-9bf8-bae8e30df736"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a2a9e25-c510-4bfe-acb6-cbbae972e16f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8257f5db-8cf3-49e2-be07-42e3db8aa043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ead66b77-46cc-4cf1-81ac-4c65dd161828",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9d1752a-c184-4f97-824b-664bdbdee507",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "037ccece-2f59-418a-a8b7-0bca60d2f265"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3536695-3cdf-444a-91bc-85d9d32955fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "351f1f8a-9bdd-4513-81e5-b5f3de4995e5"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8599ef4b-c105-4589-a422-7687a44a7373",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cf4e10aa-803b-4451-989a-c8acb729ec4b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0fa3df55-a660-4c8a-bc4c-7ea59e59d717",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2288bb68-8b49-4f6e-8314-d328351fd841"
                    }
                  }
                ]
              },
              {
                "id": "6546afff-7f62-4d9f-867d-c1f79f71c4d6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "744e4488-09ee-45bb-a3ef-430611f10c06",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ad6f8d3-7394-4d64-a927-e1d17e2c0882",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d505907b-fbe1-43db-bbae-d73ce290d523"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62f74bd4-bde6-40ea-a0d4-6f1fd6530831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b352bce1-ff0f-4d00-ab1c-04c1b58385e4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d54f7f7f-62b2-4704-bd59-e9d1e8db53f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "baeeaa4e-db94-4d5f-8953-8e90ac7c21a2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dcf24e28-f85a-4d2b-a067-b62d0d01d869",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "210508fb-68f2-4681-a86c-553049df74e9"
                    }
                  }
                ]
              },
              {
                "id": "62944959-de7d-4743-8cab-202df9a9fb8d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b07b41f4-0864-4c95-93da-9e2780788adf",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "898e093d-9213-45b1-bd08-72adcf340995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "b8a64ac9-5d40-4655-a1da-9888024f815c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac995fb2-3737-4c51-a2e4-d4b010944678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5562108-31d8-48dd-b51f-3c41c124fc85"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "27e8721c-e270-412c-a3be-e74f5b742764",
            "name": "Positive Testing",
            "item": [
              {
                "id": "26fc4dd1-512e-462f-b352-0d6dab3e508d",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b4a2e90-87bf-4d89-a182-e592c42283e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "aa141f74-a9df-4702-8174-47fd9551b722"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4bc41b2c-243c-4550-bf3b-46ec8b1cfaf1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "19abb83c-45dc-498b-8dd8-3871f986f37b"
                    }
                  }
                ]
              },
              {
                "id": "15fc6f43-18b9-43af-8084-6a58e8fcbee5",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4f0d3b0-bd79-4d13-ad91-c589da4d0703",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "81958dc6-998a-4e75-a89d-9e17f573b325"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bbf2ccd6-db7e-4034-a4ae-9fbdf82a4b43",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "73a9199f-5b42-4b39-937f-a3c192bce306"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0a5c3617-c28f-4365-8be2-a2472d7858bc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "a9ed5e78-a4e3-4bd1-8322-03b93f7bc698"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "866f37a7-1143-4485-9607-55b7e63675ac",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "96426073-1e3d-42b5-bf66-18dd51268419"
            }
          }
        ]
      },
      {
        "id": "480f0d15-cef1-4ccc-a5ea-d29e9caf07c6",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1effa455-31c2-4998-b8c5-c0e12d43ecb1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9d6e3447-dcf6-4041-ba3e-720fd9c1f569",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "25d72aef-09cf-482e-97a3-08b616ca1287",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aaca365-29f8-44b1-8381-1366c0a1f1d5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fac0196d-d55d-49d3-a90f-0706d620daa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8002132f-711c-4633-9598-6b2113bcd7c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6e784401-693a-45ec-9543-8536d67044bb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "833f1d40-53ab-4dca-8a7a-d4e41a8da59f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b71f248d-2aca-41a1-ac90-f71bcfa9f825"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cacd98f7-4428-49b7-b838-1623a3d114dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54e9fb6b-4222-4903-a0fb-c2c537da40c4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4e85995c-a678-4017-a476-19b40893e380",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "074d5017-09ca-439c-84d4-c5759a387be4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "645a24c6-b049-45e9-b21c-5934088773c4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e5d6ff5e-e99f-40b2-aa17-78fe564c7a5f"
            }
          }
        ]
      },
      {
        "id": "ad748bbb-c722-49fb-9aa7-b2fe5cb2894c",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "b70db4e7-b714-487c-8141-978cda68ec4b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8fe8e3a5-b0cc-4581-bb09-25fb260a069e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f242f303-15d8-4080-8616-fb261abe5901",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af0210a-8e68-4aa2-ac33-080a9726d419",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3726a2c-ff53-4957-82f9-3cb1245e68cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "056aca7d-9042-47a9-8309-fca8edef4c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9542441a-ba63-4428-ab5f-533e39fb976d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b30404b4-d92a-4d34-89cb-3d48ddd7bbcc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "909b52b6-371a-4705-9a0d-2314eb5f47b1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "51d7cf0c-5740-4e08-9212-49d747beb453",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a28a9164-1c5f-4ef2-83f1-85ea7563d6e0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cabde3c0-9833-4097-8753-78f906c7d748",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e23a0a0e-d8a1-4a75-835b-328d86fc92cc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "54ea5c60-af88-4616-8a82-531f6308607b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c6160716-2261-4004-bb75-16000d83526c"
            }
          }
        ]
      },
      {
        "id": "bb688680-fce3-4412-b1c1-e8026926781b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "10af8f14-47e9-4ad5-81c6-fdc699f43a78",
            "name": "Negative Testing",
            "item": [
              {
                "id": "861b5616-4d18-46ce-8237-a903179e987c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cad2146a-be51-46a8-af28-f713017e808e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e18d897-837d-49a4-a5fd-db513c19b223",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "801c57d2-c73d-4796-b225-514152abc0da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d4f9087-9e2c-4ff4-93f1-461a05fd4f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d37d05f-ad0c-4926-8fe3-6a052e5c70c5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e538b2b-efc6-492e-b0c6-5f21c758e82b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f07b2303-ea58-43e1-83e4-50a43f97a265"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba523b63-2749-4830-a33f-498dcf9d30f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8fe29998-f66f-4a6c-ab51-27615926d384"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f483c5f7-7931-4cd8-bedb-1b98ee8fdfde",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b1c2d0d8-e286-4000-9f4f-0b50631b8807"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0154b7f2-a65a-4d37-b41f-81fca68fd965",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d0cc95db-f1b6-4f7d-9d66-f73aad5be728"
            }
          }
        ]
      },
      {
        "id": "a7826355-b779-4631-8066-a7c20c9d3c9f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "305db198-d09b-4eb8-a71d-0a36eb915828",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f39efccd-2736-45f8-bafd-80342512cae7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "5267da2b-19cf-4dd1-8984-1645e1fa484b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b38c28fc-5417-403b-90df-264bb860e14c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e1ae3eea-e31b-4938-b305-9f080583c88e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 68
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 824.6140350877191,
      "responseMin": 9,
      "responseMax": 10984,
      "responseSd": 2644.559888130401,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1697675621708,
      "completed": 1697675873166
    },
    "executions": [
      {
        "id": "2758c4cc-11ab-406a-8f03-7e36815f4b60",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1b680fec-3497-46e1-94a0-9dccd854d49d",
          "httpRequestId": "14176b8f-f054-476c-b51e-50cff11b58c3"
        },
        "item": {
          "id": "2758c4cc-11ab-406a-8f03-7e36815f4b60",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "cfe2679a-32e3-4190-befc-23b0447756c2",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 0
        }
      },
      {
        "id": "1e445292-d78a-4cd0-8555-e781d4fde965",
        "cursor": {
          "ref": "fc7ee5d9-bb5a-456a-9f77-31f18019e518",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "406a930f-ab9d-4f02-86ec-6d9692bbf080"
        },
        "item": {
          "id": "1e445292-d78a-4cd0-8555-e781d4fde965",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "70194da5-7b24-47ab-bc93-4bc0bd94a774",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "5ef8f63d-51ed-4561-b1a0-3cf468c7c81a",
        "cursor": {
          "ref": "a43c90d2-375d-4b5c-8513-11f462044102",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "df07f390-d4b0-45a0-8bba-b8a7fdc78fbb"
        },
        "item": {
          "id": "5ef8f63d-51ed-4561-b1a0-3cf468c7c81a",
          "name": "did_json"
        },
        "response": {
          "id": "ca02aea4-c2b1-4754-9fd5-7aec0bf261cc",
          "status": "OK",
          "code": 200,
          "responseTime": 335,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6beafb93-0b1f-4406-ad9a-52804ff5483d",
        "cursor": {
          "ref": "55e78941-265f-4243-9b5e-c2d459d12eb6",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4752fa81-bfbe-466f-ba85-acf18c6d65d4"
        },
        "item": {
          "id": "6beafb93-0b1f-4406-ad9a-52804ff5483d",
          "name": "did:invalid"
        },
        "response": {
          "id": "0af5070b-decd-43b2-80b7-bd8bd87fbfd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6beafb93-0b1f-4406-ad9a-52804ff5483d",
        "cursor": {
          "ref": "55e78941-265f-4243-9b5e-c2d459d12eb6",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4752fa81-bfbe-466f-ba85-acf18c6d65d4"
        },
        "item": {
          "id": "6beafb93-0b1f-4406-ad9a-52804ff5483d",
          "name": "did:invalid"
        },
        "response": {
          "id": "0af5070b-decd-43b2-80b7-bd8bd87fbfd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb53df9-8259-4f96-9e8a-f84cc5f14388",
        "cursor": {
          "ref": "7ed33595-6018-46d8-8e77-420b5be412c1",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "dc8f5b30-b566-437c-9fe6-16c51a0dd71e"
        },
        "item": {
          "id": "3bb53df9-8259-4f96-9e8a-f84cc5f14388",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b6148102-25b2-4c8c-81e9-b444f8c0cebc",
          "status": "Not Found",
          "code": 404,
          "responseTime": 95,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70fa0820-3b6c-49b6-bb6d-5940248f31bc",
        "cursor": {
          "ref": "56917a62-8752-44d1-a6d5-852457679c59",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "87d4a78d-3808-4064-abea-d29e3c1dc69c"
        },
        "item": {
          "id": "70fa0820-3b6c-49b6-bb6d-5940248f31bc",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "56694c48-da34-41ac-8ba6-c86c05f0920f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85826cd7-5b47-41f4-898d-dc190cdf3471",
        "cursor": {
          "ref": "df0eaa43-62d5-457a-a9bc-b5a59c0f3d0a",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2f979893-11b8-4d17-b96f-fdb10daea15b"
        },
        "item": {
          "id": "85826cd7-5b47-41f4-898d-dc190cdf3471",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b866741c-9efd-4816-9e83-2850ef5840f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c0983f2-2e2c-4d2f-bb4f-25904269d069",
        "cursor": {
          "ref": "b13d723b-e1fe-4832-bad0-28a0825c17c3",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "43bd748d-9c00-4206-afc4-df8da7f1a8c6"
        },
        "item": {
          "id": "6c0983f2-2e2c-4d2f-bb4f-25904269d069",
          "name": "identifiers"
        },
        "response": {
          "id": "16ae704b-0ec6-4986-bbf4-8ab5ce40609a",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17b77e3-709b-4592-b511-be1274450c1d",
        "cursor": {
          "ref": "0bbbcc39-25f8-4a19-9465-22320e9d7f86",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c545db35-942a-45ac-b18d-61846f82772d"
        },
        "item": {
          "id": "a17b77e3-709b-4592-b511-be1274450c1d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c587d9d2-0652-45fc-81f9-7f92b9e7d56b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c212801e-79d9-4843-acc4-9b0e353421f3",
        "cursor": {
          "ref": "278f381d-4247-4ba6-a04f-03ee6a3f7f75",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "14b3e82e-3dd3-4cd0-a589-b0b6171f9f4e"
        },
        "item": {
          "id": "c212801e-79d9-4843-acc4-9b0e353421f3",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d29361bd-9b2c-48c6-a911-5f3c74401d04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15032add-1665-4e65-bdc3-a1647d4367c5",
        "cursor": {
          "ref": "5ae969b8-423a-4f0b-91fa-dfd71face2fd",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "bebc656b-fdf3-4a4c-afd6-854ec41939b9"
        },
        "item": {
          "id": "15032add-1665-4e65-bdc3-a1647d4367c5",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "831dc9dc-65c2-4a54-b95a-1bfe601bef62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af807fba-8028-44aa-9f70-935769080010",
        "cursor": {
          "ref": "bc29a3c1-14bb-40f0-91ed-184ebbd84474",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "4c95b1e1-f935-406b-8879-484a810a7f3d"
        },
        "item": {
          "id": "af807fba-8028-44aa-9f70-935769080010",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e5afff5c-033d-4d1a-ac52-09a88d06a62e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e277a6c7-cf1b-47de-a683-dc4dd794ead4",
        "cursor": {
          "ref": "51e0f30e-3fcb-429f-a8bd-8545e08db989",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f7a13754-2861-45aa-855a-a989ee56775e"
        },
        "item": {
          "id": "e277a6c7-cf1b-47de-a683-dc4dd794ead4",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "4a432f4c-4f84-46c7-a78c-8c2c4eeea5a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68306c15-5068-4d32-8e00-f9c448a9c7d0",
        "cursor": {
          "ref": "22639f01-833c-4d6d-9ab8-af7f477576fd",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ed19b0ff-5cdc-4141-936e-afabe9218e4a"
        },
        "item": {
          "id": "68306c15-5068-4d32-8e00-f9c448a9c7d0",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a2e24a32-5730-4985-a70a-a14cdad63a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a0ef32e-05b3-4efa-b339-d5904147a136",
        "cursor": {
          "ref": "93f9ca1a-44e0-4ffa-9bb2-58a3a12fc61c",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a4fd7f68-29e9-4180-9041-b8bdca1068bb"
        },
        "item": {
          "id": "0a0ef32e-05b3-4efa-b339-d5904147a136",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c4d23d0b-fdce-41ad-bdae-ffed85a8a997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "440e5339-a005-4f6e-b3ff-df1b1425bf75",
        "cursor": {
          "ref": "c840477f-8575-4f64-9841-9a390e638405",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "24815308-6bc1-494e-8568-ee6139da7256"
        },
        "item": {
          "id": "440e5339-a005-4f6e-b3ff-df1b1425bf75",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "89b4b80c-00b3-408b-9b99-1448c3c6838c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4f1730c-bc37-44c4-b356-95d809c5f075",
        "cursor": {
          "ref": "68b67e95-b2f0-474e-83ed-6b60ab1b9eee",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f61acc7a-24f6-47bb-8f49-b99f6647f37e"
        },
        "item": {
          "id": "f4f1730c-bc37-44c4-b356-95d809c5f075",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "73695009-44cf-4433-b337-65be0904d119",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e30afc-062a-4817-a74e-4058e5ee38c7",
        "cursor": {
          "ref": "b167f76d-ea9e-4995-92bd-a2c6a20353a7",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "dcef68bc-3f4d-4d5f-a804-29788e31c4be"
        },
        "item": {
          "id": "c3e30afc-062a-4817-a74e-4058e5ee38c7",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "1522f480-5194-4468-a2e4-8e43e87a7bb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a5906a-9cf5-4c1c-b365-4cf9e0a7cef6",
        "cursor": {
          "ref": "fa55b648-beeb-4da4-8fe5-cf95d93079d6",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7fd3ed30-f476-40cf-ba87-1ff59cd3cb63"
        },
        "item": {
          "id": "b2a5906a-9cf5-4c1c-b365-4cf9e0a7cef6",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c68a4ce2-367c-4731-85f9-e8e55814db79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e29e8a1d-7e9d-4def-ad16-cd87f2e67756",
        "cursor": {
          "ref": "690e3dae-9ad0-4121-a14e-c08a84ddc33d",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "32d6e277-f8bf-49d7-aa66-ff6ece70bd4b"
        },
        "item": {
          "id": "e29e8a1d-7e9d-4def-ad16-cd87f2e67756",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "5be09c40-4367-40bd-8967-a1ac62fb7128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ca8b15-1612-46dd-b065-7e9a2efe126e",
        "cursor": {
          "ref": "c3aa93ab-59f1-4cee-b1ba-6c1c3bb6fddc",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "badf244e-3008-425c-9499-14c4edc3b0b6"
        },
        "item": {
          "id": "e7ca8b15-1612-46dd-b065-7e9a2efe126e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d9c53cd1-f472-4921-92de-fed36ca39482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd3ea8e9-fc39-430a-8de9-9a0e76a8fd59",
        "cursor": {
          "ref": "ca919f0b-b972-4fa3-a914-8e8262d64e3b",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "69acf335-bb7f-4e58-8784-39ed6d0dfe6e"
        },
        "item": {
          "id": "dd3ea8e9-fc39-430a-8de9-9a0e76a8fd59",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "416210e1-7ea2-4ef1-ab32-24a34469bc4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db021e3-8733-49ec-98fc-d9024a427aaa",
        "cursor": {
          "ref": "703740cc-8666-4450-b184-73f5b6469637",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "baada8a2-44e3-4d7f-8dc1-9a331d540243"
        },
        "item": {
          "id": "0db021e3-8733-49ec-98fc-d9024a427aaa",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "9043e0ba-5276-4131-98e9-8fe601db550c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "398b6cab-ceee-41c2-92dd-4201277e6224",
        "cursor": {
          "ref": "f5b10d85-a2c9-4652-8a89-95bb4ea4cdcc",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a369587b-2b4c-4ea9-8f5b-2977cf208b72"
        },
        "item": {
          "id": "398b6cab-ceee-41c2-92dd-4201277e6224",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "41f3cdfc-f3e2-4262-8756-9fe84c60d5f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fabb8200-d1d4-4c3d-a042-b99b0fb3c50b",
        "cursor": {
          "ref": "1d23ea6e-0c1c-422f-be85-befa294cd59b",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b0e7606c-9c73-41b6-bd94-42493e77306d"
        },
        "item": {
          "id": "fabb8200-d1d4-4c3d-a042-b99b0fb3c50b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "aa8e7935-dc16-4066-8af3-acb9a6b9190e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3848f758-9507-4859-b8b9-ec0c6bd4c76f",
        "cursor": {
          "ref": "385c6107-8326-4545-a7c1-fb6fb9c18f18",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "198fdb93-3b3d-4518-a646-5ab215362e68"
        },
        "item": {
          "id": "3848f758-9507-4859-b8b9-ec0c6bd4c76f",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "283d4226-9ed2-41a2-afed-eed40efde993",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "972e1b8d-468c-43c4-aa74-6092c0416dc7",
        "cursor": {
          "ref": "a385975a-083b-47fc-bd4a-0cc76b615367",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "42775497-7d5c-40b2-b658-cf5689001d94"
        },
        "item": {
          "id": "972e1b8d-468c-43c4-aa74-6092c0416dc7",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b058e77b-d7bd-4fa1-863b-a0ef473a5ac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "630189df-258d-4cfd-b7f9-61cc8239b7e5",
        "cursor": {
          "ref": "9f3ae3c0-14a3-422f-bf9e-913ca807614c",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "fe59669a-60e7-4c33-8de9-4fbe25188c5a"
        },
        "item": {
          "id": "630189df-258d-4cfd-b7f9-61cc8239b7e5",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "89be0aec-ac49-404a-a9e4-754e53abd96f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "916cc6ab-dc95-4beb-a195-a6ad7d1e6224",
        "cursor": {
          "ref": "4ee13b82-f1e0-4d8a-bbb5-f1677e8755c8",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d4545125-bdf1-45a0-ab21-058b5240f33b"
        },
        "item": {
          "id": "916cc6ab-dc95-4beb-a195-a6ad7d1e6224",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "b1e10a82-d5ec-4482-8d42-3669dec1bec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f8aea7a-6f41-4795-9ad1-b2b6cbe7c103",
        "cursor": {
          "ref": "5538b06a-bc5e-4d92-a789-b737631f75e5",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "8b91f35b-dc93-407e-912a-0ca41c07003a"
        },
        "item": {
          "id": "2f8aea7a-6f41-4795-9ad1-b2b6cbe7c103",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "6974acd0-8bf6-48b4-a96b-70b66334c27c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a168677-f911-46d8-8e69-e8b9123dcac0",
        "cursor": {
          "ref": "ff8d05cc-7e00-4315-a2f3-c284533f6315",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ca4f7176-3faa-460e-b344-1a77fb636c64"
        },
        "item": {
          "id": "3a168677-f911-46d8-8e69-e8b9123dcac0",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "eb4bbf49-d665-47b1-ace3-28c48b104bc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4ce3c2f-443e-46ca-96f8-d52847f2a7f3",
        "cursor": {
          "ref": "0fe343d3-d9e2-4264-9c89-b3f2ecf1ac78",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "6c489a57-708d-4c31-bfc4-4496eebeea99"
        },
        "item": {
          "id": "b4ce3c2f-443e-46ca-96f8-d52847f2a7f3",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "21c492c9-d581-4a77-bfd8-f00ef0cb78f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80901074-2a54-4edc-a4eb-ffa7fc28a31e",
        "cursor": {
          "ref": "bf8c4fbc-4783-489c-859f-57e1ea5f056c",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "aaca108a-d2ce-49f0-9c64-ad03d0ca92d1"
        },
        "item": {
          "id": "80901074-2a54-4edc-a4eb-ffa7fc28a31e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "2edbb7c9-85ae-4945-bc07-27ce4cf9cb63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a5f7da1-fcc6-4689-b7d2-e88377735cdb",
        "cursor": {
          "ref": "fdd13772-effb-436b-8db0-1b67874b8bfc",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "67e377f1-a3c8-4158-9b7d-de3e4e9b59a0"
        },
        "item": {
          "id": "2a5f7da1-fcc6-4689-b7d2-e88377735cdb",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "252259cd-5aab-445a-8e90-bf8bae264a14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d6e491-b6c7-4cd6-8a67-2021e80bbe64",
        "cursor": {
          "ref": "6cced800-f661-491e-8745-f868c13935aa",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0e3bbf6b-0ea7-4f5a-a2f2-f093e5346142"
        },
        "item": {
          "id": "b9d6e491-b6c7-4cd6-8a67-2021e80bbe64",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "4d1c682f-9994-4365-a911-e03ca7587cb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a4e6f4-b729-410a-af12-a792f0bac9ad",
        "cursor": {
          "ref": "68a043b9-bcc2-45cc-945d-50312c6b829f",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "838304fe-b667-4ed1-b308-40aef7c9ab1b"
        },
        "item": {
          "id": "c2a4e6f4-b729-410a-af12-a792f0bac9ad",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "cbca0741-e592-45c0-8d7a-c59efca868fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93069540-f5a0-4cc9-a4a8-f32b3e369643",
        "cursor": {
          "ref": "4face6b0-fe7c-4cc7-af9a-1de358b02654",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e1d72e8f-89aa-4554-ba23-c7d7417dbae6"
        },
        "item": {
          "id": "93069540-f5a0-4cc9-a4a8-f32b3e369643",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "9568d487-ab36-492d-89fa-562bb5beeec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60927666-6c73-4900-8ec3-91f96a1a1bdd",
        "cursor": {
          "ref": "f76ddd35-9c89-4d9b-95b8-5507493f9ca2",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "721a215e-9bf0-403a-a913-aef848eaa28c"
        },
        "item": {
          "id": "60927666-6c73-4900-8ec3-91f96a1a1bdd",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e6ff6c47-228a-4b3a-a465-52f604df72b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "153dca5b-6451-4ca2-b77c-848de9a5e5b2",
        "cursor": {
          "ref": "b7295b05-609f-4464-ab5f-28b547c9f9b7",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f20bc7c4-33a4-4ad1-acd5-0c501a3ae309"
        },
        "item": {
          "id": "153dca5b-6451-4ca2-b77c-848de9a5e5b2",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "49c9f7cb-7742-4bc5-827f-8126bc1122b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9204,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "92711677-7de4-4a62-9fca-b6bf80fd5e54",
        "cursor": {
          "ref": "ecc67f28-0e1b-4262-b32d-3c28f20a17f1",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "16295790-7aab-45b9-9c36-ef7affbf8dcc"
        },
        "item": {
          "id": "92711677-7de4-4a62-9fca-b6bf80fd5e54",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "0ab4fd18-d478-4dfa-94b6-4dac67faf205",
          "status": "Created",
          "code": 201,
          "responseTime": 10984,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "abf0fd1a-163a-4556-a5cf-78fe31446cb0",
        "cursor": {
          "ref": "9eaade6c-69f5-4766-aabd-a33ca7a9f2f9",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5621c451-d921-4950-8d28-ff8fb0fe9388"
        },
        "item": {
          "id": "abf0fd1a-163a-4556-a5cf-78fe31446cb0",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "70970162-1fe0-438f-9520-2797cfa338ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9172,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "cd7e91a0-5f6f-4abc-a086-9c841c634f5d",
        "cursor": {
          "ref": "13be78da-4a1a-46bc-adf6-fea443d54603",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "34af6515-2d81-4de1-b1dd-b459246fcc84"
        },
        "item": {
          "id": "cd7e91a0-5f6f-4abc-a086-9c841c634f5d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "63d4f566-a969-4f3d-8506-6c265dd8c848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d470cca0-addd-41f0-9e6c-58cbc4b7e9ff",
        "cursor": {
          "ref": "e4d25bc5-3023-4102-bc96-81ba464fb1eb",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "aa31bcbd-0059-45de-bbb4-0a2eae40289f"
        },
        "item": {
          "id": "d470cca0-addd-41f0-9e6c-58cbc4b7e9ff",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d04381e2-c195-4857-b6c5-75f98bca90ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9162,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "fe0e32a4-09be-4a50-a972-c1a149f640a6",
        "cursor": {
          "ref": "9ef77484-fec4-47c2-bf32-5ee8129530c9",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a9578e56-1bce-446f-82f3-8c1492a05e7d"
        },
        "item": {
          "id": "fe0e32a4-09be-4a50-a972-c1a149f640a6",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "91d8dc0e-ee6e-490f-a6f8-27558463059c",
          "status": "Created",
          "code": 201,
          "responseTime": 10566,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "244bd11c-1800-4f4a-9387-1f8f23ec296e",
        "cursor": {
          "ref": "6ab0ee90-cbc7-4f0d-b969-55ad6fc34f08",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "fd9509f7-f9c7-4a94-9f76-c8f94169781e"
        },
        "item": {
          "id": "244bd11c-1800-4f4a-9387-1f8f23ec296e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c23e7a91-bf1e-46b7-bb1b-6d27fb285da3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9207,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "56ef9eb5-1620-4f05-a903-dc3e2696e40b",
        "cursor": {
          "ref": "6d371aec-bf1d-4933-b43f-616a99153f6f",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0be40c34-7545-4b5c-9a70-e0393b142a7f"
        },
        "item": {
          "id": "56ef9eb5-1620-4f05-a903-dc3e2696e40b",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "80040b90-89f0-433a-8ce6-13f3085c80ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9679,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "754751c9-7534-4938-8610-c95450080e35",
        "cursor": {
          "ref": "b0a89057-5a23-4cca-8bc9-5de414224534",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "be732863-aaa6-4ba3-9c84-8532405c866f"
        },
        "item": {
          "id": "754751c9-7534-4938-8610-c95450080e35",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "7c8b926a-4f4c-4380-b3a8-38bf1ed989c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9171,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "7c68975c-f517-4942-ba21-49320b81eb6d",
        "cursor": {
          "ref": "75204cf3-2e06-433f-ae26-d4e644733c68",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "8bcb5261-2794-42a4-9f98-137f8db3fcf8"
        },
        "item": {
          "id": "7c68975c-f517-4942-ba21-49320b81eb6d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "dda7a17c-f6a8-417a-8632-2ba728c78dfc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9178,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "003a97aa-0f9d-4c3c-b0aa-5be627398986",
        "cursor": {
          "ref": "6e88536a-7122-4863-bbfc-d98c97631c81",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ab3368ae-ed33-4aef-a0ac-d74a19025cce"
        },
        "item": {
          "id": "003a97aa-0f9d-4c3c-b0aa-5be627398986",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "569a2098-7e5e-474f-aca5-5bd1ecc07cd3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9167,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "d8a4ee20-c73d-41b6-b145-8888704e644f",
        "cursor": {
          "ref": "19e67949-e104-4070-903c-86901d753190",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e36facaa-e5a6-4a9f-8005-13c10d3513f2"
        },
        "item": {
          "id": "d8a4ee20-c73d-41b6-b145-8888704e644f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "0e94cc9f-fc90-46e7-9b6d-45845580480a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9176,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "d9b1ad90-4d26-40c9-bedf-f5950e60444f",
        "cursor": {
          "ref": "512a8660-ef02-4c1e-8e13-260b55b47780",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "a4b8b6e9-0ffe-4986-99f4-13aa5ac4b2ed"
        },
        "item": {
          "id": "d9b1ad90-4d26-40c9-bedf-f5950e60444f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "87c32b8e-8383-4107-9f97-06ec88709fc0",
          "status": "Created",
          "code": 201,
          "responseTime": 10376,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "3458b118-b91e-409e-9e99-d0a3fec399fd",
        "cursor": {
          "ref": "f11561f8-2602-4ab0-8606-e982bdec052b",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3ceba133-11cc-42d4-a17f-5338afa7e80f"
        },
        "item": {
          "id": "3458b118-b91e-409e-9e99-d0a3fec399fd",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "5a839f8c-01aa-4301-a758-89b1479bf869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad3ce83f-f065-4d42-adb0-8723c50abd47",
        "cursor": {
          "ref": "77d5b3a4-352d-43d9-9ba1-b89542ccfce3",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "3603c7a9-cea8-4c5a-801c-c4d1e93346bc"
        },
        "item": {
          "id": "ad3ce83f-f065-4d42-adb0-8723c50abd47",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "fd93fbf5-52f7-4c75-880d-e17d759d4e35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2acce81-a0d9-42e7-b6b1-aecc8df2fcb0",
        "cursor": {
          "ref": "e6b2e40e-9823-4eaa-837d-d9a82e8a0e03",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "49bfba58-6a01-486b-b560-3110c91ff537"
        },
        "item": {
          "id": "a2acce81-a0d9-42e7-b6b1-aecc8df2fcb0",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "f3d000f7-ba09-4d74-bc13-4298499e7739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bebbaa81-d9a2-4650-94a3-1e8140998373",
        "cursor": {
          "ref": "ee0662f1-03d9-41ea-9095-1710bed2501a",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1ad74aef-a96d-449f-9032-7b4d4bc0a659"
        },
        "item": {
          "id": "bebbaa81-d9a2-4650-94a3-1e8140998373",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ad4f018b-82ee-48d1-8df9-6df39cdc5ba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e455fae-8fc5-4f5a-a6ff-e0f9c02e53b1",
        "cursor": {
          "ref": "cb72bc74-93e7-48cc-84b1-a1b2f2b83239",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "67afc126-8129-4ec5-b3bd-1e2c5b10cb9c"
        },
        "item": {
          "id": "1e455fae-8fc5-4f5a-a6ff-e0f9c02e53b1",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "0bcdac70-9758-4571-b52a-0cf569f6d384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caec35a5-aa53-4c9a-b942-80ad8fa45bf1",
        "cursor": {
          "ref": "f5352568-971a-45e9-b344-aecf99517150",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "3373b1bd-f03f-4d19-9f2a-79f8ac9ffff6"
        },
        "item": {
          "id": "caec35a5-aa53-4c9a-b942-80ad8fa45bf1",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "31bf788e-bd49-4c60-912e-c2143f362244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47f8d96e-1055-49b9-a8c3-2d54a8df9589",
        "cursor": {
          "ref": "06140090-3cd3-48d5-bc4e-ac8a92cfa85d",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f59d685a-73fe-4550-ae8f-f7dc40711589"
        },
        "item": {
          "id": "47f8d96e-1055-49b9-a8c3-2d54a8df9589",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7e58d894-be05-4321-b838-b81afbbdfb9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0894efa7-72cd-42d5-9c0a-dcb5b4e9e414",
        "cursor": {
          "ref": "f647d046-5509-4a47-a571-5884a2d228c2",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "70244f43-f0b5-4094-bb41-591e7aa785d8"
        },
        "item": {
          "id": "0894efa7-72cd-42d5-9c0a-dcb5b4e9e414",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "9714a976-1fb5-43da-ab12-4db3dbf3b90e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d5db88d-a987-49e3-bcbf-f718d4987f24",
        "cursor": {
          "ref": "eee02326-851f-4f2e-acf3-10f4ed7a168e",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ccb30307-b85b-47f5-9053-667efab67860"
        },
        "item": {
          "id": "2d5db88d-a987-49e3-bcbf-f718d4987f24",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "b51945a6-4845-49f5-8f82-26d6d1dd5b25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afd70f46-96d4-4372-93dc-6778c23f2472",
        "cursor": {
          "ref": "024aabb5-c2eb-4427-82df-1093a0a5762f",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e05e5fa4-f1b4-4bbb-b3ff-e4d50c49c8ec"
        },
        "item": {
          "id": "afd70f46-96d4-4372-93dc-6778c23f2472",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "9114dbfb-84bf-466f-b341-d49e102293b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "379748e3-4e34-451a-bdb3-550f4f797a0f",
        "cursor": {
          "ref": "0e11dc32-299b-4c97-a46f-93e57abb0ebd",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "009ef9ab-c160-4ac7-ab64-b0e6573e93bc"
        },
        "item": {
          "id": "379748e3-4e34-451a-bdb3-550f4f797a0f",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "de52b069-63ae-4837-9898-7cae73513b6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1df16e46-67ca-4728-91c8-923c4039f35e",
        "cursor": {
          "ref": "507e7471-2d61-4918-bba7-3aa0e4cc28df",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5020938c-c7c7-401e-996c-b41b77f5ad99"
        },
        "item": {
          "id": "1df16e46-67ca-4728-91c8-923c4039f35e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "a8521d83-9560-4fab-8295-673c09990bb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdcdf53c-50fa-42e4-89b2-7b8cdec104f0",
        "cursor": {
          "ref": "7ffbc9da-f29e-4165-9b80-d8955a434984",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "0b241d9c-8dd0-4c23-a440-4aa9c123f737"
        },
        "item": {
          "id": "cdcdf53c-50fa-42e4-89b2-7b8cdec104f0",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "18d5cc35-0875-4f9d-ba6e-145ac83ed56d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "875f3f39-ace3-4e91-9fb2-7fae6de4be7b",
        "cursor": {
          "ref": "e99372f8-f001-424e-9f74-ada8ba4c96bd",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "12c5817a-c262-487d-a27c-9e360611da82"
        },
        "item": {
          "id": "875f3f39-ace3-4e91-9fb2-7fae6de4be7b",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "87ba59e9-2d6d-4716-9d2b-6cd4cd9c2dab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9983,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "4ee4bba9-f2f8-428b-bc40-f4b07c669a73",
        "cursor": {
          "ref": "f7d15023-c52d-46d4-bd0f-ed0d80379341",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "9a4f8073-312e-4587-bc6a-7377491bb8dc"
        },
        "item": {
          "id": "4ee4bba9-f2f8-428b-bc40-f4b07c669a73",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "35e25197-aa84-465a-af70-9fa3a80c6ae1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9750,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "19777b63-d545-4835-8fd3-2a272aefbcb0",
        "cursor": {
          "ref": "7d068ee6-793d-4b35-9714-7ff64a71dfba",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "5cba4f61-f027-424f-a3b0-fda7622000c0"
        },
        "item": {
          "id": "19777b63-d545-4835-8fd3-2a272aefbcb0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "ad288490-ef59-4bf1-9345-8416e3972668",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9384,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "79577b14-d250-4241-80c8-d4b6d0bc5f1a",
        "cursor": {
          "ref": "80063bca-a295-4af1-a87e-629d86491589",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "d6ffd1a0-20a5-4df5-894c-ddc3012e41bf"
        },
        "item": {
          "id": "79577b14-d250-4241-80c8-d4b6d0bc5f1a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "aa5959c6-25b4-4cfa-a9f8-0d7368890d05",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10010,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "8d6b81d9-86d4-411e-b57d-408da6b53e62",
        "cursor": {
          "ref": "509d7954-8690-4081-8f25-cdede518479a",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "2b2e7fe7-ad44-43c2-b629-28a8ac2d0a7b"
        },
        "item": {
          "id": "8d6b81d9-86d4-411e-b57d-408da6b53e62",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "3ce26a8b-2e3a-4ed9-9382-e1fb37abbed9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9170,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "40e849bf-4ad3-4f22-9449-9b39d5b7f20a",
        "cursor": {
          "ref": "26638f14-6f6b-42d4-9cca-67d133e08beb",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "1b3224e9-3fc4-449b-80e9-9a72adea3000"
        },
        "item": {
          "id": "40e849bf-4ad3-4f22-9449-9b39d5b7f20a",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "0644c89a-c95e-436b-a8d9-2703f29ab2b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55cddb55-f503-4b9d-8063-a88ad8bc27b7",
        "cursor": {
          "ref": "cdd97460-ad19-4aed-88dc-421634f3ed96",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ca9cc3c6-b5f6-4a0a-bfb7-0efe1c516e0e"
        },
        "item": {
          "id": "55cddb55-f503-4b9d-8063-a88ad8bc27b7",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "72675db6-d4f2-442a-a34c-aeb87451fe3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28db6728-7ad0-4290-985c-a9df4d4ee9e8",
        "cursor": {
          "ref": "2df7275b-0f0e-4358-9db0-74ae43285ff4",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "dad310b8-c854-4cc8-a6aa-cb3eba5ffb5a"
        },
        "item": {
          "id": "28db6728-7ad0-4290-985c-a9df4d4ee9e8",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "0a21022c-1851-4955-aea4-c83ff2b95c39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278c91dd-a751-4f70-8b91-34e3957f5751",
        "cursor": {
          "ref": "b25907b2-78e5-451b-8ee6-64d983396de1",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "39755426-6c51-4674-9005-3288fea458c5"
        },
        "item": {
          "id": "278c91dd-a751-4f70-8b91-34e3957f5751",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b2043139-8c0c-4853-93a1-38ff907441b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e92045d4-a623-421f-b092-52abbb887a82",
        "cursor": {
          "ref": "82c9a5d9-d12c-4e99-b01a-6f9ee8729854",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "fa2f8bf3-c5cd-4d44-8f30-c08f4bc3f21b"
        },
        "item": {
          "id": "e92045d4-a623-421f-b092-52abbb887a82",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "3330dff6-a0f7-429e-96ef-767cbcc69c31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3911e92d-ec5f-449c-ac0a-91caf484ea3b",
        "cursor": {
          "ref": "d9ad165f-be65-4d15-82fe-534ced936407",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b5f7ce6d-6d46-4aab-a95c-c67db09dfe6f"
        },
        "item": {
          "id": "3911e92d-ec5f-449c-ac0a-91caf484ea3b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ee413fb2-2ca2-4a06-8159-1bfdbe372e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f5ad09d-1c0f-410c-931c-4e16a0567186",
        "cursor": {
          "ref": "ee5f5d36-fa0d-4309-80b3-db769654bc3a",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "cfd532bb-ba00-451d-b108-713a83fd6647"
        },
        "item": {
          "id": "4f5ad09d-1c0f-410c-931c-4e16a0567186",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "387b6717-e9e1-40bc-82ef-565d91d34a5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b42054ba-eff0-412c-93a4-50e282561cdc",
        "cursor": {
          "ref": "94d8a193-ac03-4c1a-bfa7-b7ee79c2efea",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "b9f7cb81-469a-49ee-81da-1b895ee2947b"
        },
        "item": {
          "id": "b42054ba-eff0-412c-93a4-50e282561cdc",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "5a2ce144-2fd4-4d55-8caf-9b596071337a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7983500-50b2-47ed-8989-9b1e2a3600d2",
        "cursor": {
          "ref": "9199d095-ba57-4e8d-b1b8-b44c83691f9a",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "071ded09-db33-4b14-9d24-9956f8a2d721"
        },
        "item": {
          "id": "f7983500-50b2-47ed-8989-9b1e2a3600d2",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "02c4edbb-770e-421d-8b76-473aa84e97b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f6f0dd4-868d-400b-922d-5e9ad8033128",
        "cursor": {
          "ref": "87e6d5de-e381-4adf-874f-ee1cfb778680",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d0b1fa3e-07ea-406a-b1d8-223250e05b7a"
        },
        "item": {
          "id": "1f6f0dd4-868d-400b-922d-5e9ad8033128",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "632aedec-10aa-4369-8801-401189118154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26ca0e11-36d4-4393-81cf-b519c57e8238",
        "cursor": {
          "ref": "83a17c29-f45b-4247-a702-8e4ddf30c85f",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1db2503b-1723-4cb0-8f7e-d6ed5c5f5d1e"
        },
        "item": {
          "id": "26ca0e11-36d4-4393-81cf-b519c57e8238",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "f38793fd-88b7-4697-a9f5-8ec23d266aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c2449c3-69af-4a7c-9f47-5d429ee121f5",
        "cursor": {
          "ref": "6ac3244c-5b39-4643-a189-f06fe2e876af",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b5646277-71f1-4ba2-9c74-c6840b4bb19d"
        },
        "item": {
          "id": "3c2449c3-69af-4a7c-9f47-5d429ee121f5",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "d0ad1393-6c6d-4f5c-b2e9-d30662330fe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e159ea05-e6fd-4134-afe0-d5d7084da066",
        "cursor": {
          "ref": "f6e4f7cf-d09e-43c5-b7b5-5f256a5cfea5",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "7ea7f203-9bd3-44a5-8a11-8d93319b6cae"
        },
        "item": {
          "id": "e159ea05-e6fd-4134-afe0-d5d7084da066",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "35dc7418-c035-444e-9d66-2545d25cfe3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d88a5f1-078d-45e0-bc7a-6040bad3f6a2",
        "cursor": {
          "ref": "7c37e864-ce2b-4cb3-8ba2-b56d8a495d9d",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "af5d496d-10eb-43b3-848d-28d13d6b7081"
        },
        "item": {
          "id": "8d88a5f1-078d-45e0-bc7a-6040bad3f6a2",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "faf4f8ea-f562-4033-81dc-bed4e493a824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ad0f0f8-50c9-41de-975a-a808f9d21761",
        "cursor": {
          "ref": "5e2fa524-67c9-4fd1-b577-501445609a6c",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "0d561b6c-b7ed-4169-b2e9-142efcecc19c"
        },
        "item": {
          "id": "5ad0f0f8-50c9-41de-975a-a808f9d21761",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "c25ae6e8-2989-41a3-8970-65f7fe29d968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d37feb0-2167-4cf9-be05-f9656b214c78",
        "cursor": {
          "ref": "c83267fb-6c55-4664-b02e-9d129844435f",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "f79c54cc-bacb-42bb-803e-104409001626"
        },
        "item": {
          "id": "7d37feb0-2167-4cf9-be05-f9656b214c78",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "8b47bc9b-ba92-439e-841a-24f87b4fd339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3cd3a3-52d4-4e0a-9d0a-ecf9c99fc154",
        "cursor": {
          "ref": "d111a7b2-9127-4c86-904e-f4f4eee63458",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "066f7008-c253-4005-bdf4-9d0458a7bc36"
        },
        "item": {
          "id": "ff3cd3a3-52d4-4e0a-9d0a-ecf9c99fc154",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "63dee359-8525-42f5-8341-1f6b9a87a687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b07c3f37-20f0-4226-ba81-a32468222860",
        "cursor": {
          "ref": "3dd79c6d-27b7-4193-ac7c-9152f5a13a42",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f24f5f46-9bda-4710-b859-5c4e4920da0e"
        },
        "item": {
          "id": "b07c3f37-20f0-4226-ba81-a32468222860",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "3506f990-5823-4e3e-ada2-2a14764a3407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aadbcc8f-8c1c-4007-9c93-36ec51d6390b",
        "cursor": {
          "ref": "30e1a126-1bde-4710-a913-eab13fb20d5d",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "5a1ca0f2-9299-426d-8519-2948a8a987a2"
        },
        "item": {
          "id": "aadbcc8f-8c1c-4007-9c93-36ec51d6390b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "26412a66-93ec-4c8a-8821-ad41d9cc6458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f4cc65d-b720-4d06-8784-51d084a7e17f",
        "cursor": {
          "ref": "c06d19f8-5251-4e40-b997-b646283c236c",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "935a6d33-0f53-4bd2-b52f-c30e07c0e60a"
        },
        "item": {
          "id": "5f4cc65d-b720-4d06-8784-51d084a7e17f",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "8c4dca99-3129-4aff-96b8-afe04a1fc086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "403eb0b5-b3a1-4f4f-ae9a-72845e6867ad",
        "cursor": {
          "ref": "f2b63ecf-3c35-4acd-af83-551936cf3183",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "2268d133-ac5d-4f10-92ed-a65175dd5ee1"
        },
        "item": {
          "id": "403eb0b5-b3a1-4f4f-ae9a-72845e6867ad",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1d8c080b-77fe-440c-984e-0eb75101a097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f368b3-6d59-4ffa-b516-44136bf251dc",
        "cursor": {
          "ref": "046b7ea4-f678-4078-915f-b3a307bba20c",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "cb831204-7e4d-4f1c-bcde-04a87886b8bc"
        },
        "item": {
          "id": "59f368b3-6d59-4ffa-b516-44136bf251dc",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e340b956-0b11-4e7e-aa52-67685610cd90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdc54c07-f200-4c74-a114-32f42922d9e1",
        "cursor": {
          "ref": "d10f4387-4dd3-4c81-a871-f0c796ea84f2",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "471714ae-4e9c-44f0-85da-78648b7562b7"
        },
        "item": {
          "id": "fdc54c07-f200-4c74-a114-32f42922d9e1",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c98c5d00-3c56-4ad1-a125-fae12a3d44de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "973a429b-83e6-4f31-9d30-af08a8c7a398",
        "cursor": {
          "ref": "2b39a184-9dd8-4a9f-b102-5714737d65cb",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "ad8d9a9e-a7bb-4feb-9c6c-e7d4386e1340"
        },
        "item": {
          "id": "973a429b-83e6-4f31-9d30-af08a8c7a398",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "5c025cb4-f59a-403f-8674-3e414a0db92d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49d9f4ca-d092-4f22-a89b-f31f5f8ee137",
        "cursor": {
          "ref": "c59abb22-c680-4f8a-96c2-6140bc3dce7f",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4bd84ffa-cea4-42ba-aba7-37160a43394d"
        },
        "item": {
          "id": "49d9f4ca-d092-4f22-a89b-f31f5f8ee137",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "329cb998-4148-462c-a7bf-e677c22fb90d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a649a316-0834-4438-9ec2-7db05eb3f8b6",
        "cursor": {
          "ref": "ef2599cb-249e-43a6-83ef-98b3d5f287cb",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "b4d17906-c9b2-46d7-b242-cc823ae2e30a"
        },
        "item": {
          "id": "a649a316-0834-4438-9ec2-7db05eb3f8b6",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "44aa37d6-ab64-4f88-812d-f1195fa2a4e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cacbbe24-d928-4443-8490-de02ad4f1c71",
        "cursor": {
          "ref": "d51a4d85-9266-4378-806e-862db4a85848",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "05c7200d-d8ad-4a3e-8013-9cdcece90659"
        },
        "item": {
          "id": "cacbbe24-d928-4443-8490-de02ad4f1c71",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "9d951135-45b7-4f8f-9dff-607bbd7b9a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24696272-b742-4ce0-8d3d-768545bad137",
        "cursor": {
          "ref": "75f18c2d-12d2-4f1a-b73d-61b50073798d",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "4041b4bf-33c1-4e3f-a380-224c5efb0b42"
        },
        "item": {
          "id": "24696272-b742-4ce0-8d3d-768545bad137",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ef902aae-0ec4-4988-b115-efa9c9fd1959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d73d62a-3fa3-48f1-a3d8-2f1ec0c7cb5c",
        "cursor": {
          "ref": "40695f41-9077-442f-b9bf-1ad69a4d5bf6",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "4d687d50-e6cc-4162-8486-879a0d49a316"
        },
        "item": {
          "id": "4d73d62a-3fa3-48f1-a3d8-2f1ec0c7cb5c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "7a147215-1817-45cf-8398-e84a4c092f0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e68f658-5351-4a49-ab1d-5d41d9fc3212",
        "cursor": {
          "ref": "980a429e-c049-4982-833f-33a5163f59ee",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "5d5d8f4f-14b6-43b1-a9fc-5ea19991caca"
        },
        "item": {
          "id": "9e68f658-5351-4a49-ab1d-5d41d9fc3212",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "6d9a38e6-5b08-48a5-b092-f2f9f6227c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8285656-9535-4a71-8d42-7ab1999564eb",
        "cursor": {
          "ref": "03e6f814-bfb7-4f94-8b0e-5572b9ec2d6e",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "afd09c74-e3ed-4e32-9ffd-c40e46187b59"
        },
        "item": {
          "id": "d8285656-9535-4a71-8d42-7ab1999564eb",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6ad0a870-6ee4-4f93-8c6c-5e6c345e8467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f309f95a-976b-4093-bd9e-249837698c4d",
        "cursor": {
          "ref": "3e526695-2820-4fe9-b4ab-e5e3e7d1e97b",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "394cc8cf-7069-4aab-9a37-c4002639e58f"
        },
        "item": {
          "id": "f309f95a-976b-4093-bd9e-249837698c4d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c4f5856e-7f1c-4f7f-85ff-0cc3be5d5aaf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca55e8b-a4c5-4785-953e-f27d6bfa50ff",
        "cursor": {
          "ref": "9aaabc62-703d-4d22-9085-5c88a59a0e7d",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "6318ca26-7164-4fe4-94d2-f0663145980e"
        },
        "item": {
          "id": "fca55e8b-a4c5-4785-953e-f27d6bfa50ff",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "8799c25a-2d16-4616-855d-0f756987e0ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "f3e9cb1f-6a70-406e-8adc-3ba10bae6f4a",
        "cursor": {
          "ref": "4ba5802a-263f-4582-bce7-467eb49cdc09",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "e25d042a-9455-443a-9d1f-e9c4f198be38"
        },
        "item": {
          "id": "f3e9cb1f-6a70-406e-8adc-3ba10bae6f4a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f8771094-d5e4-483b-8cce-c01d51341dc6",
          "status": "Created",
          "code": 201,
          "responseTime": 10074,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d363e850-5974-4a71-b0de-c03bc52d44f9",
        "cursor": {
          "ref": "b360bbf4-e71b-45a6-a6a5-686bca7869ed",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "2a1f4ddf-4416-4001-820a-b5259c0b6b85"
        },
        "item": {
          "id": "d363e850-5974-4a71-b0de-c03bc52d44f9",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "836b699a-8346-457d-b959-944bdbe18d1f",
          "status": "Created",
          "code": 201,
          "responseTime": 10382,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c1b21f-7e4e-4ca5-aa4c-0bfd449904a7",
        "cursor": {
          "ref": "9276e103-2a32-4897-aa8a-84e46da2c023",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "24ac141a-46cb-4a74-8909-c4f95d330e9b"
        },
        "item": {
          "id": "27c1b21f-7e4e-4ca5-aa4c-0bfd449904a7",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "45c313d1-82ed-4e40-9b8f-49bd92405c60",
          "status": "Created",
          "code": 201,
          "responseTime": 10038,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cbb702a-0be7-43cb-bb20-0f0bc7ecbc93",
        "cursor": {
          "ref": "dc4b31eb-f41a-48dc-ac16-0c8c0d8ab469",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "9413b1b0-0586-4332-b633-7b37dda30b9b"
        },
        "item": {
          "id": "3cbb702a-0be7-43cb-bb20-0f0bc7ecbc93",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4279f8dc-3e82-4ba6-b6e2-42fc2fa57b73",
          "status": "Created",
          "code": 201,
          "responseTime": 10036,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e5e87c-4e63-40ac-bd6e-92a5667a2883",
        "cursor": {
          "ref": "6c322e0d-9088-4843-ade4-aa47f412de9f",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "237e77d0-c956-4f1d-a9b1-77ff5bfcb018"
        },
        "item": {
          "id": "b2e5e87c-4e63-40ac-bd6e-92a5667a2883",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "aef8db6c-9887-4841-af77-40a482042678",
          "status": "Created",
          "code": 201,
          "responseTime": 10005,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f9016d4-4b64-4fe3-a80b-cb3fa4e0e7d2",
        "cursor": {
          "ref": "8ee54ce4-0f93-4a3e-92ad-8564259ce3f9",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c571593e-feb1-4275-a7ee-ab4065ed8e17"
        },
        "item": {
          "id": "2f9016d4-4b64-4fe3-a80b-cb3fa4e0e7d2",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "06bc5f1e-a729-4e20-872b-0d9d4f84f1a6",
          "status": "Created",
          "code": 201,
          "responseTime": 10027,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a70c8c39-49da-415a-8331-a228198e4175",
        "cursor": {
          "ref": "81dcb39f-3bf0-4124-81b8-50e0ee4e20df",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "224004c5-20c6-47de-8dad-ea0bf042edf7"
        },
        "item": {
          "id": "a70c8c39-49da-415a-8331-a228198e4175",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "26d1f266-f3ea-4124-859a-7a184fea01f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4aef399-9f7a-408b-a064-3b8de36de8c6",
        "cursor": {
          "ref": "0099fed8-c139-4be9-85b1-2c21c976caa4",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5b01a2a4-b498-4b14-88a0-df4e5077e0b0"
        },
        "item": {
          "id": "e4aef399-9f7a-408b-a064-3b8de36de8c6",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0312e913-6815-4665-a222-8ce05c7932cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c85fab2-a172-4e73-8aed-a8c7c1db1a90",
        "cursor": {
          "ref": "52d24882-ef6f-47b0-8012-4f09ff644c74",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "6196fd18-098e-4087-8df1-5d09133489a8"
        },
        "item": {
          "id": "9c85fab2-a172-4e73-8aed-a8c7c1db1a90",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ddf90eec-d080-4b65-a60b-d2b9277f110d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e046e190-d003-4944-92fb-2b81e51f580d",
        "cursor": {
          "ref": "879dcaef-9329-4771-afcb-b61d4b00ed6c",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "51054e60-9207-4d02-8f0d-fa776d21335e"
        },
        "item": {
          "id": "e046e190-d003-4944-92fb-2b81e51f580d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "94404219-a2b1-4bdc-a24f-c5be07db2b45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad6ab3a-3a6e-4519-9944-42c5bb1e1e5e",
        "cursor": {
          "ref": "71e9feb2-3e58-4ffd-af1b-12228c48c9e9",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "3f39dd63-0c2c-4f7d-9c8a-6f886932adfc"
        },
        "item": {
          "id": "0ad6ab3a-3a6e-4519-9944-42c5bb1e1e5e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "71bebdd7-10ee-419c-913e-1c1ae1d8b54a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19e33f82-6a4a-4259-915d-bab5cc234180",
        "cursor": {
          "ref": "baaea82a-aee8-4283-ae41-c1a9cf3e6bad",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "affa691d-bacd-4fb3-9f9d-92dc48a35f67"
        },
        "item": {
          "id": "19e33f82-6a4a-4259-915d-bab5cc234180",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d608e172-13cd-4279-8583-e7b5d9d5d40b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47caafe4-e97c-4bbb-baad-157086c55e38",
        "cursor": {
          "ref": "3564f001-00b8-4832-a2d0-8d87de66096a",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a510b93f-6088-4ebf-8f2b-08c4266fa1da"
        },
        "item": {
          "id": "47caafe4-e97c-4bbb-baad-157086c55e38",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "64d328d2-bd56-44ae-87c3-67368b30e2ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "841d4ac4-f3a8-49c1-868e-20c2e56ee9d2",
        "cursor": {
          "ref": "89352704-cb90-4774-8e19-a99360d31a33",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "b6dfc07f-97b5-4efe-81a0-2e76051f40a6"
        },
        "item": {
          "id": "841d4ac4-f3a8-49c1-868e-20c2e56ee9d2",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "213a87af-c74d-4696-9b20-e7ebe8db6f3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6f338ee-cac7-460b-80de-8be45ee33350",
        "cursor": {
          "ref": "4849a751-90a0-4a07-97ad-9d3f36c8109c",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "de910365-8c74-4bef-bb8c-7b6156f94044"
        },
        "item": {
          "id": "d6f338ee-cac7-460b-80de-8be45ee33350",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b95f1ae8-61b1-4786-b3ae-b0cda62ebb5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82e1d373-45ce-44f6-b6a1-75602a2c83e5",
        "cursor": {
          "ref": "1b905dd3-000b-4191-a0ed-45455ae9cb20",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "aa2919ff-60fe-404c-ab31-716098884e4e"
        },
        "item": {
          "id": "82e1d373-45ce-44f6-b6a1-75602a2c83e5",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7a76d495-0c7b-443e-b510-5b8a729586e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "263105cc-cf47-4ea6-99ad-76342c05d6bf",
        "cursor": {
          "ref": "4fc51bfd-e887-4418-b338-c284dd643a65",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "b1497e9c-c2f4-446b-9fae-8e51c0266fa3"
        },
        "item": {
          "id": "263105cc-cf47-4ea6-99ad-76342c05d6bf",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "dae4c2e7-ec68-41fb-bef0-6e410f3e5ff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c3db25e-30f9-498e-8936-c5f3fc7bf6dc",
        "cursor": {
          "ref": "745b1125-47a7-43da-8b8d-06aa87b29701",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "381643a3-c494-4f0a-a7fe-b667148dfc9b"
        },
        "item": {
          "id": "1c3db25e-30f9-498e-8936-c5f3fc7bf6dc",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f01671e8-4a08-4cd6-acc5-69da55c6d16b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74d7b74-dc01-4835-b2de-7198d443a7c8",
        "cursor": {
          "ref": "5832b2f5-3730-4879-b008-a60e73c8aa2d",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a08ea8b8-c4a8-41d9-88a9-125fec35c171"
        },
        "item": {
          "id": "d74d7b74-dc01-4835-b2de-7198d443a7c8",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1dc9c9e6-6239-48b7-bf62-48de01f15490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c8465c6-2624-4669-97fe-267c1404ea87",
        "cursor": {
          "ref": "15f928d8-0bdf-4e0f-881f-add27c707a27",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "3a69c8d3-128e-4415-84cc-df39b0345548"
        },
        "item": {
          "id": "5c8465c6-2624-4669-97fe-267c1404ea87",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b084690b-5049-4b7e-af55-03d7435127db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c785abb-15d5-4e36-a72a-1658b80dc47e",
        "cursor": {
          "ref": "1c739b51-bac4-4651-8344-16e6d1233deb",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "97539a3c-2660-46d0-b9f3-912ce4d0fac8"
        },
        "item": {
          "id": "7c785abb-15d5-4e36-a72a-1658b80dc47e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "05a6ee94-c3de-41ec-b2ab-d7f271eec6d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1922335-3a5d-4f2b-940e-4dd51d4a385e",
        "cursor": {
          "ref": "ff878021-3f15-4c8e-96a8-51d9ca4667ed",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "959bf8cb-bf9e-4152-a836-24b2fd7812ba"
        },
        "item": {
          "id": "e1922335-3a5d-4f2b-940e-4dd51d4a385e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c3cfb5d2-cdc4-4d0e-b04f-512e725438da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "500221b2-3cba-44d9-9c64-ae08bad903f8",
        "cursor": {
          "ref": "0aef7daa-34ee-4daa-9ff9-e9ee8900f4df",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f8cd6829-ef76-4ffd-a278-12570cd57981"
        },
        "item": {
          "id": "500221b2-3cba-44d9-9c64-ae08bad903f8",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0fad75c8-155e-4547-ac29-c270e7ad137d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30a11cf2-14fe-4451-bcc6-1b8a0944bf54",
        "cursor": {
          "ref": "a27c5622-4eb0-4aad-8fa7-8c169bed6639",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c949fa83-98fc-4fc0-857b-8f70284a722d"
        },
        "item": {
          "id": "30a11cf2-14fe-4451-bcc6-1b8a0944bf54",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "562615f9-d5ce-4bca-abd4-bba226f97ddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a778fe22-8d41-451f-92c2-436e368e9e15",
        "cursor": {
          "ref": "7801895f-6808-4070-a005-dda11e8bff74",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ad3e381b-b996-45df-b946-506cc26d89a8"
        },
        "item": {
          "id": "a778fe22-8d41-451f-92c2-436e368e9e15",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b33bb692-66c9-40a9-8d07-fff7ec3e0d6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7c223d4-6ef1-48c5-b50f-31bd10a43fc1",
        "cursor": {
          "ref": "85eda01a-a74b-4859-ad32-72f8f64d1e6b",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "36a24234-9fcd-4fbf-904d-2e7777b7989b"
        },
        "item": {
          "id": "e7c223d4-6ef1-48c5-b50f-31bd10a43fc1",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c0c64d41-beb0-4a82-b69e-5e6b19178505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94b43d1a-d9d5-44ea-bf8d-4de1db4023d8",
        "cursor": {
          "ref": "66d80a62-f543-46d9-8b89-7150eac7e953",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "81a4a5e9-dac7-4419-8cd0-a543908b1efc"
        },
        "item": {
          "id": "94b43d1a-d9d5-44ea-bf8d-4de1db4023d8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8d76011f-f59e-4bf5-812d-b38a6c278c20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c51ff6c0-0b50-4aeb-b626-e7efacc669b4",
        "cursor": {
          "ref": "d2873860-fb4c-4974-aca0-e86d92b48a77",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "2ea7097f-3f43-4d79-94df-44230501111b"
        },
        "item": {
          "id": "c51ff6c0-0b50-4aeb-b626-e7efacc669b4",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5713bd7d-066a-4a21-9a7e-85dc25d4f5e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be1db6d8-2c85-4ef7-a553-155ae6ba3dcd",
        "cursor": {
          "ref": "ddfd82b6-e9b2-43d6-9386-a1faecbe1f16",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "96a17b01-3c74-4301-857d-ce4e0eb49ed7"
        },
        "item": {
          "id": "be1db6d8-2c85-4ef7-a553-155ae6ba3dcd",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "32246d3d-ac88-4546-81db-1fd28726a354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4b41d9-c841-4b6e-91de-dae5d1954dfc",
        "cursor": {
          "ref": "81681c6e-0141-4ded-bd8f-dcf11fcd2c1e",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "a77540ad-ef76-4f03-b925-ebd18a38b9b0"
        },
        "item": {
          "id": "bc4b41d9-c841-4b6e-91de-dae5d1954dfc",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "68554b93-182b-4db3-83e8-165789a28e8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff54c1fd-fbc6-4611-8e5d-ee3a2d864baa",
        "cursor": {
          "ref": "fdc18bb8-acd1-4d03-906f-a0430599253b",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "3952736f-b5a7-4d6f-bbad-ace5f39e063e"
        },
        "item": {
          "id": "ff54c1fd-fbc6-4611-8e5d-ee3a2d864baa",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ed59ab11-e86b-4d48-8abc-38cffe908875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14e6a346-55b9-43e1-a856-62ed652fc0e7",
        "cursor": {
          "ref": "8c2b1daf-293a-4c9f-9448-e09a79a9c2a2",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "bbf85db9-2519-4fe9-b38a-7c9515c6264f"
        },
        "item": {
          "id": "14e6a346-55b9-43e1-a856-62ed652fc0e7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "51522172-6095-49d9-8fa3-575625229c89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b05593-f801-42fb-ac2c-9550631aa18a",
        "cursor": {
          "ref": "5804663f-2785-4c36-85cb-1893edfa1f51",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "bbc2b89f-a491-49be-a25a-6ed0688dd001"
        },
        "item": {
          "id": "31b05593-f801-42fb-ac2c-9550631aa18a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3e655697-cb7c-4640-916b-fa537869b342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1363529-331f-4d3b-ad42-f5f98c51aac5",
        "cursor": {
          "ref": "ce2fb8cd-cbe7-48d5-83de-18b56b25894c",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "9fd88990-8fea-4df5-926c-4a2bdd1b5ca7"
        },
        "item": {
          "id": "b1363529-331f-4d3b-ad42-f5f98c51aac5",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "71729cc3-99d3-4813-bf19-eb1a773baac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e217fda8-ca0a-4aa5-80ca-c35b8229e4a8",
        "cursor": {
          "ref": "4787db71-c466-4c4b-96ad-4e6a43c3133c",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a3f17822-503c-4519-909b-44e765b94bbe"
        },
        "item": {
          "id": "e217fda8-ca0a-4aa5-80ca-c35b8229e4a8",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "46885a87-a5fd-449c-8d2e-c956d1d3ca4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da9052f2-a855-49a9-a432-12ba89018344",
        "cursor": {
          "ref": "e4e86163-61e1-437b-86db-4a13da08dbf9",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "324239da-1a98-44e9-8443-6443ebd1e51b"
        },
        "item": {
          "id": "da9052f2-a855-49a9-a432-12ba89018344",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "09bbd971-d061-4db0-a59b-8988a2965fe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30a26695-7b66-4807-833a-9945cec21692",
        "cursor": {
          "ref": "43225a38-d579-47cd-ae5d-a51196c330db",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a89a7b01-d69a-40d8-9756-b93b00f93f85"
        },
        "item": {
          "id": "30a26695-7b66-4807-833a-9945cec21692",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b50cb437-7df1-4798-a232-d21a6c6e51e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15f7d156-a2a4-497d-bb3e-162a7a442a47",
        "cursor": {
          "ref": "5fb5856d-4671-4ec9-968e-4e56ebc1fefe",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b6501726-5180-4192-9a72-cd3b3ceb6957"
        },
        "item": {
          "id": "15f7d156-a2a4-497d-bb3e-162a7a442a47",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "a683a386-2508-498a-a4a0-8a85f193fcef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9932405a-448c-4ff8-95b2-ca1c21eb1308",
        "cursor": {
          "ref": "a0f829b8-7298-4bc6-8f99-b7243f086249",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "7bd7766c-745e-4d53-a58b-d56b0bf6fd3c"
        },
        "item": {
          "id": "9932405a-448c-4ff8-95b2-ca1c21eb1308",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d37b5a9f-8878-4d45-adba-b83ba63eba9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "400e8824-46ee-4de2-b571-318783c4e32d",
        "cursor": {
          "ref": "6b0f6d0b-13c7-40e2-85c5-ff161364c5f9",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "70e19e1a-5179-40e8-8b2d-dc8010be1b84"
        },
        "item": {
          "id": "400e8824-46ee-4de2-b571-318783c4e32d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2d33a1fa-e495-4334-8462-30bca0fa89eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f5dd9e-657a-48c0-84d6-18337e54eb82",
        "cursor": {
          "ref": "cfefb210-3ef4-4541-9e06-bc476354dcdf",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "d2ac31e5-3b60-4037-a157-4315912368b6"
        },
        "item": {
          "id": "f8f5dd9e-657a-48c0-84d6-18337e54eb82",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d154a4f8-bad8-4d7b-973b-92e42f2b71e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82ff092f-7bc1-4c06-91a2-b8171dbc7488",
        "cursor": {
          "ref": "9cdcd2bf-784c-4e4d-8126-d02de581ad92",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "50d8e733-821c-4746-83aa-081010efa923"
        },
        "item": {
          "id": "82ff092f-7bc1-4c06-91a2-b8171dbc7488",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6e87d4f2-d09f-41ee-ae46-1093404a80d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5182429c-0deb-44e1-8cde-1bcad704b589",
        "cursor": {
          "ref": "d8355a1d-e908-4de5-84f2-6204334a135c",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "cb41178f-efca-4e9b-a251-49de5a9023a5"
        },
        "item": {
          "id": "5182429c-0deb-44e1-8cde-1bcad704b589",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e7ec96f6-be2d-48b2-93c4-0f33c6e9e12a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37dcb1ee-4635-44ba-b129-19da8688b261",
        "cursor": {
          "ref": "baad6257-aa13-4e86-9d54-f8dfa092e53d",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "51a245c5-1b56-4c15-a209-73789d56a68f"
        },
        "item": {
          "id": "37dcb1ee-4635-44ba-b129-19da8688b261",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f79fc342-f352-4387-befb-6a4e7dde6c30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a39790f-d011-45d6-b234-20f8959e1b6f",
        "cursor": {
          "ref": "b638ab7c-3643-493d-83c5-404e5ce4999a",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "bcd4e99a-1e2b-4f06-bfda-69355324c329"
        },
        "item": {
          "id": "2a39790f-d011-45d6-b234-20f8959e1b6f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ee54fbd4-4d09-4b3e-a87a-7e84b4530bf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb1ef6b6-ea5e-4d63-82fa-51b69c27bf44",
        "cursor": {
          "ref": "5853a533-ebdf-4876-bac1-243aa689db29",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "52554a76-dc01-4508-8fea-e41086d86b37"
        },
        "item": {
          "id": "cb1ef6b6-ea5e-4d63-82fa-51b69c27bf44",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "961bc013-dcd8-4951-8b89-4078851c309d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ec527d-2bd2-4714-afdc-5e257ecf55e3",
        "cursor": {
          "ref": "10ccc4c3-dd93-43c0-802c-05a8177073c8",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "ac21e790-8abb-458f-bf67-9680a81435ab"
        },
        "item": {
          "id": "d3ec527d-2bd2-4714-afdc-5e257ecf55e3",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "74ce71cc-3981-4a62-b37c-f91af1004424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44b75e45-24d5-49ef-9b77-29d08f0ae4d7",
        "cursor": {
          "ref": "2411ede8-48ad-4abf-b7b5-0e71e1b06a24",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f250ec9a-5cb4-42d0-9325-8b8ca676fb87"
        },
        "item": {
          "id": "44b75e45-24d5-49ef-9b77-29d08f0ae4d7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "60c2e559-2ebe-4f96-a6b3-f99663a955b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bed44d4-a2b6-4e79-a82c-84235b961995",
        "cursor": {
          "ref": "e210699f-2b39-44ac-a3d1-6fd3ae9b4d00",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e2500453-c169-45ed-86bf-6bf967a470e4"
        },
        "item": {
          "id": "2bed44d4-a2b6-4e79-a82c-84235b961995",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "34897bce-b809-44ea-8f71-8363a985b139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29c5f9b2-59b9-4fa9-9311-32ea73fe75e8",
        "cursor": {
          "ref": "d7102a7b-fcfb-41c2-9d82-fe33dc3c156a",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d1851d84-2d7e-47a5-94a2-a949c4d2b742"
        },
        "item": {
          "id": "29c5f9b2-59b9-4fa9-9311-32ea73fe75e8",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b1c3c619-0498-49f7-a22b-163637274fbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdd03884-58bb-4cd4-9258-0370bb66d4d0",
        "cursor": {
          "ref": "433522fe-0cec-430f-a8f9-75875503e61b",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "79b886e3-48c7-4a8c-8f3c-4b0f3d4e8325"
        },
        "item": {
          "id": "fdd03884-58bb-4cd4-9258-0370bb66d4d0",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f39dd0e2-c788-4799-8544-3fa0a0c369dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77779698-6954-42a5-a7f9-070cd4a32a63",
        "cursor": {
          "ref": "e95ef460-e3f2-4fdf-af50-0fc848c8ca59",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e6d034d9-f97b-4044-8252-ff3665a9e4b6"
        },
        "item": {
          "id": "77779698-6954-42a5-a7f9-070cd4a32a63",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "110ea4cb-462d-4c32-a25e-0ae1a8bc1e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a315d88e-edb8-420e-8323-7e7f16d4bab5",
        "cursor": {
          "ref": "a5d5c3d5-b308-4c78-8ce7-39ceb3b88a31",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "e878e18b-c3d0-4bd5-a0fa-4d127bb0150d"
        },
        "item": {
          "id": "a315d88e-edb8-420e-8323-7e7f16d4bab5",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "777335f1-9715-4956-93b3-857f23db69d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fada2b9-6118-4f49-aba4-45421f5d5daf",
        "cursor": {
          "ref": "fca87103-b913-413e-865a-ecf5bff89a73",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "19624165-4541-42f8-8972-27216f594047"
        },
        "item": {
          "id": "2fada2b9-6118-4f49-aba4-45421f5d5daf",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "91bc3336-b752-40b9-ba11-c27d3a6eabfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "444b7859-39d1-4180-b64c-1759a507adc2",
        "cursor": {
          "ref": "9d42cd00-29bc-4d32-a6a6-c812e5a11cf9",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "4c7fa72e-a739-46e3-9649-73d52ad3c92e"
        },
        "item": {
          "id": "444b7859-39d1-4180-b64c-1759a507adc2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "65294431-8ad3-449b-9508-ff3ffc0c9091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2855c39-24e7-4c7f-93a2-b6c2cbe1932d",
        "cursor": {
          "ref": "33126ac1-cef8-409f-95c0-ad59757814d2",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d16c2ada-892f-4781-ad7d-1f2039ff0646"
        },
        "item": {
          "id": "d2855c39-24e7-4c7f-93a2-b6c2cbe1932d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d9caa779-7abe-49fc-8647-63b430a3ec04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "168bc84a-f312-479d-9bc6-5aaf6b5ed896",
        "cursor": {
          "ref": "70bccc39-d698-4507-b726-89c79bd382b9",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "ce2b3328-7069-422e-891c-9eca3c199dcc"
        },
        "item": {
          "id": "168bc84a-f312-479d-9bc6-5aaf6b5ed896",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "eb4fa77e-16b1-44c9-86f1-22a741e03051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "294b6fd8-3b74-4245-b4af-6a801aff59ee",
        "cursor": {
          "ref": "c174ea88-2c6e-420f-b054-0c9a5f0c1b8b",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "3364bfd3-6447-4b08-8759-bafaf7e45797"
        },
        "item": {
          "id": "294b6fd8-3b74-4245-b4af-6a801aff59ee",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7ce9561f-a297-44c4-9a77-d651213bae1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94b42cd4-5c09-4184-b7ae-6ee4ea915066",
        "cursor": {
          "ref": "2e1bbf8e-9314-4602-ad47-5f0220fb0fb8",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "372d30e6-4801-4573-bd23-6a93d9b6194e"
        },
        "item": {
          "id": "94b42cd4-5c09-4184-b7ae-6ee4ea915066",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "343be2e5-b82b-461c-bcc6-c65578496027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80ef2404-be45-43d1-a57b-d7d86ea938e4",
        "cursor": {
          "ref": "4cb4b7bd-2e97-43f8-ab76-54afaf628f75",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "8ff00f6d-14fb-45fa-aa82-e45556c8c4ef"
        },
        "item": {
          "id": "80ef2404-be45-43d1-a57b-d7d86ea938e4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "88cdc60d-9f88-4e5e-b914-15a2cf4f16fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a88cf1f9-30b6-4df9-a61e-32ba87a37c3e",
        "cursor": {
          "ref": "75d819cf-5a88-4dda-a01a-8f315873ce71",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f36424ce-d3be-4658-9f02-6a58f4a28841"
        },
        "item": {
          "id": "a88cf1f9-30b6-4df9-a61e-32ba87a37c3e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6bea3b8a-5002-4af9-bb11-d3b66747d22c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24fa8ae7-5498-40df-91eb-45ac6a33a38d",
        "cursor": {
          "ref": "8f4d4afb-89e7-42cc-afe0-d9ecdbea15fc",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "00ed14d5-8358-4c08-a5c8-6c2af7833b14"
        },
        "item": {
          "id": "24fa8ae7-5498-40df-91eb-45ac6a33a38d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "0bdfe4ec-8c26-44ea-9c77-a679a845cff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06c7078a-cde6-41c9-bc2a-cf5b6555ef5a",
        "cursor": {
          "ref": "c4a6c465-707a-4db0-9583-f0273e2fd6d0",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ae977445-b42b-427e-acea-83c518ef95be"
        },
        "item": {
          "id": "06c7078a-cde6-41c9-bc2a-cf5b6555ef5a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d7cf82cc-a389-4c6f-929e-dfb1ae75d862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63f6b85d-a095-465e-92da-ebbd445bda50",
        "cursor": {
          "ref": "5269f265-23a9-4822-baea-5d64a63a6e26",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "3c752c22-fc14-4e56-876b-66e831ef9fd7"
        },
        "item": {
          "id": "63f6b85d-a095-465e-92da-ebbd445bda50",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "51e9e38d-aeef-46b3-a809-ba6e162fa910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d78fdcff-e686-4238-a869-6b4bb80c0fdd",
        "cursor": {
          "ref": "5a132ba0-eec0-4799-8e2e-b45ed777fbc4",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "44c4b059-3aba-42bd-8dfd-c11c76bc1c7b"
        },
        "item": {
          "id": "d78fdcff-e686-4238-a869-6b4bb80c0fdd",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "316ad655-8a3c-40d8-b590-7bd64bf8c8c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf2318d4-c840-407c-95cc-af8de25d6c70",
        "cursor": {
          "ref": "147a7c3d-d674-4063-a985-cadca8ed38d3",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "568533da-15bf-49e3-b67b-0ec917f72083"
        },
        "item": {
          "id": "bf2318d4-c840-407c-95cc-af8de25d6c70",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c7a1d5d5-253a-483d-ad6a-b61c0b55906d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5463f99e-0b3f-4172-84a3-6aab93abe26d",
        "cursor": {
          "ref": "b4f344f9-9f50-4155-87d8-38d301991c91",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "eb09f82a-882a-4f95-92a9-d8dfe07c7f4c"
        },
        "item": {
          "id": "5463f99e-0b3f-4172-84a3-6aab93abe26d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "979cdb30-4c88-45c5-9257-83a778e9310b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7213c7af-ac81-44eb-9f71-be8d5530027f",
        "cursor": {
          "ref": "13a87139-deca-4eef-9ed5-3b91be55e640",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "90c35ab0-2574-43fd-9a03-4d28c85b01e3"
        },
        "item": {
          "id": "7213c7af-ac81-44eb-9f71-be8d5530027f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "131acf69-b2d5-4454-a8e3-1180db4763f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f595da49-bd68-43bb-a303-cf2a7a1e833f",
        "cursor": {
          "ref": "ab258d0f-5e71-47a3-83fe-a520deb3317e",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "193522d6-1437-4f96-aa25-7b42eb5bc40c"
        },
        "item": {
          "id": "f595da49-bd68-43bb-a303-cf2a7a1e833f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "87fcbdc3-803b-4854-a585-9d1c3e1b5ede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "197f8186-29eb-4364-8349-674de21f5a32",
        "cursor": {
          "ref": "9d3987e3-a5a0-4315-b479-8fc038ece37f",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "4f15508d-b6fc-444c-8894-dca24abc0304"
        },
        "item": {
          "id": "197f8186-29eb-4364-8349-674de21f5a32",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f7fbbb86-c164-499d-9573-17496d8dcdb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6007978-8ba3-41c7-add7-f98379497ff6",
        "cursor": {
          "ref": "ad6c57c8-b0e0-4422-849c-b1834c214e9d",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "2fdab439-75f2-4526-9dec-ecd10917efe8"
        },
        "item": {
          "id": "d6007978-8ba3-41c7-add7-f98379497ff6",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "ca588c1f-b798-4201-847d-fc11fe72aa75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b785446-46e0-4c50-9ec1-07b4194f470f",
        "cursor": {
          "ref": "ab5f44f5-328f-47e2-b402-23cb15859920",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7ebf7c47-5087-418a-9c59-692a52c1dba7"
        },
        "item": {
          "id": "9b785446-46e0-4c50-9ec1-07b4194f470f",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "d34d9831-0959-4d2b-84ab-10163e184cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2450fdc3-b57e-460f-a0ba-43825d0a9c9d",
        "cursor": {
          "ref": "bb368713-e17e-47cc-910c-3e3a84a8e478",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0b44fa1a-51a2-4454-a7e6-092c09943f51"
        },
        "item": {
          "id": "2450fdc3-b57e-460f-a0ba-43825d0a9c9d",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "f1a06b7e-a10d-4fc2-8d5a-03230771df31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ad201bc-da20-42b8-9cbc-984984e52a4c",
        "cursor": {
          "ref": "901e9469-adbf-4e2b-9bdd-47ce92b40158",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "2b9858b0-aeed-45a9-a7c8-cdfd5093cce4"
        },
        "item": {
          "id": "5ad201bc-da20-42b8-9cbc-984984e52a4c",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "84c68f21-3897-4f4c-a276-ceebd6ddb211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "542b1e95-4106-4acc-8ce5-9691a4cb3018",
        "cursor": {
          "ref": "af1851dd-76ae-4a1e-bbdf-8da30f7e890d",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "bd96b784-696d-45c8-a885-22215414ca63"
        },
        "item": {
          "id": "542b1e95-4106-4acc-8ce5-9691a4cb3018",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "27e6334e-a4df-4208-bb8c-33755227b522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b97ef8db-e6fb-4969-b282-e0b2344b8a83",
        "cursor": {
          "ref": "45aebfc2-0b1e-40b2-b8e5-ae03a952cca4",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e5c9c0a0-ff85-4be1-9b8f-41bcf6c0ed61"
        },
        "item": {
          "id": "b97ef8db-e6fb-4969-b282-e0b2344b8a83",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "7535b18e-392b-4f01-b423-a3bfc0b8348c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf39707-b5fa-45fc-a61e-129a5cf79be0",
        "cursor": {
          "ref": "f429066c-b174-4ad4-8fc1-6619f5c1ea0b",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "179888c4-1106-4056-a5ae-fa24fe39d88d"
        },
        "item": {
          "id": "7cf39707-b5fa-45fc-a61e-129a5cf79be0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "107a3824-a70e-43cb-bf9c-60b25b7c4016",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31281adf-bcef-4b39-ae4e-b0c26ed1fdeb",
        "cursor": {
          "ref": "277931a7-1d60-4338-ab2a-365bd27f21da",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "bb6214a1-707e-4baa-a2d2-ee23455cfff8"
        },
        "item": {
          "id": "31281adf-bcef-4b39-ae4e-b0c26ed1fdeb",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8100f94d-b514-4cba-bff1-d904095ca5a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab356204-5a2f-4148-abd8-194b238937bc",
        "cursor": {
          "ref": "ce6a380d-1af6-4222-a910-7e382cdb001a",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "88daf03a-e481-4810-af45-477cb10a4c2b"
        },
        "item": {
          "id": "ab356204-5a2f-4148-abd8-194b238937bc",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0f07a0b4-f7fd-4bdd-9181-85060767485b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4ef52d8-4d37-441a-b227-1704d907763e",
        "cursor": {
          "ref": "d63d14e3-e7b1-4c6d-9d39-747b38bb87b4",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "f2da9c88-c59c-46a0-8fb9-ea3d0588c90f"
        },
        "item": {
          "id": "d4ef52d8-4d37-441a-b227-1704d907763e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "81bfc61c-2944-48b4-8096-a6c3c8fd672f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e46842-d5c8-4cf7-a51c-6ded5db406d7",
        "cursor": {
          "ref": "48eb0a40-3a6c-4540-92cf-1f6417d9fcc6",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "1de95e14-6cf1-4471-a83b-07ed8f2d1599"
        },
        "item": {
          "id": "a7e46842-d5c8-4cf7-a51c-6ded5db406d7",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "78b0ccbc-7d1b-4c6b-bb87-367c2df6604e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "810cd091-95b1-412b-b55e-9956fb4e23a0",
        "cursor": {
          "ref": "f85dd31b-ca0a-4ae1-bc3a-50d17d91b5f8",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "0758ef43-41cc-43c7-b93b-a94d92f49e62"
        },
        "item": {
          "id": "810cd091-95b1-412b-b55e-9956fb4e23a0",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2549b09c-4584-41d8-b166-c1bea12d28db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6059c96b-e542-4cff-8767-3036f7f67d3b",
        "cursor": {
          "ref": "2d3da671-e4c1-4f9e-8464-3da7f60d5e25",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "36061a0e-1bcc-479f-97a2-d47c8285e6a0"
        },
        "item": {
          "id": "6059c96b-e542-4cff-8767-3036f7f67d3b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0217f70c-1a19-4b83-af87-dd2c5b0f6afb",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "f1e8fd60-3012-4da0-8f62-443e25cf5d09",
        "cursor": {
          "ref": "9078a0d0-a195-4841-99b9-8c5e10108611",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "f4b3144e-06f5-4d58-a891-6571ef91b4e9"
        },
        "item": {
          "id": "f1e8fd60-3012-4da0-8f62-443e25cf5d09",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1c3072ea-d2a0-40b5-9af1-34173b40f146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67604aad-b3a5-46d1-b90c-b253155bb849",
        "cursor": {
          "ref": "2ee54d37-a643-4cce-8600-caf5c98d3eb1",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "6264affd-0942-492e-bc01-06e4461a29db"
        },
        "item": {
          "id": "67604aad-b3a5-46d1-b90c-b253155bb849",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "531ec52c-40b4-4b0a-af41-5d17a6926a98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0159c254-368c-4f80-bc0c-d795850d9f2b",
        "cursor": {
          "ref": "e7440822-5af5-420c-a2b3-155a14212641",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e8b6fa42-359d-4b29-b3bf-aacdd47ea30b"
        },
        "item": {
          "id": "0159c254-368c-4f80-bc0c-d795850d9f2b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d5ed6c4f-cdbe-4ab5-9c11-b95cec62836a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e0781a-802c-4a7c-8291-839cfaa200fe",
        "cursor": {
          "ref": "5441d722-20bd-4c77-ba5d-2dab8c9db306",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "6bafb076-f272-46d9-9bd6-6030746194c2"
        },
        "item": {
          "id": "12e0781a-802c-4a7c-8291-839cfaa200fe",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "918ff9b5-9362-4215-9510-0799ea17f190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7821f5aa-5aeb-4c5e-a67d-6160bbf49308",
        "cursor": {
          "ref": "2440815d-b8d7-4c02-a5f9-fcb774df4340",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "1f6de34f-502f-461c-bb6d-b5cabb44fdbb"
        },
        "item": {
          "id": "7821f5aa-5aeb-4c5e-a67d-6160bbf49308",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "51602977-7ca9-4074-8b6c-2dd0751728ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8709d4eb-8eb0-40fc-8807-07315d27dc5d",
        "cursor": {
          "ref": "92e884a0-ab01-43c2-b204-096a017c2bdc",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "5fb3bab7-8608-4314-b1c8-84181839b08f"
        },
        "item": {
          "id": "8709d4eb-8eb0-40fc-8807-07315d27dc5d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "ffd99c3c-63aa-41ca-816a-ad62f9261e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d13cf131-67e0-42e5-9f02-1fef60bfdf7d",
        "cursor": {
          "ref": "f5e8e938-309f-403f-8353-a2e92676c7ad",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "6bef900c-8285-439e-b468-3a969ac03a81"
        },
        "item": {
          "id": "d13cf131-67e0-42e5-9f02-1fef60bfdf7d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6673284f-1370-451d-abd2-6278943d5956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67cd46bf-c5e7-4d83-8bbb-f7d51f9bb840",
        "cursor": {
          "ref": "5cfd6cce-f9ac-4b19-8412-b45bc537bc0d",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "e849b713-6871-4579-b09e-2f80185ffb59"
        },
        "item": {
          "id": "67cd46bf-c5e7-4d83-8bbb-f7d51f9bb840",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "03554008-8916-4ecc-b4e5-e7a4dcaf1fab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3701293-28ec-4ff6-980d-687a244de89c",
        "cursor": {
          "ref": "48513739-8d5e-4048-9dca-603d4e82b3ca",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "88c81549-3a4c-4050-b1fa-270684691dcd"
        },
        "item": {
          "id": "f3701293-28ec-4ff6-980d-687a244de89c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "e3a99da5-8ca1-44b1-a21d-9bf5703a5782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f83e8e9-658d-4515-8a83-86f1a80af3cb",
        "cursor": {
          "ref": "984f201d-27d4-48dd-bc25-27909018fb76",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e1e9bd5e-7e9d-4efb-9289-a9283503f3cc"
        },
        "item": {
          "id": "9f83e8e9-658d-4515-8a83-86f1a80af3cb",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "eea42cb3-50d5-438d-9851-051662ccba2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b5d5600-239f-4de8-9d1a-8e6c501d4f9f",
        "cursor": {
          "ref": "f5d07f56-7d5c-4623-bbc6-0340952357fe",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f3be286f-53c2-486e-8b29-5d49cb026e16"
        },
        "item": {
          "id": "0b5d5600-239f-4de8-9d1a-8e6c501d4f9f",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "ff40ad31-e10b-43ce-8524-5ade74a3fcf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dd19422-0272-45f5-989d-abc818741f76",
        "cursor": {
          "ref": "52a4e65d-dfea-4af7-94ce-a367fcb96779",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a1427cc3-9024-4f7b-849c-a61cc2836169"
        },
        "item": {
          "id": "1dd19422-0272-45f5-989d-abc818741f76",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "709221a0-88d8-423c-9541-32661ca8b213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b76e29d-dd93-4ba1-8e2c-814b82d8dc62",
        "cursor": {
          "ref": "87d31c92-fa7b-4a0a-80df-104339e87637",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "75a917f1-f958-49e7-bb68-8105d7ec91f6"
        },
        "item": {
          "id": "2b76e29d-dd93-4ba1-8e2c-814b82d8dc62",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "9350f16f-dbde-47a3-9cdb-52183e91a1e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08de7e4a-9f1e-4e43-a9bc-c6949f14f943",
        "cursor": {
          "ref": "de531c87-52a4-4ca8-8809-9d6563549f1e",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "43bbb3d6-11cb-43b7-8d29-41b3c504e0f8"
        },
        "item": {
          "id": "08de7e4a-9f1e-4e43-a9bc-c6949f14f943",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "11aa6a3d-66d7-4ecd-96bb-dc20ecb61c2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2890dddc-d65e-461e-992f-360e409110c6",
        "cursor": {
          "ref": "97a1a9d0-cee8-470d-b958-4520857ad4d7",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "97feb1b3-2a87-4506-b868-4b6462a710ff"
        },
        "item": {
          "id": "2890dddc-d65e-461e-992f-360e409110c6",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "1518efd7-abe3-40f2-94de-a6cbdc50b45f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c90aae0-f701-47aa-9ae3-a6e3f237d562",
        "cursor": {
          "ref": "9f76a4a3-5dd3-4c0b-96d2-28bd7ee7ed71",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "4dc5f65e-ca03-4833-9c47-f7589d3ec781"
        },
        "item": {
          "id": "9c90aae0-f701-47aa-9ae3-a6e3f237d562",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "cba7cc41-95d2-4011-8eaa-2c440ce0c3c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "759b3cd1-8eb5-47b4-8cac-7b7906480ef6",
        "cursor": {
          "ref": "c3efcfeb-634f-48f9-aee3-559709f7a196",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d5d7bf1b-5561-4bc9-b1f4-c038e71a983d"
        },
        "item": {
          "id": "759b3cd1-8eb5-47b4-8cac-7b7906480ef6",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "bd864c9d-508e-4ed8-b83d-c460a3e58d5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ebe4c7-38df-47fb-ab87-7fdffd6f090a",
        "cursor": {
          "ref": "a6d85432-209c-40f0-853f-eff79524eb97",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "3252a5f8-3b13-4044-b3f6-6e6be50c02d8"
        },
        "item": {
          "id": "10ebe4c7-38df-47fb-ab87-7fdffd6f090a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "90d1dd4f-a6b2-4d4d-b68f-c511a76334f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a260d08-180c-4bfb-abe3-51986d811d6d",
        "cursor": {
          "ref": "4bb25a06-065a-4a9d-bd7f-a13ccd736378",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "fec3eadd-d798-4f64-b90c-6f8eb99041b1"
        },
        "item": {
          "id": "4a260d08-180c-4bfb-abe3-51986d811d6d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e87b155c-4395-4398-82a1-78e7d22be7ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44b9189d-b6d5-4f0f-b25e-62997f47fa6a",
        "cursor": {
          "ref": "44bca170-7e88-4339-bc45-99cc37226d60",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ab8fdd49-6b8e-42e1-9003-fca38d917b3d"
        },
        "item": {
          "id": "44b9189d-b6d5-4f0f-b25e-62997f47fa6a",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "34c01721-6b5b-44c8-bdff-0d6a409adfba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "152fdce0-9ed8-4820-a49f-7d3fb4c5172a",
        "cursor": {
          "ref": "b2b8cf51-c379-4978-a4a7-76e0a03c3eef",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "5332252e-4ca6-42bd-b155-6e4a95bdbecb"
        },
        "item": {
          "id": "152fdce0-9ed8-4820-a49f-7d3fb4c5172a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "07c9d598-8781-431b-b1c4-ed666ffdd2d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3da8e47e-4634-4774-ae3c-12f31a46811d",
        "cursor": {
          "ref": "036e4991-bde7-46f5-8a32-beba37e7a018",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "879d0a0b-dae8-4e32-9154-109199d611bc"
        },
        "item": {
          "id": "3da8e47e-4634-4774-ae3c-12f31a46811d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "880d1215-3b36-4d90-bf56-02190b7e98e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b29e37d0-15b4-4dea-aaf7-c1d6a62872a1",
        "cursor": {
          "ref": "7f37f77a-9a6e-46ea-85ff-db8ee4057a7f",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "4217aad6-af96-4887-80f8-4a1cb386cc42"
        },
        "item": {
          "id": "b29e37d0-15b4-4dea-aaf7-c1d6a62872a1",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "62be9bba-7ca1-4136-b757-880e671875b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1296074d-9657-46b4-b4b2-8fd67c3817c4",
        "cursor": {
          "ref": "8c9da55f-19e6-4817-84be-a7eab68b1f62",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ff57848c-37b2-4c8c-82fa-bd5e90e16f9d"
        },
        "item": {
          "id": "1296074d-9657-46b4-b4b2-8fd67c3817c4",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7e7e40d9-03d8-4a69-ba0d-0265c606e9fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74cbc2f-1a62-4d5d-bdae-9ec37810a00d",
        "cursor": {
          "ref": "69427e30-ac9d-48dc-84ef-d73a8f5d99a2",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "388739fd-6c35-47eb-83ac-658d0ddeb0e2"
        },
        "item": {
          "id": "d74cbc2f-1a62-4d5d-bdae-9ec37810a00d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "c5a26a21-13a2-4ba0-8070-93dbb75ac478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11c6cd4b-20f6-45ea-bbe5-fb25c32ca622",
        "cursor": {
          "ref": "7fea3576-2214-43f0-aee4-51a031f0888d",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8eb26ceb-8329-4f90-b7d9-7df21d319cb8"
        },
        "item": {
          "id": "11c6cd4b-20f6-45ea-bbe5-fb25c32ca622",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b36e9b70-bfdb-4d0f-ba78-7346e7ea81e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9e5bb9a-72f2-4caa-9aa7-6d717a5739fb",
        "cursor": {
          "ref": "9eda257c-bf2b-424d-82dd-e0903e6a7935",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e36d3d88-ab33-4af6-aaed-e0efd4052ec6"
        },
        "item": {
          "id": "e9e5bb9a-72f2-4caa-9aa7-6d717a5739fb",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b46ccf0f-ba34-45c6-b298-43a96ad02338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c618e39-4d7d-4a9a-9005-473efd55ee64",
        "cursor": {
          "ref": "bd163e2b-2206-4df9-b534-53761e79db93",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b33fb4dc-327c-4a5d-9245-206080a17480"
        },
        "item": {
          "id": "2c618e39-4d7d-4a9a-9005-473efd55ee64",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "88d1b26c-fb04-4539-b68c-e0c926d5acb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce42fd2-2645-4dbd-9f89-13aaa9be7e1e",
        "cursor": {
          "ref": "648ff55a-ed2f-467e-a239-3b0ecbc711db",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "fa6f7a3b-f6d9-4238-b14c-dcd7cf23389f"
        },
        "item": {
          "id": "fce42fd2-2645-4dbd-9f89-13aaa9be7e1e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "8aff27c5-b626-458c-b743-1ec3d13a135c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0864e34e-85f7-4f17-9438-032cfc980f2e",
        "cursor": {
          "ref": "6b02a33f-5cbc-4cc9-97d3-c87183e09fdc",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "85c431fa-3bc3-452a-b936-2a95fc7c6154"
        },
        "item": {
          "id": "0864e34e-85f7-4f17-9438-032cfc980f2e",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e87f0105-ae9d-4eb1-ab74-9098c8110aaf",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "214da20d-e78e-4235-b6ff-d96204a54948",
        "cursor": {
          "ref": "5c6de1de-608c-4971-82ac-75d95dc54d0d",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "506ac99c-c70b-4a58-a826-cdec08e07808"
        },
        "item": {
          "id": "214da20d-e78e-4235-b6ff-d96204a54948",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "4882b3d9-3817-4fe8-97ca-5689aea70fb7",
          "status": "OK",
          "code": 200,
          "responseTime": 153,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "e8b36f6f-56bc-44c9-8487-60819c6a33db",
        "cursor": {
          "ref": "e2e8c67e-ca53-48d3-862c-a2790deb4ec8",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f185fade-a197-4f4a-ae89-3d167175eb6d"
        },
        "item": {
          "id": "e8b36f6f-56bc-44c9-8487-60819c6a33db",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ca5c1e8d-60b7-420a-8da6-6b1b3ae5ac45",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "4a7f22f7-c8a0-49bb-b61e-106f88e2fb5b",
        "cursor": {
          "ref": "85c06c71-1d9b-4b5e-b114-088fae183660",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "0b04dec7-ada2-4d2e-a87d-cfbf0f4e5619"
        },
        "item": {
          "id": "4a7f22f7-c8a0-49bb-b61e-106f88e2fb5b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "57ec472d-eef9-4b82-9b01-94d639f49151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dceeb52-fba9-4f0d-b5aa-4d1b52eba3f2",
        "cursor": {
          "ref": "a1cf7bc8-cab0-4509-8ecf-bf491265b770",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "8c928472-67e9-4552-b54d-6b00f4a3bc58"
        },
        "item": {
          "id": "9dceeb52-fba9-4f0d-b5aa-4d1b52eba3f2",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f50bedb4-8f5e-4687-ac8e-754f1204f903",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "4a74574a-26e6-4124-809f-889c5741394e",
        "cursor": {
          "ref": "b36b782c-7bb3-4dd6-9f09-5c3aceef045b",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "73406416-eb6d-47c8-a2c2-b6dd4e59da2b"
        },
        "item": {
          "id": "4a74574a-26e6-4124-809f-889c5741394e",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "de89bfba-e13c-4540-aa00-d3603c73959f",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "0381b1d6-c82c-407b-ae19-000936f7b04b",
        "cursor": {
          "ref": "b55589b9-6d90-4c34-8044-15a8a4bffbb4",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "f7678cb7-4c04-4697-bbb2-c91adaaf162f"
        },
        "item": {
          "id": "0381b1d6-c82c-407b-ae19-000936f7b04b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "f8b20cf7-8822-4584-8af6-42aa46df9f09",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "8f96273b-3d5c-4136-a369-d76ab02a0369",
        "cursor": {
          "ref": "df86f20c-fb75-4aa7-a325-1ac387aba3cf",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "8e9458a2-96bf-4819-9b80-3e0fdc837098"
        },
        "item": {
          "id": "8f96273b-3d5c-4136-a369-d76ab02a0369",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "2fe2f72f-e642-4ead-a168-3c1f0903d048",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "a829673c-3043-4bd3-acc6-8c46bb05352a",
        "cursor": {
          "ref": "41527fc5-44d7-442c-a516-1d4fed3d3d12",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "9da1f435-0b82-4eaa-bcf9-8ea3ab81be37"
        },
        "item": {
          "id": "a829673c-3043-4bd3-acc6-8c46bb05352a",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "d16ca1dc-230a-44f5-bbec-df95d8e69de4",
          "status": "OK",
          "code": 200,
          "responseTime": 189,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "1c808987-a010-48c3-8fa7-b56315239b73",
        "cursor": {
          "ref": "b8269e57-d123-4838-9479-0a6ce85c8a47",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a423a4c5-e178-4e42-8781-e912c43318a6"
        },
        "item": {
          "id": "1c808987-a010-48c3-8fa7-b56315239b73",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b90d44c4-3e63-4949-903a-b86875909195",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "68d11c72-fef8-4610-a6fd-a54a001c0b40",
        "cursor": {
          "ref": "78ff0616-c3a4-49d5-9bea-ed9902075316",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "bdcf2566-37ee-4019-a231-27197986f4ff"
        },
        "item": {
          "id": "68d11c72-fef8-4610-a6fd-a54a001c0b40",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a0b024f1-27b1-4d23-a17c-6b7331975419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44b6721f-111e-40e0-b4d1-8ec113ba5e64",
        "cursor": {
          "ref": "823e463a-f41e-4612-8b8b-f7a65f561ec2",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e2d400de-f9af-4927-950d-ac27407299ac"
        },
        "item": {
          "id": "44b6721f-111e-40e0-b4d1-8ec113ba5e64",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "745826bc-8873-4a05-a68e-1b6435e3ca7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec4d504d-7bee-438d-b908-0f4c99562290",
        "cursor": {
          "ref": "609f2a97-f924-489f-8ad0-696214753344",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "b9265a44-6475-4b24-81e3-89965063a571"
        },
        "item": {
          "id": "ec4d504d-7bee-438d-b908-0f4c99562290",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "76333777-3a1e-4ba7-bca6-4ad6c8fdbc68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b78dff78-5126-4766-9a31-cc36b02bb8e5",
        "cursor": {
          "ref": "51bf32cb-7606-483e-a50c-fb727b574cc6",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "92c13fc7-1581-4db3-b065-bdd7ddc71abb"
        },
        "item": {
          "id": "b78dff78-5126-4766-9a31-cc36b02bb8e5",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "baf39e26-63ad-425a-902d-658f89a08ce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4733622d-12bb-447f-9a89-19872855796f",
        "cursor": {
          "ref": "45030a69-bacf-48ac-9582-2b36171a82d4",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "888e7f20-84f8-4b17-ae19-cec558d33d40"
        },
        "item": {
          "id": "4733622d-12bb-447f-9a89-19872855796f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "8ab72860-e3ac-43f1-87d1-b45a6da7d02c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5779b22b-5525-43a9-8a9e-2e46f187c1a5",
        "cursor": {
          "ref": "410b667f-96ec-4662-9f28-cf83673b3d30",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "4eb12e8c-de47-4b38-ab96-352759a21b2e"
        },
        "item": {
          "id": "5779b22b-5525-43a9-8a9e-2e46f187c1a5",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "001139e7-b206-4203-b7de-377cdf3d3236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "628e5b00-0237-4560-a256-b2225776ed63",
        "cursor": {
          "ref": "02eb1db2-2fb0-4cc7-9377-c40571f74516",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4fc3d1b6-c9d1-4ee5-948a-5a70426b7b79"
        },
        "item": {
          "id": "628e5b00-0237-4560-a256-b2225776ed63",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9b9ea700-c43f-46b0-850f-e88bedf4dc26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c741bec5-77a8-4359-8a61-50c66a0976c8",
        "cursor": {
          "ref": "4d3db927-6b1f-4844-8bd9-9c5e293355f4",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "65557892-3b5c-4b82-a833-4472351effb3"
        },
        "item": {
          "id": "c741bec5-77a8-4359-8a61-50c66a0976c8",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "0f2fa12b-4a0b-4635-882a-8efc34bf8b9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09ea3cdc-5ec1-4a1a-ad13-16c9e61bec77",
        "cursor": {
          "ref": "dbc5aa4a-adca-436d-98d6-b74a54311953",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "3a806341-9203-4b35-9cf3-84f37a0dbe4a"
        },
        "item": {
          "id": "09ea3cdc-5ec1-4a1a-ad13-16c9e61bec77",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d072f931-eb1f-47e2-a87f-43e0227e3b65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "571c752b-dd51-4cbe-8866-1e601bd3bdd9",
        "cursor": {
          "ref": "11669335-a8a4-4ce7-8821-77ba8346d640",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "a452c360-853c-4494-8c1e-e6dd16e963e4"
        },
        "item": {
          "id": "571c752b-dd51-4cbe-8866-1e601bd3bdd9",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9f464d56-b414-4ef1-badc-b58238a7e97e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb8f8000-298f-4105-8002-2aa5b01803d7",
        "cursor": {
          "ref": "70045b14-45fc-4536-98aa-5c9fa9e74ff7",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "dec65408-cf6e-4d60-bcc0-3cf6baea5fce"
        },
        "item": {
          "id": "bb8f8000-298f-4105-8002-2aa5b01803d7",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "fc92cd2e-5ce5-4090-84e4-c74eb493db81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1ae8d51-aca1-47a1-a03f-250eb73dd424",
        "cursor": {
          "ref": "bbaf871b-b297-408c-9024-e4c72c3639b0",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "71bbd7d8-0829-4f33-9043-bef5f7bc6363"
        },
        "item": {
          "id": "b1ae8d51-aca1-47a1-a03f-250eb73dd424",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "27c2d9ab-71f5-470a-af58-a41ca94de6f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "244835bf-0bb9-41b4-a7fb-0a4a2440cad5",
        "cursor": {
          "ref": "21f4354a-264f-4037-9587-7dc30c81ee8e",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "eb01ad1a-cb00-4cfb-adf0-012f32a0fb7d"
        },
        "item": {
          "id": "244835bf-0bb9-41b4-a7fb-0a4a2440cad5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "8eb49732-8b8e-4e1f-ad5c-b3e4e02edcc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfcc6d37-2b51-4eaf-9ccc-6cd7703b49d3",
        "cursor": {
          "ref": "93abe333-0a77-4daa-ae15-8caf5fa132b3",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a2c499c2-ed25-4ceb-95e9-dd37471c3968"
        },
        "item": {
          "id": "bfcc6d37-2b51-4eaf-9ccc-6cd7703b49d3",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "6fc1e595-097d-4990-8ad4-1597ca3aff08",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "3c071b12-a5ac-4144-ab57-0215c4da953a",
        "cursor": {
          "ref": "0a5b6a5f-1c1e-4c01-9f4f-64adfef8b4a6",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d4f6e271-5450-4887-8cef-39aa5d357a77"
        },
        "item": {
          "id": "3c071b12-a5ac-4144-ab57-0215c4da953a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e681c0e2-20fd-49e3-b0ad-810fbb718cee",
          "status": "OK",
          "code": 200,
          "responseTime": 316,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "fe00633f-013e-4b8c-be50-015d12dc1312",
        "cursor": {
          "ref": "37a3c50d-03ba-4baf-91d3-277fc0515e40",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d85a82d7-5ce6-4323-a541-b8f5bca06f8f"
        },
        "item": {
          "id": "fe00633f-013e-4b8c-be50-015d12dc1312",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "6c316f77-af81-4c58-96de-35ce76ee638e",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "63fe355d-3576-4277-b6dc-4158680bbaf8",
        "cursor": {
          "ref": "90932dc8-2b13-4439-8186-1ee8b3038124",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "8ad99a09-6c07-45ad-a625-a3a31ff40f9a"
        },
        "item": {
          "id": "63fe355d-3576-4277-b6dc-4158680bbaf8",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "2f39f094-0442-4cb1-b788-1406474489d4",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "510ee466-803c-4d58-9b5f-98ac74c86950",
        "cursor": {
          "ref": "f2592bf4-2853-42bf-b0f0-aa81562e52a0",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "74306dd7-f3aa-407e-a697-c1cb49005648"
        },
        "item": {
          "id": "510ee466-803c-4d58-9b5f-98ac74c86950",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "7231d061-b88d-476c-a662-c0b67f1f7b79",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "c48cb79b-0490-49bb-9210-f71b94a27000",
        "cursor": {
          "ref": "71f8dddc-f9ef-4c4c-b9f5-9a4e04eeb013",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "496b17a1-4501-41e0-bbf1-c548d4103b7c"
        },
        "item": {
          "id": "c48cb79b-0490-49bb-9210-f71b94a27000",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "14252f43-4f4b-4fc1-8f79-5b130eaade3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef4d9dd8-933d-46e7-9a5c-31af927f352b",
        "cursor": {
          "ref": "fb8c1d24-5693-4aec-a8ce-59bcbe9a9330",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "1884bada-637a-4ffa-b373-4f092f27d43b"
        },
        "item": {
          "id": "ef4d9dd8-933d-46e7-9a5c-31af927f352b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "74598f4a-0db8-40f6-899f-8af39d3b2030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac0dc43-4436-4cc6-ba59-e7ae88212401",
        "cursor": {
          "ref": "93b60468-db34-4baf-9a30-b58b5ae0f935",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "4b245d96-61d8-4250-b861-1df58d18242c"
        },
        "item": {
          "id": "4ac0dc43-4436-4cc6-ba59-e7ae88212401",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5739611d-f4dc-4409-96b7-28ccb91d5b58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba9f0a8e-1993-4871-9724-c194c1b7bd37",
        "cursor": {
          "ref": "67bb270b-ff4d-4e00-b5fd-c7037267a74c",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f6c484e8-e847-4517-b892-e25a3cdf76c0"
        },
        "item": {
          "id": "ba9f0a8e-1993-4871-9724-c194c1b7bd37",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "3e4f4365-171b-4c0c-b621-753dab72afc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2117c1b6-183b-4caf-a717-3f61f69b5dd5",
        "cursor": {
          "ref": "f74f4268-be8e-43d0-a4de-672c74bd83d6",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "76b7e948-745e-4976-97a9-79b6e0f49b97"
        },
        "item": {
          "id": "2117c1b6-183b-4caf-a717-3f61f69b5dd5",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "d4a729f0-44b6-4d52-a598-d4d25a132094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30fca070-f82f-47b9-b85b-825b34d997c3",
        "cursor": {
          "ref": "b14184f4-f984-4776-a1cf-1de3adc7ef70",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "99902ce9-b84f-4bea-87ad-c0ccb3c648a7"
        },
        "item": {
          "id": "30fca070-f82f-47b9-b85b-825b34d997c3",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e300dde1-ba62-4321-8c8e-7c5b2736c16a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3980a0ef-ea5c-4a8b-9780-63894de3e56c",
        "cursor": {
          "ref": "606a9319-e4c5-42b9-92e5-824db880f4dd",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "6ff19d0f-c5e9-4178-928f-66b3e777176a"
        },
        "item": {
          "id": "3980a0ef-ea5c-4a8b-9780-63894de3e56c",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "ccd6144a-112b-4d5b-a91f-0d4be5ec0617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0b1cbb9-9dd8-494d-a226-765527b0463e",
        "cursor": {
          "ref": "e2806331-e9da-486a-ad16-d7e783b44077",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "be68dd58-47a4-49a9-9e7a-da1751b67aac"
        },
        "item": {
          "id": "c0b1cbb9-9dd8-494d-a226-765527b0463e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "5f857e21-1986-45d1-a948-bb0f41c9affd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe0c472a-7039-4871-bcde-69b93b317c18",
        "cursor": {
          "ref": "a4edc9ea-10ae-477e-8ef5-0f8ccb5b162b",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "6f90763f-4589-496f-9ed1-5cad97f1f428"
        },
        "item": {
          "id": "fe0c472a-7039-4871-bcde-69b93b317c18",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8f322505-91e0-4160-9d37-f8ac731531d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "666346bc-0289-480a-a8fa-bad771fb81a3",
        "cursor": {
          "ref": "99748e45-8af3-4286-952c-08501e54aaa0",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "b3c2d616-164e-42c4-9091-b15934d35a8e"
        },
        "item": {
          "id": "666346bc-0289-480a-a8fa-bad771fb81a3",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "fd463ac8-90ec-4227-bb1d-33504cd1597c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0043f3d0-6ce6-49ed-a3c1-b4dcdbf8858a",
        "cursor": {
          "ref": "72683ffa-8d46-4cb8-bc9c-fe4d1822f289",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "79209606-0ac1-4dc7-8a29-a1f6c6acd6b0"
        },
        "item": {
          "id": "0043f3d0-6ce6-49ed-a3c1-b4dcdbf8858a",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "b9d84752-a2e6-489e-aed4-37427e63e078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b68dba31-cc2b-47ff-9201-4098ad116b4d",
        "cursor": {
          "ref": "d2f15f08-dcf9-43ed-8b9d-65413cba0d1b",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "273be243-3f61-4171-94f0-bab02c1dbe82"
        },
        "item": {
          "id": "b68dba31-cc2b-47ff-9201-4098ad116b4d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f23b477e-faf9-4efe-a20a-f43b74ed9c28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb420b34-bca7-426a-88fe-09c8d2592cca",
        "cursor": {
          "ref": "dae262c1-4d2a-4a4b-b09b-4efa7334740e",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "a91a4343-3186-4f28-97b5-989c62fd3048"
        },
        "item": {
          "id": "eb420b34-bca7-426a-88fe-09c8d2592cca",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d0e84505-a7ca-46ae-845f-5eb0c2f0ba95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6809ebe8-a6ef-4f74-ac40-0abc14ad9bdf",
        "cursor": {
          "ref": "3318a934-b2bc-4048-a80b-7d1687adc193",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "0ecb333a-9707-408a-827e-0bde1173b9a6"
        },
        "item": {
          "id": "6809ebe8-a6ef-4f74-ac40-0abc14ad9bdf",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c0429662-6a7e-4ab2-a976-94771cabf344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e3b8cc6-0fdf-42df-956d-346741049bb1",
        "cursor": {
          "ref": "faa06d86-96df-4ebf-afda-fe0eb6d1be32",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "1a71274c-5f15-4815-89c9-a040baedc66b"
        },
        "item": {
          "id": "5e3b8cc6-0fdf-42df-956d-346741049bb1",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "694cf880-5dc7-4abf-8efe-aeba62f86093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d05c9279-9fa9-479b-8aab-1e6eb8fc8f9e",
        "cursor": {
          "ref": "0d7cfbd1-298b-449a-91d1-a87c46337ebe",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "201ece96-a466-405d-9325-db4229e97d1c"
        },
        "item": {
          "id": "d05c9279-9fa9-479b-8aab-1e6eb8fc8f9e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d7e309c3-aa71-4d8b-af92-8f44159caa39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28bc6723-9273-40aa-a5db-5de338307acd",
        "cursor": {
          "ref": "03d01efd-2cd0-4669-86ee-a2cc85d862a1",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "ca47bd4a-5094-4d2f-8467-40fdc2ccfde2"
        },
        "item": {
          "id": "28bc6723-9273-40aa-a5db-5de338307acd",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "dabf9696-a724-450c-94bc-8e8cb9553dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "383fb140-1a11-4302-a84b-9ef739990169",
        "cursor": {
          "ref": "fd51ed44-0710-4852-86ac-3d6b77199f03",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "f33a5c95-ef7f-4cbb-a2d5-dc84c4e0f4db"
        },
        "item": {
          "id": "383fb140-1a11-4302-a84b-9ef739990169",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "06fc6079-8291-4da3-9199-54695ab0d2fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "479139e0-dac8-4872-a03b-4ce75164b930",
        "cursor": {
          "ref": "cd75a669-aad3-4106-8253-b39b665a4543",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "d46da831-7a89-461d-b132-327b27845852"
        },
        "item": {
          "id": "479139e0-dac8-4872-a03b-4ce75164b930",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "8e7e68da-654b-454d-81a1-d3b88befab25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "520d1ece-f6af-42e4-94ff-ab86c4094043",
        "cursor": {
          "ref": "7ac76bd0-4588-4668-91b0-c743a326b149",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "cc30efae-a358-4852-9b61-90b11172adde"
        },
        "item": {
          "id": "520d1ece-f6af-42e4-94ff-ab86c4094043",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "a4a84702-077e-4001-a5b4-55e77166aa8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad62c84a-5a25-4508-94f6-5085bfa1890f",
        "cursor": {
          "ref": "3b01adcd-1ce5-47db-81e5-a6f699efaad7",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "6cc9ad8a-7acf-44bb-b732-810a1a700c55"
        },
        "item": {
          "id": "ad62c84a-5a25-4508-94f6-5085bfa1890f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "54ee0544-5928-48d1-856e-f2c9ef0b97a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c0e48cd-64ae-412d-8f44-13ec9ab882e5",
        "cursor": {
          "ref": "88d375d5-d5bb-47d7-a450-226b5d8197dd",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "c53bc459-5d9a-432d-8ecd-341990b69273"
        },
        "item": {
          "id": "1c0e48cd-64ae-412d-8f44-13ec9ab882e5",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d1df37c1-3a97-453f-a41c-12dbf06744ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c93ce3b5-29e6-4372-b442-d1ba0262fd60",
        "cursor": {
          "ref": "5002fff0-4da8-429f-8d4f-c3cc0d7c8bda",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "a796384c-3e18-4e3e-bb6b-01ba58496682"
        },
        "item": {
          "id": "c93ce3b5-29e6-4372-b442-d1ba0262fd60",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9f13822f-1070-4d00-ac41-08313b25d402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3dc3a91-3b0f-40fa-b947-fe22fc8a7e07",
        "cursor": {
          "ref": "e81c206d-eb7c-49b0-aba5-7f2b641479cb",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "36183b62-f5fc-4566-ad93-1faa23ad995d"
        },
        "item": {
          "id": "e3dc3a91-3b0f-40fa-b947-fe22fc8a7e07",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1b5ec263-f733-4357-a600-66026000fe38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbe56895-cf87-4305-940d-ec798ebed9bb",
        "cursor": {
          "ref": "83b00665-bda6-4225-b48e-1638962bad0f",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "3740c17b-c7a6-4434-9f75-e4d6e95e21f0"
        },
        "item": {
          "id": "dbe56895-cf87-4305-940d-ec798ebed9bb",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "832bdebe-5a0c-4354-a7c4-ecf4df20a33e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8421ddbe-f9f6-48e9-9b0f-efbf3b4317f6",
        "cursor": {
          "ref": "b2d891a2-e4f3-4007-a0c2-8438d5dafd2f",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "4432d8e3-74fa-4bc0-866c-67cae89c2fc7"
        },
        "item": {
          "id": "8421ddbe-f9f6-48e9-9b0f-efbf3b4317f6",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "b78acd47-6f13-410f-b029-7fce53db1fc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce886f4d-da0f-424c-a227-860d9dfbed93",
        "cursor": {
          "ref": "cc02a333-55b0-4187-9854-285d70ffb001",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "59a8af70-9bd1-4a4f-b611-ece1e6f6b393"
        },
        "item": {
          "id": "ce886f4d-da0f-424c-a227-860d9dfbed93",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "918734d7-9d4f-4982-904d-1710f94c36d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ef8f8a-eebf-4c7d-b290-ba413efd9c54",
        "cursor": {
          "ref": "4152e078-ae7e-414b-9782-e6b12b063fb6",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "930281ae-f4ea-4fe8-90b5-bc278ef77a84"
        },
        "item": {
          "id": "28ef8f8a-eebf-4c7d-b290-ba413efd9c54",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "53233b55-40be-4ef3-ae92-7adf0055e08b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69168002-4d34-42b1-9271-af95950c4ee6",
        "cursor": {
          "ref": "ec7c2ad5-39b0-49b6-996b-1574cd09e360",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "54e8f3aa-e125-437c-a023-90b709125c51"
        },
        "item": {
          "id": "69168002-4d34-42b1-9271-af95950c4ee6",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a5c47a79-1d03-4e02-8c90-c78e6b996728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02352bf1-c6a8-4cae-bd1d-c79f39b07b56",
        "cursor": {
          "ref": "2d2fd320-d6a7-41af-b676-82885810e1bb",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "4b2cacde-2321-4964-a283-bcc4b97456c1"
        },
        "item": {
          "id": "02352bf1-c6a8-4cae-bd1d-c79f39b07b56",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "2a61488d-4ba7-4101-b05d-2408cb323a31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c585e0a3-3c41-42f8-a2b3-571b21959a96",
        "cursor": {
          "ref": "89e0b0fc-a161-45b1-ad27-3bd99ca44818",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "281ee1dc-e022-4ad7-bb66-64b65c0cea5a"
        },
        "item": {
          "id": "c585e0a3-3c41-42f8-a2b3-571b21959a96",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "99007750-c393-4fbf-a19d-170888aaeaec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e02f7f47-2079-4f94-bd4a-169a45f639cf",
        "cursor": {
          "ref": "4458a55e-2bc5-4176-b0d5-e2693a395d09",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "e9f56620-4da8-49d2-a77f-008c3f793d5d"
        },
        "item": {
          "id": "e02f7f47-2079-4f94-bd4a-169a45f639cf",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "e1cc0a4b-836d-4429-9dfb-9301151ad9b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0ba2cdd-1116-42f3-81f1-4e63bdc92454",
        "cursor": {
          "ref": "da1556bb-73ef-4021-bb63-c70bed6fc659",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "07d58da4-a3e4-4500-af50-063051bb517b"
        },
        "item": {
          "id": "c0ba2cdd-1116-42f3-81f1-4e63bdc92454",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "58a55202-f54d-4bef-9e99-def72639faa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ead66b77-46cc-4cf1-81ac-4c65dd161828",
        "cursor": {
          "ref": "95e93ba7-900c-4aa9-a945-46b347879188",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "6dd74408-d30f-48f9-a815-3da77657f4a0"
        },
        "item": {
          "id": "ead66b77-46cc-4cf1-81ac-4c65dd161828",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "1b4a6371-32d8-4c8b-8c11-369607534165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "744e4488-09ee-45bb-a3ef-430611f10c06",
        "cursor": {
          "ref": "25b21294-488f-4a99-9e17-7d4a9f97eaa7",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "40dae0f1-2a9a-4971-adc7-05a76928e93d"
        },
        "item": {
          "id": "744e4488-09ee-45bb-a3ef-430611f10c06",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "83316e25-9f19-4d25-90e9-347b3168b4b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b07b41f4-0864-4c95-93da-9e2780788adf",
        "cursor": {
          "ref": "99687914-a32c-4af8-a297-fd1e57d46470",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "38ed4f17-d6bc-4d50-83f9-efff130a4d15"
        },
        "item": {
          "id": "b07b41f4-0864-4c95-93da-9e2780788adf",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "35df7f8e-997d-4ca6-b2b6-1cc7dd1ba750",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "26fc4dd1-512e-462f-b352-0d6dab3e508d",
        "cursor": {
          "ref": "d514e553-4337-461d-a89f-bab241161f03",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "77e6e14e-f5aa-4325-87c9-a0e7f596e48a"
        },
        "item": {
          "id": "26fc4dd1-512e-462f-b352-0d6dab3e508d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e73e3593-8ab8-41e2-95dd-b2187451aa67",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "15fc6f43-18b9-43af-8084-6a58e8fcbee5",
        "cursor": {
          "ref": "2d23d2f3-4aab-4d42-aaf1-5f3e2020ab33",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "4dfcc5b3-2fe5-4b4e-8b3b-0f90e9f6062c"
        },
        "item": {
          "id": "15fc6f43-18b9-43af-8084-6a58e8fcbee5",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "7895a7e6-bbcc-490e-a341-3dfb48923db2",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "25d72aef-09cf-482e-97a3-08b616ca1287",
        "cursor": {
          "ref": "e8efd727-0c27-452a-b57e-29da343eecc5",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "f94ed830-0960-4b14-a741-f56740cc0d75"
        },
        "item": {
          "id": "25d72aef-09cf-482e-97a3-08b616ca1287",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "38e941f8-4f99-46d9-bfba-e75731d46d2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25d72aef-09cf-482e-97a3-08b616ca1287",
        "cursor": {
          "ref": "e8efd727-0c27-452a-b57e-29da343eecc5",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "f94ed830-0960-4b14-a741-f56740cc0d75"
        },
        "item": {
          "id": "25d72aef-09cf-482e-97a3-08b616ca1287",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "38e941f8-4f99-46d9-bfba-e75731d46d2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f242f303-15d8-4080-8616-fb261abe5901",
        "cursor": {
          "ref": "9dca5eb2-9eaa-4309-9bfe-2dc7f0a82347",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "df0b9de6-11f7-4ddd-9c95-cd697de3ebe0"
        },
        "item": {
          "id": "f242f303-15d8-4080-8616-fb261abe5901",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7f18d798-db85-4a68-bdaa-2e48f6f46882",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad2146a-be51-46a8-af28-f713017e808e",
        "cursor": {
          "ref": "8a303823-0a89-408a-93b2-29eb435c9093",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "1c2aaecc-f04d-4806-9156-6f409d60165d"
        },
        "item": {
          "id": "cad2146a-be51-46a8-af28-f713017e808e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "71d4c608-831d-43e6-a52e-278a1aedea5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}