{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "fb1e88eb-5c7f-4b81-9ac7-c9eb1259a29f",
        "name": "Clear Cache",
        "item": [
          {
            "id": "98f5f7c6-2228-427e-a12b-aa88e9859fdb",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ce669292-be30-4dc8-9f2d-4c88387cbc91",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0f415a73-e24b-4308-b867-ecebb37fa5a1"
                }
              }
            ]
          },
          {
            "id": "9e00afc5-26e3-4503-b8b7-2e608f47ea7c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9ff62e52-53e8-49cb-b105-4a39ffbca574",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "494f9357-7a69-488f-b0d2-d2e9bffcd330"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6f5edf43-e4d6-4b1f-8fee-8bbf5e199f3a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "7e47d1a7-2dc2-4e0e-98b5-92650991c80f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b624b2d2-102f-445f-9cfa-96fc80aa8d07",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f16e7096-4121-4a04-87c6-32e3816206cd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0d2659c2-d148-4794-a37c-c10c8b024307"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "762cd293-3c68-4b7a-9cc8-be7b013735e7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e8c71e91-fdc7-441c-a08a-b56fc27db0c7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ace043e2-1aa6-4d67-90a8-9216b6ecb9a5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0e98bcbe-5910-4dd3-9c9c-3890e9979b0b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9ceffd1e-b38c-40fd-a3d3-46ed5a4efe08",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "471818dc-766f-46da-b64c-843bcfb22dfc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dc4f2f1a-6bc6-483c-9c76-6d5d2938c32d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c2b338f5-84c0-4a20-bc49-3b526e5c8c90"
            }
          }
        ]
      },
      {
        "id": "8cbdbb36-78d8-4d44-8397-473a21f17644",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "2057c95b-8b89-411c-912b-5502fd77c9dc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "708164d4-499d-4258-9525-49e4baf60722",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4a83423a-c75c-4f09-b23f-349300a65803",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f518fad3-24f5-4be0-bbcc-23dd78c423de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4666e354-7b68-43d7-90a0-0ea43cb210f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e22e6e2-355d-4f33-803c-bde205186125",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abca8bb9-3de4-4acd-a95f-6e4530cb030c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce932b25-3499-466c-84a5-0fcacdf9cf0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "033e6f87-89e2-468d-82ee-31df60df9913",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95ccb65b-df31-4fc9-b404-9d39676d07a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0c1c65fb-f791-42bd-846a-60046f19204a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7d445f4d-5d79-4f02-9992-2115e6730256",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "575c52ed-4e9b-4bd9-a5ae-4ca405c37baa",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1953be78-0f85-400d-a598-18db0fffa0ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6391635-f558-4d4f-ae74-225988d221c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0981d0b1-afa0-4db1-9354-6df54ffca03d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "040c4e58-eff8-48d2-9002-1ea5c1fbc4a0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8ea14ad2-4160-4551-941c-cfd8bd100215",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b8ac7935-8934-46fa-b377-83e3650901ee",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "85bb610b-798b-4d35-ba7b-1bb11ac4bd92",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "256836a4-d8a6-43ab-8acd-071e1152e946"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d1e3a9a-1f99-4ea5-bfeb-e7e3826ad8a1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "63cb3aa5-859c-4259-b091-6ec12a5556f9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5527e148-6ddb-4513-b673-328dedb2de79",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7803afb2-7286-445d-a1e9-02f0bd5237c2"
            }
          }
        ]
      },
      {
        "id": "2ed73c64-36ee-45dd-8030-8dcefeee8fcf",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "140baee6-c0ee-4a62-9782-79cf9a3ef028",
            "name": "Negative Testing",
            "item": [
              {
                "id": "efdfb8e2-2aa8-40ff-8513-e46cdfec3cef",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "44847863-f333-423a-8552-b84626f5b501",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4308a02-105f-4d6e-8708-6ac073d4599d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b6e0b3f-d285-473c-869d-6c044702abda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fa7bbc5-fccb-4224-862e-53864f75e2b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d526806-96b7-4a33-a13e-25a2fdc78a1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff18f14d-1317-451d-a0c5-b3c87bbd52b1",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc8196ad-e8be-4271-871a-662eb696e122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47a1d598-d179-480b-b154-93da36add639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ffa7bb8-b354-4919-b6b6-54b28b6d9f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9bed39c0-a515-4e60-9b6e-4cd80babf5a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a768b3b1-f56d-4a68-802a-abb22a2c4050",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b668842-8225-4480-a54e-1713d4efd64f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81bb6119-d0f1-4179-8ee0-a7ec6ecf3bf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc4273d-50b4-4b23-bf91-fb95613372be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "77448a38-66a8-4ab0-8885-ecc5362ae96b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d301b69d-eae1-49cd-81e7-949c219b1d84",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9ba60d6-07ad-4cf2-908d-f60dcccd8f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "553d9934-5ffc-4911-94a3-bdf99e42bbee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65268837-4a5e-48b9-be5d-193909130929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6d052cc-8721-484b-9388-16ce02302660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a556021-fd0f-41b9-95eb-e49f6bf6fefb",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c50cea8d-1797-4f6c-a2fb-57fb2fbd298d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6910f93-3551-488d-b5da-da9d204b2906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ac145c-fd48-420d-ba0b-c4c863a9f605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b070121-6c28-4e9f-b45f-55f8b6764d15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd6fa584-d431-4af2-9bfa-41f990f2ef5f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5d0e716-1545-45fb-907b-c145fda476d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8279dac-dd00-4ee2-be02-a721d95eb336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d639f50-817c-4053-9f49-9c39536d8fd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d72bfc52-9e6a-4c0a-b448-debcc9a834af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc89df0c-6251-4a8b-931b-d3565f919b18",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "816b8be5-de20-4a58-8940-39fcc3433c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f77dbdf7-bd53-4cce-979f-a2444461f694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3011a699-cab8-47bb-9194-f2697556fdd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bfdc9af1-13f6-4db8-8fb5-551c7b5094bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b85ff6c-7a2f-4813-bd57-ac2b6c4a1532",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faa887cc-6277-42f8-968d-500f3faab362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81ef30ad-d194-4c67-965c-a85b6100ffdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8fe40ba-c20d-47a7-94da-bf923c5a8eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2bbb1f39-3916-4025-9bf9-d7b35563c911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065c66f3-dc0d-450d-b7b2-729aad44f906",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4fa3f8f-d6a7-41b5-b936-7d92eab539df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ffbbfab-f928-4197-b247-b43860b84fc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a54fc8f8-d88f-4892-be59-d97d991bf666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c9dc3d7-262d-4ea9-a4ca-d4cd47ba059c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3129791-b8f3-48a4-939e-ae8ae1fab862",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78aae871-1b77-4043-9208-796afac00907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baad7a74-62db-4be6-9eb4-ea758d3e455f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aafec05f-86fe-4fae-a5fc-d1953cc77b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe663995-1ee2-4257-8f99-c2b3b82431dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "134aa343-56b8-42f0-9f97-91858340f0c2",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee2996c-5adb-49a9-91b1-dd9874851798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9109557-4c8b-45e6-b60a-9fba67aeb3c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "863ea6c2-5b16-4f51-9e1b-b5a312f985a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e701d0ba-68f5-46a2-a6a5-c8235663d99c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056a6c2c-c3e5-4ecc-a42e-763461917afa",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "befb66a6-d2a5-4f7a-bd7b-2092c4ad9a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "453bde14-cfc1-40f3-9eb3-e60f52c63a7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe79dbdc-6c0d-4f5d-893c-4535bf987736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d8eaef4-e3f2-44cf-95f8-4ad334a5c66c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6430521e-6f1b-4f99-909e-52c1dd70b5fc",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "683f833d-441b-4764-9176-de5b70355721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58efb1b1-45a5-4c66-870f-85152ed134b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f4aea97-0efb-445d-8da9-d558aab9e53d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2a8f3788-2dd5-444f-adc1-59de79910606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce5124fa-77d6-40e3-9437-bb92f01d46e9",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1695882-6bf7-4c77-96c2-9803ee3c550f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a42d5ab-142f-481a-b1da-5d6ce7839028"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aeba0c8-7ea1-49dd-b382-724b160239d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bcb120ae-81c6-43a1-b2b6-2911f3633ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f5935ba-439b-47cd-81b4-755947f9daa0",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae2ab931-d35e-4bfe-af6c-c332361476d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50688218-f265-49bd-91f8-e5f18168d470"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e89b8ef-20f3-4f22-b30c-d5f80267701c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d47fcb1-3706-418f-ab3e-45d9d1792513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c66e963-9033-4c7f-ac3d-40a95ca91289",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c7523bf-4ed7-4458-8873-f814c08f8b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5520808d-5fb9-4e2c-8e12-610fe1e497c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "479c5547-5cbc-491b-bddd-56cfa025fbb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6fbb6f6-7ceb-49b3-9999-323755a74de2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e74e2f32-eeef-4b16-b563-cdb44fcc2845",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f308063c-61db-4456-9d70-42f4f007c63f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eb1db92-1c6b-4e59-a92b-23c8a58098c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01fd71d2-d94e-4fc6-9c34-c32481e55581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc498b25-6d3a-41e4-aaea-56805488aa0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f86359eb-d5db-4a5c-b0d4-87ff69238acb",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e472c627-748d-43d4-b4c3-77f7f44de3c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d80e40c-7b53-4502-8038-b7c204a17232"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e681fd6-915a-42ed-a498-f28c7b659e23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "920537c2-e04e-4e11-b2f9-8dbc28336a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e25b86dc-dbe2-4ed6-9a7d-ccc8b5c5af07",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea983f5b-101d-4d73-a64e-bfa5806a12b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df603b1a-38ee-4175-9d96-e5863e6fbd80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc114661-49b1-435e-8291-bda3b4188903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bce456fb-069e-418c-b1c0-47c1684e4d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4164589-f969-4f57-8ed6-84521ac8bfc0",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f588f2-0aa8-4818-8fb9-9d804a643ee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5941e25b-c9d5-4e85-977e-d2bdb6f5aa17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "908c385d-d537-4288-b03a-26acb9114fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb18fa28-c942-4c4a-8dc3-71f6db31697d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d260611b-56b8-456b-9ede-83e4037e1021",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c7ac11f-8a6b-4fbc-98ce-19aa6366652d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c2d07c0-cc1c-4fec-9b11-733f1810ca81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a244f3d-8118-4429-ac72-5b88ee9d3e13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa281aa8-310f-46d8-b99f-e8c84a98e3ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171a2eac-5163-4965-9778-070245cbd597",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0338c7ab-0bcf-4fc8-baf9-05ce6a11e7da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7447acad-1208-43e7-8590-c645c3031a2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53aab874-913e-4eeb-a39f-29d59618f25c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8a221f0-ae73-4379-8610-ac07d5e428ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6fd2d58-3bab-4c49-a2b4-1a2b8a36ccf7",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4955a8dd-5fe9-4241-a11a-d40aa9f5735f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb69e0a2-519e-48aa-b0a1-04968d6c672c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49994c85-a724-4ef6-8278-03aab6634e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ffe44a56-9723-4b73-b703-abe2f9b23567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "530886d0-d178-4cbe-a7dd-9027cbbd48ed",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c02f81-67ad-46b6-981f-a206be3ae3c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a5a50fc-9260-4ff0-88a4-daa3efe16f52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f57e8c5-4221-4d8a-b2ac-3b35ef196a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "71db169e-31dc-4be7-b798-cd07edf29b93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39875901-936d-4aff-835e-29d69bf23aa7",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f637f45-3cf5-4862-bb64-1dfc8eb849b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e78f961a-7f8a-43c7-8ca3-0469a1edbd96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ecb306f-537a-483b-a203-ab7b83841486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a598f17-88f2-424a-9fdf-a30cadf5c6af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e99b2e-af24-4737-af4a-a8e273e7762a",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12222f41-90a7-40cc-91ce-9c784b6001c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89d3d166-ad9e-4294-ba51-b398be202cfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ab7ca4d-54e2-4cd0-a06d-f429821e0768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d00d39f0-a1d4-4195-a519-8bca29b41f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23d96609-27b1-4334-beb0-2b68e9beda46",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b48c78-f9e3-49da-9c44-33e1b0939e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac9c1789-c78b-43a9-8c0e-9a671661065f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c119bc61-1ebc-4f5f-a227-9055a5d900bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "abc3ef2a-cba0-4a6a-a91e-a6bb9e7b94f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed00b66-c1d3-4e65-9dd8-0e4a7da0200e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33af8df7-3c39-4625-8892-85cbd0cdde44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68c07035-d8b7-427e-8662-1219869b6420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08fa418f-f3bf-4bc1-9201-0357d041150f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d6b7e5f-af06-49b6-986a-02df0c5eed91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a7e0541-849e-492f-8d1d-eb06a7d7cb69",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69af44d6-558b-4ffa-ae1b-bb2ba7c31694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ede3ccd-229a-456a-b631-b9490293c251"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17003024-8557-4454-90b1-53c5b53e1294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cde4e819-6352-458f-958d-b8e677d27bfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "454a3e00-cfa6-40e6-a75d-3346a87f18e2",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98dfaf77-5a73-4d40-b84f-b463e9ecff7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09d9d035-57fd-4237-901b-38719b2c8df0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7ed6e04-2b74-4858-a79d-a445f6b42e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "960b1ad3-f3aa-40e4-a488-b85a5fb9c9dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47822642-d7e3-45aa-9eae-d44975dfbe08",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "724326ea-35d6-4e83-9e02-a8269e93a92d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "426caa37-0521-4076-922d-b167b1a1de0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b39aa03f-0e17-4f14-b419-d6f4333de34e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aed46db0-655b-44dd-89f4-6ec7613dfd7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4898781-edc1-4cff-9cf4-89ddf796f18d",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a022947f-11f5-42d7-8b0d-1c6cc9355f89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a22a408-9f41-4f3e-a2b4-ae7157892ee2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0376e3c8-2c24-4046-a03e-a3ae63d8f11d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "32b56323-f62d-4872-892e-e0220ee1cbbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19e9f135-7228-4092-9ddb-144d47a9ad81",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "728121bc-6bc4-48b6-940e-fa5664ec7f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "494de972-7c28-457e-9dcf-192368908996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03418510-8fe2-4e97-bfd7-30f70699d1c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc449c54-6b55-48c0-aa7e-a0d4fe32c7e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "665cebe7-02cf-4351-9f35-0914c9d1a872",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2060cfcb-5d5a-42c9-ba7a-88c99bc33443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e7eef36-3680-47a2-aaf0-2c81c2f66d3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e7bc31-35dd-49ba-b03b-a1ed28794ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4fd5e5e8-3c44-40cd-b3f9-53e14b737832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a86abf7-47e6-4a52-a236-f532332cd103",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c206f22-6f89-4a51-9bfd-688717e3799b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "623a411d-5d79-4403-ae9c-ba3ac9540fb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e2cf27d-283a-4537-8a3e-c4eb86f0247d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a5b5ed31-013d-4c31-840c-005106735575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2965aa9-2ef0-40d4-8695-a73d389004c9",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11429e79-a07a-464a-a336-cb45d1199518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "618f71bb-3960-41c0-9d56-5f5cd06584eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "255566c0-4b7f-4eba-a9d6-3943455a06f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aa04b01f-228c-4398-ab26-13117778f64a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d90921b4-93dc-486e-a80c-ed4cdd8585b0",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d25119-4883-44f0-ba9e-2b399f618d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a30d64c-abc9-4f06-b2bb-28c891f61ac3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3098d208-09f0-495b-8207-ae11daa48061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3179402a-9aab-4012-84a4-81c7d5e96910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bafc403-8c3d-4203-97bd-37e96f0befec",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54436b47-f75e-4a9a-a3f6-cab495bf8acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d0d3311-956f-4637-b529-2e51f29af22d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8781b46-6238-4a43-aaa2-1540358ca110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b834df48-7961-4175-96ce-c8a29ba8bde0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51ff9b17-c01b-4835-8aa1-cf66be914968",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6bf9c9e-097b-4e61-a430-8c1b64cb8aaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c75f0a76-9d2f-4c32-bdca-520008a2cd3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc1cfda-18ea-41fa-9268-b4f8569cc889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fccc07fc-b1c4-481f-a387-74f93c16c09c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0484acdf-ced4-46fc-9b5b-1f02e6d4c76b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe037c4-0a7a-41a1-a5ff-241cf5145f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07334ebb-4e4e-4ec6-a9aa-5b9893a0abf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e9fb822-017f-46c6-bf28-268975113ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8281eecc-a87f-4336-b3ed-cc4a868a836d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "831b6191-3f8d-4643-a641-c9be5680c028",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cad7ad2-1e33-4ffb-b76e-70d0354c73ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edcfb0fe-13b7-4310-87cc-714da821e261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df9e78e-7c6b-440c-89a9-2eeba3c0bc81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a31c2a48-783d-4d23-a806-d52e07a9220a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87125958-45cc-49ba-bba3-35ceb286ac31",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af914ead-5ce4-4836-8e2a-6892a0806b58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ccd5638-d0d2-4e8a-89c2-a4d53d73a398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee3fb117-de74-4cdf-b9ac-9b3d54558310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b68df5af-8d87-4e68-a63a-daa758f83147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a0c230-9c42-43ea-b426-eb3a11fea9fe",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d047956e-3ea6-49ef-a007-0af0f46bf6b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e7ab6d2-40f1-46ae-a71b-96c6fcf45c7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83eabff9-8216-4388-9c91-58e06bdd76b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "48c3a2b1-7711-45d3-8ebf-b30fc55f3633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a815bdd-2cb4-41b8-997e-cf7cbcc339d5",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9abaa66-5111-482b-b9ae-3d0e4a74b3ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dccc56ad-9edd-4e84-b3f6-951523cd01ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3215d42a-14fd-47f8-b0e7-3f652edc8a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "433d8632-7c5f-49d0-8a38-f560295eac87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10a93582-33f8-4f4f-a927-d0e45c360da8",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "575433ac-8776-4fb9-8220-42a1b8b08ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a571c9cc-9f20-44c9-a144-5faa05a85f3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f5a477e-36a0-42b7-9ad5-566c2c0d004d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "77f428a6-a9b8-41e9-b139-395cdcd54b76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc49d01-39d8-4d3f-afa5-1474330d04df",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8795f9d8-b92b-434e-b15b-e6d97bc569ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6709f6f9-6d25-41c4-813e-5e15bba6eb5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0f0a1d3-88fa-45ff-acce-d562d816a718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4d35ad2-543d-4589-a749-c346febf196a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a7216f3-d5fb-459c-a087-1c8d73f403ca",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9822dfad-8247-4da5-955a-811ac197076e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62470d12-0018-4684-b460-8d09d0359b73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85ae939a-5fc2-4cd8-ad3e-3168b6fa2d38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7282ca28-2751-4c2d-88cb-575bc9d3febc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23d29604-34c0-4914-b0fc-ce26f0c24c5f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f778446-426e-4f9a-9870-8e62fa5d1352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "322cf054-5803-41d0-8926-91da84d50df7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a07f7e-0c77-43a9-aa86-c03e0b3627fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "63b22ef0-bd91-45bf-b9db-9ffd9407c99e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d8b218c-fcd8-4cab-9b71-529619fba37d",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5bcdfc3-d02b-4f82-b1fb-19b7f593f4c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "610ab02d-afec-46a1-8ddb-141e4a0e5448"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef65c763-4d72-4b94-84ee-fcaf721c2e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "efc166de-1acf-42d1-b33d-36d0badeda1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d98caba3-c787-462d-a871-21a2c6c5a31e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d8d164-cb1a-4662-8f9b-712b2ec135dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7484ca56-ef53-493f-b50c-b4e9de8a796a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b778125-9b86-4d61-aa40-afb6ce6a0519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "03f5f2c7-2b54-4f9a-9a58-3ba6e051f5e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def8d84a-0d3c-4547-8b2a-1e1bf1f94ed9",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1152f8ae-b145-46ca-a1df-a9f5edd1a94f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79b953bd-8e76-422c-890d-32c84c7b12cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0b7baf-b679-4091-b8fc-2ca4a260ba8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "48270c1f-e3fd-4324-8dc3-f7a9ed3332c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e73e4150-48c0-4fbe-8c14-f0ab8820e722",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e7cfd1b-f154-45fc-b3f7-d4604b8a5d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d3fb629-5494-4835-8dcd-33f761703bfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcd74199-6873-4688-a894-674f0a3f3e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "27a82af8-9061-42cc-8e18-52c5c9ce8335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5640a48f-44d5-4aa8-8908-2e32e8e79bd1",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c968943a-b089-4023-b13f-e158caa54df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56d79a7b-7178-4a7a-b27e-ba40cb1b6f9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e2da80-39aa-4441-8c00-d40fafae2658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fb018ce-54f3-4f0b-a289-754644e7ae0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3621255a-c67e-44bb-93eb-7e06fb045737",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84363626-bf0c-43ba-bce2-67655f5e6f13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74a3cb80-b442-4db0-b1f6-c2ac1de939bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12113c30-c287-4c97-b69d-58917623a9f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "816ebcaa-ace9-441d-ae1c-048d45a795ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "667c2442-c5fd-4093-ba79-d9207e8074b8",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d055e40-e05e-46bf-b028-001ac1b0617e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1ed5f90-93a9-4323-a9a4-b28f6c5e300d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0efef7f7-fc1b-4d00-960e-c6b34c911769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ae3875b-ce53-4a13-bd62-5fd4f0af991f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb680fb-13da-4d30-ae7a-a6939408f4cf",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c443644d-26c4-4c9d-a365-79399efe55dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ac29787-ff5b-4cf2-984c-34fad1eb7a75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fb20a72-fee6-4929-822c-0b93ef8c279a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "13979e4c-cc8f-4d10-a0a4-27b94e25e02a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d97c901-7513-4243-8e2e-2ee6764316e9",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c05dbad8-1da9-4851-9d14-2b4f2f4bb177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db2aaf25-5752-4789-9c43-f1765254c564"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68edc1c6-3ad5-43cf-b260-ad2b4105ac30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1080c4af-7e14-44fd-852f-93093ceb7cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "469eb305-a333-47d3-a20a-515ceec75a4f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6527de2e-f328-460e-b92e-396dcbb5cd81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dec7aa7a-22bf-4b1f-b1dd-3a1971bf6893"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4906e8cd-82ef-442d-afaa-d498664e4e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "76fd1b9d-9542-449a-806c-b197bb1db7b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c822e10-c1fe-4b72-bf47-2e877bae260f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac87bc3-1ef8-4ac3-a79d-b399fe092e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "822e4e17-30d0-483a-bdea-f57f159ce05d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c77b098-e5a7-4a10-a5ea-9d58b51dd8fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b9ee57d-4b97-4299-8bfb-3d853eead9fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e43595e3-380a-4386-9d4b-c08cddeda77c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62114b47-0ab2-4b4c-afc5-be5cd97f8bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c40e849b-48a6-4ff3-9006-06bb146f98b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ad7c7a5-3ea5-42b5-9e54-d4da4498df70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bdc1877a-dd09-42f0-9be5-40cba6296a5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f703676-eb43-4b04-9e7d-d7beeb6a51f4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d90ede15-e8ad-4b2b-9ebe-7ddcece9afa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9e37002-a914-45e1-aa52-2d6f414de73b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5afd1461-a16e-4bd3-a4ad-496cff6a3b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7c3bea1-085a-41e2-8fb7-1cb04e650348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac3ea25-048e-4fc2-8a9b-bd05bfae8915",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1258465e-7c64-4df2-9f6a-8ab9153ad047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd8f41dc-c901-48a6-befe-4a09b9dc1b52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee57e3be-0aec-496a-a1c4-60bdc2a767cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1ba04e5-65c8-43db-afad-f9d295624009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8fb7fdc-0353-4670-ba4f-e04402771d94",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a341608c-5b00-4056-816b-2516ae1188a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0d6c247-3182-47c6-bb53-c1505da84450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b58698-4e32-4e26-892e-2f557c68fa70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce7aaf35-a6a0-4ee1-aec9-0343e71e07c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c97133ba-7270-4263-b355-eec788de190d",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4dd4008-4c5c-4198-a34a-9830f11736b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02bed5af-c6d5-4383-815d-0af130baacba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b028ce1-07db-48ad-9f84-b053d78fbf1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b045ef29-410a-441c-9f3d-d39aba3d527d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59186fd9-9c94-4695-b437-95d2ac363e34",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff60028-83d0-4b53-95dd-f86d92cdc436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72bac5ab-bdcc-4d07-bbfc-fe99963f2cc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ee08b5e-f35e-4ecf-9f9a-c21f5a9fb80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1deef4ec-e4bc-4ce4-85d7-0fadca1327bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b4438ae-283a-468b-aa6f-6611fbc412bb",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41bcd273-ab5b-45e1-85ac-d75ba90468ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be77aca4-88da-44b8-95ef-03bfde4ca062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edc5c45b-a608-4ad5-aa87-150c91a7a831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "949f5e0c-d901-4f01-aa92-ee352c07aca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0349f340-d0ca-4219-870f-2bf3680d4be5",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe55d23-e97a-4811-b7df-06722a4c2f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2afad828-d9c8-4f6a-8074-cb82e63c2e21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c8c497-0cf3-4a6c-95ce-4dde5613ad1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d42ca027-0d58-49c3-9dfd-ec98b2259525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca3b2759-e7f8-4874-bb88-33e3fc1e4fc5",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5feef1dd-79d6-4075-b4c2-ca5cd579f2a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaa40186-5f65-43fe-a332-f599aebac099"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f75246-276c-4b52-a3df-1b18e6ccfc19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5b82896-5255-41c5-9310-d8fb9439ac27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ced6f3e-0fb0-42dd-957b-10752ce3bda4",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04a494cf-3187-4e95-a4db-9733808ee6c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d342e79-859e-4cc7-89d7-133d5b2273db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3066487b-2541-488e-9dbb-8073a9a4f4e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b294bad8-7502-48b1-a8a2-e267429b3af4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a31c647f-5c90-4cca-8b4f-fb5f46fbbb5e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a40b1cc2-ccc3-43cf-8b5b-87400472b5ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9924e03a-969d-4b37-803d-013df2f4b252"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb04f4ab-cd6b-4c94-87c3-330cbc9a0021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "451c615f-4c6e-4411-b0c3-afb22b262b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d234f621-ecb7-4311-9e71-51515d5d4ea2",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d08a037-a3df-4a19-99c6-57fd4d93d621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd0f628b-3b64-4b19-8138-6e1939764efe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b97b7c8f-c690-4f05-bbe9-8f6fbcfe0be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6199adce-7474-4b03-b302-407555cfa983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af87d9ed-80fc-48c0-a01b-4fa645eab0af",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c12e24-388e-4f9d-a25f-34a07015ffca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e94cf481-3a6e-497f-8fa5-48fc0ed3e002"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aa0f734-5702-462d-beff-f1cbdb1d4419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee2c1852-8ec7-4800-ae51-87b96502ed20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a01c160-2374-46f9-818b-b11cf96698ac",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85b66fae-c3c7-42cd-8ce1-d87f5aa88249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "908a8847-05e1-414b-b3a2-23116b50f752"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99a411ab-8cd6-41a8-bf71-d30b63cb4c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b27d7e1-1390-4a86-abbb-01d157ec83b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "969c67a1-b735-43cc-bf2e-db73e85255c1",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8532cf4-3837-450d-a814-a8cdf84c1426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70c6bae2-c44e-40e1-b8b8-6d06ca93e17e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb73bb40-2e19-4651-8835-5634ee229bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "49bfeb44-ca6a-4503-8866-92fb96c43c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c492f50-bcca-4a22-bdfe-b4e74018dc72",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e88617ed-a885-4f6e-8c87-91bcb7818adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a1dddb4-2749-4fca-b6df-1b95404c0523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1125c126-f2bd-4369-a229-78614472d535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4c4f94a-a059-4799-abe0-b8068ce3b603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cac1d42-1c1a-4807-b29b-6bcfb8ca6f89",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f8494b-0cea-4f6a-bf02-fe762883178e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "719142d7-f23f-4d96-b70b-fdd45f6ad250"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde405f2-3eec-4d69-9d7f-1d57ba6753f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9b648a7-3a3f-4dcf-8fd4-3db3bc2ae19e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cd25ce9-92f5-489f-accb-715f50419562",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba87a3ee-ffc4-44db-b113-3c4c86882153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b50d0e4-d4ae-4852-8c65-779b7fd1f955"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db6ba2d8-cfe8-496d-b800-18e39aee418f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "03642acd-2486-4aa1-bbfb-d16650ba7617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea90619-7339-4d7a-8864-ac9985160834",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e01b67a5-8a00-4338-b8a8-07d29e57eeac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a11e3f9e-f749-4d8d-8b28-e7834edc7545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42b0db43-a3e9-4fa4-aa1e-c5261c0512c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "60e73796-9839-4973-af4c-425d13545537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cba39e0-1721-4469-82ba-dd64440a409c",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d0ed7ea-06c9-4fa7-8b05-eaec055742b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cb3a64d-83cc-4a27-b57b-3b465349fde0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10cc47ef-0eea-4bc6-a59a-08a96ac5169a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d500317-6379-4008-8988-dcb21bb2c3aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f249746b-c6a6-4020-8ec3-202a98e78aa8",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33413b1b-4921-4ecc-9cd3-4463f56054af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "defab125-9ed2-4705-8d75-93a50546e907"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d936745-e221-47e1-bca5-c432bcb654d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c9b32268-343d-4572-80c2-d641d36e7ffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec302446-322f-499a-aa0d-ba9780579abc",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c3e8a4-65b9-41d5-a52e-7a0c997fd0db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "660a4f1e-75b8-40fd-84ea-3c7192206bb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9ff648-b8b0-42db-92dd-b18e91a14c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "733a8dc7-0bd8-4455-a6f4-4d6d3f2b4f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a35def-13f2-488b-9db1-50bc169378c6",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44dffcde-72fe-42ac-85e3-2e605da46c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8180331d-2666-41a8-a3ac-6ca2bec417c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "464e6dcc-aae4-4026-bae9-316ffac4e3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "32680c33-4934-4633-addc-82dab8a1a997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6731ffd-0293-45fe-80db-0fbf6be67aac",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb555375-a03a-48fe-8df7-721cb0401fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a31a27db-cfc3-4788-b9a8-01e101661ccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a8dc043-1905-4130-a300-daa987eb4388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "181aa7b8-2d61-4985-ab70-210cdb211d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab0ce66d-211a-4f7d-ac04-f9f35435b6a7",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59e3833c-2143-437c-9123-e05c51985b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "300eb6b6-0b25-4c16-b6a3-a4168bb97aab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edfb710c-519c-4e6d-a751-740261a1e3c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "65c2d952-d151-4323-a2da-5409db7cb1b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "248df4f2-15cc-4f60-86f7-cf4f16e56520",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a9eee6-a9e1-42ad-88d2-3dc0536f8551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ac9f96a-b65b-4c77-a116-bb7c1fd8ae60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf85ca0b-a69c-482c-8329-deaca4ea0571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "774dbeb4-8cfc-447b-836c-8b1fe1b3dafb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e8d54b9-6f7e-44f5-97bb-90113a7458b1",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a1fadf3-cd76-4ec0-932f-207592c9a39f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dc63368-4d69-4ac9-aa56-9cbae71dcc8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61fe8d97-21c8-404a-b63a-40fa01bb47ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e96a5d8-a936-4579-971a-f01dbaf2d5dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b14354-f882-47d5-a2f9-835c6276658f",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1339a4bd-3277-4aa6-9ea2-fda55e321ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bfb7aa8-f196-46eb-8523-cb02b19f4067"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a924653-f1b1-45c5-80ce-c9f10e31d10a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0f573da-ca10-487a-8e19-39dfb393e3f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb591a5c-c321-4f19-82f6-65b9869ac1ec",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c99c0c06-6840-44b2-8742-8620418bee3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad5dae74-e5ed-499d-a37a-841314def113"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a715f45-dbe1-4280-bd4c-9454f4ace39c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "18a07c63-79c7-4861-997d-436aeb603c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185dc0a9-9985-431d-8360-1b422b6dbb88",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da0c2d34-e585-40ee-ad52-6ce918cad8a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b37da8e-7bc0-47d0-a46d-4254a5e5202d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe65141d-c8b6-4697-ad79-4f8d0cd7cd6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2b762169-2472-4470-9eb9-b2f9a36a551e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba6d8c5f-a2bd-4a28-86ed-be4e5bd1d8c0",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f33169f6-2641-465a-9e77-8a4bde0a008c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b1302ba-d20b-4109-b85d-05da220086b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b875183-935d-4fe9-ad7e-67ef3823bd32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "21323054-202c-48a1-b545-db9fb03a2a76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3adab7b-876c-4969-805c-e260ab4e27cc",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cdd70d3-37c7-4a33-94a3-3798b0934535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36c6de1e-366e-4f6b-a158-cb144edaf209"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a8cc667-665f-4ce1-b151-066123dc8bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea0ac8bd-b965-4ccc-9f7d-deead15cab85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e0b18ed-ba05-4c64-a050-173c7c8f5119",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe41b661-eafb-4bc5-ac09-a9bc2271cfb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ff2e9d16-d68b-402d-b152-7d6ad18456ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85292262-581b-4a41-99b4-c7ecce23e056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "55183b69-0622-49b8-9af3-90a8b809c569"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "406c1005-e26e-4ea6-97b4-1a372b59e07c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8ab70604-2296-423c-b538-0dd44298e74f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b78f452-0ad3-4b02-b83d-dc3385ebc4d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7bdb4e99-bcd1-4c56-b2d1-a34de8e3b982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1cd97a-285f-407b-a0bc-a696cebac9d0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f59faac-c362-459c-a493-ebe05e6d59f0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "942e109d-424c-474f-9335-62489a72a903",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18a49d4a-748f-4579-94bc-72084beaa9bf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "64a32b07-58d3-4d2c-8726-744f0631b4b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "213fd872-29ff-4f93-b284-931a5ec7b77a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f48a0198-48c1-49c1-9f80-9cbfea62bf85",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6eb559d8-bd29-421d-9571-229a80be9786"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6a1c1925-c3f8-4a73-b498-13695f721478",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2e98f387-9314-461f-a020-bcef8f536f1e"
                }
              }
            ]
          },
          {
            "id": "2fd3eb26-cf86-43d9-98b8-58aa71b1be0c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bd07ae4f-d847-4a1c-8339-98025f52a659",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "2787f2e1-de69-4cee-a252-5d4560dce152",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e4aec26-9348-4052-8590-00801eb21049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "09287ab6-bb46-46da-a04f-6561716ea3d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20dd22b9-b173-41b7-bf38-92c2474e1e80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbecaba6-32e4-4109-a273-89d7bf38ad9b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2b735636-8a08-429c-b6e3-19bc864a02ec",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "881c510f-91d1-4c0d-a86b-9032f7a78fef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7442905a-aee6-4fa2-8027-36313c09f7b6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "53d56b42-bee8-4580-ab32-8e1d8629ff8e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d31f8141-a78b-4b38-9239-cc708e0c15c4"
                    }
                  }
                ]
              },
              {
                "id": "6a182485-98bf-491d-b51e-53584128e5ae",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "02ea480d-b644-4f5f-a282-fcf1639172cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "379d6cc4-7974-4c1c-8c72-5057294d5a3b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c1213a6d-12de-40c7-9d7b-36b889205c69",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8855b116-d4db-4933-8cf1-c6f02865ace3"
                    }
                  }
                ]
              },
              {
                "id": "59e37efd-04f1-4064-a57d-7b332ffd00b9",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "005dcfbd-d562-48de-98c1-6bb7c8db33ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a96cc855-bcf0-4f6c-983f-9b40ad74170e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96fb1a40-b4a8-4d74-a7af-ad8c26a2585e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "42951b53-827e-44de-9b40-5628f1e770f2"
                    }
                  }
                ]
              },
              {
                "id": "44dee50e-a42c-409a-b10c-66ba69e7dd7a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f4f0076-d9bd-4b1f-9285-c0e4872d8f7f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f322e960-ff70-4152-b1f1-ac5ce4888028"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81f00d5e-3f46-478e-9ebf-b10c85c42e1d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "53c7220c-38b9-4b36-9530-10dfcb950d1d"
                    }
                  }
                ]
              },
              {
                "id": "5ebe13c8-02d3-4fb1-9740-20d9f3676207",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c74d3e9e-b627-43df-98c1-78a3c3ebaba3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "71efe2de-6e8c-480e-aa46-69cb5ca2004b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ce72562-3af0-438a-b107-573a31c9f29d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "37cdbebc-1dac-4a23-8fe2-52a9a884db4e"
                    }
                  }
                ]
              },
              {
                "id": "7fbda0c6-ffbc-418e-a3d1-6d32f0e975bc",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c5f49eb6-42ee-4062-9ceb-3c2349b375c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "774f2041-31b6-4ba9-9993-3e9702f2011f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b75f7bd-306a-459f-abbb-233e30e98085",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "144c078c-a8cb-4b92-bb48-5f5fb8c3fdaa"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "34d7905a-9c7e-43cd-92e0-9525c9542f63",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4f49fc06-3f3c-402f-aae9-e385341f706a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "09ecbd2c-56d3-4d26-988b-7af0f83541e6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6b7697fa-95ae-43f9-82ff-3b7b09a03359"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5b462c25-1a49-4dd3-8f6d-42b7f0a16dcc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "cbe26ca9-cd7b-41ce-95d2-ddeea82961d8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "66506a26-cf33-474b-a5a0-84689de2aaf2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "df5d7f65-922d-4f7b-a0cf-0de3960fcbc3"
            }
          }
        ]
      },
      {
        "id": "ebd9815b-a00e-44e6-9653-71aa5f84fb3e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d2917464-7b54-4003-a17c-ec92f21aaf30",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c43f8831-57ea-4762-8435-e9222e5ff757",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6d178aec-8d2d-455f-b248-6111f9b1e1c8",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d15a617-4019-4d7e-93fb-bf4d748e63fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "083566c5-4144-4611-af7d-8a821bdde393"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b43c20fd-c9e5-48f2-a274-0ae95e18b5c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f79e5d6-1601-4147-8a19-3fc3167d3bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae767d54-fae2-4104-93e2-d95bcf026e24",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba4585d-db8b-4db0-949f-78441a93dd0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8262c2e7-98c2-4c07-888e-042c9dde0f60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b7ea8a-76b1-42b9-b851-359f5d4d83fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e60da01c-0dc5-4b8f-bc39-d7630986ce84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d5d7db-75f8-4146-bd8b-98c4d19e509c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a9bec1-5bef-4645-a9bc-f63d8d686329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86c4f777-f8f9-4985-bd16-c48b3e005917"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d67e20e-37da-4400-8d41-cc30ae6b2d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d1c3700-7361-48ae-8674-cde0cf98e76c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "474d60f3-f14b-4692-a520-736e1ebf819e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "829bfdd8-1bf5-4d02-b26a-461204cf839c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43e50c6e-9b53-475e-9036-e3f27556ac07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c8ba884-2426-4ac2-9d5f-fa4da8e4f376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "60b44032-e7c4-461c-8cb5-13dd353bd19e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87fbd48f-ad12-42cc-81d6-a8ca8f053bde",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4919083f-0d2b-4007-9cdc-b56934f458d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f1f5a16-3334-4df3-805b-c79a891c4240"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019d4cd5-6b35-4b85-b787-d2dcfddee2c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "334a5101-7397-4102-8951-5a0c6706fd34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ab52af-b99e-40cf-8a0f-97f8eef950c7",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a6aad10-9398-4268-b7bf-26cedcb946ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78635978-27ce-4315-9a0d-ee07751bd29f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c567d061-5908-472d-9911-5c5efb7d1bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ce9883c-d1b3-4408-a033-726f08e7258f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e95276e-6897-468c-8799-20ab76569697",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14016ed1-b4f9-4370-b29e-5ff05c563aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70dc15f4-0b8a-447b-9e15-cb273f2db03c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e62f48d-b856-4efa-99a4-a3277462f0cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6388c10f-8ad0-44af-a047-828a77cd5bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba4f5434-5b04-4001-87fb-ceeba5750c4f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e43e4df-f169-4302-82fe-7ed8c8d347d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4afbb3a7-f325-42db-a296-a0e4cfa31c17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d48f1f-9e5e-4e10-be51-cc51b98e8dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2bb02de-c723-4ba5-b97e-dde04a79b84a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d4035e-faf1-49ce-9d2a-f966041c1650",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d6b94f-a04e-4e43-82a0-a1577fa87195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b009eae-5ea2-49cf-a14a-ecf56acb0707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a852b21-ae1e-4971-b530-bf9e42e2bb26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfc745b3-4eed-4081-a258-bc046ee79d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4c2e47d-fe86-497e-b1b7-a4875a35acd9",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed3d6d64-df39-4f81-b163-a4499ee2c597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2695b055-e94e-4649-830d-d30ef46c97ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5decba2-92da-4d8e-b067-f8cc2583cada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2e10b7d-ce84-4bde-88d7-5a7179c592ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8126e74-59ce-489f-b60b-71c841d351da",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9fe6d4f-61b0-42b7-8e46-17249faff3b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c86748db-e621-4a6a-b688-3a5bbadf638f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "822dcd54-7156-43b5-9402-a319dde31165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "86feb3c6-e4aa-4d9e-aca4-482859c612de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1832bc5d-a893-4006-a356-0cce36873445",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a046438-6bcf-4023-aded-c4d4f105459e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06068f4b-5cec-421e-8c95-07e20364b076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f729027-825e-4363-90dd-1b1f9b4af3d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1a611f58-b178-48b5-8284-1b93c4754d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78592ff9-015b-49c8-9ff5-66c32eb3a0c4",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4850d103-78b1-41dd-8387-49d1eb825f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d57edecb-f8df-4919-8cc6-2102c0d09a1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61496e87-2194-40b1-a811-1fcaa3141226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ad6d391-14ac-4ad3-bbb2-2733b4d0a605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b88be9-be52-4187-b1bc-c565c99d6bbe",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35f05be4-c51b-41e8-9d6f-0de8138e0874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4740560d-07a1-43fa-baaa-94ac339b45b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "824a85e2-d9bd-4c1e-80b3-b9820b40f26b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "58d95728-c854-4396-8c3e-41ab840b9728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b8ef87-b616-4142-b884-00f0a3ac5651",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d09fdea-8877-40e3-8f30-97060bd7e846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddecfabe-8c5f-431e-a9ee-34099accd004"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b29c70c-ec96-42c9-aab9-f191652db5ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "912839b0-7be0-4f39-bcd4-c7411dbc46a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e4ce3e-f8b9-496b-b61a-052b968a855d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5994ce9f-4efe-4d23-b887-c077a65082aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "424c631e-c125-48ff-a21f-388443c0a938"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf7b383-d6fc-4b47-8db3-3c4bf5e40448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "88fdd501-e7a2-4682-8ca9-1494631cab92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e99dc5b2-ed1c-429e-ba1f-2a8720cf18a1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aee0341-3fa5-488a-93dd-7173fa97ffbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6a2d00e-d86b-45cf-b347-7383872e28a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08be5cec-67ec-4083-9706-dcb960d15ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "5af77b4d-ef9b-4d09-89e7-f905b352be4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb7adbd1-3658-44e8-81bd-7fe47a6996bb",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59644204-1065-4c40-9d07-00458c714a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82c501cc-7b44-440f-ac87-8c0c8b673aa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebad4b58-f472-4aba-996d-7175ce861006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9486b135-ebae-4e52-83e0-4ab66951c9dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd8d6507-e2c0-48ff-8be3-2cd14064b99f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b063816d-a014-4eb6-94d0-d5430be291c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d99bf840-1668-4bf0-b589-a15b22a5f020"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d7db662-7389-4c5c-a61b-d435d86c8ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "077f18b5-843d-4b66-83d7-5fee8f3d18f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63be3254-4f94-414a-9fe5-4f92c3887cca",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10079bfc-1cef-43d1-9456-204d028d0ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f425b0c0-4fac-4758-96b5-63beb6dad175"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c91b6d9-3e6d-4ec9-94d1-77ff4f1b630c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ad2d81c-1c0d-44fb-8e7a-842b08353f04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c579753d-6da1-4cad-a26b-20d0486a6f36",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb60cf6d-8851-44da-ab98-36f33b3e0513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96a4e77c-0e9a-4f83-be72-78cc55986720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "952cdffe-8c9a-4097-bbf6-2742dfec59e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8403a255-1930-4638-9b40-5e29dd668867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c415db-aa83-4330-bad9-190353c30f21",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "611c5f7c-c365-4a27-aad0-2e682a3c5a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "176527b8-112e-44b4-ae55-134b7672535a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa6d0c09-a5af-4ac3-bf07-373df241056d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d91abe8c-d573-4c18-bbfc-d50d47167970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17a218cb-5514-417a-82ee-8416c2c20503",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5a9f0c-5e7e-4c1e-8d07-6c8c87d5d40c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95dde7a7-8504-4746-8b5a-b41684144af0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e79974c3-9a99-4496-bb99-3ca7a8d2f74a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5618646f-20b8-408c-9ca6-64061593a8cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74844483-07e8-44f6-8bf7-ef9123f3cf11",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90761682-016d-4ddc-b16c-e43a8fc3fc47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb1d1282-b77a-462b-a99d-e8c38a0bc966"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c8c818-5f63-4c89-8c13-aa69ebcec662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8fac7c7-d466-48b6-9d4e-12cbc9a43c08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d818d7b6-8d7b-4a22-a9f2-a5e533c9ca28",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ed742e-8f20-4d5c-9874-9241eceb506a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2383e599-653c-41fe-8437-be1c4841dab7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0033170d-f823-45a1-9afd-c5d11a061960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "09a62cec-a0d6-49be-a2ab-0ad1631a4301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0391b6fa-5083-487e-8367-56e3f5bc026e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe0cd5ab-69e7-4eff-99df-1d96bb9c0343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "287e73e7-0707-4e1a-b660-0dda1f2a25dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21323b39-3b66-45b4-8e8b-0c8b50e431de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0110419a-97b1-4195-9507-04f7549eda94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7902f3ad-fffb-4843-8dba-cd13ed26ea00",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7beaa6-3499-4cd0-ada2-98976a27a04d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51f7e941-1c55-413c-87ee-9b81aeb4a60a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ae9340a-8af6-4900-8b31-56aa2d53335b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c3dcd3d-5143-4fdf-92fd-0cf010e7ebec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58983993-c140-44a1-b0ad-503e4f2a3082",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74af3c81-6f97-41f6-9eec-fa41e45b02dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddd3012f-f1f8-4fee-9599-bc9acc290f6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a6e59c1-6bbd-42c4-bb80-e770e1b76ff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69acf87c-4ebb-4cb4-a039-6bd59afbb69b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f39208fe-75f5-4f3c-ad7d-24184198419e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b21cc2-e4b4-4743-942d-5140e264ceed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cf29ebd-0bb9-4d98-9083-22689b44b191"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f332460-91fa-48df-8865-46930a298733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f511a8c8-5d94-4328-a129-fb61422d9929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e721b9a-5d8a-4ace-9092-26fcf164c7f2",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b0e0677-33ca-45fc-946b-afd8c31cde07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b890c08e-e73f-44f1-9186-0d482feefea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e77c57-c4a9-44c0-9d7c-3bc37fe6dfff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32d40d2d-3b8a-4ad7-b5d4-61c5212832f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5b9408f-5a14-4046-b9b0-1afb76a2dd61",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa5e6d7-3316-4c25-9b33-b5526e0e6f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81756106-af1b-4811-bc7d-67ae594d63c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36bcd44d-26c8-4d7f-add1-51613e491923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dc71e90-88aa-48bc-88dd-c0509ea5c661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1df1f58-52fb-4e07-8b83-d52ce3086f15",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e1cbe21-3524-404f-9420-a11e7293cca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41915b10-14ad-45ba-b715-4bca81035334"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "351b8a89-b3da-42ef-b209-d7a973a155db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b854b899-471a-473a-95d7-cd35b843bd3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f0971ec-022e-4455-8a9e-c19d30128fb4",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a7007bf-5139-46e1-9c4b-b3c6c4ceec02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baaf7487-83bc-4ab8-aac5-f4e1a8d89842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d935907-53be-44b4-8904-2aaf04dd1bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2420cddd-2a31-4d0a-abed-a4da8345c661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a32bcb1-6411-428e-9303-41459f64e431",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "306e4e01-b70d-4f5c-9e9e-4bb3ed2b08c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4be3418c-43cf-4969-b3a0-722f94337819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e7a1bb4-7891-457f-a49d-f33049d2d039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d45e7326-10f6-4eba-9f56-85dccc7bc94a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01b355a2-643e-491d-adfa-81c123c40966",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac7e4d72-2144-444b-b675-9c3272142d2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bc2c540-82b2-49c9-8236-020f27f691a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b062e8-f2f6-4db7-8fb1-7635a214abe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6fd8326-c2eb-4568-82e7-d18a8a937dda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd495027-08ee-4db4-82c0-cdd888a4a5a7",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3fc4da9-f401-453f-a4c6-a851a5c09349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b2e64bd-d5cf-48f5-8869-bdbe6f29c082"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f64a0d6d-e061-44e1-b601-68fac73247a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f8e73e3-eb72-4f30-adf3-da76ff5548ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0770922-35b0-4c92-ba1c-8454cd6de715",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9029b6d3-eb49-44e4-9555-eec68d321b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a932c070-0d31-4c8d-aab4-34d3f45000a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c031ba7-b0fd-4227-adbe-cb21e13ab015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14524281-d8bb-452c-9961-7996c5015614"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8147379e-4000-417f-a7d9-32846047c6e5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8c1b0810-9cd0-43c9-b91d-7a49e4fcc819",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fcfc6ff-ad65-4462-8ef9-28b82554a486",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5429b31f-4956-4e72-85d4-76b0bd8ba056"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9aef257-52be-4d2b-b13e-7e7c06a60aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d328f4d-490d-4d2c-b013-ecf11442ca38"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63c15651-29e0-43a7-b7da-fbde55765aac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "06346a22-020d-431f-9750-b71702e5bad7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "11277d86-f686-4d5b-a953-27f4078fbb21",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d475ce36-0af7-4af4-a637-1d13af2fbad7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "19f75b8b-7a4f-4e79-bafc-09f429b43ea6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "944886ba-cfc4-44f7-a7a1-4d756c23b59d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b090dc97-bdd8-4aef-b496-0cc3ffa38e7e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "274f4e56-11a0-4c8b-ba75-cda8e5bebe30"
            }
          }
        ]
      },
      {
        "id": "5e1dbad6-9c45-4f3b-bb53-cb2e0a542844",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0e809323-84b9-4fc5-a5f1-3aeb5ec2800c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0159dd21-e6c7-405e-825a-efe550aa3a44",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "716c0888-823d-4367-87a2-939c60412106",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16cc97ab-86b9-40fa-89f1-6bdaa1b54e95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01bf1a8f-5390-4ae0-993f-c924c6a99cd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff08c6f6-0d54-4ea9-88dc-7463cd333808",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f546064a-2be3-45c0-bcac-2993b12fb823",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5a22306-7b37-46f0-96a8-c15719f7e9b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d84d02c-8efb-4fef-bd4a-e32a44a65027",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab80e728-25ed-4d99-ad1e-da5cff8e2c89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7beddd80-93cd-4fec-91d5-874cd73d3ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "919fc849-2aa8-423c-979d-61a81075fb22",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d65cfb-ea64-416d-977b-3ff2e681482d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cff9bd0c-0414-4b92-a70c-21e89b9c05ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff6c58d5-087c-4d37-8381-526fdaf5142e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1d71967-d51b-4ff7-a102-8d2f33694517",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ee1d4d5-bd12-455c-a05f-1ec328da4eb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19420bfe-b52b-4b11-bbe1-3926738b84b2",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2672a4a0-add1-4cc7-a799-b58b348d717d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e7b0059-fb94-493a-bcfc-9db77a06c1e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "729d4d8d-0404-436b-a248-a77abb55d5a5",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81a81409-8345-463d-9c72-6547ece9aadd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0bcac03-b328-4e4e-b2c8-674d3d988e44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f48981-17d6-43d8-95b7-85a9feff6957",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "079258c0-6f2c-4791-930a-3166239f75e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa025e5-2e3b-40fd-885b-5e9e4f8e4670",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e87b3b6-fc19-478b-bebb-4e55b6f627bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f46373a4-a6ca-4346-9ae0-f364ec4c0f07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c216b8-5596-4056-893d-396febd9cf02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5972d759-3100-4648-950c-1b83efd7aa4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af90c01-b8f3-4e83-807d-d063bf3f123d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "206a23bb-486c-4a83-b483-87886d2ba7b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38a9874a-c526-4443-8132-61c285bacc71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "756137f5-2847-489b-831b-3dc47e0574ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13afe82b-5b19-488a-84da-0b49b283af29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ac91a2-2b2b-455b-ac21-5753a12da297",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3363deb-a82c-43d7-9aec-c3d9e0252b33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e704b211-f94d-4f55-adbe-006ba3762345"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ecbff5-1776-45f9-8bbe-2be195374564",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34ae03ef-2eea-4e4a-850a-9b78946ad128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70684029-9022-467f-8f0b-d6ea4aaaa6c4",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e042bc-add2-4910-bdd6-d74e0d26fe5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c0b4d90-2518-4478-a123-562ef6c34d53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "559b9aad-8436-4bb4-98c8-bc185564b91d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1d6485f-50a0-4e1d-ac2b-a1bb446264cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f2e5b3d-f7ce-4aa1-9f81-f54740e85f0b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b7c201-3dda-479b-acf0-ae9f707e0b02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c78f326-a116-4438-8000-88309da31734"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e93e301d-f89b-437b-bcfc-90f205645e6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7f171d9-52fc-46db-9b3e-455f2be160f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e3f8dbb-f281-4631-8186-451033fb6f8d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bbc172e-90ef-4f39-88bc-9b37961cf219",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b6acf08-448c-453b-8794-3999ef5ba494"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb8db8f-d985-4828-b883-1de0f01b2969",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76f78f43-ac2b-4fec-a15a-6524d39588d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "212196b4-6040-4016-aa46-5b3953b1ed10",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c20f7914-05c0-4f06-922d-33b4cad8d97b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "872e67fc-1265-4934-9da2-6e26635be934"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7644a2c-f281-4a6d-ab88-05c22b5ae261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de1c00ad-f737-4052-bd64-89458c8c9486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48943125-207e-4358-adbd-2a1da0d821e2",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ebd767a-adcb-40e4-b1a2-7e28d4feba20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3b15390-8350-488d-b951-a73c36560092"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f5d38d9-ad28-4341-a901-83c1aa4b62c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77ce4e27-07e6-4b58-b2c7-81489037d7c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b8675f2-f010-44b8-aa07-1693bcc18d22",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d834429b-3a2b-44fd-b012-ce50e3e3eedd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19f380d7-249d-463e-9e3d-e9e5d1b04dee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57eec90e-c82c-4231-b29c-7071547b35fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7df5cce4-3f07-4056-a3a5-5e47eff92f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8019e634-b0b7-4eb4-a554-0f6d93e44f8e",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d500c2eb-68e2-4702-825d-1ed5f43fd09b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc3a40ad-f105-4333-bf10-57e7d3bf2012"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86cf5fb0-9c1e-49a1-9e38-1b2d934d3d06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e41cd410-4260-422e-9871-b846ee95745f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97b0045c-ad3c-480a-bb19-bdaede22a0cf",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e90ef506-1acc-491d-bae9-488a15644efe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2891ca0d-9727-4192-943a-04626d8e8631"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3341f6c9-fd35-489a-90a2-3cafa00056e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffdc7ad4-9c80-43d7-8827-937d115fe39b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a008a0bd-0194-421a-b278-c49c2fecb540",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ff61a5e-a32c-4137-b320-31f39eeb450f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a829079f-bd41-4266-af30-f65e63f12739"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff48b94f-3b76-401e-9a3a-0ab90b9e6fe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8735e257-7530-4210-aac8-0b8d20471551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee2ef6b-3c61-479d-8618-43629f6c2ea2",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c6787c-feb1-4706-8517-e0f0663e7140",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7393e3b3-c76f-43ed-81c5-001f826d49f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "146897a7-a5f0-473d-8dc7-79f7cec71b80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3746283-d394-48ef-a12a-301ac8ed1a47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b748f3b4-f60f-4820-b8cb-203c1be63a9c",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a5415fd-ca9d-41a2-acf7-72190fdaea42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de2beebe-1349-41e9-b39c-48c8fb6c56dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05aa8778-033f-49bf-9c20-1e465782c3dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "208d660e-6312-4baf-8543-1eac2dfc02dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e17b2adb-b17c-467c-8263-da18fb823240",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da11c140-c008-4c80-aecd-ae760a5a7e12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "566beaed-64e9-4e20-be91-d57cead3ec76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3507a2aa-792e-4276-bfc7-bf132942e5d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdce6823-3663-4c04-9fac-2aa893fc8b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cb7150c-a6b5-41eb-ba8b-fc2f2c88bd09",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f516650-7711-42c9-b7fd-0e554f0961b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4143f8e2-2e3c-43df-ab3e-2d4b8ae11ca9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5425a236-2b9c-4384-a8a8-70403573928a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2807f663-d346-4991-81f9-8b1cd551b23e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd9465e-df25-4106-b635-9a6f6f1feb70",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3822687-4503-4cd4-a9e8-8fb8acd83815",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48a61604-dfeb-4627-913b-2f562a59a39c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "867233dc-53fb-4286-a5de-bd13c7a71313",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ae51d1c-084d-4307-9ec3-d1a356a938d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8766f9df-06e0-4be5-94f0-a3f26f1a49ec",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c15c77ea-4b84-45a7-a2a2-905bc7a85d46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5249b09b-97fd-4585-831b-94ace9cdaeec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d30ae883-a3fb-4e0a-8d05-613aac05be9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe7f3a82-75e5-450b-b1d7-64ae8c1d1a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56f9c61-ed45-4614-a3e1-281141f7b227",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5982edc-c6c2-471e-bd6b-5131dfc0057c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fce0823-33d2-41dd-a7a1-b221b94b462f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aea6875-c5a0-421e-88a5-2c8a04846530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a82fa63-dc22-48f8-8e76-d2ab5fd8a1e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df02b154-140d-47d1-a1c4-e18414b16b27",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f740a0-5d67-446a-a2a4-575743709430",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e6c8d81-683b-4195-9c2e-312316097ce3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c12b35b0-08c2-4b5f-9def-ac87cd2d5e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b3b5848-908a-4893-ac31-d29f87ffbc6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "693fb010-320a-432a-8c4e-fa509b3cd35f",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ba398b-d7cc-448a-a6ce-f9c0ceb88ff9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ec148ac-fed5-418d-8747-b7c77d938eca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "868ad78b-4ce0-458c-b358-6a57f3efa565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd4d26fe-8b9a-4e57-adfa-9a835aca83f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "429c274d-af99-4699-911d-4d37f6ca8274",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349e7b8c-9d50-4115-9d5d-ad17a3d0cceb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7686ef26-3a8b-46b8-a83c-4a51befff341"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e2a7029-6890-41f0-be90-faf6947bb58d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47044a40-097f-41b7-8e03-bc80d71d5a69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e0936f0-92d8-43c8-9673-559a02216d6b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "904c1ee5-fb37-4e8d-8718-fea1f451027b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fa73144-7a3b-4770-b475-17d8a90f9234"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89c6089-4b14-4958-95f3-91b26611e21d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f87c12b-d0be-4b8b-8f6b-05019122ce73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0756c3f-3272-4921-96df-edf9cc63c4f8",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b42de78-3126-4f46-8b19-00e46a8c3460",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10826ece-2035-44c6-92d5-01f2a4aa77bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49457c3f-ebb0-4bfd-9a28-b0ebb9afdf28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02ec8b6d-3c42-4575-9821-27c9b2dee959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b85ee74f-2576-4afa-8098-7d3329486bfa",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "243ddf60-adb2-4ca7-b378-2b15af214772",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ca23cbc-54c9-4552-af02-bb5844c680b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaca2eae-1663-44ea-a206-c1e0aef063a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47725493-96cf-4ace-a46f-e4155e95dd9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00235e1c-0fac-43ad-8724-cc3b67addfed",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21d35159-9e3b-4bb9-a679-6d079d5c0573",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c15dc161-1b56-4677-a773-770c28b3f51c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "108db834-2f54-46e4-a0f1-f4f0e2861b25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e48bc10c-a842-435e-8b46-545d80994d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762d1dfb-83f4-4205-a2c7-1052a74bde48",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1255afee-59ce-4e7c-a2dd-b33a1215bce6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "329a7abd-2df7-45fb-9e27-c5bd2ead8154"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccff6ff4-0822-49ec-8f89-8ee597d0edc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf497f04-72eb-4abf-a390-156c4616b2f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd385599-be7e-4b46-ba5f-9a76feabfac3",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e98ee5e-9c10-4735-b974-07c768de843b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e7ef136-2463-4c40-af61-0de1ad476edf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4ff6166-79aa-47c2-883d-9c88eeac44d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77d3db9a-41eb-46e7-9bf7-adba1b4eb186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa561bf-6b3a-492b-9d3c-cfbd0b2a1ce3",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fabdfc57-f808-4dd0-876f-a3e3197564b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c2dfa3b-2b87-46ef-94b9-0ce224091b79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c13824bb-b5a9-4db8-9697-8ad31f9a9423",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ff6ea5d-042a-42f9-97f6-adf71a560b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62242215-5b6e-4d01-8c03-0185174df426",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "855ac8a1-7e15-410b-ba4d-5084e8f4a9a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3be109f3-2faf-4c20-902c-d3e0cb3f0bd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "441f5ed8-c940-4889-9e1e-05fbb3cfe243",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b88f422-225f-4af1-bfb4-e0f07b3ab556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba506f8-d75e-41ba-8665-a2ceba441114",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ee84f07-5e4a-4c2b-811e-b3f09d492133",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00110c55-2501-4150-9e7e-fb1fe8477c42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c10e53-e1af-4515-9c39-1746cc860160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e330999-36c1-471c-8fb3-b8e3cce64226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0466b006-d7d0-4894-880d-e0d86dc04b04",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d530e61-f905-492d-9332-4bd29d8f6371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d09a2a7f-b9a2-4180-859d-81684954e94a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f047f5a-5dca-4b38-8e34-58baaf4f9fda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f70f83c3-9a3d-4267-8006-d3ff61029ff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdbaec68-5ce9-418f-b0aa-b982dc689ac8",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb0dc567-1be1-4137-8ac7-fafe779eed49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10382113-fa1a-4488-808a-fe2e515dafb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e4bb4f-7e8f-48a6-a230-0d6958098a1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09a356d4-843e-45b2-8dbc-324bdc67ac7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce95e46b-7340-49e8-a242-2cbd0bb8cd7c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e133e7f-57fd-4b09-ab7c-f3d6a38efbd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14d47f0d-08b0-451d-84ec-57af76d6d63e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eed63b3-d5af-4d71-bea9-6e2cafccf4d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c22f22a1-f3ed-4e96-9145-1048104e64af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3647bd63-ce7f-4017-bb2f-b153c13c2f16",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a001c2dc-dcf0-44b7-a12e-4046abd32b63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6b38351-7f42-41ee-be36-6966fb899da9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d067eeae-0d94-44d5-a9e3-d6031fd01aec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f94917a5-b0dd-4fb9-8102-b68b0866012c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7900e7f-0293-4ca5-9a9b-277911a6fdb7",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e90b0da-53cb-489b-a7ac-d2909a310f69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "218171de-0823-477d-9f4a-f4eef2bf627f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6beb57f3-b3be-490b-8832-20d2e9d0f470",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eec34e8-1ade-45be-993d-7d65383d43be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c22808b2-aaf2-4940-a7a2-5efec250da06",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d47022-4f84-4314-b4ea-9a55472825c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "223ba31f-ef9c-48e0-81de-38a627e00095"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf1944a-35e2-48ca-9f22-55e391171fad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "120bf4f3-748e-46f7-9fee-35fdb130bf19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77c28ad3-5b24-4874-846f-9a595da0808a",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d08fe2b-3b03-4a9c-8892-d3c40bb9e461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "973f34f8-fbe5-4378-9e12-dcc512d0bd1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb8722f-ee03-4da7-bdd4-72fe50454126",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a513357a-8cf7-4e43-98e3-034440c75cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d441788-b9a3-4eb4-8c7d-96b105d81234",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0402239a-03e7-40f6-9109-98c5fac51b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d4cffe6-7f7c-4e8b-a6de-0bfed03d631b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "570f1d8c-067d-4a44-b380-61bd5c7ba5f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d36e674-1b23-4401-8680-9664ddeab8c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d36b940-dcf3-49ea-8f59-107d0f51699a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9c72531-f77e-49bb-84fd-1b6eaed87c83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9613ca1-1a27-4f82-b4ae-ef6978a26cbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a060039-e917-481c-8a70-4659b7c60ae9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c14a3168-162e-4dfd-a300-bc4545dbf4b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d490e019-f0f4-4d92-a9f7-56224892332a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46460768-43da-4616-83ec-aa1f2409654b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19035f96-e525-4cd0-be0c-acbb53329d46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "313ca662-c5f8-46fd-8510-f5c30efb79c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7319080c-f9ed-4f72-91ee-8d5e5b8edaec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9621606b-9c2a-4623-93f7-5718dff520d9",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1b834a4-81b1-43ef-bd92-d9c1030b2b5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d589cc9f-61e1-4a05-a53a-43f1f3ca7048"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "409de10c-faf4-4d88-84d1-ae720ee3a545",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20fd3aed-4a6f-40e6-a196-13d0d36a5cec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dcdbb7f-9d9d-440d-8094-442814f84482",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6366c3db-ad99-44e1-97ba-e9436412485b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c1bc062-fb9d-4604-9f6a-da814e41e920"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e44951b-3004-44d6-91ca-18005f5269f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee0e5973-f971-4f4d-be44-92cafaefc4cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a0fce20-d481-44ea-8a6d-c32c451b7891",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7118397a-4965-49cd-881c-c3469da342c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94d9bd4a-c818-42ec-a9c4-e463e309a059"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df60cb1a-4939-4f8e-8dd5-d907054ad566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59c5ce5c-26d0-49b1-9ed5-d68e36f7f049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "253d3591-f40c-44fb-b2a8-87a26d598968",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ed5107-21b2-4221-bd9d-b5021d1f26aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "981a235b-576b-4205-ab08-97171a98e758"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "821a7e2f-4b88-4815-aeb6-d45ab140d21b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98b4a2d5-036f-4d21-83eb-a71e341c2a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bdae209-0f06-440f-b300-570087118438",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62901ae2-8e19-4028-96a8-95b2ace69348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aefca5ce-cd81-47a2-951f-936cde872dbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b46c2edc-d818-41aa-ba5e-a558149ceac8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd11677a-c166-4b7b-89a8-d2a41438d611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b095c18-96c2-4610-a334-ddfaf4d3f9ed",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bce4a070-1940-47f4-821b-0f8285337a14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46fb8803-32fe-4006-b90c-45635e3435f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c267f46-9327-47fc-9cc2-30ece7bf81a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61f71041-71bc-4430-8bf2-c836bcd4d983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7df6ad2-82dc-4125-9e3c-b159512ac87f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b55bee10-0ea0-479d-979f-8787cb07488b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccf8e52b-4c9d-452d-bc3f-90dcef7781b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa6855bd-0984-4c73-9476-61b6f4cca09d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2825c28b-2fd5-4c28-a03e-7b45ca71ae2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f7c377b-5578-42ad-8d9c-3108b1a90fb0",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b61e0d6f-0040-46c4-87cc-253b08d609fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c45ed9e-dd76-4ac5-bd14-d98f93e679c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e7e9665-0dfa-4fde-9bb1-3eba03b81851",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4fe61f6-14b8-4e89-96b9-93370b582d6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd3efce-690c-47d3-b786-24e17236cbc7",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "451bd068-aed3-42a9-8b59-4f25f64892c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58778235-8f45-47a6-9098-f0ab51ed8687"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "535b6602-7330-45b0-bc90-038b5e7caf9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "043ce6e7-97b7-4a2d-8338-db525a2e76b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90d91fc9-d428-4876-832b-d1a57d8cf394",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8daef48-f39c-4cb3-9ace-5c15162c11c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec1080ea-4fae-4e96-8a1f-40a5af49012f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6732daa-4eea-4e36-9814-f7506de3e846",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdb2329a-2a84-48ac-9c08-940cd06176ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c09918d9-f4be-46b9-af86-5322e7eea8d9",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d4fb7da-cd43-4e7b-802c-033596787095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2226d6c-b1d1-46fb-b9f1-4c84d5515665"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c8eed8-817f-497d-8a59-c0548d6d958f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e53d8cc4-e793-49d8-9e1c-946971b74851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bab513cb-b8b6-438f-b431-81f9aeb5e319",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62dbf2b1-5575-4a10-a489-8833167fd392",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbc851f3-a3ca-4483-9541-eeb423836d33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c96ec7-6514-43bd-9851-d22d019fddb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6973de8d-7a75-4354-af4e-12e4fc4d96bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ffd0e68-1bcd-465d-92ea-fee7cf61592a",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb0faaac-c9a7-4e05-b9ee-369b731d8206",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8becd96-fdac-4546-aaaf-ea9d8602512b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d1597dc-b763-4fde-86fd-777e845a6882",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84fd5a22-25b7-4a6e-af6f-f587f7b5141e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31bc0897-4f8d-4448-8a3d-f85ab43a03f9",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d449142-438b-4041-bfef-027cdeac3747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd56de1d-0519-482d-8105-0653e5e1a360"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bed538e-c310-42a7-932b-50fd6f69ca74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7bcd777-ae66-4421-90ee-f41638407a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29eb9365-b6c7-4d55-88f2-6bc250701f5c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30b8f342-7aaa-4fee-b19b-2304c92fe8ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae46bbed-682b-400c-af66-d26ab97d9418"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8fe6e15-cbc4-4743-be30-dede42671eaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "150fc377-8991-4d41-965e-3610fc91ef96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b147da6-8459-439c-9ca2-f37ee1b26102",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c55f8e74-d2f4-4e0c-b8ae-5d7214680383",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97b68900-d69b-4ff3-9da0-2f3273f57346"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b74682c2-c2ec-486c-a63d-34da1437642c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b6b2128-6e11-4bd5-a11a-c69cbc9c385c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8fa1c6a-f3f1-4335-b86d-dd4feeda9dd1",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d59d87-cd3e-486b-a6bf-60b5f418206c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c0acb6b-14c7-439c-aacb-09e42070edff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1cc985f-384b-456c-ab2c-8705b783eb38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d66a43e0-52c4-426a-be53-4667dac595fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a31cb51-36b7-414d-8547-4ac04dc0a40a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff3d1875-bd80-4033-8e42-b4d17a66ebeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4258b60-9344-4506-89b5-7b968b869896"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b42162-7122-47dd-8a91-0211b690480b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02acfb4b-94c1-4e58-958c-0949eff30d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c3e03d-0db5-49d4-9e06-1b0aa53bfaab",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475b5da7-af38-4d43-b546-47f6507d7d06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "348a9200-21b3-48b0-b3f9-197707a79be5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e5967cb-2302-4c05-9513-86f626022980",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "374fb8ef-5dea-474a-bcfd-cbb04ae6b4c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "532a67cb-ac2a-4877-96e5-e582c4104fad",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a3c3f00-b4fb-48e6-9bb2-4a8bd7e4c6c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90778ce8-8782-4e14-8d1d-6f6cfbcef10d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca0bfdf-f72f-4c03-bdec-f6f6b31f097b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd9955bf-8647-49bd-a455-100bf02c695d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe3a4b49-6af5-4ac6-92b5-45a9e78d2609",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd84aede-54a5-449c-b7fb-cc1d020384bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5790c72b-2e03-4d87-a5c1-8e37946c4cbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0464392a-f186-48ec-a7ba-529c70dc24a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fbdaeca-b287-459c-a77c-be0919d8406d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2004f42-84d0-4705-ac91-ecf447d68df4",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a4c26cd-5dfe-47bb-abdc-0e2f2d974ffe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62b4e7ec-6c12-48c4-97e8-53b3dc86ab82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "771f7ae4-e89d-4067-b031-e5408c18219d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4828c9d1-90aa-4ae6-9d0d-a2d4a743304b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed0463f-820a-44c5-8f03-0825c26e59ae",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad1d507-672f-4f33-b537-670e6cd1a23c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "413d3f03-2b8d-4426-b417-3076f22fbd26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec722a04-da77-435f-b71f-e190c68b59ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18b3cc57-1c7b-4ab1-b36a-2f367339dcac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6f3a814-a2d8-456d-a006-bc6e9ba53745",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bad7fd8-1300-44c6-84f6-9975477c5193",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2196b687-cc64-4fa0-9923-35b1e7c7d406"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f669315-d356-4ebc-b597-d7316b115e59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5970a3cf-ce7a-4bf2-aac1-8f339456de47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4db5777d-8a18-4c34-be44-2d5170ac70b1",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22169880-338c-4049-b1a9-dcc07e9491bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aaa6c5f8-3f75-4ff4-adf3-f89848e03739"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5006fac-caf5-422d-ba10-a2bb6f233eeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "696ba610-9ab4-4f37-8faa-aec5abc7cf9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "220408da-0e3b-43a7-9446-98f5239b70ef",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d394c41-6295-48e2-9cb7-01fafa15278d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3653650-2fa1-41c0-9340-c9e3306f7dca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a7c5ac-231f-489d-bb52-4f0c00a90d4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c71ec4c-cd53-40bb-957a-7d18d932fa08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b32d05d2-23dd-4b37-ae3d-b7a849ee29dd",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf133aa-beb9-40bf-8c6a-d8b465ed5403",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12b78fbd-52e6-465d-9aac-0bfc3728f17d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df351fb-ef92-4fdf-9f42-26e43fdd1679",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e5bb99a-84ea-4d11-a499-18e8a8f2c7fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "928a032b-428d-46d3-be95-1dfddb20395c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee42657e-3858-4619-830b-56ec40199275",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c4d175c-3d1e-4295-8d52-7b4d45613b03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a39cb78f-1f14-4708-b99a-c16eb03fedf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af4040ba-c1a3-4f8b-97f2-9e644db373ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6565da1-febf-4d07-8798-d84bbb0b2008",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91018ef7-dfd6-4aea-8dce-91c2dda9698a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac030382-a89f-4801-b1fc-6aa7db3bd886"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c75e2271-4526-457d-a970-58587728d0b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d131bfcb-4d5b-4296-b723-debfe9ff16b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf41a38-de39-405d-86f8-ad7f93db8e3c",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09ea670-964f-4176-8084-303b1a34def4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1e9523a-2730-44f5-b8a0-69a0ffb0e96d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26066b7a-d577-4fe0-82d5-607aeaf23417",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a385d942-308a-4cd6-8efe-0bd2393e5859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a533da94-f9c2-438e-8d9f-02b531a122ee",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f4a4306-e0eb-412d-ab72-888c1dec9ed7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c788f07-c1ca-4c9e-ae55-faa49f4ae6db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de6d626-eb73-4520-9cdd-ed3efb1b3f27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd0981ed-f2a4-4b5c-83ce-46d8dc128d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25cb850a-bc2d-468d-b42f-da87c27e3e1b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cbe98dd-38b4-4732-a14b-8c6bd1dd7340",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "821ed6d7-5b2d-4f79-a949-2bbe64642e89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "483d79f0-d682-4ae7-9f84-8458a1c432e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "386d42a8-e674-4b4a-a8e2-93741ad73663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd4a1bd-23a9-41e7-8a29-bbebdc979ceb",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec8583b2-2a35-41f4-9402-2998fb7e22e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51f909e2-f9c8-4ee0-a717-f0dad81a1e18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db13d132-c28a-4a00-9760-2d7d556960e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fb4b368-8250-4cb2-b5fd-9cf541f01f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17768cf1-e95b-49db-a1e9-09894b86c82f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa66b881-8b06-443b-abbe-da2a64f09d7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ee80e79-1ffa-49eb-b25c-92873c5ac843"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3add5bb4-19bc-4da7-a5fc-72202ea3492b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f12e8c2a-cf3f-4673-826c-81e2f3e78e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d393c1-3050-4a8b-8ec2-799b0f9229b3",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "597ed0c1-efa7-4102-9f8d-80e96e3df363",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e98ab50-1f7d-40a3-8f83-3f413b3b15ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d722af15-24a3-4f92-b50b-7355f2a119be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05ecb24f-4f07-49d9-8b84-c154c133f082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1193e6c2-bbc7-44c3-80fe-cc9b16e28d73",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e695401b-2398-440f-b167-3d44e6ee111a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ce8abb4-b8b7-47f8-96ef-3122dee16360"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2bb5ded-ec51-4271-afa3-fcc10a4816ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9047c256-0211-429e-9469-0a07e9f748fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "674f37a8-2a59-455f-b109-836329e20110",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1e34f8e-ad71-4b05-9521-b77fbae191ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae66b7b9-ec01-4bc5-a839-7ee56c684aba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f70e38-04fa-40dc-a0f7-a58d9dbf43e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73680167-4972-4b88-933b-3ef1880b3628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d6b14ac-ebfc-4138-b5ed-530c3f0b9452",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ffde559-2898-41ff-ad74-e2867f6deb41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2df6f66-2ada-4dbf-9ec7-23eb0f70d982"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dcafed4-5bb1-4d4a-9a9f-a81e4d9a440c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b29f8f89-353c-4e2a-8e88-95eb2d302844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1a69a4b-1614-4d3a-9748-51d4d2cee820",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bbb7b70-9a7d-4042-91ed-b4dfbe42d0f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "479cf551-610f-4f57-97a6-106de95a5a98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1437cb8d-a8cf-443e-9958-a8ae7334905a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1b6d03d-7fc6-47ac-ac85-211eeb94411b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa02c87c-42a5-4042-acb5-f1cfddebea7e",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13879f8d-8ce9-487f-aff7-232ed7f4da06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b623b0c9-8175-472f-bbc6-16f2f4fbe4fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2674d36f-7e63-44dd-9154-205f61e8c2b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08e9ed59-a845-4b44-9f82-3f41d5628fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5095f58f-b3e3-410e-983a-ebf6ae17c447",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68f1620c-81d5-4b15-9af2-f1355f571811",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "552889b6-a9b4-44af-8367-99b4dd325c32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b2224d-0aa0-4a29-8943-b7e0569f2c0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e7d51ee-f9b0-43b8-9922-29d268b4da94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98beb55d-0ea7-4969-bb86-222e7c00394d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bce19cb-92ad-412a-9e8f-4f1e8af8e42d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef9988a3-4d6b-45d5-9860-7e9e0be7dca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "841e0b63-4bb8-4ac4-ba7d-eef31887af58",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cdb953c-25a4-4e37-8aec-8cb63ff4123f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08b19945-52d0-4cf5-926a-7beb28177c86",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd796a42-3539-42f8-9e63-2dae2e30b2e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8beb573d-135d-4894-9589-627e5fa7baa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e91f9fd-4c09-4d3a-a513-d8a3abedb5ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49075044-bbba-473a-83e3-33c494ff5421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5573b535-521d-4637-b484-0d3ed986634d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f43fb17-ba20-4202-ba5d-2b55a4374f02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea1d1ef9-6ed3-4f2c-91fd-65bbbe386414"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3b6043-ef29-4c23-aeb0-f359d77d635b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b421931-d3d8-4bb4-b159-cc6f9c1ed75c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27518f91-1ef2-48ac-b48e-934a53b2e916",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62911e36-db2a-46ef-9873-ef7a39063192",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5dd0ba4e-6b4b-45db-94e8-bc619bada538"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ff2b97b-599a-412e-b10f-ad41ceea7a4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8db5ea7a-3449-403b-bfa7-f1d1e3917e71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6715c237-e162-4602-a917-66dbac5c9176",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1656f02d-2ab0-4d08-8695-7dcbf9b245b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d5bfe92-ad4c-41ca-adf0-a5b2b350a32b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9618b21d-db43-40f5-8fc4-77f4afcad649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dae56452-ba2e-4af1-82ec-6749443aae76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d999f27-8e10-4de7-8c2f-4eccde24b408",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "669810ff-0ce0-447d-92af-fe4d8a3b899b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f07eb080-4df7-49df-9d6b-cbba22c87c08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65df26dc-027f-4802-bb01-fea25b16f665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60163da0-96ab-4353-b6c9-a4a846191b8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64fbe1d2-33a0-4bb8-93d7-faff59359d5d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e9ce2e1-919d-442e-9bb7-c0e1f44b2987",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01926494-a598-4ccf-b1e8-df551d25b31e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b75e4f12-87fc-4dd7-a613-980c8db6d0bc",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3852b5b-2a74-41e9-bb4b-e71c2901ed89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a539b4c-de47-46bf-bc86-21ddbbbd79b3",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca0ee67-9b5e-4c60-a087-c0d2b427f1d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7afaf3d3-c088-49da-9c42-b895e6c6f35f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e002663-eed6-4b1b-8aa6-2e016f31aff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9efd303c-c8c8-47c9-b098-b1f32babf466"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f7f48c29-0c5e-4ce2-922c-5297390f9a36",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76379b5f-90fc-4d0a-9ce9-ac93db98d2c9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b18eab41-67d9-4a5d-8da0-4e05936492fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "984f15cb-84ec-4102-9a2e-f338ebd4c066"
                    }
                  }
                ]
              },
              {
                "id": "24a99c1f-2964-4563-84b5-e7cc07e6c2c6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6b72b69e-793d-4648-ae44-e2fdf76fbd0e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b4b805-dda7-4f01-8ade-f4725cc5fee1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8c6ffb02-5c89-466d-919b-78943b246614"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc26e53-1d4b-4602-b268-8cfb4d2bb466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba32f035-b536-4917-b864-8740105613ef"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e319ae0c-0beb-49dc-90ba-3d264385307e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "436b9e11-2af1-493c-ae2c-60b1587f941b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6633c113-861c-4692-be7e-396d540bc532",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2027bb17-228e-414b-b673-7119022391b5"
                    }
                  }
                ]
              },
              {
                "id": "c9efde8e-a756-4c5a-9168-14d7d49d4bee",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b27f3178-1742-422a-b3c9-3cde45296c4c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "950772dd-2e07-4ebc-ba49-79adc5c95963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "547bbfee-0f35-4d8f-9acd-794451e98eec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bde276e-43cf-42f4-b8ad-5245921fe3b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9d7fdf3-2bb9-40f2-97f4-41d20fecc0c2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bc48b34b-2c1c-4b4a-aab5-4cb3f2bdbfb6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "17f45f0f-c46d-4874-9638-4f09be65fe13",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b823fcc-b419-4010-b70a-210e2422dd4d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f83cdc94-ab1d-4c72-8d43-87731cfdbaac"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b626745-b5d1-4e3b-8ce0-92bfca9adab4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9b3da486-0c02-4269-80fe-bb92e608e6b0"
                    }
                  }
                ]
              },
              {
                "id": "f8e37f0e-258d-4f1d-9f41-0dc53aba0f47",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7637b6d-4d80-4599-9f82-59769513246f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e1ad6efc-2bb1-488a-80ad-0100b4a1111a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2c67e7cd-6862-46e6-8c70-3a8e26a1032a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9ece8aa-2284-48f3-b29a-66f44e965b02"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "42bcb177-d509-4f18-aa5e-957960043cc4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "1f48c1af-7c04-4db2-a89b-6af4c5516cce"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1bc788c8-04fa-4cbf-a3f3-9c6e365274d9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fde95cff-d8a1-4a0b-87bd-22907d2965f8"
            }
          }
        ]
      },
      {
        "id": "0995ab91-ae95-487d-a235-ea47d0d8712a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1a0236d2-70dd-40c8-b449-230dd4c4d30b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "46572d3e-b90a-4508-a0ce-aea176819513",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "decf76a7-eedb-4ca3-9d1f-b9c6a93d58e7",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d72b760-5e2b-4320-841f-e03620c3158c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cc85ad30-f4a9-42d8-8c56-8e832c02e3d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b5af0ba-61b8-40e4-a2bd-d08521ab3b79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae0c7b84-2d44-4734-8ef4-24cc5c07b0ed"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd83e9f4-01a1-41f6-b8a8-96dfd4c0ef75",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "49d6d627-cfa7-44cd-b517-0984781d77d7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0603c8a3-239c-4934-bd39-5757231afd8d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a145c74d-0f7c-4c90-8230-f049bbf23988"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0b33ef3b-d807-4c1b-805e-50c3243cf3f4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "29458d6a-2f90-4dbd-bfb9-99d68c91e613"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e72d58bb-5719-4ac1-b245-dd72ae70a899",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d7464ab0-8a3d-4817-ae1a-aa87f298cbd8"
            }
          }
        ]
      },
      {
        "id": "4d481aaf-4b58-47b2-9a72-ca215fc956cc",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "90544047-495a-44d0-9e3f-882b75e2ff63",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8e1b96dc-2a12-4a8d-afba-fc2020fee736",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "90ac124a-8b55-4c99-ac7d-bae33f533fb5",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb346bf3-702a-488b-a052-de7b65b884d8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bc9b3284-b588-4668-9ccf-61b34d774410"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f416b71d-e886-41f2-a61b-e1eea0255b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "18c6a121-0eea-4bb8-921e-bcd49d6dab6a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f57d3cb-0683-4c63-b5a4-837264cf5715",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e030b18a-f76e-4962-84b5-46b69831a656"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "19ba2b37-cf9d-4805-8f80-43e8498b4263",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "beaed835-fd20-4459-80e8-1898dc3c27af"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "48309a25-2abb-4264-a568-da505c5c2982",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6d5727ae-ff5f-41af-92b8-20ca1adf5cd6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5ff426de-ad65-48fd-843d-be26a7b3eef0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4611a9c8-ee1b-481c-afc1-8ec99e0f599a"
            }
          }
        ]
      },
      {
        "id": "c5a4fdc8-b6bb-4422-8629-2ef278a6ed72",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "57599505-1206-45d2-abc4-b9abd96015b1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e985b9c2-38a7-4e05-93b0-d5414400c4de",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0812bf28-8ae4-4875-904d-b69181e34c0e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76df8bba-3363-4a47-b26e-0b72789a69aa",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41d859ea-1007-4d3d-8411-d569e210c4af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "804d3ea7-ea0e-4288-a019-8b093e549ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "419cfcea-2da5-481b-973e-0c8434816251"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9be7baee-2610-47a4-af22-b9f2f544caf3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cf4d29b4-f02e-4ed5-b171-b204905d8fcc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5393f780-b422-4d07-adf2-d3d54ec6f4d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3b66bb84-a6df-4618-9e10-7f191cc42750"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0b8b58d7-2991-44db-b516-7410fc09dc25",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d735d3de-d000-4409-bc2f-9e1a6ceee0b9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "01391834-741e-43a3-b93f-ffd21879155e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fee19074-3fd0-4307-8926-1af138176e4f"
            }
          }
        ]
      },
      {
        "id": "8fc4fb36-3c18-45da-8c44-ddcb8d85bd46",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0d45b016-927d-4047-9f49-01c20a2d9756",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e659b037-7d39-4b3e-9c08-ead48c497362",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "67e6b1d6-3d9d-43ea-b1ac-a273d6e7e304",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "adaebd30-b1e2-462a-8364-50e52b65c4e3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "acbee4f9-eee3-48f6-9386-d27c2344afbf",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 263
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 11.722222222222218,
      "responseMin": 6,
      "responseMax": 239,
      "responseSd": 26.51778046473752,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1713573292950,
      "completed": 1713573304000
    },
    "executions": [
      {
        "id": "98f5f7c6-2228-427e-a12b-aa88e9859fdb",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "48ef05d6-9271-4587-9e18-579f15417fdd",
          "httpRequestId": "da16eb4a-7507-4983-8e19-728227c319cd"
        },
        "item": {
          "id": "98f5f7c6-2228-427e-a12b-aa88e9859fdb",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "c87eef5a-6479-4622-b884-afa53af20709",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 0
        }
      },
      {
        "id": "9e00afc5-26e3-4503-b8b7-2e608f47ea7c",
        "cursor": {
          "ref": "9900cb1f-d10b-46ee-ac9e-0209a4654eca",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "11106912-74f1-40ee-8585-31c4c289273f"
        },
        "item": {
          "id": "9e00afc5-26e3-4503-b8b7-2e608f47ea7c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "6279f0be-d871-47fc-a26a-322e711c7253",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "b624b2d2-102f-445f-9cfa-96fc80aa8d07",
        "cursor": {
          "ref": "aad35908-fb0e-4bfe-9f40-d9829b2e8ade",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "affdff8a-b274-4fff-974b-71aeba24a20f"
        },
        "item": {
          "id": "b624b2d2-102f-445f-9cfa-96fc80aa8d07",
          "name": "did_json"
        },
        "response": {
          "id": "4de13a66-8cf2-4f39-9b70-f3a91026adbd",
          "status": "OK",
          "code": 200,
          "responseTime": 239,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a83423a-c75c-4f09-b23f-349300a65803",
        "cursor": {
          "ref": "c16a6d2a-dcb2-4f26-9ffb-d070d8f8ca32",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d389fc5f-83d9-4fc0-9eb0-e21513e0b79b"
        },
        "item": {
          "id": "4a83423a-c75c-4f09-b23f-349300a65803",
          "name": "did:invalid"
        },
        "response": {
          "id": "6fd689f3-a3f0-466b-91e1-3e25c7f72372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a83423a-c75c-4f09-b23f-349300a65803",
        "cursor": {
          "ref": "c16a6d2a-dcb2-4f26-9ffb-d070d8f8ca32",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d389fc5f-83d9-4fc0-9eb0-e21513e0b79b"
        },
        "item": {
          "id": "4a83423a-c75c-4f09-b23f-349300a65803",
          "name": "did:invalid"
        },
        "response": {
          "id": "6fd689f3-a3f0-466b-91e1-3e25c7f72372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e22e6e2-355d-4f33-803c-bde205186125",
        "cursor": {
          "ref": "0e82d247-33d9-49bf-a7c7-54c73d56fbd8",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8a3c2377-add1-4f02-8fd5-8f6e0c8b12c3"
        },
        "item": {
          "id": "6e22e6e2-355d-4f33-803c-bde205186125",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ff718d5f-e8cd-4362-9bc0-2f6a6438e836",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 170,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "033e6f87-89e2-468d-82ee-31df60df9913",
        "cursor": {
          "ref": "a7d4dec8-ef01-458c-be8f-3f199d3f90ae",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "54a0f964-42bd-4a08-802a-4d729a6fb404"
        },
        "item": {
          "id": "033e6f87-89e2-468d-82ee-31df60df9913",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e4ab41c2-af03-4a54-8e84-ec2477fc205d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 8,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "575c52ed-4e9b-4bd9-a5ae-4ca405c37baa",
        "cursor": {
          "ref": "2f5ba3b9-2107-41fe-808e-24c9da9952e2",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "3a8a9cee-7c4e-4ad7-a01b-bea026370106"
        },
        "item": {
          "id": "575c52ed-4e9b-4bd9-a5ae-4ca405c37baa",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "bdc53cd5-c691-47ea-aa86-eecddea7ca9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 8,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ac7935-8934-46fa-b377-83e3650901ee",
        "cursor": {
          "ref": "adb988b8-4fa1-42f7-8810-210b4a249b56",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "05fe4d51-d7a1-46b5-aaa9-54c08276d0ce"
        },
        "item": {
          "id": "b8ac7935-8934-46fa-b377-83e3650901ee",
          "name": "identifiers"
        },
        "response": {
          "id": "74d56f72-f265-46e5-95ae-bacb99f576cb",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44847863-f333-423a-8552-b84626f5b501",
        "cursor": {
          "ref": "42cefd89-1f5b-422e-8149-e41f34a3f4d6",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "855fc0a7-a5df-403f-8c10-6ba0d2d1a667"
        },
        "item": {
          "id": "44847863-f333-423a-8552-b84626f5b501",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0ebfff23-8975-46c3-8ea8-4f4576a42748",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff18f14d-1317-451d-a0c5-b3c87bbd52b1",
        "cursor": {
          "ref": "7cdb0cd4-b2fd-44bc-92fa-898ba66f55ee",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "87939b37-3ea2-4c45-b5d1-18ab79940db3"
        },
        "item": {
          "id": "ff18f14d-1317-451d-a0c5-b3c87bbd52b1",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "027f3b32-6686-490f-b392-65008d95de79",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a768b3b1-f56d-4a68-802a-abb22a2c4050",
        "cursor": {
          "ref": "00f4561f-efc7-4f5b-9624-9e8e1d7a6dd5",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "da620000-a417-415d-b315-b63e5fc426b2"
        },
        "item": {
          "id": "a768b3b1-f56d-4a68-802a-abb22a2c4050",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "870ad790-96e0-4b06-bee9-4edca7eb9992",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d301b69d-eae1-49cd-81e7-949c219b1d84",
        "cursor": {
          "ref": "76cc0ab5-2141-41c9-a1a9-87298a7a1209",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "62e035fa-c771-460d-b1c8-d4c680ab1dd6"
        },
        "item": {
          "id": "d301b69d-eae1-49cd-81e7-949c219b1d84",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "2d7c41dd-7779-4dbd-8135-9561d8c1929b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a556021-fd0f-41b9-95eb-e49f6bf6fefb",
        "cursor": {
          "ref": "4610650e-d924-4bb4-9aee-793e0e75b58a",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "89b867d2-1506-437c-8082-bc103b8ad5cb"
        },
        "item": {
          "id": "6a556021-fd0f-41b9-95eb-e49f6bf6fefb",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "b30bf426-9827-475c-a45d-4cd367460531",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd6fa584-d431-4af2-9bfa-41f990f2ef5f",
        "cursor": {
          "ref": "4d1c31cd-e59e-4036-9cab-dc49276aafeb",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "28945d04-875f-45c2-b482-2f6dd6cdc8c5"
        },
        "item": {
          "id": "cd6fa584-d431-4af2-9bfa-41f990f2ef5f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "285a7769-89b0-4269-a301-7b635b3862ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc89df0c-6251-4a8b-931b-d3565f919b18",
        "cursor": {
          "ref": "3f70c56b-516d-4b81-97da-47afc667ba0f",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "5d90c4c1-d8f0-4dfb-ac5d-ff76c878684a"
        },
        "item": {
          "id": "bc89df0c-6251-4a8b-931b-d3565f919b18",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f0bcfadb-6d3e-4f05-8a87-c31417312a45",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b85ff6c-7a2f-4813-bd57-ac2b6c4a1532",
        "cursor": {
          "ref": "5b74ba4d-02a0-44fb-82fc-8420011e2557",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0ef81f05-7e4a-4f30-aa79-ec15736ee62a"
        },
        "item": {
          "id": "3b85ff6c-7a2f-4813-bd57-ac2b6c4a1532",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "c4d68cb7-862e-4589-b46d-70eab2ca95bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065c66f3-dc0d-450d-b7b2-729aad44f906",
        "cursor": {
          "ref": "acf900b3-69ca-48dc-80ca-47d392c05f2d",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "8d1ab67d-d6aa-4c84-b8e1-167310b14e82"
        },
        "item": {
          "id": "065c66f3-dc0d-450d-b7b2-729aad44f906",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6e5495dd-4194-4ca5-bbaf-091634c16480",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3129791-b8f3-48a4-939e-ae8ae1fab862",
        "cursor": {
          "ref": "0713e87e-6cf6-42ce-aa7f-f929ee49b3cc",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "04173d46-d33c-45b3-ba27-6bc72751c20d"
        },
        "item": {
          "id": "b3129791-b8f3-48a4-939e-ae8ae1fab862",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a56c3ddb-df0f-4378-979d-e6c5995b0917",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "134aa343-56b8-42f0-9f97-91858340f0c2",
        "cursor": {
          "ref": "2d5c9381-9b55-423b-b1eb-ef332e12e4a6",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "6cd9c545-4345-46cf-bbd9-f89deac37288"
        },
        "item": {
          "id": "134aa343-56b8-42f0-9f97-91858340f0c2",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "972381a2-286c-4d5f-9847-df73bc94834d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "056a6c2c-c3e5-4ecc-a42e-763461917afa",
        "cursor": {
          "ref": "ea8b0d1b-6fd9-4149-8ebe-8ba935a5c903",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9d462440-1718-41d5-951a-39ff5f7c73e6"
        },
        "item": {
          "id": "056a6c2c-c3e5-4ecc-a42e-763461917afa",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "2a58a2c6-2525-4b03-b70a-4f7efc7823c1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6430521e-6f1b-4f99-909e-52c1dd70b5fc",
        "cursor": {
          "ref": "8ef8154d-caee-4f30-859e-93207b46af72",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8378d595-4c66-42bd-9cea-fb49f6b65f5b"
        },
        "item": {
          "id": "6430521e-6f1b-4f99-909e-52c1dd70b5fc",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "6f61265a-ee8a-442e-8f23-4eb55082b350",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce5124fa-77d6-40e3-9437-bb92f01d46e9",
        "cursor": {
          "ref": "0c04d2c5-9c61-4b10-81a1-2d150f644d78",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "9eeebf93-f4b7-4590-a951-0b73de767f2b"
        },
        "item": {
          "id": "ce5124fa-77d6-40e3-9437-bb92f01d46e9",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b48b82ee-87e4-41b3-aa3b-4af8ea22078d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f5935ba-439b-47cd-81b4-755947f9daa0",
        "cursor": {
          "ref": "677c9962-b78e-4ef9-9198-4d3af3e1e21a",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "bfba656a-5615-4913-b808-cb60675cc733"
        },
        "item": {
          "id": "3f5935ba-439b-47cd-81b4-755947f9daa0",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4b7d1396-4048-4dde-aaca-91f6d9d7d690",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c66e963-9033-4c7f-ac3d-40a95ca91289",
        "cursor": {
          "ref": "3a67e23e-1efd-4be3-9d2a-c0fe4857eb46",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "7829915c-1154-4ba8-b53e-70d8ea71f7a1"
        },
        "item": {
          "id": "2c66e963-9033-4c7f-ac3d-40a95ca91289",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "cd55ed50-ac3a-4c30-ab1d-9671963cab39",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e74e2f32-eeef-4b16-b563-cdb44fcc2845",
        "cursor": {
          "ref": "2ad27cd0-5b66-4cbe-8cc0-31dff8bfb547",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2827e1df-3a35-4743-985e-52ba849173cf"
        },
        "item": {
          "id": "e74e2f32-eeef-4b16-b563-cdb44fcc2845",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "28ae172d-9005-4819-8a3f-15cd27fba5aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f86359eb-d5db-4a5c-b0d4-87ff69238acb",
        "cursor": {
          "ref": "da2a7925-1f93-4ac2-891c-e7544932cb03",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "fbc7f762-3e0f-4b46-bcc3-cc0ec6a81601"
        },
        "item": {
          "id": "f86359eb-d5db-4a5c-b0d4-87ff69238acb",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a0b5dd82-6cd6-4e5c-8782-e2afd8a08616",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e25b86dc-dbe2-4ed6-9a7d-ccc8b5c5af07",
        "cursor": {
          "ref": "58480897-996d-4b24-ab80-c0e488174f69",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4b30b9b3-bc19-4e00-9bc3-29fc1e558d79"
        },
        "item": {
          "id": "e25b86dc-dbe2-4ed6-9a7d-ccc8b5c5af07",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "30cf3643-6942-474c-9776-36e70b953cc1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4164589-f969-4f57-8ed6-84521ac8bfc0",
        "cursor": {
          "ref": "5c8475cc-79f0-4b85-be4f-0fe33f789ba8",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "13a49c2a-6d80-4c79-a925-ae34c8be0f42"
        },
        "item": {
          "id": "e4164589-f969-4f57-8ed6-84521ac8bfc0",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e4a9b410-0376-4c81-938c-cf9b9c111271",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d260611b-56b8-456b-9ede-83e4037e1021",
        "cursor": {
          "ref": "a968e80e-69a3-4c97-8b34-d71c8f57f4ad",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4b51f08c-95cb-487d-a7c2-28c76accd323"
        },
        "item": {
          "id": "d260611b-56b8-456b-9ede-83e4037e1021",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "adc506ef-c41e-4059-8370-0d581ead3c19",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "171a2eac-5163-4965-9778-070245cbd597",
        "cursor": {
          "ref": "39db9e12-7958-4143-9c3b-406797da0578",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "7ae5ac9d-8f52-4a77-96f4-def320f5fe89"
        },
        "item": {
          "id": "171a2eac-5163-4965-9778-070245cbd597",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "828ec9c4-5c96-4b9f-89ec-bb7148d8d2dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6fd2d58-3bab-4c49-a2b4-1a2b8a36ccf7",
        "cursor": {
          "ref": "d410aa58-b705-4cb7-a620-6860e8a4ef1e",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2ebe38bd-f0d4-4796-bc39-a9defba7f38c"
        },
        "item": {
          "id": "e6fd2d58-3bab-4c49-a2b4-1a2b8a36ccf7",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b914088f-e159-458b-a0a0-abd7c3ae7b8b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "530886d0-d178-4cbe-a7dd-9027cbbd48ed",
        "cursor": {
          "ref": "aefa59bd-e593-44b9-9ef7-d0bcf7ac52d7",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "04838052-e1c1-45f1-bd1a-aa0eaecb6e15"
        },
        "item": {
          "id": "530886d0-d178-4cbe-a7dd-9027cbbd48ed",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "79aa22d6-71b6-405a-a46e-411450da091c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39875901-936d-4aff-835e-29d69bf23aa7",
        "cursor": {
          "ref": "132bcb86-252e-45c6-b2dd-74f641d59945",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "e84b38fb-5d88-46c6-aada-9e3eac5b38b6"
        },
        "item": {
          "id": "39875901-936d-4aff-835e-29d69bf23aa7",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "27f87727-b4e3-408f-bac5-e89bed22c092",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e99b2e-af24-4737-af4a-a8e273e7762a",
        "cursor": {
          "ref": "98a6e8cd-d1e5-43bf-9c99-a677f7c288bd",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5372da76-357a-4dd8-ba9f-07e46fa901a7"
        },
        "item": {
          "id": "c3e99b2e-af24-4737-af4a-a8e273e7762a",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f51a44dc-9ef4-4565-9a6c-35e9885f0670",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23d96609-27b1-4334-beb0-2b68e9beda46",
        "cursor": {
          "ref": "f10ed00c-d54d-4b56-a966-13b32f87d0b8",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c15d413a-d10a-429c-b4fd-88351e81ab1a"
        },
        "item": {
          "id": "23d96609-27b1-4334-beb0-2b68e9beda46",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d90792ce-36a5-4019-96ba-aabb8ed75e6f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed00b66-c1d3-4e65-9dd8-0e4a7da0200e",
        "cursor": {
          "ref": "48277d56-95bf-45c6-b034-08ed50c6f6c3",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ce5686f0-a055-467f-9d45-d017890f1ed9"
        },
        "item": {
          "id": "0ed00b66-c1d3-4e65-9dd8-0e4a7da0200e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2565532c-0e12-4f14-be9e-61ee1d12e693",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a7e0541-849e-492f-8d1d-eb06a7d7cb69",
        "cursor": {
          "ref": "23cb2195-c6c9-46c4-9204-81a7353afafb",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "bab674fd-d84f-4274-8e2e-1df4cff52827"
        },
        "item": {
          "id": "8a7e0541-849e-492f-8d1d-eb06a7d7cb69",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "82b05633-f2bb-488c-bb63-8555ccdf860d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "454a3e00-cfa6-40e6-a75d-3346a87f18e2",
        "cursor": {
          "ref": "78f56d58-f858-40b3-9b77-9a7c8d142102",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "4913c078-597a-424b-b289-c7ba7fa6446b"
        },
        "item": {
          "id": "454a3e00-cfa6-40e6-a75d-3346a87f18e2",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1344c2db-b0b6-46da-a00d-d59144f245ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47822642-d7e3-45aa-9eae-d44975dfbe08",
        "cursor": {
          "ref": "b17c5a60-6ffc-45c2-be8d-507524c1c6cb",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3de10ab3-3616-46bc-8598-c5edbc231c40"
        },
        "item": {
          "id": "47822642-d7e3-45aa-9eae-d44975dfbe08",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e3accc73-3c45-407b-9fed-d2425a25591e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4898781-edc1-4cff-9cf4-89ddf796f18d",
        "cursor": {
          "ref": "298002b7-4252-440c-a91e-709da9cb2175",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d82cf1b4-7345-4251-9a78-ae3ebe77ded8"
        },
        "item": {
          "id": "b4898781-edc1-4cff-9cf4-89ddf796f18d",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ab5d717f-a1d4-48a2-b54b-da44f39f6777",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19e9f135-7228-4092-9ddb-144d47a9ad81",
        "cursor": {
          "ref": "6dff87c4-9d81-4710-aad5-ece19167caca",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "35d810bb-0dc6-44b4-a34d-09502a21308c"
        },
        "item": {
          "id": "19e9f135-7228-4092-9ddb-144d47a9ad81",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7d52914d-44b8-4055-aff3-6ac759d250ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "665cebe7-02cf-4351-9f35-0914c9d1a872",
        "cursor": {
          "ref": "854ae26f-1e2c-4ac7-8852-11af1cbd2e8c",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ad409816-98c3-4cd4-826d-9d9c3cdb1599"
        },
        "item": {
          "id": "665cebe7-02cf-4351-9f35-0914c9d1a872",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "0b113917-52c1-4fca-af33-91ee788658c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a86abf7-47e6-4a52-a236-f532332cd103",
        "cursor": {
          "ref": "dadaa9bb-f147-4cb4-9fb9-0d3dc9c805a9",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a8269c85-0fba-45a4-8fde-f140810ada09"
        },
        "item": {
          "id": "9a86abf7-47e6-4a52-a236-f532332cd103",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "913b6b43-95bb-4ec0-8ae1-86bc83add4fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2965aa9-2ef0-40d4-8695-a73d389004c9",
        "cursor": {
          "ref": "c14aa7ac-c1ca-4f57-bc57-caaaf418be44",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d7fe4439-c620-47e2-ac9e-9ae4f7361ece"
        },
        "item": {
          "id": "b2965aa9-2ef0-40d4-8695-a73d389004c9",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "fcbcc529-0a55-4730-805c-c8feb25a77fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d90921b4-93dc-486e-a80c-ed4cdd8585b0",
        "cursor": {
          "ref": "fff9a18a-2599-4f99-8fd1-5c69a956d99e",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b2bcc73e-98cb-43a7-aa33-19d3250ef0d0"
        },
        "item": {
          "id": "d90921b4-93dc-486e-a80c-ed4cdd8585b0",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "193068de-ce1b-4478-9358-57368c6230d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bafc403-8c3d-4203-97bd-37e96f0befec",
        "cursor": {
          "ref": "00333ef7-3bf0-4fea-9d6a-88a429ca2a29",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "975336e8-2171-477d-bf48-ae7db19d141c"
        },
        "item": {
          "id": "3bafc403-8c3d-4203-97bd-37e96f0befec",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ff720961-c292-4491-a781-447fea36fc82",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51ff9b17-c01b-4835-8aa1-cf66be914968",
        "cursor": {
          "ref": "8f5822d3-33ff-4740-8ccd-bfb355cffdce",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "953ac21a-f31e-4f7e-9eec-b9dac5a19058"
        },
        "item": {
          "id": "51ff9b17-c01b-4835-8aa1-cf66be914968",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f2cedb3d-9fe3-43bd-8473-9bbd7d518ba8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0484acdf-ced4-46fc-9b5b-1f02e6d4c76b",
        "cursor": {
          "ref": "43a056cb-3115-447d-83b2-2797ca4ab8f9",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "9be8f09c-2056-4e6d-ae73-9aebf2c23623"
        },
        "item": {
          "id": "0484acdf-ced4-46fc-9b5b-1f02e6d4c76b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "321ea6c6-373e-45f0-bcd4-493190969439",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "831b6191-3f8d-4643-a641-c9be5680c028",
        "cursor": {
          "ref": "d7134f9b-a911-4d77-8b20-d206999a235b",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "7617ae3d-95ab-43dc-8344-cc064d9ff741"
        },
        "item": {
          "id": "831b6191-3f8d-4643-a641-c9be5680c028",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "acb3ada8-e21d-4e8e-b1c1-93f5bfdde7af",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87125958-45cc-49ba-bba3-35ceb286ac31",
        "cursor": {
          "ref": "61ef7c23-e8ef-4f33-92c3-57c937edf07f",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "104cf2e2-9c83-49e6-ac71-d20b599e89c0"
        },
        "item": {
          "id": "87125958-45cc-49ba-bba3-35ceb286ac31",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "34ef2bcd-b966-4bef-ba17-d7b4d37cc337",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1a0c230-9c42-43ea-b426-eb3a11fea9fe",
        "cursor": {
          "ref": "5b413d04-f7e6-4714-aabe-41fd32fb74af",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1ba4d12b-add9-4687-a88b-d4090fd01353"
        },
        "item": {
          "id": "c1a0c230-9c42-43ea-b426-eb3a11fea9fe",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "873efe5c-12e1-4d91-9265-5cf9a6296b74",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a815bdd-2cb4-41b8-997e-cf7cbcc339d5",
        "cursor": {
          "ref": "56026272-c362-4914-9842-52027d2faa8f",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ce9fef18-b7e2-44c3-aa19-72fd4c06fdbc"
        },
        "item": {
          "id": "6a815bdd-2cb4-41b8-997e-cf7cbcc339d5",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f98b5e63-ba8f-4ed4-bd59-fb5450278c44",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10a93582-33f8-4f4f-a927-d0e45c360da8",
        "cursor": {
          "ref": "b8a92c39-5bfb-46f9-90e7-36ae18fa6625",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "76c561a8-7e49-4ac4-afe5-990571870cbb"
        },
        "item": {
          "id": "10a93582-33f8-4f4f-a927-d0e45c360da8",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b0f8b48b-efdb-4401-b3d7-46869966fbd0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc49d01-39d8-4d3f-afa5-1474330d04df",
        "cursor": {
          "ref": "6a829ac1-a497-41f2-8446-e998a0475de1",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "62ee3192-e888-4e0d-be39-a0c25121d4b0"
        },
        "item": {
          "id": "0fc49d01-39d8-4d3f-afa5-1474330d04df",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "2b63501f-b4ad-453b-bfed-c69c74a92819",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a7216f3-d5fb-459c-a087-1c8d73f403ca",
        "cursor": {
          "ref": "bf9e875b-ab68-4d26-bba3-be0eb1f11d9a",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "cb7791a4-2733-4855-8629-c9424e184e78"
        },
        "item": {
          "id": "0a7216f3-d5fb-459c-a087-1c8d73f403ca",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4a0fce6a-b2f3-4e2a-8702-f03620a410d1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23d29604-34c0-4914-b0fc-ce26f0c24c5f",
        "cursor": {
          "ref": "c4574dbe-d4c7-40da-8059-5ba9b2e578ed",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "777ac794-f421-45f0-a693-f7476a9eaf3d"
        },
        "item": {
          "id": "23d29604-34c0-4914-b0fc-ce26f0c24c5f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2552bc5b-04e9-40d0-a5f2-7d5c00d1c268",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d8b218c-fcd8-4cab-9b71-529619fba37d",
        "cursor": {
          "ref": "a02861c4-9598-4f87-baec-a74ad06c7de1",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "cd491145-2538-49b5-b882-1a32c875aaa4"
        },
        "item": {
          "id": "3d8b218c-fcd8-4cab-9b71-529619fba37d",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "bec48092-1ef4-4aa6-bb2f-0d3b88cc5db1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d98caba3-c787-462d-a871-21a2c6c5a31e",
        "cursor": {
          "ref": "d3dfea92-d74c-4be4-bb6c-2a1731eb4c35",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "a8c85f2f-fdde-4ad8-a1dd-700d20afd77e"
        },
        "item": {
          "id": "d98caba3-c787-462d-a871-21a2c6c5a31e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "87d4f36c-cf19-4634-8f0b-76c83158fba3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def8d84a-0d3c-4547-8b2a-1e1bf1f94ed9",
        "cursor": {
          "ref": "22977dc9-b47f-40e3-bd91-1646abfac500",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6009aef4-4664-4c0d-9277-750468f67e7d"
        },
        "item": {
          "id": "def8d84a-0d3c-4547-8b2a-1e1bf1f94ed9",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2dc91223-2bc6-4aee-a161-2e358348cdc2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e73e4150-48c0-4fbe-8c14-f0ab8820e722",
        "cursor": {
          "ref": "3e851d0e-3ec6-4522-8316-fcee2c81036e",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "73bab01b-e08b-46cc-871e-acf1abedbedb"
        },
        "item": {
          "id": "e73e4150-48c0-4fbe-8c14-f0ab8820e722",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "012d8e6e-c1f4-481b-ad2d-f29c1c6c55f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5640a48f-44d5-4aa8-8908-2e32e8e79bd1",
        "cursor": {
          "ref": "127629f6-1408-482e-9d5a-dd91ee984d4c",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "9c4f0540-2f34-4b0d-9f65-0fd9243363c0"
        },
        "item": {
          "id": "5640a48f-44d5-4aa8-8908-2e32e8e79bd1",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "1233d248-72ad-4229-964e-116896d2349e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3621255a-c67e-44bb-93eb-7e06fb045737",
        "cursor": {
          "ref": "d8f18769-bd9d-43b4-a734-52f9f83bc20e",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "70529ade-fb32-445a-a62a-22b10bcd1fc6"
        },
        "item": {
          "id": "3621255a-c67e-44bb-93eb-7e06fb045737",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "e8e8bc13-73f5-4c4a-9738-76333c65c9ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "667c2442-c5fd-4093-ba79-d9207e8074b8",
        "cursor": {
          "ref": "24684a20-b2d9-4b1b-aa08-dd0893e03291",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e19c0844-d56b-4aaa-87a1-a24cd95de7fd"
        },
        "item": {
          "id": "667c2442-c5fd-4093-ba79-d9207e8074b8",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "482c7673-03cb-4338-afe8-8fd924b4e76b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 16,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb680fb-13da-4d30-ae7a-a6939408f4cf",
        "cursor": {
          "ref": "69914aa3-ff82-4a5b-b658-79ed47d5e839",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "ee1d8dc7-9c83-4d26-b245-37e8becb2eb6"
        },
        "item": {
          "id": "beb680fb-13da-4d30-ae7a-a6939408f4cf",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "01d2d7de-78e4-444c-977c-b437b5fea59b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d97c901-7513-4243-8e2e-2ee6764316e9",
        "cursor": {
          "ref": "7e2bf0df-6dfb-4950-88f2-37ba2843a5b7",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "2609110e-1255-4eae-bd5a-eee9dc9feca5"
        },
        "item": {
          "id": "1d97c901-7513-4243-8e2e-2ee6764316e9",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e52d1371-8fc7-4eba-8720-80b55c1c7a13",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "469eb305-a333-47d3-a20a-515ceec75a4f",
        "cursor": {
          "ref": "60b53a7d-8d7d-455c-aed3-f8419e836df5",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ff463ad9-0232-4a16-bf41-4249b4222ad4"
        },
        "item": {
          "id": "469eb305-a333-47d3-a20a-515ceec75a4f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b1d73414-e20e-4249-8975-8da6011c2255",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c822e10-c1fe-4b72-bf47-2e877bae260f",
        "cursor": {
          "ref": "f59829b9-0829-4774-af82-c43e690ee3c0",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "84a78144-136a-4be4-9dc3-60686bf84ccf"
        },
        "item": {
          "id": "7c822e10-c1fe-4b72-bf47-2e877bae260f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "fd5e8fae-bc9c-4313-9591-1674e32ab7eb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e43595e3-380a-4386-9d4b-c08cddeda77c",
        "cursor": {
          "ref": "ce6829b4-2540-4342-90e3-06ddbc0e0410",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "9b110450-7d07-4bcb-9d83-0d214b4c24db"
        },
        "item": {
          "id": "e43595e3-380a-4386-9d4b-c08cddeda77c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "299273bd-1ab8-42d6-85ff-571044a34abb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f703676-eb43-4b04-9e7d-d7beeb6a51f4",
        "cursor": {
          "ref": "fcd459ee-0b7e-42c6-a153-42c83b84cbbe",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "fda28770-d523-435d-b2e0-36bee5f53959"
        },
        "item": {
          "id": "7f703676-eb43-4b04-9e7d-d7beeb6a51f4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "54ec9ba3-ead0-4a6a-9f1a-d6113effccae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac3ea25-048e-4fc2-8a9b-bd05bfae8915",
        "cursor": {
          "ref": "f1c3f23a-545a-40b3-909d-83a2cc8a9765",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "6b2fb0cd-3407-472b-81d0-e7e34d91a71a"
        },
        "item": {
          "id": "9ac3ea25-048e-4fc2-8a9b-bd05bfae8915",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f8267a28-1ca4-41f6-a379-5bd9ce8e0bd4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8fb7fdc-0353-4670-ba4f-e04402771d94",
        "cursor": {
          "ref": "e7df2a88-0a75-4590-9d55-b2c033d619d6",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "4fc41267-4062-4b64-8edd-28af1064f655"
        },
        "item": {
          "id": "a8fb7fdc-0353-4670-ba4f-e04402771d94",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f5935398-dc41-44fb-bf74-0b614cced86f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c97133ba-7270-4263-b355-eec788de190d",
        "cursor": {
          "ref": "18571284-b2f4-4ad4-b3ac-9719c60df74e",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "76b34ab5-cca4-4aa5-8c51-5c0bd47b34c3"
        },
        "item": {
          "id": "c97133ba-7270-4263-b355-eec788de190d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8f697987-def1-424b-b297-fa846c6b836c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59186fd9-9c94-4695-b437-95d2ac363e34",
        "cursor": {
          "ref": "0f763fe0-5a92-4855-a878-adb6d82f4e0b",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d0e47dd0-4adf-48e8-83db-06b40c005a3f"
        },
        "item": {
          "id": "59186fd9-9c94-4695-b437-95d2ac363e34",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "c0d073d9-df46-4f9d-a267-3c67a2c77d8d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b4438ae-283a-468b-aa6f-6611fbc412bb",
        "cursor": {
          "ref": "c5ff3c21-21fc-4582-8ebd-5ddc771f56bc",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "6ff7405c-81e4-461d-940d-61e684c2843f"
        },
        "item": {
          "id": "6b4438ae-283a-468b-aa6f-6611fbc412bb",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "cfcc20f8-dccf-426f-87e9-5d36d791819e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0349f340-d0ca-4219-870f-2bf3680d4be5",
        "cursor": {
          "ref": "72492822-e1f6-411d-8519-1232ff3b47c6",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "7071c939-604f-46f8-982d-143e561a7e03"
        },
        "item": {
          "id": "0349f340-d0ca-4219-870f-2bf3680d4be5",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "79067fb8-af62-4c24-abc9-c2aa29c25b08",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca3b2759-e7f8-4874-bb88-33e3fc1e4fc5",
        "cursor": {
          "ref": "f1e40f0c-40c3-42ad-907d-02d0423e53b5",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "54b87248-61a7-444a-995e-58e64041141f"
        },
        "item": {
          "id": "ca3b2759-e7f8-4874-bb88-33e3fc1e4fc5",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0a837bb9-26dd-40d8-8da7-c7cb9ef28eb1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ced6f3e-0fb0-42dd-957b-10752ce3bda4",
        "cursor": {
          "ref": "849a34bd-3c7f-479f-b09d-299ceafd2633",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "7ac0a436-9c6e-4277-bb8a-53c09e82f360"
        },
        "item": {
          "id": "1ced6f3e-0fb0-42dd-957b-10752ce3bda4",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "76afd7b2-7615-47fc-abd4-7b4e46c69254",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a31c647f-5c90-4cca-8b4f-fb5f46fbbb5e",
        "cursor": {
          "ref": "939a5074-30bb-47f0-8cb5-b2ebbeb0282c",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "0f4109a7-a0e0-4d2a-80fd-0e17bca896b6"
        },
        "item": {
          "id": "a31c647f-5c90-4cca-8b4f-fb5f46fbbb5e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "70632cf5-8a0b-4cf2-8cbc-d0d225c2c423",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d234f621-ecb7-4311-9e71-51515d5d4ea2",
        "cursor": {
          "ref": "44ca6bfa-7a03-447c-a517-4330cea28e03",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "a5dba5de-4a67-46ad-9fc5-76f56fe6793c"
        },
        "item": {
          "id": "d234f621-ecb7-4311-9e71-51515d5d4ea2",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f40fac8e-0350-463d-a063-0a7eee87bb90",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af87d9ed-80fc-48c0-a01b-4fa645eab0af",
        "cursor": {
          "ref": "73bd74b3-9ada-4297-8eea-0596d9cf5dfc",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d735ac71-b7de-4813-a2da-dcbdc5b0792e"
        },
        "item": {
          "id": "af87d9ed-80fc-48c0-a01b-4fa645eab0af",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "69c85922-3fc8-4b03-8ca3-2bd33f0d6d01",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a01c160-2374-46f9-818b-b11cf96698ac",
        "cursor": {
          "ref": "abcdc77c-eeff-4313-9945-ed72d43b3ed6",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "668e3327-82ff-4092-ba8c-a59ad1cea36f"
        },
        "item": {
          "id": "7a01c160-2374-46f9-818b-b11cf96698ac",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "c838dda1-7f21-4f0e-ae47-d760d93860e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "969c67a1-b735-43cc-bf2e-db73e85255c1",
        "cursor": {
          "ref": "988dfd71-8dd4-4773-a486-a182d7bcda3c",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "fdf5f4d4-f9e5-4bf5-807b-66fb9636bd61"
        },
        "item": {
          "id": "969c67a1-b735-43cc-bf2e-db73e85255c1",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5b5a3c09-2fe9-42ee-9e8a-40c214e4c40f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c492f50-bcca-4a22-bdfe-b4e74018dc72",
        "cursor": {
          "ref": "8acafe7b-e58f-4b63-bd36-0267c80d65a1",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "5962495e-1ad5-4f4d-a829-f4521a95c4fb"
        },
        "item": {
          "id": "7c492f50-bcca-4a22-bdfe-b4e74018dc72",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b62f5818-dbef-46ea-a1f4-740bf78a4e84",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cac1d42-1c1a-4807-b29b-6bcfb8ca6f89",
        "cursor": {
          "ref": "9ea00dc9-f864-4da1-8343-96a21b3f9042",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "5491e16c-246e-4a86-8e1c-99dc1b3dca6a"
        },
        "item": {
          "id": "1cac1d42-1c1a-4807-b29b-6bcfb8ca6f89",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "3b6084a7-beab-4a88-82a8-d59f688714f3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cd25ce9-92f5-489f-accb-715f50419562",
        "cursor": {
          "ref": "a964dcd3-6c01-46db-bfb6-84d733c70ddc",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "8caca071-814f-49e4-bef1-d451d7ba74f6"
        },
        "item": {
          "id": "6cd25ce9-92f5-489f-accb-715f50419562",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "31be7523-cd5e-4355-8959-fc33299f6de0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea90619-7339-4d7a-8864-ac9985160834",
        "cursor": {
          "ref": "393f2a8a-ff84-4c36-add7-031869362b6c",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "7ad7dda5-aa0f-4642-8c3c-f373cfb6976f"
        },
        "item": {
          "id": "0ea90619-7339-4d7a-8864-ac9985160834",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "3ddc4792-f1b8-491e-9839-fea1ad3b5a6a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cba39e0-1721-4469-82ba-dd64440a409c",
        "cursor": {
          "ref": "258c2190-fce7-4f5a-bbea-9fc3dca879f0",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "000cf811-d619-40ea-8c3e-c946da759062"
        },
        "item": {
          "id": "0cba39e0-1721-4469-82ba-dd64440a409c",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "1e9d576a-c16f-43a0-884d-2ba3e5d521dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f249746b-c6a6-4020-8ec3-202a98e78aa8",
        "cursor": {
          "ref": "a3c8872a-f01f-4553-aaed-8880fb4680eb",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "4c363fc3-1af5-4cce-84bf-90e6a73a6c6d"
        },
        "item": {
          "id": "f249746b-c6a6-4020-8ec3-202a98e78aa8",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "6a9bda37-a2f0-4ef3-adab-1af9ec8a276e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec302446-322f-499a-aa0d-ba9780579abc",
        "cursor": {
          "ref": "aa4c8290-561c-4e9c-a8d6-afc525f7c5f9",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b5893508-7ba4-463e-980d-da310f74fb2f"
        },
        "item": {
          "id": "ec302446-322f-499a-aa0d-ba9780579abc",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "67b24347-b045-4b91-884f-0f1f97f1cc22",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a35def-13f2-488b-9db1-50bc169378c6",
        "cursor": {
          "ref": "26abd707-2357-4439-9c7c-0387ff7bac7a",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "9ce0442b-9c65-4e29-81b6-f6c0e2ed9617"
        },
        "item": {
          "id": "a7a35def-13f2-488b-9db1-50bc169378c6",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "cd3a4e7b-bb55-46ff-8aff-fbe8b1159eeb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6731ffd-0293-45fe-80db-0fbf6be67aac",
        "cursor": {
          "ref": "d6c30bf1-e49b-4d07-988b-3cfe4418dc10",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "c53aa22d-0358-4256-99e4-97875789e25c"
        },
        "item": {
          "id": "b6731ffd-0293-45fe-80db-0fbf6be67aac",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ee3d8ae2-40ee-4956-8824-aedc70997d27",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab0ce66d-211a-4f7d-ac04-f9f35435b6a7",
        "cursor": {
          "ref": "01d59805-ee2e-45d8-b7ee-26444efaa200",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "34095447-c6d5-4b16-ae4d-63759e8803e8"
        },
        "item": {
          "id": "ab0ce66d-211a-4f7d-ac04-f9f35435b6a7",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "940fb6b8-3594-44d0-9c6f-00f633268995",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "248df4f2-15cc-4f60-86f7-cf4f16e56520",
        "cursor": {
          "ref": "7c0e06ea-a368-4043-9c1a-aede907db254",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "40986f23-8afa-4fbf-a814-91b6e5f1baf4"
        },
        "item": {
          "id": "248df4f2-15cc-4f60-86f7-cf4f16e56520",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8c92a35b-6cb5-4e9f-b95a-859bd2800a8b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e8d54b9-6f7e-44f5-97bb-90113a7458b1",
        "cursor": {
          "ref": "193ad318-5a5e-4599-9b3c-f4d7aafcf7d1",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f5fed266-c8a3-42d0-8888-2cfea6d6c367"
        },
        "item": {
          "id": "3e8d54b9-6f7e-44f5-97bb-90113a7458b1",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "1ee99e1b-180b-4c75-8844-d2b0e38758a0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b14354-f882-47d5-a2f9-835c6276658f",
        "cursor": {
          "ref": "99cfa565-9f92-41b6-a42e-d8a853a003ae",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a0bc7045-cefd-4adc-9988-4ee1c4846c5a"
        },
        "item": {
          "id": "39b14354-f882-47d5-a2f9-835c6276658f",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3670bd8d-2835-400f-b633-844b425575bd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb591a5c-c321-4f19-82f6-65b9869ac1ec",
        "cursor": {
          "ref": "632abb3c-c4b8-4d5c-844b-4afe8ccc0822",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "f83cf08b-e803-4a96-8e67-ed317ebe6780"
        },
        "item": {
          "id": "eb591a5c-c321-4f19-82f6-65b9869ac1ec",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a9f8ba95-63ea-4e99-8060-6acb7cac6f5e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "185dc0a9-9985-431d-8360-1b422b6dbb88",
        "cursor": {
          "ref": "cbe9a7e5-32ee-454c-981c-ac9e9aefc46a",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "53c0f951-36d7-4c29-ac85-a641bc469d61"
        },
        "item": {
          "id": "185dc0a9-9985-431d-8360-1b422b6dbb88",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e4e4616a-152e-4ebe-a591-296bd0018189",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba6d8c5f-a2bd-4a28-86ed-be4e5bd1d8c0",
        "cursor": {
          "ref": "cc851610-41ad-471b-a728-77103f02ab93",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "19034add-9125-405a-a634-95299e1f0c1e"
        },
        "item": {
          "id": "ba6d8c5f-a2bd-4a28-86ed-be4e5bd1d8c0",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "2ab73ed3-b045-4b93-aaa8-f133b7fcb6f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3adab7b-876c-4969-805c-e260ab4e27cc",
        "cursor": {
          "ref": "600bf886-429d-4c38-ade8-8e847762982b",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "fdc6aaa2-6557-462d-813d-536773abe5e1"
        },
        "item": {
          "id": "f3adab7b-876c-4969-805c-e260ab4e27cc",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "6611d10f-e6e5-48ab-9789-a6a8975de465",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e0b18ed-ba05-4c64-a050-173c7c8f5119",
        "cursor": {
          "ref": "9751c10c-8d5c-4026-bc49-8b5b6cacc101",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d3c7ca93-f003-434f-a36b-96c9cb8f053f"
        },
        "item": {
          "id": "8e0b18ed-ba05-4c64-a050-173c7c8f5119",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "79afb4b1-f8e1-4d42-b5d9-2e70e3a4f5a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ab70604-2296-423c-b538-0dd44298e74f",
        "cursor": {
          "ref": "a5a2827e-520b-4429-b8b7-106591a076b6",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "45fce9a3-931b-4833-9669-ebbea7328788"
        },
        "item": {
          "id": "8ab70604-2296-423c-b538-0dd44298e74f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "94f4ea24-d6ab-427c-9e36-5935e236bf2c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2787f2e1-de69-4cee-a252-5d4560dce152",
        "cursor": {
          "ref": "a67f0616-2c5c-46fd-b399-a92ea4d981ac",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "32521536-f628-48da-9b36-db95e7c4c338"
        },
        "item": {
          "id": "2787f2e1-de69-4cee-a252-5d4560dce152",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "a1f9e125-1d06-4507-a2fe-01cbecd32563",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "2b735636-8a08-429c-b6e3-19bc864a02ec",
        "cursor": {
          "ref": "9a9f5e3a-ae74-4c3b-a88a-544a0f470e29",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "513104d9-4602-4a20-9a0f-6c34bf4ddb95"
        },
        "item": {
          "id": "2b735636-8a08-429c-b6e3-19bc864a02ec",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c24b6cc3-f99a-4dd7-ae33-25451b3bda0d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 153,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "6a182485-98bf-491d-b51e-53584128e5ae",
        "cursor": {
          "ref": "2239a688-d0af-4867-b78d-297eea31cfeb",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f131e3b8-640d-4f64-9cc6-01c16f4f408b"
        },
        "item": {
          "id": "6a182485-98bf-491d-b51e-53584128e5ae",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "44bb94d8-2fc6-4681-9a06-cd94b7e1a9b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "59e37efd-04f1-4064-a57d-7b332ffd00b9",
        "cursor": {
          "ref": "562a2c51-b2b5-4b20-96da-5e3fe69033b4",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4fc1007a-c409-4552-b51a-7a8f71979afd"
        },
        "item": {
          "id": "59e37efd-04f1-4064-a57d-7b332ffd00b9",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b991689c-0221-41f3-b8cc-ec5569a130c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "44dee50e-a42c-409a-b10c-66ba69e7dd7a",
        "cursor": {
          "ref": "d27b32aa-5386-4b1c-b9c7-5beb8f6ddbce",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "87deaec8-23a5-434a-b2b7-aa0273adc231"
        },
        "item": {
          "id": "44dee50e-a42c-409a-b10c-66ba69e7dd7a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "0c32b953-a729-42d9-8405-c432222f9860",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 11,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "5ebe13c8-02d3-4fb1-9740-20d9f3676207",
        "cursor": {
          "ref": "bea22ee5-b9dd-473c-b1ee-200cc4e3857b",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3c950f02-5343-483d-82ee-30bc1ce94cdf"
        },
        "item": {
          "id": "5ebe13c8-02d3-4fb1-9740-20d9f3676207",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "e1fea3a9-d6be-45db-b945-90cd44e4fafc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "7fbda0c6-ffbc-418e-a3d1-6d32f0e975bc",
        "cursor": {
          "ref": "fb59b000-29ad-4680-a92f-ba1bf432a38e",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "4b17c4cc-3d9d-4b3e-a034-e345ad91f040"
        },
        "item": {
          "id": "7fbda0c6-ffbc-418e-a3d1-6d32f0e975bc",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "117c1434-0c85-4c1c-b03c-f4f78a3a0b51",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "6d178aec-8d2d-455f-b248-6111f9b1e1c8",
        "cursor": {
          "ref": "5e443fd7-a516-4b01-98f9-8c718e1185d6",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0a6953d1-2878-483b-885b-2e439d5de15f"
        },
        "item": {
          "id": "6d178aec-8d2d-455f-b248-6111f9b1e1c8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "77acad6a-e57c-440e-81a8-9139c78d8fb7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae767d54-fae2-4104-93e2-d95bcf026e24",
        "cursor": {
          "ref": "e5503be9-65bb-47ec-befd-c186fa828eb1",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3351d348-b481-4500-a4a6-10138c29a902"
        },
        "item": {
          "id": "ae767d54-fae2-4104-93e2-d95bcf026e24",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "18e081d2-8928-4f50-9ce1-4b4536d6ac25",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d5d7db-75f8-4146-bd8b-98c4d19e509c",
        "cursor": {
          "ref": "8e8b1379-6a0a-4b7b-be1c-dc415b8625e0",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "410e208f-9417-4b8d-a8db-5ac6e8e5f550"
        },
        "item": {
          "id": "a6d5d7db-75f8-4146-bd8b-98c4d19e509c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "44fc16b7-dab6-483e-bfb8-7d04b151f87a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "474d60f3-f14b-4692-a520-736e1ebf819e",
        "cursor": {
          "ref": "2d380a34-11d4-41d3-97f9-2ae296da5066",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "92ac0b99-1168-41d5-b368-237871767416"
        },
        "item": {
          "id": "474d60f3-f14b-4692-a520-736e1ebf819e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "dc8b92a5-7ce9-41b9-b479-b30ed9c80040",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87fbd48f-ad12-42cc-81d6-a8ca8f053bde",
        "cursor": {
          "ref": "899a558e-2bdf-42d0-a013-3fd10afb84f5",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "184bb33f-de2f-4ae0-9b45-76de2e330727"
        },
        "item": {
          "id": "87fbd48f-ad12-42cc-81d6-a8ca8f053bde",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e7ccc153-9af6-42b8-b670-05469420bc78",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80ab52af-b99e-40cf-8a0f-97f8eef950c7",
        "cursor": {
          "ref": "a2855880-b61d-44ad-b683-2360c8474ae6",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "535a0149-fbc5-4c42-bce0-f2bfd4629045"
        },
        "item": {
          "id": "80ab52af-b99e-40cf-8a0f-97f8eef950c7",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5e2cadf1-f419-4a72-937c-f5a4ab9fc402",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e95276e-6897-468c-8799-20ab76569697",
        "cursor": {
          "ref": "ebad104d-0b85-43e4-9241-716efb6b3595",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "cf2c8d57-4111-439e-bb3b-af94801810e4"
        },
        "item": {
          "id": "8e95276e-6897-468c-8799-20ab76569697",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "abc18de0-9c1e-4a4f-a5cf-ba633c75b9ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba4f5434-5b04-4001-87fb-ceeba5750c4f",
        "cursor": {
          "ref": "b0c8c7c6-8cb7-4447-98c9-4fd2ad6ee996",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "48ea31d0-108a-471c-acd1-29ca3357741f"
        },
        "item": {
          "id": "ba4f5434-5b04-4001-87fb-ceeba5750c4f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "358c2c91-fcb3-4544-9fc5-6b2ee3c74261",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d4035e-faf1-49ce-9d2a-f966041c1650",
        "cursor": {
          "ref": "32ef9589-36d9-4469-bdf0-66c8a274871f",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "41562df8-e740-47eb-8c2c-8fa302906ad4"
        },
        "item": {
          "id": "97d4035e-faf1-49ce-9d2a-f966041c1650",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "54722537-4bbe-4b5a-93be-250bb36535ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4c2e47d-fe86-497e-b1b7-a4875a35acd9",
        "cursor": {
          "ref": "3effb645-7e2b-43fd-8628-c213003eb3d0",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "db834a9f-e5c1-4ac7-8a97-8787ffb84cec"
        },
        "item": {
          "id": "f4c2e47d-fe86-497e-b1b7-a4875a35acd9",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "53e00b50-2788-4e1d-9535-92ca7373e117",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8126e74-59ce-489f-b60b-71c841d351da",
        "cursor": {
          "ref": "a21c78a6-47b2-4eca-930a-1c83f7338641",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8859450e-4958-4097-a1c3-57ce1cda9fc9"
        },
        "item": {
          "id": "f8126e74-59ce-489f-b60b-71c841d351da",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "53cbb636-b614-4d56-b1d0-5f6e55e42c35",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1832bc5d-a893-4006-a356-0cce36873445",
        "cursor": {
          "ref": "77c488e3-adec-48f3-b74e-d2deaa8a3c1a",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "b5700827-f167-4566-a90f-0735b76d0f68"
        },
        "item": {
          "id": "1832bc5d-a893-4006-a356-0cce36873445",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6f35da1c-43b1-4194-b3c3-c8e07ec50b58",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78592ff9-015b-49c8-9ff5-66c32eb3a0c4",
        "cursor": {
          "ref": "0581e191-f27b-40a7-91e0-82fcf3902e73",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "aafb2b11-672f-41d8-b227-1ff9408e7a1c"
        },
        "item": {
          "id": "78592ff9-015b-49c8-9ff5-66c32eb3a0c4",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "80103730-6a35-4054-ae18-a015bdcb26c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94b88be9-be52-4187-b1bc-c565c99d6bbe",
        "cursor": {
          "ref": "b19275cd-9025-4c88-88a2-7852a16a7eff",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8d25fd06-cf67-42e7-bfac-b6b168ec1e12"
        },
        "item": {
          "id": "94b88be9-be52-4187-b1bc-c565c99d6bbe",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "940c5790-bec2-4df0-ae94-c1f5b6cd203e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 6,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b8ef87-b616-4142-b884-00f0a3ac5651",
        "cursor": {
          "ref": "60977db7-fd73-40c2-9e59-da3f022291b9",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c4c14038-b240-4d7c-865b-b3c33129615a"
        },
        "item": {
          "id": "07b8ef87-b616-4142-b884-00f0a3ac5651",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "fd6d9317-4342-457f-9239-9022647e1e70",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e4ce3e-f8b9-496b-b61a-052b968a855d",
        "cursor": {
          "ref": "1147df07-779f-4332-abfb-00f3f572bf92",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e9804e19-b2d4-4b90-92b3-16cbea77f5d8"
        },
        "item": {
          "id": "03e4ce3e-f8b9-496b-b61a-052b968a855d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "92cb3a4e-e8f1-4cb0-a92f-b4e6e4d4b47e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e99dc5b2-ed1c-429e-ba1f-2a8720cf18a1",
        "cursor": {
          "ref": "c19d2ca8-591c-4314-8026-29d107b79ef7",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "03153f8e-18c5-4d79-b22e-4cb8eb5eab54"
        },
        "item": {
          "id": "e99dc5b2-ed1c-429e-ba1f-2a8720cf18a1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ef44dcdd-3e13-4848-9a36-17d3aaf3f4d9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb7adbd1-3658-44e8-81bd-7fe47a6996bb",
        "cursor": {
          "ref": "326d99f0-92c6-468a-8054-ba053495a8c9",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "35f5d9e6-4d72-4858-8470-036a5e86b2a6"
        },
        "item": {
          "id": "bb7adbd1-3658-44e8-81bd-7fe47a6996bb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8d9d74a8-5acf-4d96-8570-ccff5472df46",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd8d6507-e2c0-48ff-8be3-2cd14064b99f",
        "cursor": {
          "ref": "23541ddb-8a48-48a0-bfda-d0b58362d55e",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "dbf8f12f-50e8-4f70-b7ef-4df5dab5cf50"
        },
        "item": {
          "id": "dd8d6507-e2c0-48ff-8be3-2cd14064b99f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d9ffa4d8-4061-4250-bbc3-33eccddf7fd0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63be3254-4f94-414a-9fe5-4f92c3887cca",
        "cursor": {
          "ref": "a8577648-8df1-445e-a25a-256ef69bb6ef",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e9b7314c-b247-4b3b-9942-b48b834878db"
        },
        "item": {
          "id": "63be3254-4f94-414a-9fe5-4f92c3887cca",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e10cab63-8f49-4cd3-9531-67eb47b73975",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c579753d-6da1-4cad-a26b-20d0486a6f36",
        "cursor": {
          "ref": "5382b09a-5173-47b2-bd58-c5df3e53ab07",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "e868bb60-a3fd-4f25-8ca6-35d6e743c95e"
        },
        "item": {
          "id": "c579753d-6da1-4cad-a26b-20d0486a6f36",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "824db26b-6798-4490-919b-c68209537fbc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c415db-aa83-4330-bad9-190353c30f21",
        "cursor": {
          "ref": "05721473-8678-4c0a-ba5d-500eb2c5f539",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0370111d-c25b-4659-93b2-35679ebc6dbd"
        },
        "item": {
          "id": "b4c415db-aa83-4330-bad9-190353c30f21",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e91daf87-4d40-4aed-94c0-cbd90f7695e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17a218cb-5514-417a-82ee-8416c2c20503",
        "cursor": {
          "ref": "8e3514ae-f757-406e-8f24-6c3849d3e9ce",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e1e79483-6bc2-40f4-9024-b816addb63af"
        },
        "item": {
          "id": "17a218cb-5514-417a-82ee-8416c2c20503",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "00b9f7e9-a199-40fe-8282-7912e1568a08",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74844483-07e8-44f6-8bf7-ef9123f3cf11",
        "cursor": {
          "ref": "b32cc767-cbf8-49cc-8ab5-eb6f928a3985",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ac639e7b-d884-44e5-9b2c-50eaed93073d"
        },
        "item": {
          "id": "74844483-07e8-44f6-8bf7-ef9123f3cf11",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6c2b2b0f-0ce2-40d6-a804-24a407e0754a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d818d7b6-8d7b-4a22-a9f2-a5e533c9ca28",
        "cursor": {
          "ref": "f89618c5-3689-40fa-8588-d29493b620fb",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "486925a3-a427-4e59-9fb0-a24e336612b0"
        },
        "item": {
          "id": "d818d7b6-8d7b-4a22-a9f2-a5e533c9ca28",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3a5957d4-92b3-4945-880f-6ae21f8483ba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0391b6fa-5083-487e-8367-56e3f5bc026e",
        "cursor": {
          "ref": "9131b360-0340-48c1-b8d2-67abfb384bc6",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "042c3a52-db27-4464-9f4b-7ab515353a78"
        },
        "item": {
          "id": "0391b6fa-5083-487e-8367-56e3f5bc026e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "46b1e551-19bc-41ec-a8a8-3dd0c5092798",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7902f3ad-fffb-4843-8dba-cd13ed26ea00",
        "cursor": {
          "ref": "a78e0fd3-065b-4c2d-997e-b54e132bf6d8",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "31713770-cf9c-4737-84db-42cd31ba2537"
        },
        "item": {
          "id": "7902f3ad-fffb-4843-8dba-cd13ed26ea00",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "390fd8d7-bf39-42f0-91a7-5e45f38c1e5e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58983993-c140-44a1-b0ad-503e4f2a3082",
        "cursor": {
          "ref": "a1de3b31-7bb5-42f6-a960-d32c1b0a1f44",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "1e79d79f-f2ff-4fe5-82e9-a01795cf6377"
        },
        "item": {
          "id": "58983993-c140-44a1-b0ad-503e4f2a3082",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "fe56c457-233d-4348-99c9-b967a830bd7a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f39208fe-75f5-4f3c-ad7d-24184198419e",
        "cursor": {
          "ref": "252d5b5a-5525-4ac9-8cbc-5cf23001fbd4",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "ea45b324-1d8d-4863-a079-b5a460841c5c"
        },
        "item": {
          "id": "f39208fe-75f5-4f3c-ad7d-24184198419e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b67996c8-d892-4bb6-9675-d933727a1221",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e721b9a-5d8a-4ace-9092-26fcf164c7f2",
        "cursor": {
          "ref": "fb7cebe6-481c-45a1-b853-18893f23e88a",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "48e8e698-b313-4e9d-a2fe-6102e5c1b73d"
        },
        "item": {
          "id": "2e721b9a-5d8a-4ace-9092-26fcf164c7f2",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1fd38690-43e9-4723-808f-1f8d290feaee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5b9408f-5a14-4046-b9b0-1afb76a2dd61",
        "cursor": {
          "ref": "1c27281e-fd8b-4842-b122-8ad3ff407423",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "1199293b-ace0-4d06-a1c2-026c16bafe95"
        },
        "item": {
          "id": "e5b9408f-5a14-4046-b9b0-1afb76a2dd61",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "56d70b63-0ef5-4938-a695-ccb77ccc9f86",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1df1f58-52fb-4e07-8b83-d52ce3086f15",
        "cursor": {
          "ref": "1f8ac42f-5769-4a2c-a0ec-d1dbe1313483",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "37e92b84-7566-480a-b4dd-dcac45a90a4d"
        },
        "item": {
          "id": "f1df1f58-52fb-4e07-8b83-d52ce3086f15",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "47613c7c-3894-43d9-86eb-0044e473d631",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f0971ec-022e-4455-8a9e-c19d30128fb4",
        "cursor": {
          "ref": "b649882c-c010-4d4a-b885-bd239a17f460",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c550d749-842b-4053-ad29-fe3479c9781e"
        },
        "item": {
          "id": "9f0971ec-022e-4455-8a9e-c19d30128fb4",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "710e071d-8134-4022-853e-d1394afeb2fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a32bcb1-6411-428e-9303-41459f64e431",
        "cursor": {
          "ref": "fb2758c4-bacc-4794-9d1a-a9a20d97d621",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a93606cc-f01b-498a-b916-272de8a185c8"
        },
        "item": {
          "id": "6a32bcb1-6411-428e-9303-41459f64e431",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "cbcd368b-ffff-49d0-a610-6347042ac5dd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01b355a2-643e-491d-adfa-81c123c40966",
        "cursor": {
          "ref": "e67e6d19-94bf-476d-93b5-99c098afc314",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "0630cb79-b5a8-48fa-ac0e-a8c7b0b54a31"
        },
        "item": {
          "id": "01b355a2-643e-491d-adfa-81c123c40966",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "e8f7af55-aa47-4428-adbe-d2442d9d82a3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd495027-08ee-4db4-82c0-cdd888a4a5a7",
        "cursor": {
          "ref": "da4c1997-21bb-493f-b3ce-ece336b5b508",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "639d36c9-9073-4648-a6ae-773f1968217c"
        },
        "item": {
          "id": "fd495027-08ee-4db4-82c0-cdd888a4a5a7",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "8a067d44-7794-4c0d-b698-9efee9f5f9fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0770922-35b0-4c92-ba1c-8454cd6de715",
        "cursor": {
          "ref": "970e8646-caa9-4fc9-9d0e-1c68e3e8b7ae",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "5a2928e5-f8c6-4119-94e7-ca2a5d50a311"
        },
        "item": {
          "id": "d0770922-35b0-4c92-ba1c-8454cd6de715",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "1006d96e-f7d3-4765-bfc2-34a26b84ab29",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c1b0810-9cd0-43c9-b91d-7a49e4fcc819",
        "cursor": {
          "ref": "92a2d1ce-d501-4cc0-b5d2-cc05ee524fa6",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "71a9088d-71a9-4a17-905b-63896ca4ef4a"
        },
        "item": {
          "id": "8c1b0810-9cd0-43c9-b91d-7a49e4fcc819",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e0b5a0e4-28e5-4716-9b08-96d6bd6f351f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "716c0888-823d-4367-87a2-939c60412106",
        "cursor": {
          "ref": "9b7e76e0-b6a0-422a-b8e4-e3a772224247",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "37f1f73c-6ce1-4dbd-af95-3e04ce83ffcb"
        },
        "item": {
          "id": "716c0888-823d-4367-87a2-939c60412106",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d81f32a7-3a22-4fdc-a63b-4b4cbb72aa8a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff08c6f6-0d54-4ea9-88dc-7463cd333808",
        "cursor": {
          "ref": "697129c8-2c9a-416d-abd1-13a25ae2a1ac",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "80c34fed-12fa-47f7-89c2-5996b799e885"
        },
        "item": {
          "id": "ff08c6f6-0d54-4ea9-88dc-7463cd333808",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "01a04b99-8a87-4672-bdac-fd3bf319fc8b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d84d02c-8efb-4fef-bd4a-e32a44a65027",
        "cursor": {
          "ref": "41ba729f-b2a5-4264-92d1-1c1b979d068e",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "68cf042b-75a3-489b-b1ba-b7a041d6ebe6"
        },
        "item": {
          "id": "6d84d02c-8efb-4fef-bd4a-e32a44a65027",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ba93fc58-719b-4912-8435-95649088995b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "919fc849-2aa8-423c-979d-61a81075fb22",
        "cursor": {
          "ref": "70337847-8280-4ada-8530-5510d3ce5951",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "778af8cc-7590-4301-a7fe-28b0ddb81d5c"
        },
        "item": {
          "id": "919fc849-2aa8-423c-979d-61a81075fb22",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "12465eb8-a191-4795-b6d9-cc868216cde0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff6c58d5-087c-4d37-8381-526fdaf5142e",
        "cursor": {
          "ref": "23ba88e3-9415-4e21-8dee-48859721051b",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "23288776-f7ee-42d7-885a-f2745a735ff5"
        },
        "item": {
          "id": "ff6c58d5-087c-4d37-8381-526fdaf5142e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "3139553f-d97c-4df3-902b-870b6c17ba8f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19420bfe-b52b-4b11-bbe1-3926738b84b2",
        "cursor": {
          "ref": "38ed81a1-e36e-45a8-b3c1-25898436d234",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "58aa49bb-3026-4bcf-8e78-6bee699cea18"
        },
        "item": {
          "id": "19420bfe-b52b-4b11-bbe1-3926738b84b2",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c13e6ea2-8ab4-43e8-94c6-7169077eb1f3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "729d4d8d-0404-436b-a248-a77abb55d5a5",
        "cursor": {
          "ref": "0299a126-16f5-481c-b8bb-db76b8d66171",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ecb0ff64-20c6-413f-91f1-6de3bf0925b2"
        },
        "item": {
          "id": "729d4d8d-0404-436b-a248-a77abb55d5a5",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "be6b61fa-26f5-4f7f-b320-c464d5015275",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa025e5-2e3b-40fd-885b-5e9e4f8e4670",
        "cursor": {
          "ref": "7d58cd96-1ed9-4169-a713-16a3b5b090a8",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e4805a51-6c99-40ea-bbce-aff4db18b3bc"
        },
        "item": {
          "id": "0aa025e5-2e3b-40fd-885b-5e9e4f8e4670",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "99d31fc4-445c-46fc-911d-36624963dfc0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af90c01-b8f3-4e83-807d-d063bf3f123d",
        "cursor": {
          "ref": "f0b300a9-126c-47ed-a9a5-b2deb35b3d14",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d1a3a9b8-b2a6-4646-8f20-ddd0d8d2d61a"
        },
        "item": {
          "id": "0af90c01-b8f3-4e83-807d-d063bf3f123d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "2b41886b-8ead-49bd-b5d7-888275312910",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ac91a2-2b2b-455b-ac21-5753a12da297",
        "cursor": {
          "ref": "bec05a70-f5d2-42e5-ac40-d57d0fd8740a",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3b53d737-1631-45b5-937d-e16a88002f68"
        },
        "item": {
          "id": "76ac91a2-2b2b-455b-ac21-5753a12da297",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0c7dab3d-c5ed-4476-b3d0-f463d00a556b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70684029-9022-467f-8f0b-d6ea4aaaa6c4",
        "cursor": {
          "ref": "1c7890f9-d74d-4341-bcab-b36ffd975c5e",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "cebd06e5-cd2a-4c48-9196-60ff780e80cf"
        },
        "item": {
          "id": "70684029-9022-467f-8f0b-d6ea4aaaa6c4",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "ca59bef7-47d9-4923-a7dc-744f02bc1c59",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f2e5b3d-f7ce-4aa1-9f81-f54740e85f0b",
        "cursor": {
          "ref": "88d9a0a0-3a1f-46e0-bd8b-9b60f3f1e4f3",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "be543fcb-36ad-40b6-8403-af93d10f1d70"
        },
        "item": {
          "id": "0f2e5b3d-f7ce-4aa1-9f81-f54740e85f0b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "262c73fd-9686-451c-bf36-0bb78d7e64ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e3f8dbb-f281-4631-8186-451033fb6f8d",
        "cursor": {
          "ref": "a5eea937-6cd2-417d-9e34-2d70d35c7f4b",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "50fb4ce8-8dee-4141-8860-6e19807aa703"
        },
        "item": {
          "id": "0e3f8dbb-f281-4631-8186-451033fb6f8d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ef23c635-7a6c-4765-b22b-a37cad9f7684",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "212196b4-6040-4016-aa46-5b3953b1ed10",
        "cursor": {
          "ref": "0a9a131a-9010-4ca6-b34d-ef1e186b27c6",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "676b1544-35f9-4ef9-893b-8f8dc1db750f"
        },
        "item": {
          "id": "212196b4-6040-4016-aa46-5b3953b1ed10",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "9e95378e-1818-4495-907b-40a092704580",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48943125-207e-4358-adbd-2a1da0d821e2",
        "cursor": {
          "ref": "4a36d58a-673e-418f-8e82-d43542bdb41b",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "fcbe1630-bf52-48db-ae5c-3f7263917c4a"
        },
        "item": {
          "id": "48943125-207e-4358-adbd-2a1da0d821e2",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "3c46226e-2412-4b1c-8b46-3860e4fb5c81",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b8675f2-f010-44b8-aa07-1693bcc18d22",
        "cursor": {
          "ref": "016ed25c-8919-4b64-9ab8-c5f221f92c46",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ca306d32-d5cd-4064-b5ba-485f208a7331"
        },
        "item": {
          "id": "7b8675f2-f010-44b8-aa07-1693bcc18d22",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "61839559-5be2-47c9-ba15-acc23f428c72",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8019e634-b0b7-4eb4-a554-0f6d93e44f8e",
        "cursor": {
          "ref": "4b2d6dec-3425-42e7-a3f4-155ba56bf505",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "dfc769f2-5b33-4928-a6da-a0c841ed4092"
        },
        "item": {
          "id": "8019e634-b0b7-4eb4-a554-0f6d93e44f8e",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "336ff4f5-1bc8-4c7f-92bb-e4a671fd04c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97b0045c-ad3c-480a-bb19-bdaede22a0cf",
        "cursor": {
          "ref": "d9b30128-3213-418a-9b65-6a7d1ed7f576",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "677aef31-dcc5-4268-a9f6-3dbfb7470d00"
        },
        "item": {
          "id": "97b0045c-ad3c-480a-bb19-bdaede22a0cf",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f143a71e-1a28-4d9f-adbb-b8899954e14f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a008a0bd-0194-421a-b278-c49c2fecb540",
        "cursor": {
          "ref": "580d23b4-1996-48c3-8851-925d875e365c",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9da31298-cda8-47eb-bc7e-c8cd57be87e2"
        },
        "item": {
          "id": "a008a0bd-0194-421a-b278-c49c2fecb540",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "5a309f94-cdd2-4656-ba8b-0ea6aed06499",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee2ef6b-3c61-479d-8618-43629f6c2ea2",
        "cursor": {
          "ref": "ebf5a58e-c459-4ed9-8adb-71e5a81b059a",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "55f64183-c8bc-474d-b993-6af6aba816df"
        },
        "item": {
          "id": "7ee2ef6b-3c61-479d-8618-43629f6c2ea2",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ec34e10c-df57-4e84-af3b-04ed2eddc9f7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b748f3b4-f60f-4820-b8cb-203c1be63a9c",
        "cursor": {
          "ref": "1810e185-c13d-42aa-a6be-08e78ff6c432",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "0523838f-4639-4343-b96f-65a1580f6c3f"
        },
        "item": {
          "id": "b748f3b4-f60f-4820-b8cb-203c1be63a9c",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "bb17732b-85c8-4807-940f-466aacf817be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e17b2adb-b17c-467c-8263-da18fb823240",
        "cursor": {
          "ref": "d0e4653e-2398-4847-937d-771561c40173",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "12074272-23a5-4fa2-8e25-ac4810a43a67"
        },
        "item": {
          "id": "e17b2adb-b17c-467c-8263-da18fb823240",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "33545f16-449a-4b57-9ee7-9e51c6e733d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cb7150c-a6b5-41eb-ba8b-fc2f2c88bd09",
        "cursor": {
          "ref": "1a36e797-8925-400c-91ed-55b738d234f8",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a0619489-aef6-4eda-ab17-3c8fd684333c"
        },
        "item": {
          "id": "4cb7150c-a6b5-41eb-ba8b-fc2f2c88bd09",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "23b59965-a544-4009-a56f-ffd8811cc7e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acd9465e-df25-4106-b635-9a6f6f1feb70",
        "cursor": {
          "ref": "eabeaa4f-207b-4b67-8c03-fb2a42057a88",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "52f47cec-4ecd-4f50-97d9-bf5df5da7a55"
        },
        "item": {
          "id": "acd9465e-df25-4106-b635-9a6f6f1feb70",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "940756b6-f404-475a-9632-85d3bae531fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8766f9df-06e0-4be5-94f0-a3f26f1a49ec",
        "cursor": {
          "ref": "fde32261-b95f-4f18-9d3c-efd25ac57b9b",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0454de64-5ce6-4786-8430-ece9670b63d6"
        },
        "item": {
          "id": "8766f9df-06e0-4be5-94f0-a3f26f1a49ec",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "77eec095-5b2f-4f96-a494-4a4b934cfb4c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b56f9c61-ed45-4614-a3e1-281141f7b227",
        "cursor": {
          "ref": "7bb7f006-3597-4a33-a36a-ca6a0e4351ba",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "7c29c872-0851-44ba-9ff9-569e7047a65d"
        },
        "item": {
          "id": "b56f9c61-ed45-4614-a3e1-281141f7b227",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "1021c680-0cc3-40df-96d3-541cb168e64b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df02b154-140d-47d1-a1c4-e18414b16b27",
        "cursor": {
          "ref": "422739d1-8d29-4dab-a248-2c2acd55d2ce",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c3b2981e-e85a-48a0-9562-e7e147ec65ca"
        },
        "item": {
          "id": "df02b154-140d-47d1-a1c4-e18414b16b27",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "4f622172-f9f2-407b-85ba-5a150ba2f215",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "693fb010-320a-432a-8c4e-fa509b3cd35f",
        "cursor": {
          "ref": "ba7bb9db-4677-42da-9a47-c3e86566290c",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "d29fea39-86fa-44a1-82bf-e89d3515c2c9"
        },
        "item": {
          "id": "693fb010-320a-432a-8c4e-fa509b3cd35f",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1d4d5e7c-9e2a-41c8-9c22-cb606ec61874",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "429c274d-af99-4699-911d-4d37f6ca8274",
        "cursor": {
          "ref": "2bd4bf0c-2636-4282-b319-ddc2d882dc6b",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "1a8390be-6b0a-4aaf-9f2d-7600738bca03"
        },
        "item": {
          "id": "429c274d-af99-4699-911d-4d37f6ca8274",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "129cb470-2b53-431d-8136-0a953b0899fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e0936f0-92d8-43c8-9673-559a02216d6b",
        "cursor": {
          "ref": "2a61f4a3-8550-4169-baab-7e8618057ec5",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d5303139-fa7e-4201-845b-2754fd3c8b79"
        },
        "item": {
          "id": "3e0936f0-92d8-43c8-9673-559a02216d6b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a23a590b-d957-4fa6-be10-73fc3d58e73d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0756c3f-3272-4921-96df-edf9cc63c4f8",
        "cursor": {
          "ref": "88d93abd-af57-42d7-8319-fec98cfffa08",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "9f2b3ad1-d2fe-43e6-b170-8ea9d4e791de"
        },
        "item": {
          "id": "c0756c3f-3272-4921-96df-edf9cc63c4f8",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1b69e868-e592-4902-86a9-406ec939e16a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b85ee74f-2576-4afa-8098-7d3329486bfa",
        "cursor": {
          "ref": "2091e297-5f13-4157-837c-08286f0250ea",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "0c24f231-92f1-4b54-8d07-0b144043690b"
        },
        "item": {
          "id": "b85ee74f-2576-4afa-8098-7d3329486bfa",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e57f5de1-eec7-4cf2-9812-1e1a9b1113a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00235e1c-0fac-43ad-8724-cc3b67addfed",
        "cursor": {
          "ref": "f017a7dd-b991-47f3-80fb-89c16c22e19e",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "98a1fa3c-6b7e-4d61-811c-9ec0e6e12d00"
        },
        "item": {
          "id": "00235e1c-0fac-43ad-8724-cc3b67addfed",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b99dfdf7-d6db-471e-9b95-24d93f37ca4a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "762d1dfb-83f4-4205-a2c7-1052a74bde48",
        "cursor": {
          "ref": "28a753f5-218d-488b-8c27-e2a351548c40",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "6ad40356-ad67-4cae-a3a6-08b0b6e89b03"
        },
        "item": {
          "id": "762d1dfb-83f4-4205-a2c7-1052a74bde48",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c3ca9eed-7c89-4191-8351-a167bddfda70",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd385599-be7e-4b46-ba5f-9a76feabfac3",
        "cursor": {
          "ref": "6fb63101-4b08-4071-9558-22547c98f5fe",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "694439fd-e51a-44d2-aac2-f7ab79ec7bcd"
        },
        "item": {
          "id": "cd385599-be7e-4b46-ba5f-9a76feabfac3",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "87f3392d-f710-4cab-9941-70a2a615ec7d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa561bf-6b3a-492b-9d3c-cfbd0b2a1ce3",
        "cursor": {
          "ref": "bd846472-cf31-4bc7-9190-eddb20bc6b06",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0c9f8c6c-ff50-4930-ae75-1b459af1669c"
        },
        "item": {
          "id": "6fa561bf-6b3a-492b-9d3c-cfbd0b2a1ce3",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "369a2b7e-6a27-48c2-ae5d-a56fa96275e5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62242215-5b6e-4d01-8c03-0185174df426",
        "cursor": {
          "ref": "0eb1b4a3-8ecf-4c6e-8647-90faf8d38f7c",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "308c5525-c155-4fe2-ae29-29bbddaa69c8"
        },
        "item": {
          "id": "62242215-5b6e-4d01-8c03-0185174df426",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "6c053b5d-3b77-420a-9cb6-2a7835cbb86e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ba506f8-d75e-41ba-8665-a2ceba441114",
        "cursor": {
          "ref": "381f050e-08a6-48db-8f01-ce18f68b1ca6",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5586102d-767c-4438-802a-853e04ed9e30"
        },
        "item": {
          "id": "6ba506f8-d75e-41ba-8665-a2ceba441114",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1f1fa605-c009-445c-b593-8b4a3dc6ff4c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0466b006-d7d0-4894-880d-e0d86dc04b04",
        "cursor": {
          "ref": "efe3727d-0416-4106-af76-b20c622ee22e",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "d3f19e76-d41e-4bb9-b4eb-5d43b6db7e9b"
        },
        "item": {
          "id": "0466b006-d7d0-4894-880d-e0d86dc04b04",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0f67f3e4-4e60-4b24-a98e-e60936b6dfa6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdbaec68-5ce9-418f-b0aa-b982dc689ac8",
        "cursor": {
          "ref": "5b4b45b8-d6a5-4af8-ad57-1ce581eae530",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "967983f9-e06c-4a78-a167-a1801f05dc90"
        },
        "item": {
          "id": "bdbaec68-5ce9-418f-b0aa-b982dc689ac8",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "4c5cb522-ae58-4895-a1de-c56214369ab6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce95e46b-7340-49e8-a242-2cbd0bb8cd7c",
        "cursor": {
          "ref": "2e7ac0e4-2d8b-4790-86ba-644017b67b05",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "362d24df-1c91-406f-8501-0bfe07126684"
        },
        "item": {
          "id": "ce95e46b-7340-49e8-a242-2cbd0bb8cd7c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "998b9b44-0095-4c41-b8c8-a3d6360a8a29",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3647bd63-ce7f-4017-bb2f-b153c13c2f16",
        "cursor": {
          "ref": "3d345690-e320-45d2-860a-2e05ad875297",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "63fc8ec0-ac0e-4a34-b156-e417a3c1bfb1"
        },
        "item": {
          "id": "3647bd63-ce7f-4017-bb2f-b153c13c2f16",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "897ba73b-742a-46b9-a96c-ee8219298e5e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7900e7f-0293-4ca5-9a9b-277911a6fdb7",
        "cursor": {
          "ref": "a83b5f77-e70f-4c2d-b9a8-fa17995ca1b9",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "d551413b-3066-4bfe-8df0-6f2dd619ff02"
        },
        "item": {
          "id": "d7900e7f-0293-4ca5-9a9b-277911a6fdb7",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b2d51857-3d2f-4acf-afe8-3af1d224fd68",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c22808b2-aaf2-4940-a7a2-5efec250da06",
        "cursor": {
          "ref": "589b393e-8539-480b-9960-08277d1273a3",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ed006a37-7e68-4080-97fc-201500ef34f5"
        },
        "item": {
          "id": "c22808b2-aaf2-4940-a7a2-5efec250da06",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "06af1cb0-ac2a-4146-ae80-5ebcbb5ffe8f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77c28ad3-5b24-4874-846f-9a595da0808a",
        "cursor": {
          "ref": "bc488843-e3e5-444b-8e65-de72df4c1642",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a687e9ea-e31b-43a6-95eb-4d5f2805eba0"
        },
        "item": {
          "id": "77c28ad3-5b24-4874-846f-9a595da0808a",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "7bc2a50f-f26c-47fb-83ad-3b97aa63824a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d441788-b9a3-4eb4-8c7d-96b105d81234",
        "cursor": {
          "ref": "b8766a98-4bb8-4107-9997-19851058bef7",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "aea73b26-5014-4601-8a23-ddb6dbcb883a"
        },
        "item": {
          "id": "4d441788-b9a3-4eb4-8c7d-96b105d81234",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c7b7f04b-0f59-448a-8fe6-fe4f784661ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d36b940-dcf3-49ea-8f59-107d0f51699a",
        "cursor": {
          "ref": "70d984bf-f9e4-4ae5-8434-7dc1fbc87079",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "7b823757-19f6-4d08-8bd8-f21507e368f6"
        },
        "item": {
          "id": "3d36b940-dcf3-49ea-8f59-107d0f51699a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "97b67148-8fc3-45d4-8ef2-7d5b9e4e0985",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d490e019-f0f4-4d92-a9f7-56224892332a",
        "cursor": {
          "ref": "4f7ed1a4-a7f0-455b-a459-9aa43bdf2fbb",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "969b49dd-1cd8-454e-8cb7-8953c2ead3e6"
        },
        "item": {
          "id": "d490e019-f0f4-4d92-a9f7-56224892332a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "3d735c1f-2224-4ed2-86b7-c43858da43b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9621606b-9c2a-4623-93f7-5718dff520d9",
        "cursor": {
          "ref": "e0489ee1-f35c-4f4e-a323-b87c7e614351",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "67e13503-80ad-487e-8959-0d236eacf9f8"
        },
        "item": {
          "id": "9621606b-9c2a-4623-93f7-5718dff520d9",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a94dd703-56ba-46fa-8b67-cf3f32e415b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dcdbb7f-9d9d-440d-8094-442814f84482",
        "cursor": {
          "ref": "d2ce52c0-17b2-4bbd-95a3-24a691cccd7d",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "301a9ac4-5fdf-4015-b96f-efba6be2e39b"
        },
        "item": {
          "id": "8dcdbb7f-9d9d-440d-8094-442814f84482",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "eaee84b7-e98e-41df-9221-46abbc95bbda",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a0fce20-d481-44ea-8a6d-c32c451b7891",
        "cursor": {
          "ref": "d01e71c3-ec09-4d1b-8477-443fe443ab44",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ec1bd489-e02b-4429-8f5c-d091700335a6"
        },
        "item": {
          "id": "0a0fce20-d481-44ea-8a6d-c32c451b7891",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "0e38400a-f6c4-43f1-96e4-48fd2bfc063e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "253d3591-f40c-44fb-b2a8-87a26d598968",
        "cursor": {
          "ref": "810d1e2c-bf99-47c0-8101-0a9d3c3df63e",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "0a297a51-bca7-400b-b4d7-ce6cd73eaae3"
        },
        "item": {
          "id": "253d3591-f40c-44fb-b2a8-87a26d598968",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "59e9a8ac-f742-4055-ba3b-b8f21366d7f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bdae209-0f06-440f-b300-570087118438",
        "cursor": {
          "ref": "88ba1f5a-110d-4ac3-b3aa-b299a26fe3ae",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c28297ac-7697-4374-b3ce-e489d67f28d8"
        },
        "item": {
          "id": "5bdae209-0f06-440f-b300-570087118438",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "37ec7070-ec06-4e45-b890-7a014e849943",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b095c18-96c2-4610-a334-ddfaf4d3f9ed",
        "cursor": {
          "ref": "710ae93c-0bf4-4ba8-8335-7ce66a9c1994",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d0b8fd00-664e-48de-bbe9-d0c96cfc0885"
        },
        "item": {
          "id": "9b095c18-96c2-4610-a334-ddfaf4d3f9ed",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a1e459fd-3923-41fd-9a41-cb89001f3ab5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7df6ad2-82dc-4125-9e3c-b159512ac87f",
        "cursor": {
          "ref": "7bcc9e94-4792-4e16-bd9c-8aaab503ad99",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "0d8383ac-759e-4ea8-b135-e3d8383d6629"
        },
        "item": {
          "id": "e7df6ad2-82dc-4125-9e3c-b159512ac87f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8f748a29-d8e5-417d-9bbe-8d1e3bec8e5c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f7c377b-5578-42ad-8d9c-3108b1a90fb0",
        "cursor": {
          "ref": "6ca16007-3e38-4ec0-827e-3fefe1a4cddf",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ab46061f-a1bd-410e-8f82-e5a69e6e2005"
        },
        "item": {
          "id": "4f7c377b-5578-42ad-8d9c-3108b1a90fb0",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "0411fa64-03d2-49fb-a2a2-9eef15d11131",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd3efce-690c-47d3-b786-24e17236cbc7",
        "cursor": {
          "ref": "4ec5cbef-0726-4e3f-af2b-d9a21c9f1b30",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7793cd49-e30b-4e56-ad4e-abe996ee2d08"
        },
        "item": {
          "id": "6dd3efce-690c-47d3-b786-24e17236cbc7",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "b0a79091-75ce-44b3-93e9-babdd1b810b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 158,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90d91fc9-d428-4876-832b-d1a57d8cf394",
        "cursor": {
          "ref": "9bf7a39f-69d9-43b1-8428-e0fbd1592664",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7c3113c0-699d-456c-927f-0dbefce8b625"
        },
        "item": {
          "id": "90d91fc9-d428-4876-832b-d1a57d8cf394",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b81d006c-be29-495b-a4d3-445a14edddf2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c09918d9-f4be-46b9-af86-5322e7eea8d9",
        "cursor": {
          "ref": "e8937ff0-108b-42d5-8219-dc2d83bc607e",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "27f812db-31e9-4f1b-b786-65392da68d5d"
        },
        "item": {
          "id": "c09918d9-f4be-46b9-af86-5322e7eea8d9",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "929db953-8862-4e19-a57a-0f8d43b209ba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bab513cb-b8b6-438f-b431-81f9aeb5e319",
        "cursor": {
          "ref": "89908bd4-a2eb-4291-988e-18c12848c5a1",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d560d063-1b85-40b5-ad17-81ce3cf5dd9f"
        },
        "item": {
          "id": "bab513cb-b8b6-438f-b431-81f9aeb5e319",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "3cdbe0cd-d3b7-4713-8163-7731710adb5b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ffd0e68-1bcd-465d-92ea-fee7cf61592a",
        "cursor": {
          "ref": "bc4eb749-6402-4f8a-bf03-88b3ae842549",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "36722666-6cd7-4d07-a31a-93b5f219e4b9"
        },
        "item": {
          "id": "6ffd0e68-1bcd-465d-92ea-fee7cf61592a",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e32e35a7-d805-464f-87cb-7837744e685e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31bc0897-4f8d-4448-8a3d-f85ab43a03f9",
        "cursor": {
          "ref": "1b2c6faa-f8b5-476b-86d1-ed3c06ef527e",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "3685b5aa-20ec-42c5-bb3e-26ebc5c6bea0"
        },
        "item": {
          "id": "31bc0897-4f8d-4448-8a3d-f85ab43a03f9",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f22b2171-cef3-46e0-a613-184d2205d9b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29eb9365-b6c7-4d55-88f2-6bc250701f5c",
        "cursor": {
          "ref": "d5a0f8bb-5dc4-4544-89da-ae5391421114",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0685de1e-3295-4be5-b8a8-0e8cdfd750c4"
        },
        "item": {
          "id": "29eb9365-b6c7-4d55-88f2-6bc250701f5c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "8763551b-805a-4275-b4d6-e1a7393739f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b147da6-8459-439c-9ca2-f37ee1b26102",
        "cursor": {
          "ref": "877b0174-3516-4586-b7cd-437da9da7923",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d3d56143-91eb-4d9a-ac2f-cf4f82d82ff8"
        },
        "item": {
          "id": "0b147da6-8459-439c-9ca2-f37ee1b26102",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "3ac3aab5-8588-41c7-a29c-b19a349c7fc6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8fa1c6a-f3f1-4335-b86d-dd4feeda9dd1",
        "cursor": {
          "ref": "880b46fb-4e55-45d5-a0c2-0f28b37cf6b3",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b0d94052-8174-4359-8840-532c2a09db88"
        },
        "item": {
          "id": "d8fa1c6a-f3f1-4335-b86d-dd4feeda9dd1",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2f78b908-5af2-46e2-897f-49e3569cff3b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a31cb51-36b7-414d-8547-4ac04dc0a40a",
        "cursor": {
          "ref": "a7c2e839-9b11-4f88-a120-75c94d0bf62e",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "6bb73961-b20d-4040-aa69-0613d662f94b"
        },
        "item": {
          "id": "3a31cb51-36b7-414d-8547-4ac04dc0a40a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "cf52b0b3-15a9-4e74-9173-cbd951098c48",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8c3e03d-0db5-49d4-9e06-1b0aa53bfaab",
        "cursor": {
          "ref": "c844c3e9-7f7e-4382-ac52-1f494ec69bea",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d04f8925-2a01-4c7a-98f1-9c47e3bdcf2d"
        },
        "item": {
          "id": "a8c3e03d-0db5-49d4-9e06-1b0aa53bfaab",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "9e39d362-ea9e-4567-a921-f432d4e173c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "532a67cb-ac2a-4877-96e5-e582c4104fad",
        "cursor": {
          "ref": "e6af3e09-e004-42bf-b355-b886f6281c96",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "afcf3afa-a568-4709-8c2f-1711d32bf9fb"
        },
        "item": {
          "id": "532a67cb-ac2a-4877-96e5-e582c4104fad",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ba254767-6c41-4459-9f64-938356f0fdea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe3a4b49-6af5-4ac6-92b5-45a9e78d2609",
        "cursor": {
          "ref": "cb69671c-44c0-4ea2-83da-56fb9cda98b1",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "abed014b-a2b7-4bb9-94de-b4b8fe420504"
        },
        "item": {
          "id": "fe3a4b49-6af5-4ac6-92b5-45a9e78d2609",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "489d2aa2-7d60-4d41-b201-7bb30dd888b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2004f42-84d0-4705-ac91-ecf447d68df4",
        "cursor": {
          "ref": "a8955bb7-3014-4050-b4be-91fdc5112d02",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b5e02841-3de6-48b3-8777-9a9498ad1d25"
        },
        "item": {
          "id": "b2004f42-84d0-4705-ac91-ecf447d68df4",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "fcd72f4c-d6c5-4730-ae4b-c1ed55a765a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed0463f-820a-44c5-8f03-0825c26e59ae",
        "cursor": {
          "ref": "cfacaf62-560a-49b6-bab6-d1e414d29047",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "2b1a84b2-7673-487d-bbdf-e69ca9029b6a"
        },
        "item": {
          "id": "0ed0463f-820a-44c5-8f03-0825c26e59ae",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "5b9bd104-9815-48bc-b39f-17e88b8a0067",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6f3a814-a2d8-456d-a006-bc6e9ba53745",
        "cursor": {
          "ref": "0b3c83d6-4235-4b2c-8ca3-fb375f389929",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "3ecba3ef-033a-48ad-94a5-212e26523b52"
        },
        "item": {
          "id": "b6f3a814-a2d8-456d-a006-bc6e9ba53745",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "62a2319e-ce10-4568-9900-287ff311068e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4db5777d-8a18-4c34-be44-2d5170ac70b1",
        "cursor": {
          "ref": "8c33c333-26f8-4b99-9968-0f92af97b621",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "79061569-5de7-4b57-81de-e976dd8509b1"
        },
        "item": {
          "id": "4db5777d-8a18-4c34-be44-2d5170ac70b1",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "3881751d-56f1-4dfa-9daa-1f5dc863621e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "220408da-0e3b-43a7-9446-98f5239b70ef",
        "cursor": {
          "ref": "702c24bc-6ede-49e0-ab79-8ac8dfc5d417",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3387796b-ebe5-4647-8d62-8d0f4f4d6e4d"
        },
        "item": {
          "id": "220408da-0e3b-43a7-9446-98f5239b70ef",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "6a194752-1de3-429c-9c19-2a306d0bc2ed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b32d05d2-23dd-4b37-ae3d-b7a849ee29dd",
        "cursor": {
          "ref": "f81824f6-ffd3-47ac-83d6-0ce4760ef111",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "dfec70cb-ffcd-4a0e-a67c-ed204e8ce1c1"
        },
        "item": {
          "id": "b32d05d2-23dd-4b37-ae3d-b7a849ee29dd",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "39eae547-a1ca-4daa-8c9d-7651c3fda011",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "928a032b-428d-46d3-be95-1dfddb20395c",
        "cursor": {
          "ref": "327d5dba-d8a8-4657-94e5-04dad6bbae17",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "faee1eea-923a-4539-9150-2aec331694d9"
        },
        "item": {
          "id": "928a032b-428d-46d3-be95-1dfddb20395c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "c4242069-d04f-458c-919c-17583b2c33df",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6565da1-febf-4d07-8798-d84bbb0b2008",
        "cursor": {
          "ref": "630e48df-b983-42bc-b625-560eac7cc6a7",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "68a57614-4e8f-4698-aa38-a911873dd2a8"
        },
        "item": {
          "id": "b6565da1-febf-4d07-8798-d84bbb0b2008",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ca468962-15e6-4c2b-a45b-9f16dda24ac3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cf41a38-de39-405d-86f8-ad7f93db8e3c",
        "cursor": {
          "ref": "c2d18f5d-7ec3-475e-8223-12a6774be4fe",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "169e0807-e6b2-4ade-af93-27eb07284670"
        },
        "item": {
          "id": "2cf41a38-de39-405d-86f8-ad7f93db8e3c",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0ef29adb-ba37-4372-a686-ac83e26f7e31",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a533da94-f9c2-438e-8d9f-02b531a122ee",
        "cursor": {
          "ref": "641f235c-2cbd-47b2-b0da-6c01920fe2e8",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "baf2751c-4b2c-4059-96e6-fcf3e18d3335"
        },
        "item": {
          "id": "a533da94-f9c2-438e-8d9f-02b531a122ee",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "52f1b306-8ff6-4b52-b5dd-8d46005e6353",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25cb850a-bc2d-468d-b42f-da87c27e3e1b",
        "cursor": {
          "ref": "6887e00b-ab9e-4796-a8ac-8e306fc43894",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c048f2c2-30c1-43e9-969e-c8fb2df3e48e"
        },
        "item": {
          "id": "25cb850a-bc2d-468d-b42f-da87c27e3e1b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5b034d7f-bc37-451c-8c0d-da4313f20304",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dd4a1bd-23a9-41e7-8a29-bbebdc979ceb",
        "cursor": {
          "ref": "65f453ab-c0c9-4bde-8b3c-a49f7bddfe8c",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c18805f0-a78b-4fee-94fc-13ddb35c412c"
        },
        "item": {
          "id": "3dd4a1bd-23a9-41e7-8a29-bbebdc979ceb",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e711571f-b92f-4fd2-bccd-9f298ab5acb4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17768cf1-e95b-49db-a1e9-09894b86c82f",
        "cursor": {
          "ref": "a729df1b-7d7d-40c9-8e03-5a5f58f2b8c9",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "43454ccb-8b48-44ce-bb3b-c49e4c894478"
        },
        "item": {
          "id": "17768cf1-e95b-49db-a1e9-09894b86c82f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "4223576e-4f55-4a75-b9a6-d556c94801d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d393c1-3050-4a8b-8ec2-799b0f9229b3",
        "cursor": {
          "ref": "e3fb0b52-6145-4cc1-a278-87e0381c68be",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "d5a5c72e-c1a3-429a-9aad-e9eb16d89b25"
        },
        "item": {
          "id": "e8d393c1-3050-4a8b-8ec2-799b0f9229b3",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "18369077-7072-44fb-a210-e43972b88be4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1193e6c2-bbc7-44c3-80fe-cc9b16e28d73",
        "cursor": {
          "ref": "9dcb80e3-1999-449d-8873-4acc872fd3fd",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "afa2e72c-e69f-4b4d-9f16-a7d7ee7fb2d8"
        },
        "item": {
          "id": "1193e6c2-bbc7-44c3-80fe-cc9b16e28d73",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "12604a2e-f7b1-48c1-be71-d1be781173e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "674f37a8-2a59-455f-b109-836329e20110",
        "cursor": {
          "ref": "d46d16bc-b9a1-424f-bf00-b041ce9d05f5",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "e2a4cfa0-7234-455a-a4cf-0bdf7ee89689"
        },
        "item": {
          "id": "674f37a8-2a59-455f-b109-836329e20110",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "4f1290fa-09fb-48e6-b472-fbbaad299753",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d6b14ac-ebfc-4138-b5ed-530c3f0b9452",
        "cursor": {
          "ref": "37dabeb0-5ce7-4478-8f85-a93759cb2027",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "95cfad38-a693-44b8-b32e-4e911d5a100c"
        },
        "item": {
          "id": "7d6b14ac-ebfc-4138-b5ed-530c3f0b9452",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "70050dc7-2fb9-4972-ba68-f108c06cf9c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1a69a4b-1614-4d3a-9748-51d4d2cee820",
        "cursor": {
          "ref": "72aca584-958d-4794-9fc3-255a2eef6271",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "f27d5e09-330a-4067-a254-80c630341f9e"
        },
        "item": {
          "id": "b1a69a4b-1614-4d3a-9748-51d4d2cee820",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a7f1c75e-7881-4649-a902-653dc1777f40",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa02c87c-42a5-4042-acb5-f1cfddebea7e",
        "cursor": {
          "ref": "16227501-83a5-4e2d-ad08-0c81e282f3f5",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8d15c346-4144-4e89-ae87-0a1fe0ae05e3"
        },
        "item": {
          "id": "aa02c87c-42a5-4042-acb5-f1cfddebea7e",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6267e42a-d583-4789-b0ea-61f1c498c197",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5095f58f-b3e3-410e-983a-ebf6ae17c447",
        "cursor": {
          "ref": "00726847-42a1-4bd3-8d40-3f0cc52e0890",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "462cded6-2e2e-4a0e-8cf2-944fca9e1ddf"
        },
        "item": {
          "id": "5095f58f-b3e3-410e-983a-ebf6ae17c447",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "505d30ed-895e-4a7d-bc45-08cf9a3ba66b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98beb55d-0ea7-4969-bb86-222e7c00394d",
        "cursor": {
          "ref": "713aef28-ada0-461f-84fd-3f6bd1ade3d7",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "04e1db1e-c328-40f1-a6ce-e8d3b0e61ab7"
        },
        "item": {
          "id": "98beb55d-0ea7-4969-bb86-222e7c00394d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "3904ca35-cd2d-41fb-954e-6b538a8b0dee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08b19945-52d0-4cf5-926a-7beb28177c86",
        "cursor": {
          "ref": "0043c55b-320a-4bbe-9e64-5beb3addd084",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "8ddd278b-d8c3-45dd-bff2-250964e38e91"
        },
        "item": {
          "id": "08b19945-52d0-4cf5-926a-7beb28177c86",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "1bb47d3d-c12f-4cfa-8b2a-584dad975150",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5573b535-521d-4637-b484-0d3ed986634d",
        "cursor": {
          "ref": "77d615d1-6e5c-444c-a04a-a968900bae22",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "575bdb41-4468-4716-8f71-0e6f3cc9d7a1"
        },
        "item": {
          "id": "5573b535-521d-4637-b484-0d3ed986634d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "70325358-0ca1-408c-a291-7f0fddf3600b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27518f91-1ef2-48ac-b48e-934a53b2e916",
        "cursor": {
          "ref": "d7f15c8d-f256-49d9-bb2d-31df704eebb1",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e281d903-4a78-42a2-a978-673ea6719b4a"
        },
        "item": {
          "id": "27518f91-1ef2-48ac-b48e-934a53b2e916",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d0c17995-c631-4f12-ae5e-43c689f4c0df",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6715c237-e162-4602-a917-66dbac5c9176",
        "cursor": {
          "ref": "d0d67360-96e0-44e2-9f7a-30f86bfcb1c7",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b91db64e-a5ba-472d-a130-db335556d073"
        },
        "item": {
          "id": "6715c237-e162-4602-a917-66dbac5c9176",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "0dadf722-537e-4b0e-aeaf-ed25367b4a64",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d999f27-8e10-4de7-8c2f-4eccde24b408",
        "cursor": {
          "ref": "827de25b-2765-4783-98e0-8a3ba49a9da4",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d95ff044-88a0-489c-ae28-9c1300e493be"
        },
        "item": {
          "id": "6d999f27-8e10-4de7-8c2f-4eccde24b408",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "fd198fb5-6835-4448-95b0-c6cebb30b5a7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64fbe1d2-33a0-4bb8-93d7-faff59359d5d",
        "cursor": {
          "ref": "40c45924-b68a-4ab5-9216-fa817313c4ea",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "602de689-d07a-454a-8344-6eafa61acfe5"
        },
        "item": {
          "id": "64fbe1d2-33a0-4bb8-93d7-faff59359d5d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "070275c5-6a89-403d-bd6b-2c2c1099ee06",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a539b4c-de47-46bf-bc86-21ddbbbd79b3",
        "cursor": {
          "ref": "4098cdbd-7460-4c4d-8943-18ae3458198f",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "eeadecdd-4c62-4743-a38f-52a4fa18c331"
        },
        "item": {
          "id": "7a539b4c-de47-46bf-bc86-21ddbbbd79b3",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "8a90e32e-2e3b-4b41-9869-f09a1de1e58c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b72b69e-793d-4648-ae44-e2fdf76fbd0e",
        "cursor": {
          "ref": "a0aae6ac-3638-4bd1-8f0c-5b2ec2d735e1",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e3d4f559-5525-4730-920e-1e7a21f063ca"
        },
        "item": {
          "id": "6b72b69e-793d-4648-ae44-e2fdf76fbd0e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6aaae204-218f-4f06-a890-5ed07345840a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b27f3178-1742-422a-b3c9-3cde45296c4c",
        "cursor": {
          "ref": "adc5b2fa-6ceb-4946-ae3b-3414643f702b",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "42df40b9-01c7-4d9f-b352-4ca537815388"
        },
        "item": {
          "id": "b27f3178-1742-422a-b3c9-3cde45296c4c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "5ba2c5b5-7823-435d-b226-1219069ea816",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "17f45f0f-c46d-4874-9638-4f09be65fe13",
        "cursor": {
          "ref": "ed3e8ed8-fa89-43df-b363-2e380b22db32",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "335bd1cb-16c5-41b4-b876-b5c6d3d41715"
        },
        "item": {
          "id": "17f45f0f-c46d-4874-9638-4f09be65fe13",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6fb726eb-f1a3-4c88-941d-bb1140e8d7af",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "f8e37f0e-258d-4f1d-9f41-0dc53aba0f47",
        "cursor": {
          "ref": "ac88d838-1cec-4d71-9a01-4b3dd254b31a",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "50d64352-2a35-444e-836e-1d40dcc6e7bc"
        },
        "item": {
          "id": "f8e37f0e-258d-4f1d-9f41-0dc53aba0f47",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "8c3a66ef-c8cb-42e0-8e04-718d67c1b00b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "decf76a7-eedb-4ca3-9d1f-b9c6a93d58e7",
        "cursor": {
          "ref": "22468356-c89e-4bc9-8f89-e2056c6e759c",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "7c7fb838-75bd-4fb1-a72a-c40a8099516a"
        },
        "item": {
          "id": "decf76a7-eedb-4ca3-9d1f-b9c6a93d58e7",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e806d3ab-5f2a-4a6a-be47-15d4a4428afa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "decf76a7-eedb-4ca3-9d1f-b9c6a93d58e7",
        "cursor": {
          "ref": "22468356-c89e-4bc9-8f89-e2056c6e759c",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "7c7fb838-75bd-4fb1-a72a-c40a8099516a"
        },
        "item": {
          "id": "decf76a7-eedb-4ca3-9d1f-b9c6a93d58e7",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e806d3ab-5f2a-4a6a-be47-15d4a4428afa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90ac124a-8b55-4c99-ac7d-bae33f533fb5",
        "cursor": {
          "ref": "f38b3734-478b-49dc-9980-33d92db49617",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ef2d2e73-d0fd-4cb2-85be-33b247b5210f"
        },
        "item": {
          "id": "90ac124a-8b55-4c99-ac7d-bae33f533fb5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f9b10564-60fd-4843-bc8f-e3e52beea5f7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0812bf28-8ae4-4875-904d-b69181e34c0e",
        "cursor": {
          "ref": "5595d37b-beb5-43d8-846e-d96c613ed098",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e9a863a1-6bce-40be-b002-fad6f062cbe5"
        },
        "item": {
          "id": "0812bf28-8ae4-4875-904d-b69181e34c0e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6a747238-abd9-4946-bdf1-d1e85e89d5da",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}