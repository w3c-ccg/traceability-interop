{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "688dbe6b-0271-4a05-a335-1f7a08d5f83d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b2594df0-4714-46ce-a4ae-e52e4994f949",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b2fd1290-039f-4890-ae45-15b19d8e6f11",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "bc7840ba-76cc-4efc-b24a-550e54727640"
                }
              }
            ]
          },
          {
            "id": "c64b522c-202c-4ac2-bddb-4b7106f85625",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8eb22e4c-ab6d-4e88-a771-9d6830ea1da1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8fb6bdf4-7862-499a-ae25-74e1e31d7dd1"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "db8f5e2f-2924-4e2a-807f-dfe50570c37e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "3b437115-0ea4-4c2c-92f7-42fd4e1b8546",
            "name": "Positive Testing",
            "item": [
              {
                "id": "052effde-24a7-426f-b9a6-359d48e6acc7",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0da2fd5d-18f1-4d00-b937-f63b5be25b73",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "44c87aa6-19ef-4881-bde4-0336c337c567"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c50afe81-4221-4122-a1e1-9c8330f947d3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "49c94f29-d7c1-4335-a284-351ba0fd2384"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bda239fe-3d0e-4fd6-9228-37943f07882a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8d90a9c7-9659-4252-9ab6-b741522f45dc"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c553d664-3642-4788-9039-17645744dde9",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "bafc677e-6e93-41dc-ade8-4bb4e0e22492"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0887ba7e-490f-40f7-8916-6da2b4326814",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "caef1296-fb23-467f-ae5b-6ff84347a53b"
            }
          }
        ]
      },
      {
        "id": "49936850-ec62-48c6-ac9f-68cd64f3f36c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "cefa104c-fb0d-424c-af6e-70d243d4ea8f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5bec86fe-87af-4871-977c-46a49fd9d663",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "13ddfd36-3628-436d-9848-9f414417c477",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bda6315a-6c11-4737-84d2-7bf0ea6e9d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1af8cf28-8784-48fd-98e8-7a672ba1a264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6448aaff-35be-429b-be75-3b9dc35e418f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3453e51b-e6c1-41d1-ad8f-d5f43bc0b425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "52ccfbad-2208-4350-b4c8-acd5d8e3fb99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edae461b-142e-4112-9686-8efb130cbb28",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c315cddb-0522-45a6-9d2a-f8b72b5387f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9a7bb2c9-9fd3-4684-828e-47303041cdee"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e96c10f3-d451-411c-a22a-ec37d0db0ac2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "83743edd-7929-466e-87a1-ab23836fa063",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb4e0c94-dda4-4cdc-9a71-9d954fadd48a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8adb4dac-da63-4f0b-aa4f-e54e416f674d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ee546ef-38e7-4be5-bc31-af04b12ea5bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3f84382-47aa-4833-a2ae-92c76eb1af15"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "981c0f85-0f8f-4172-bf95-46482a09c2f1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dc46d27a-d760-4ece-b359-0c9428972ed6",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "36481c68-122a-47f4-883e-e7af03e6385b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "491c0ee4-bf56-4163-9ad1-c10237156a9f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b7f4734d-9047-4500-9851-e8fb72ed4b5d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "0fe61995-63c1-498d-883d-f1ddb423193c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5c5f1a5f-76d9-45a7-a261-a9bd7b401e2b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c9024326-a0f2-4b7b-8360-f653ca226a30"
            }
          }
        ]
      },
      {
        "id": "7a944e74-4b7f-4d63-9e4a-81d2d25e4713",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "14be90f1-9511-4428-9395-314356d353c8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c44d2aa7-d799-48fb-aede-3c69302843b8",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "8b96b449-015f-4e02-9196-58f2201aaa12",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cae10f7-80ca-429f-ad04-c931b6d679df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "979a0f50-4587-4590-943c-2332f98623c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef1639b-778f-4944-a4d9-ac5faedd4753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24edfa26-8e73-4a6e-8d9f-5121aae5f02f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc01c905-0cd8-44b2-843a-e39cb0f90b1f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52066247-2b71-4429-8859-7ff95fa3deff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eba736c8-f638-4346-9d34-a8ace41517d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cae80fa-37de-47f0-9aae-c5f5f5ccd981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f435c418-ee0a-4293-90ee-78c6e5baf8c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e2b32f0-f1de-4633-816e-92e81bb476d7",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c62bc0d-e9c9-4ec8-a849-5a4d88f671fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "337f23bf-0ee0-4592-83fb-e1bb87117531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bef4a435-ec7a-4188-ac83-f6e4c88e52cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "44849f8d-8708-48cd-9988-c5a7bac14e2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7207a612-f569-4b0e-8f1a-396fcdb785a9",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0364e83-e506-4f75-a36d-7405bf609d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aff8f85-4261-49e8-bdf3-84c0bc2cf662"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "818afdcc-db0a-41b4-a2ed-c64d79316a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31cd0190-f7f3-49f2-9a82-884493c5e370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65bad51f-7da6-4a89-a5d6-be28d754f020",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "092712cb-b311-47b8-a751-aed0edb9215d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a818efa-e6fb-4a5c-8124-7f32f7174595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f86bd3c-6e57-4266-833f-92decd58dceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "493d5901-23cf-44d9-a5e2-c8074e0c3a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc77b14-ca5f-4b26-a89e-197c9640d1b5",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c657ac59-e3b9-4978-b64d-aa12551d5a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "643a3619-9e9b-4090-b600-1f6a2e4ac94c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c50c3df-76f0-4d14-aeec-32bcba857b38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0024cc83-157c-4a76-9aef-1cdb2a0ff935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07257de0-185d-4dd1-b956-a5409f4ea371",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "616bd7c5-a9ac-4323-9b8d-f3358d9f8cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6321ecd1-f273-4bae-93f9-8cca4da02c83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dfd0845-9a63-4dd8-8983-cf4f500f6898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dacac2f6-8cd4-49a8-bd10-bdaf1261648c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44672eb7-b002-4d6f-966a-0e21460890dc",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a20c22e3-182d-4df0-b9ac-fe244e0ffec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9df68922-8c1c-4509-b117-809a7614ee2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "142483a2-6231-47ea-9185-a8595448243b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "008c95b3-8fe0-439e-ae33-1499fe38f15a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79e87c61-4f8a-49d1-be5a-7d803b551504",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68cd62d4-cffc-406f-8914-165801f1ce68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c0edff2-45c1-456a-9b79-95b3a0c4dbd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac1ab319-1d53-418c-b9b6-679323f1adee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb21604f-f332-45f2-9f17-6d9f1cf6ea90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec55ef9-7238-453f-91ab-088e491e966b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc5fae1a-3456-4760-8e3a-0a67c8e607df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e88f250e-6794-41ed-bf50-700f18aaf51e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d407290e-18cf-4e09-902f-2563da3b2843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80b8880f-f239-429b-be30-5ad9cc81690c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc3be54-04ce-4629-91ed-c667ae5e4444",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0e77b8-5c14-4d01-a51c-801c2ba0a483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62d1626c-5289-4ea6-9950-b6ac13e51291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06028f6e-60cd-4a20-8f8a-995646a5f537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d82ead68-8908-4fb1-81da-193e30aac050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ac0d1a0-2193-4dec-85e3-27517b057d14",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "091bdc49-0ce0-4a25-8d75-90180084f91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38a359c2-977a-418c-b7b9-c3fc1b8af8cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f390f52-9c8d-4b0f-a2a4-a7bfa3b1b53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cabe40f9-81f0-417f-a794-48d7fdc2cc6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15320b7c-3408-48b0-82a8-c6cdeae4a50c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee116285-186e-49b7-8570-dc189f7d19ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c986ae09-a448-4bd2-9172-c2621770f6b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "444e6ae1-ba33-44c9-b6be-557f18475474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "69cf1ca2-8422-484f-a490-9712f2a27564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12a690ad-4319-44e4-832b-8416d77ff408",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb19643-3d24-49c3-8509-c180e8921408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87a95172-36d8-4084-91b3-29ef8d83c83a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c15ac852-9011-4e15-b753-5d3d4e6e3148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67b2c1b9-1dad-440d-9841-faac8a1b772d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b5e0532-4a52-42fb-9d8c-17e58039939b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "698906bb-7739-4594-b3fa-4e8335450d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7ce1a51-1e47-40b4-9e6d-4c4bba5be739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c0f67f-9a2a-4fd8-8b84-f80b676778e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ede4679c-2a36-4be2-841d-1ae78443b802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac4d7da-6ad0-4882-af5e-f6370d4fc646",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "718486c3-8b4e-4000-9897-8d2834fb59b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27da8f2c-5b0a-4058-8a94-a4b5e5f7f14c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "924d4bad-110a-41fe-92eb-13d4ab22d5a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa9f2859-9769-46ea-a0cb-900c6a945417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b5cd9a3-09cd-44bf-b93a-01508d811f78",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f526d90d-00cc-446a-bcfb-d0f35a7b8014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bc29f7b-290f-4e00-b22f-ebeffd175e03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e084e3d-c413-401c-b653-eae3159d12a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47899f03-63fe-4d38-9aa8-6b7348085062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2577a72-13fd-4804-98ce-2313e56350e6",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "892e5463-e4c3-4757-9723-4e475b9ec749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e5e45e6-3540-4516-b5d4-e3c5ecfe3781"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26eee221-d458-485a-aab0-933f2abedb10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0dd6e5ae-bff7-4116-9d86-71a33b26169b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f841e1c-30f9-473e-9c4f-59bc7999debd",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "662ed7c9-a8c0-4fa3-b188-8468e2e79c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc5c88b7-0062-4214-9514-8d8ebb59daa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9a8b67-96d1-46d2-82b4-7a271f151ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "506701fe-3c21-4474-9526-682d9803644d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afcb6939-0981-476b-9771-07c75f3ab78a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b31b0f-dc2c-47ff-96b1-4acd0d190cf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09417137-39d1-4a08-8f8f-626ba4a2caaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77bb0b16-d5ea-444b-9b6f-52f4ed7cbde2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7bd338d-803c-43b3-af27-08157fd83bfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "298f850e-930f-4e03-9faa-c96e0b22bfe3",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0afa8ddb-46f3-43c8-8ef7-2ec638ef55d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cd6bf94-6533-4c98-bf58-dc48ed63d815"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac1ac574-8d93-4371-a393-173fa002b7b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a74c7eb4-89e4-441b-9ee4-7cddb326df6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f4ccc37-30f6-490d-a589-2afa0151eab4",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e02cc489-ae36-4f42-a07a-5a9a8abb480b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a4bffff-0055-475d-a0c9-d78415141c7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6870e820-ff66-41b0-9516-e4cc942ef95c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "82da4df6-5369-4fb4-93fa-8653fa010b6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc40639-b52c-42d4-a5c7-35b77c59b7d4",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4b88134-f5d4-49cc-a255-d24c168d1ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b98e78d-97f1-4c0d-8b27-d5f1db56906f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17726c78-35c4-433e-b064-47bd3e076be8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "39fbc925-d258-4812-8e78-b4325cdc34d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8db469b4-1053-4c7c-a270-91f1e1b90ead",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d99237-a942-478c-9abb-2189774f0ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "234690d5-e7be-47a6-add0-93c986758794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b57f60-ab5c-45f7-8831-7e80515c9012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8034ab5-503f-44a5-8148-ab0879ef5342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "100cef89-c3cf-4a97-b7d5-807c1fab813e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41d92e5e-e74e-4da1-a093-f772862bf5b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7383004c-c381-41e4-82b9-41d9f13a56e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "156d8761-1d13-4482-ab1e-9d182f18a055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc850e14-bfdc-4a9e-9a94-ff775820ab51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c1e9e92-5c09-4833-a10a-f3055c331a71",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1840d177-f9d0-40a9-95f5-cf275aa456fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd34c19f-e728-4e72-80d9-3856457ba776"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d50d48-d889-4580-88b5-e445d86e2d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "de9b8de2-82b4-4419-a07b-c395ce7faab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa1773b-ea9e-459c-aa11-90625e1e3d7d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b01dcc0-536d-42fd-9bce-6798f51d246c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5bccef1-659f-461d-936c-349720db3db2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7215392c-881a-4a7b-9796-160596cfb38e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8416cd38-f7fa-4c83-af9b-615c63aea56b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e4d12d3-4379-4fbf-a8ab-ba7de6d18e69",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4bea309-7bce-4a93-a5f3-36c66e90b7fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a19b71a4-0979-41dc-a4e7-97c9ba1307d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "923fdab8-3130-4b50-8e29-cbbc33aad3b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc76af42-3d50-4b96-9b0e-7afe92f818ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed7791c1-9b62-498b-844b-316ab89ce736",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4db94c-cab2-481f-b562-17b68298b298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4ebcd84-9aff-4984-9cef-e13366bd1017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "895981d8-1822-4f42-a7a0-757be6138ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5467a46c-27fa-4b35-89a6-8e278e970cdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f80173fa-b105-4091-b0de-57f2e1f35edb",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d57774-c084-47f3-9b11-d5334ad60ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05a7dc60-bb62-4389-9f72-0c64342ef580"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc48370a-f085-455d-94e0-a60e99b718b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3a8bde9-38fa-4223-9ef7-78e6c3039c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1fb405b-84cc-4eb9-9e49-e5183ceb222e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc58168-d4e0-4f40-bb45-7d85bcdb5e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83d6eb2f-c686-4ae1-b103-38bc9518a4a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f8ad559-0d30-4ada-9f93-929942857d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b48000f7-0496-4cf1-8e59-40c9292480d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ea8a5d-b9e7-402f-8a91-89d3459d936f",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b21f3e8-befd-46c0-9b4a-7675d3a33209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "866cd6a1-627f-4fb4-bfc0-1d8509021773"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de87e225-b8b4-43e9-83e3-67e0dba42e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "868b298c-9de5-481a-8147-f3dbe6124ef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4bdb143-2e43-4876-a802-901608118ad8",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9a0725-e44b-430b-ac99-27d8bf50f33e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "893dbebf-373d-4b5f-a0b9-b7bd7a9e1d58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d11ddbbf-23b8-4db1-9cb3-822044fcbe43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "711f9a79-9950-46a9-ad0c-9b75f4410095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc469281-a6f4-4d90-96cf-12885642e9db",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d2cf90-946a-4491-be70-a61f4835f7c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21786627-1343-422b-b8bd-3912c2bee0ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3b94644-cecf-43cd-af34-e2006d340001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "30d1cc3a-a283-4fab-a76c-b084c5beb2f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4579e44d-7adf-4bde-b9d1-ec615cbc88ed",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0b01fcc-12a4-4a12-9f12-660422c211f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdf7926d-1a86-42c6-8c0b-ab69fc8cca1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01ce57e-0a82-47a1-8d01-8903466bb3b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "831a9c57-4c3c-40d1-b4c1-74b5b945614a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7df201e-ee47-4dc3-9c0f-e27f4904f2ae",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "315709ce-c65c-42f7-b52d-6ec6e25f6556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "99002864-19a4-4e96-8fb8-cd049754ddf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96669436-af17-40b7-87d9-dfdb8a28311d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0f983ecc-22c3-448e-9f5b-7d068e60357f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f8e2c7-137a-4abe-82d0-7c20a2ad851d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58186c34-6297-4902-873f-b378e956e3c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2760dbc5-c425-4e61-98da-8d00a6743525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd28b036-5269-4df8-ad98-f7c714264ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b998cba-9d04-4096-8175-3ff76fdac91c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b25f438-12ab-4e31-88a8-826e8785cd0b",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a93f79-157e-449d-b0c2-2d81cd8c714c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dfe35ca-4447-41ed-aa28-af2ba22ae0c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d987d9-f573-46e0-b0c7-796449bdfe92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d825169-4b1b-40ce-896e-ac6d1f12bec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8deace2-8bdd-4fe3-b24f-1026fe7f49d7",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d1b7c6a-c651-4530-a3e1-49e8a1098bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62873ceb-e346-467b-95a8-a04a20d192b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f832dfc-b60b-4deb-94f7-13b75a29496b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2766e28b-2984-4b05-afee-84b81841593e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "084fbc3c-8fee-4b6c-b5b7-6e65ec551745",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1641d545-d64b-443a-b33e-f5c018e81d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8288e2a9-c9d5-4092-9801-a51cb019d41b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d558d290-f6f4-41fc-bb9b-92c9456bd554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "71f7f37b-1392-46c2-8247-e3d77cae9c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e63fafd3-c5ea-4aba-8283-ea193ada4f0f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f3c578-7d83-40a0-90c1-66eaf90e9eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92bd4d2a-f969-4e03-8742-c1afab3edc93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c77bf16e-af50-42cd-bfb6-2e1c707ded6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a956051a-de1e-46ab-a983-145f281a8ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc032f30-18e3-45bd-9161-9b26e3d931c2",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "106ed493-888f-4beb-ba66-942a5a741e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b72a7b5d-0b3b-4937-83ba-d42cb7159876"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb4b657-e6b9-4429-8496-e8531aa2b2f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "d393bc5a-eeec-43ed-9c3d-2a78a6b51972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c71bff6-e18e-4ed2-9e63-31d0a3126bec",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1582822f-2589-42e0-b53e-5dd7a0e5a1b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51591dd1-d825-4a05-8eb5-6cfd24e426ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1b89db5-89ed-49cd-8d9f-d9fde31b605e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4fb317e7-a372-48e5-8f6c-a235906c5759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d031042f-9deb-4752-9b36-cdf074539603",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9fb492b-946b-416c-abff-0ca416675d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d3b6f19-1614-4f8e-83f7-1c0100ca57e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7b07537-e5a0-4c42-95ab-dd8779695f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6008b63-b492-40c5-b081-dbea61a6dc8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8ade47-25b4-465a-8a1f-59b46ac5c491",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b255908-8e16-469f-aa4d-bdccc31446c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f71ed66-8e85-4d7d-b3c0-83d53e77f307"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f16130-78f0-4149-a3cc-165b27bc4a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f780242-45fa-4142-b96b-923f9fc6bf65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "851a117a-7839-4566-81ff-abe7d8a16fa0",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "964e25b7-f132-4d3d-b495-fbbebb018b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c336e63-048d-47f8-87f3-6609fa033b30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b16f01-d2dd-46e8-8071-ae7a974300c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b02560b4-d9af-45a2-8313-ef6fa31bb360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0de35416-493a-4268-8767-9f9bf180a8cc",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd3a4a3d-0ebd-44c9-b49c-40c215eb6563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c71ff35-b3a8-4022-8fdb-bb5bfdd470a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b8f196-de36-4b0e-97e6-02591a0ce99d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0194b09-f38d-42ee-84a4-247e3d33990b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3c38bff-0b75-4c56-be55-2749cd3ffbe0",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29a08048-c8a7-4a18-bf09-929946043da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f9b2c22-ce4a-4a19-840f-7ce3b1fb8852"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8652395-c4c8-4588-9edf-7460ae04546b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d023a475-2180-4b65-b279-99e18cc8d51a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc7941ae-04c4-4af8-98bd-867fd91570de",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "324bb9cd-3e26-4e3d-8590-d6877bec27e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bd25a31-a928-4b18-b984-d6ec69f931bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e8e86e-16fb-41e0-adec-a3468b855915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f68ca28-deb2-4be6-8632-8b5773741a8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e7554b4-b5d5-4d19-a1f2-e52283e95666",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6ba07ce-c325-4a60-82bd-7bab1b011372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9989866e-c96d-4b43-be11-c6187f47c6f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "869704db-9403-46c0-ad98-878183f78bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "74ea3b44-ae6b-48b6-8be5-f058a5b1a726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe0d5f46-0196-427b-ad02-34de9fbc9080",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d479a80-3c44-40c6-a432-107aa29ae6a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9be1227e-6994-439c-9edf-f6bb6ba3465a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f5c7c57-6551-453d-b715-17b748e1f5d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "deda3e94-0a3a-4fd1-b4de-72f3af6a7c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7adf3577-b965-4888-8282-50e8ecca6687",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b80e6985-4dcb-4e07-a38c-eb1947c0c5d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e66a4f38-4bff-4544-9de6-06f462607e92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d1758e5-ab3f-44aa-8042-1b19b9d7bff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "012d3d38-dd3d-4bca-8f35-7bf12bfbe2ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4637f893-aa1c-4f86-be80-c79980a41efe",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b4b098-c4aa-40b0-8c3d-b906d6227ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7884cc6f-ab97-4d32-a48a-458ee9b16dbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39fc09f3-a011-4ef7-90be-6274b5f716ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "08a3c749-df11-4c76-b8d4-2e9e859cc038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "155f9b67-9b9e-4c3d-96f2-c193854f65bf",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffd39830-c788-4e4c-9f8c-970a56d86748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0851d873-cd76-49a5-9614-5924021dfcba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f76090a2-d307-42b3-acd0-382dd64bc0f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "136e942e-2728-49fe-8b34-06abe46918c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbd66ed9-1b86-4052-a90e-6cf7726290b4",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d0d47dd-de3b-4a0f-8c3b-1457875038ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8620cd4-d5bc-454b-a769-d9c9741bf9f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8142dd3f-2b02-487c-a881-6f06649e38a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "67532ac0-c327-4e0f-b9e2-310988b25e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe7369e1-ca91-4312-976f-b25d196fc60c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c4df644-8d5d-4968-a338-10398cb976c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "209330a8-fd14-44e4-866f-40e9b5ed442a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf1ce114-20fa-4f1a-8e3b-472d7c394eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c10f66fe-0029-4290-a34d-66eb4d491ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a884ae4-d5b3-426f-8b9b-e69713905183",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "911da17f-33e3-4268-a82f-125b6c747553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cbdc384-1643-4538-981a-e09bb82f8474"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed6daee5-8e55-45b2-8b86-98ad91d19ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7c3a04b-a2f1-4bcb-81c3-be2d4696a07f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c037e5b7-0069-4321-96f0-eeb86d1fe8af",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9b76ee8-2cbf-4f26-b175-12b77ebb10ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e208c2b-53f6-4fb3-b5e1-0da797500b51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ade95a03-5728-4a60-9489-3fb70a4dee34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fef1dcd4-b36c-44a4-a642-5f6b482c611f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fab1431f-7bc7-4c0b-98a6-ff43fa5944c6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "886becdb-6044-4cf6-a617-92a6e9355239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b5771c7-465d-4a16-a9ef-bb371c40e7a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82b51bdf-23d7-499d-9ee2-efeb2018b0e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f70df06c-0f27-4b87-9ef3-bb443f38d662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "742f2e5d-8ed2-4bbc-a497-17881fa66cc3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33c68993-67bf-4b31-9618-88bb6680b15b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "794215f4-fc33-4e20-a11c-d5b688cabc17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e0971c-ed21-4331-9cea-defc75558dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ebcc2129-4aae-4187-b933-03ff77d5d006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa28cc1-5956-45f0-8e1a-94289b7a2647",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a645ef41-f5c6-4a85-b24b-090107e58457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50acb556-4c08-4e20-861f-dbbcc7377dc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31a83191-d1df-4d67-9d41-86bd02f27996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "606630a1-f22d-4321-a42d-65b02a652e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db779b3-84bc-4881-ad07-1a1d33e64e72",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6746ed14-f687-4295-ae47-52d3bae5e28c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb3e121e-551b-476e-989c-66184e822f00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03964166-864a-4e59-9bfd-b4d279f806b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "37c2643a-c459-4fa0-bfd7-4b2632ede7b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c53a2899-31c9-426f-8eb3-9bc7b0c0d671",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d34635-3128-4aba-9702-a8a4d7734b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "397d7d40-7aec-4fe1-bbae-6be87ad14cbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeeb523a-eb33-4b85-9c72-46850d401e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "621fe9e9-4b80-4333-a1bd-b82759d0870b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b785c95e-5444-423e-89b4-44dc0686bab3",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6faa1fc5-cae9-4108-9114-23c638ad4b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "596beed9-294e-4725-8f9d-d1733465490b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "734db3b1-816b-4f0c-ac86-9052ac330184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "31d68eed-a354-4d6a-b6d7-50e4a5ca304d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4273ce3-8c0d-4621-8e2d-991b0dd60581",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d15bc25-f90a-464b-bc41-88df2f72380d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caad5812-91d7-498b-b0fb-0f5a067e1a36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b437da93-daed-495e-805c-19cc9c719446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfaaf9a6-3864-4633-a397-5e1229272ac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c706e21f-3d15-4e24-80a1-9f5dc5816e60",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eb05650-d2a4-4d26-9a4e-3a3882bd4e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42b91528-7f59-4fe2-8fbf-81ed6395e511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cb50516-3609-4435-bd31-68e2ee08f4c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "02a88f16-8e90-4076-bcf8-4a4f77630b5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1693a438-bb0e-4ccd-b45c-6947a8641363",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5fb1ff6-a0b8-4b18-b558-55bd311d9479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a48bf3e7-46b2-4a4e-ab5a-213b42185a1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0e1971d-9c33-401b-80f2-967ea46e3ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "af48cf0d-6443-4716-b0cd-07697dedb25e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa65c00-fe5e-4143-b5b0-4559ae9dfb85",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5761b0d-b0b1-4519-a49c-209dc3336172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1d04dc3-e31d-45b1-929d-569c432f487b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c9ecdf-a58c-42fe-8ac7-15194f0ecbdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0886089-d127-4a96-a11d-8b7f16c5a2ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ccf5dcf-5a28-4691-bc81-eb1866f8058c",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3fb1f81-8bdd-4d8e-8794-cc18d6a90ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51fa2b2f-2356-4cd0-8cb1-6a1fab8d71a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b541096f-6a63-4925-b2ff-873d3686c9fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3220e4af-6d91-4347-997b-20d3f81278cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e222eba-f6c7-4046-a87a-81d5069791dd",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8e7744d-3be2-4b7d-b00b-002fe2dc9030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "decff844-fd03-4dab-9cd2-387a555ccdc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98089f02-4195-44da-8e49-b8d2af42654b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d733d8f1-7053-4e3c-b7b4-2caf3c1e6340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61514a0c-8674-4692-a8bc-d7714a787a3a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d88565b-49cc-4c6a-8eb2-174d4c83e8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a93c95fa-4c36-47d3-9588-1f67dd8adbe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4541596-0302-4197-ba53-c443213e3ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a37602c-67e6-4a44-9bbf-4596d48e1cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f586e740-0d01-4d8d-b958-166df09612ee",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d47d2c0-7e4d-4c7c-9c31-f587811e56a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57e71b32-5232-413e-9666-b680c546ed74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3daa3cbd-be05-4c9c-a063-4ddcb5206d28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b453a98e-6de5-49dc-bba3-fab5e18a7fb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "053d5b20-4861-403c-8da1-a8235b6cc3d4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d8e8d21-d708-46d9-8ca7-6bea8d2c98ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6445cef1-7c0f-43ac-90fc-645dc86ad0af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "924435e6-b63b-4c30-b454-1cc46cd5fa4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a76ced5f-02b8-494d-a0af-6f9f757ef481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5581546a-29be-4c2b-9a3e-08c49e06ab20",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac85fc4a-9743-44e8-ba1b-b2dcf7792d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a72eb27e-d06c-4f6c-bc84-eda9bf5d221f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c6712b2-6da9-4abd-87fd-b192286f64bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0ccd7ac5-0057-4cea-b5d7-9afc2f401a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f82f0bc-d77e-4ef5-b76a-8be7f9fbcc73",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89e6d240-c3a7-43dd-897a-493d500f3a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cbb640d-9b34-4f98-99b5-a583fca493f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b9f026-33d4-479e-b0a0-cd13daf3e923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d59f17c-1bbc-44fe-bec5-39e67dfe0061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "518895fb-a568-4c68-9997-8a0a8fa2a2ee",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab7a1450-b6b7-42c6-b4ed-3028c74354d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb8202b9-b016-4ca2-b77e-228584e791ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e4d13a4-6d38-42b8-ac05-e026a682a8f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "96eda8ad-b54b-4b5c-bc40-833bb5be33c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ab3898-5eb2-47a8-b203-c4024d388410",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d7a0e87-9303-428c-9e75-df291618e147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "651e4cd0-3fb1-4054-86f3-81dfd117b1dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb4bcaa-faef-4cbc-8bbd-dec9274e466c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a9d4b7a-75e3-4a3e-8dd5-8a150e198793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b39c03f-f429-4ec2-bb15-02e84f5734de",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e6719f0-0021-4d3c-bb2c-35f22541fb95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3aeaba8-a250-4ad0-a5ac-f0f6d98d7e19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "583b4217-9405-4528-9aca-1759e13cd2a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "75f1ed17-f985-42ce-8d01-2536eb836c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4132d784-c44a-48a8-ae38-81e685a6e0d0",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b240f8-8a50-4a6c-9137-14a99301e2bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c3852b4-844c-420f-8925-e3803026836c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56141fa1-aee7-4194-93eb-4a5229128c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "919b7ab8-89af-43ef-aa63-140f5841998c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a98fb444-7f7a-4ed8-a3e2-e29bfe274108",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c529983b-9088-401c-855a-facc4739ba3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c184fc3-d533-4490-aa69-41ad73be0ec5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6319b186-3e67-4353-bed0-8dc661b2852d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "79c13f62-6abd-4a14-8f37-701c51d53c1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8276303-4dd8-4103-a246-3f0e1cf9c24b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15a19d2e-15cc-4bf6-a9b8-b312af9bec7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "161f1661-5077-458f-96b6-a625a30973f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59b1709f-9e88-4ed9-b734-473678207887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ceedfdf6-deac-46e6-8096-0439d8599f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "239dc360-9df4-422a-a395-4cb9a747bbc6",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "524c4aac-727a-4543-83a3-02d02bab0405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e14b3f8-07b8-4469-8918-51ab4314076c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75810cb1-ad66-49ec-894e-e8bf0726a183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2adb530d-a197-469e-b9b9-5bd9251505c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cba6f348-d275-4630-8eeb-f9dd12ef8181",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1754564f-44f8-430f-9d8c-24b0fbb93ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8bf5f1e-4409-41f8-9aa2-e975b96cd1a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5f827c3-443f-451b-be05-7a6f93fe45ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "76c2edf8-8242-44b4-a72a-ec84493e8d07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17283692-3d43-4aa5-bc0b-4f7000f55c0c",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d46443-b15d-45ad-bd46-3e10978c2c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0c25786-8db5-4355-827e-f70b24572391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fea6d7c-dc35-448d-b998-5aad45dfeb85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "845c4add-ab4c-451f-a1d7-3d2532db937f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a97f0a0-f2b0-471b-b736-5044977d4017",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb2b294-a6c6-4735-8b6a-8bc90b92145e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78843a32-9053-4c7f-99a5-441f2da11b63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cacf92e-719c-42c2-8e83-22e46f6d226c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "031d03ae-6c70-4466-b4d1-581ff08a347e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7675525-dcd7-4117-a998-dcdd45bdc086",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b308fb1a-2c96-4b2c-ace5-5c698c62e21f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e6fcc7c-f413-48da-a573-c6fb71455838"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e83f9951-cac8-428f-b06a-50a6d593ebb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e443a9d-8fdd-418d-9f20-e366516901bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed7b1f31-1ea0-4c2a-977a-91954e90ad72",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efb1afa3-68a4-4072-99ca-06879ec72cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2abaf935-b0ba-4bae-a40c-305a9ff65a6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6790ad34-6227-417b-a096-29382cbef717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "169f6cdb-680d-439a-9e77-e8e4969badc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2b3e0a4-d0ca-4ac1-aec3-93efb8b88d48",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "744fb58f-df3c-45e0-b50f-9b6baf5bbf7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d763f4ed-9c71-4d8d-9f3b-4c68f7c8497b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9422111f-4a83-429d-a571-b4da29a90f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "230effb6-3785-49ef-bf53-49f6344f0b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90fb9d85-b806-402c-a78f-84ac568efc40",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b469859d-3167-40f0-94f2-afd56b25aeae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36d775be-0c61-4fa4-b16a-4ae7d8b05780"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89fd5d53-bfdf-42fd-bcba-d504c44e52e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "17f4d68d-1e95-44ba-8ba7-aaf131e192f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a81b47c8-78a8-4585-a008-bc3757853070",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2b69eaf-8fc3-45d9-aadc-d145dec14293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38a7b052-c8a5-4107-8609-433d072723f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a4cc905-efa8-4203-95c8-704a39b31c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1447215b-bee8-4aa7-b4ea-3169c4a1290b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92835c16-82eb-42a3-8624-27e8974537f4",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "009e73e5-c298-47ed-9736-27777874597c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a4f31a8-183d-4d13-8dc5-0cd3197920d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc290c81-540d-44f1-8046-ef6a30a2cb24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa89eb62-e0b2-4c35-a3b9-94837eb61ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "955b10d5-54c2-4edd-af4e-a7bd99ab2441",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada45694-269a-4165-b5d7-50ab54585436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "eea8cdde-cae5-4e54-b4d0-670f7f815046"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c663e4b-9348-4539-bed0-8f97d5e93393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbd8c734-3514-46ab-8f50-10bca7666d0b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f17f998b-e560-4c61-9f0e-b899e2871e8d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eb2e0d91-9eee-4216-9516-cdfe9431b885",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "431c1f87-6b13-4cc2-aef2-236e94f69f9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17d4d179-deb4-412f-a2c9-26e568a2477d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c1bc238-afc3-4907-96f3-2e912fc3c9a1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8853a5e-364b-4d1d-a38e-ab0a093bae5f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "323c7956-3aa7-447c-a45b-42d5b530adaa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "582263a6-1cc5-4dfb-a867-4f481fbd3482"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a17f93ca-1036-449c-bb6a-0a2b9ea9f643",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1fbddbb8-3d83-4193-8611-b74e03bd005c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3a59847c-78c9-4ed3-bc76-92d9c50f516f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "62592ac3-786c-4c89-8746-99d4d8145aee"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "10a50458-049a-44df-b52d-cd8323692dd9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ea3687be-9760-4a77-ada0-851680e89cef"
                }
              }
            ]
          },
          {
            "id": "808104f1-1569-46f5-ae21-8514f06cd1ae",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cac8d9cb-4f43-4b07-80e3-144664db051a",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "2359b483-df5e-415f-a824-5e27b154b72b",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc3974a-b71e-4b6b-929c-c0b55f0f7964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c4f7b8c6-a856-4e06-b0e4-19ff40b4392f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c1d140-3d98-4da3-b522-6da3a4a360cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "705ff68c-82bb-4c73-8ceb-3718fb377d05"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0dad7263-ad1d-48bf-978b-f33d847cbd75",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd1d45c2-6b96-4939-9bbe-a09cf76e74c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0ca7ba05-dc2b-4cb4-a1e7-e55f5f444bed"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb19a77e-8236-44d7-a5f1-85b4d36353e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b1475cad-9f2b-4643-b272-a896b847e718"
                    }
                  }
                ]
              },
              {
                "id": "eb39c10a-7651-4830-81b6-0c2170100d52",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1209650d-e707-4f37-b9d2-5ab4f5fb7bf1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0ca47b63-911b-4c4f-8327-ba51f2270f2c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "54bcf0ca-bd68-402f-8592-9cff5f087f8a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9d97aa43-b43f-48a6-92b0-2f5574de3909"
                    }
                  }
                ]
              },
              {
                "id": "fad1cda3-34f0-4ed6-98c7-fde7ad4528cc",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "70e8818e-ecd2-4ec2-9268-36b3275e1b85",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a1f89c88-bb18-43f5-b358-ebc683576a32"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "786fa6c8-d2f9-4999-86d5-904b5f0566bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0da4fb50-e30a-4521-b5f2-020a8464e14c"
                    }
                  }
                ]
              },
              {
                "id": "30b1b77e-e028-4e7d-950e-4fcc712e977e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "edbefc89-4169-47c3-8240-2cbd804edd1d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aae75f39-3577-4d35-a405-a6affc71c974"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f3a8f7a6-b67f-4c1e-a37e-5697484e6418",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "f84880be-87b1-40c0-8e19-0b1a7c3f5d25"
                    }
                  }
                ]
              },
              {
                "id": "c36af206-edec-4796-b511-698168c6ffca",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2cd38493-c9c0-44ae-82ca-ce701c5c0528",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bb1b4f90-f10f-4925-8e56-cca67caabec5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "60590505-0a30-4b65-a6b2-1342521b9b12",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "63af3bc9-0b69-40d2-93d9-b0636ee6ec25"
                    }
                  }
                ]
              },
              {
                "id": "4e78b71f-c643-4d86-a981-802a35353aee",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0a256fd4-7bd8-4b32-95b8-7b668d6cecf1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "214aeace-44c8-4964-98cc-df2d5e3dc8c3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b5313a8-00e1-4291-8bcc-f084e9e1080b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "941ca699-f557-43f8-83ae-1898aac8bf43"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8c1b5172-db3d-400a-b642-58d6621d6e15",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "33d2024a-7432-479a-ad45-40d7ae605f5f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "79a7c2fc-0c01-4810-b7d5-96dcbeaf7c1a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "129c291c-8afa-4a8d-8866-4f03b3f037a5"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "13661222-3d7b-4bd0-a837-fa0a4fffa416",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "703677b2-eed2-40f0-b5db-88c36be09096"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e1209399-7781-4159-9712-1972e62bc00b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0bfadab4-a104-4406-9192-bf9f5a286b38"
            }
          }
        ]
      },
      {
        "id": "d715105f-9068-4416-a963-97b67b698967",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "6cfa3dc2-631a-4316-ac94-b4a9608ba08d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dd5c4f1b-824c-4a61-9f31-798920585a0f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "536ec037-6348-43cc-b18b-200ed44cf258",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e355b5-568a-4a4b-a174-9897af0fcc48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de91a759-1a64-4059-96dc-4af7b29f433c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e104608-80f2-477b-9422-1c14b532fe7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "38309ba4-9318-4b15-801f-d2c61abfbcfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51a24593-05ec-4946-bd4d-079b4432b05e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "793ce6fa-4fd6-4c97-9132-a66f74e2ccc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12d61baf-947b-4589-9a07-bf59fbdb9725"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45717441-bf9a-4a49-8324-9138806b73c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e98b758-6c76-4913-a4b3-64b7f431a9bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59464f18-8339-4c23-ba38-d5acab1fdbe1",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10692829-1566-4e48-8b8c-7d7cd5ba9b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dfd9e64-0c5a-4b44-8cad-7796b23d1036"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cdee984-2f3b-489f-91b9-651dae0b91a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e805994-d882-4543-96fa-3002cb099afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f892aa-3fe4-4f4b-8eb0-4d49ebc0d45e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c14cc6-f72f-443d-94aa-c2f63bab4684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0887d63a-adb8-4c39-9df8-fb922f70c9ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3192427-09c0-4677-b774-59b70b62f5a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1087d38-52b8-48b5-9f7c-5d70df1b1300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3904815-6526-413c-bc36-75a5980e91a0",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e28c840-4914-496f-9517-fc178716157f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ed6b5d5-59a1-4624-a684-8256c2128a91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47e0363e-f780-40c2-a86c-9d8f4b74472f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bf7f0b5-fb20-4762-b87f-c5796321d2d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e3b5e90-0a4f-4a2e-9b46-31bf939fcc33",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee620f60-42ac-4211-a198-9ae738942bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "948aa606-9b54-446d-87d5-7bd360033495"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0712403e-ef67-42de-9515-9b391ec9409b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "af084c0c-6041-4c04-87ea-4483a2b6884f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cfd7fa9-aa05-40c9-8ff6-68d5004ecf19",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48b9acd7-434a-4b8a-a0e4-35c8bd840ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3a01f9c-9fc7-4184-8243-7a6158fa28d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89424683-10e0-4b18-9176-7b2d01a70fc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d8c04f9-7c24-441e-8be4-4fd65e2240bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84077059-2d2e-4ebd-96c2-44e0be899609",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2442702-2c68-41eb-a06d-c225def340a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d26f9ae-84e5-48f6-9430-c397b0f60119"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ad915d-5828-43d2-b9eb-7b66042c6b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee6e6a14-f3d3-4dc5-b53b-36e68ed93273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d53afe1-0642-43eb-b5fe-9cc9f424701f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d3a774-2a4a-4ff6-a6a5-b02273d0d30a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94d15b96-b61f-4ac1-a8f4-aca1d51db8b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f615661d-9f47-4310-9c94-cd92db1162e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e07829d8-efd2-40a6-9ac7-1a4a125ff812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae7dca1f-7cf5-434f-bf5a-780b1f50de3f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60fde5c-53a0-481e-8915-a82256cbc674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b24f2909-68cd-46e1-a133-4f352650d48b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee8c2e5-ddac-41da-acf1-4a349204073b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed2b76fc-8f20-41ba-ad72-4d620bb526cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8115d28-bb61-4e75-9b7a-489bb207fd4e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc44bd8a-c81e-44a6-a3de-4f379460d8db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b89d6d8d-94b9-49a4-984b-846b7dae3dc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "209059dc-bf5d-4d57-9349-658485a4d538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2c3e7f65-e10a-4950-a078-47a7bce1b73a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910b9b55-add9-4578-beeb-f65e82b99cb3",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11485205-7f2a-4d18-8d8e-e1400a199642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33885733-0d0e-47a5-82b3-70bb121948b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d737b21-09d0-48fa-bd47-6d3a7726b9d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1e0bc927-5d79-4688-9ca5-e5d2743e60a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b621b44-e5d4-4384-98c6-94ec60d63afd",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "676aa312-b658-41e1-8c3b-bfd3bc436595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da69ac42-3e08-4935-afc8-d47af2221ac9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6373b5f9-faa2-4c33-95af-6b87c4e89df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "63fc6246-a0cb-4de0-8377-4d90b4e9ca7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20fad56a-7970-437c-b0c3-43983705209e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dbf3f91-714a-4177-be0e-db63ad9b8e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e989812a-f4e3-48eb-b525-e997466c199b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ed54b7-fca6-4de7-99d1-e9fa21d872ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6415dfaa-4d61-4f9e-9514-6471a24ca090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79b9b45-f9c7-4ae6-bf73-d398b087a246",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53217a8b-cecb-4493-a1a9-cc24a6ffac09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bca870cc-47ef-4cc3-b2e4-f18ef989672d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b64947fd-47cf-4271-92fe-c0c5aaa344a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c603187e-1192-43d9-a12e-4f538484bbc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a424b19e-029a-4264-9f5f-a7cd097503e8",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94be26f1-1aa3-4f14-b61f-e573fa70b20f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d404f60-f9dc-4b18-8b51-e2fb452a4959"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9677c6bd-f620-43fd-9aa7-38c075132200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5b18f2c-d9b8-42ee-9c01-b76d47fe16a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd76bb6-8c27-449f-a2f0-5a67cae89e12",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b0bfaf-1130-417c-a505-a23c45ecfa35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d9057b9-fe50-4fed-b7fe-d2feb7635114"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f99a5235-7869-469f-8021-f1b6a5e40cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b25ecb92-2e9d-44ad-b927-a1452bfdbe8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22418f4e-af65-4813-9de1-d8832e3b4995",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67c2f258-60d5-4790-87cf-24f2c6c135d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e58ab168-1bad-4d77-9609-21cb93d49212"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5886a6bb-a29d-4efd-bde4-9cb2b2c36435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e954df01-3f01-46a6-9054-6621dce35772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb2430ee-22c4-44fc-bd3a-1b8e59527979",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5b349d6-6a4d-4aed-924e-c5d85a90f698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24b15dc3-b0bb-4579-ab2f-a90e8d563b3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f861c9b0-9b68-4982-9905-dad8d00207b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64df2337-a19c-4676-9aef-c4d1af52fe73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2df61d7-0921-49bd-809d-41e3464ed0a9",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d8c4e4-49e6-49fd-aebc-a84e758f2280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c60683d-8cec-4c2c-b8c8-2701d4a6c384"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f87b96-8ae2-4b69-b56d-431366490188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e07c7b6-f75d-45a3-b0e4-b17cfb24ad4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c5d786-4842-4e1b-b833-c759ab6a318f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "430a0cf7-1979-4ee0-b7a8-74cb402e2dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbde14d9-38a1-43d3-aabd-fb4fe1b7857f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06a5064d-f729-478a-82fd-3adf7f7d09bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "073f1f7a-944f-4621-b60c-4b95dbbf8373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f389a2c-adaa-42b5-8760-d1009baa84ae",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef4c773-4e86-46a2-b282-91f74f525aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f79fe60-fdde-4cd1-b4c8-821bc04fd4e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "781419ec-12b0-4dd0-9fd9-999a9ba9ec40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db22a86e-f4a5-401d-920a-60c90148d46c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "305f2787-bd26-4435-91b9-112bea8439d0",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d023fe-c151-4dee-a865-3342a62be1d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4626f550-8899-442e-8d2e-8506f3084035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8644e4-2b64-41ee-81e2-2cebb3b68d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5ef84a4-02c0-4e6d-bde5-f5d43c4141bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20abd968-6d63-468c-be4a-8e4d52ce9b81",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7e261aa-c200-46cd-98e7-f2cd0c6f01a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4802005d-647a-4d8c-bd25-a764c81d0fc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e4f0d6c-ddb3-4482-8365-68f955900c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b9d6d78-c5ee-486f-8cdc-e347d6bdf8df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62109793-46d6-48d4-97d1-0aa6efbfb34c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a18c098-d679-423e-8752-1ad84a2e4584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f7fbb1d-d592-4abe-9cb3-e79810e013c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd1edb5e-2665-49a2-99fe-0508cd856b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9429ed13-5ed0-4feb-bbea-ea43c45b52e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0b878e-3227-4a7e-a41d-1b91d88513dc",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2649f284-c4c9-4f64-9dc8-2239484bfe04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f633e89e-b904-4256-97e9-7cba71681f98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbea6c2c-c089-46c0-a5bd-d35e2ed70cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad4b7d51-6d72-4355-985a-2849711387bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ff511c-a72c-45d9-bfe0-2092e1e50038",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a963a80d-bbc3-4188-baaf-6edeb4c05797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5071a7c-7a99-4d5d-924c-fac8574efb7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d6f85fe-2ab4-4f92-b367-83a42b7ace7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f09ec104-1227-44c4-b8ba-07d316b53d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e0ea0c1-8c52-40a8-8a21-9e9ba49dce5e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bf8da6f-5fb4-405a-9f69-71cfaa4278e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14749caf-ee3a-4691-aef1-5afcfef9672b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "776c04dd-61bc-47a8-8c22-d3a90e873c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "128aae91-7521-495e-a489-ba642896eae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32266ce8-0a0c-4119-8d20-0193f1610116",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "029be506-9380-4cc7-b061-d01d8982af51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7f9719b-043b-4cf1-8661-d18996bf5908"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eded4adb-595a-4d86-a506-4ea0b1ee5d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3c635dc-76f1-4993-af49-df0bbac57872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9452a4c-2da6-4d4c-81a1-65a63ffe4577",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93068c61-f94e-4f62-9f63-67f8e8eea084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7acfa52e-ee7e-44cc-8aa8-dfc8335e0780"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "189e1676-f147-4161-97de-86ca91a0d7c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "12dee9aa-d59a-422d-a8e4-b0febb214264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7119abb5-8c29-480e-b392-fbd3eeda4d16",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff39c12e-3fa8-4ddc-b8be-703cf7f81840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ba39c60-1dd3-431f-84f8-8a48fb650941"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c75d7e-0dc1-4526-9686-324a12346970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cedcc10-9744-4ffd-bfe8-0c3a82cc924d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1181b2b6-e0d2-497b-8db9-180e3d3dd8c5",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee592a34-8b0c-4f44-b8fe-fa2911a10562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "856fc9fc-2e03-450c-a1b3-5ecf3b9d227a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d9eaacc-9266-445b-9d5f-120b65c86821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c23a6ea4-f4c5-403f-9566-a4a128bc4f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8acdfd2f-dae0-4e7c-a559-f705f62b1e2c",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd06ea4-8ba2-4ac7-8160-7bad45b31c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c28cb737-69ca-4e63-b024-346135312dab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83511518-b071-4dfc-b2d4-3c47baa4b8b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90170d93-899a-4f7d-b1a9-adc54d431a58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78299113-210a-4a35-a98e-c64ddc39868c",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f6f7ee-a2a9-4460-8b70-bf3ecdc693c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a10e384-4925-4750-b469-5d47ad5452c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "591791ce-6a02-4b44-a1f3-12cff6f76b9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99fe23b9-f65a-4119-a91d-785e134f6d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601ee1ed-6794-4e2d-8436-61b52333bd57",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e2a8a7-980a-411f-a9aa-61054cbb5668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03e6cf5e-73ea-4695-bb7c-de9ddcd7ba39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1885019b-e602-4d04-912c-6c75dc0d5555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d300706-f972-410c-a724-47630e4a3800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b95e7e-0a19-43d5-ac5f-1911fb903b3d",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec064e87-4a0c-41e4-ae16-e22d9a81f9a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a9b98b6-c716-4f9b-9738-96e9cb8269da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59b67e4b-ddc8-43a9-ae31-13e382d2e546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c724c231-c0b0-46fa-8921-15cd02d8fdfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a70a835-1206-407e-8135-a06514b956a7",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ccdf186-704b-4408-94c6-f9f9010906e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80de1142-9779-4460-984b-bab4c9ff4f94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2d36707-0dd5-4119-81f0-29e50a77a606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11a5fff2-c22e-436a-8760-6cf9f1c7f46c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e9375d58-8fdb-4001-a509-034299651149",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a436f1fe-9200-4273-8e1f-09cb4d5e220e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef47e283-8307-4382-ae5a-9916745d1261",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "facc9a33-6d4f-4d5c-a809-0d4579998c0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8766c65-45bf-4b57-ad5a-4df90000a697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "64d0e1f1-bd46-48d1-8c30-4c83452b1d39"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "40894d5b-e1f2-4211-9cfe-bf427803f295",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4be16f0b-46e5-4850-963d-1eba9a6cb5f3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f58e1f3-fb1f-4614-8d54-4c95bde9beb6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f22e8454-4b59-4020-bc72-10dafca8ab9f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "69bc5b6c-f6da-48fe-acaa-3e9c9e78fe9a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "075b4ac5-b6f5-49c0-b619-0a97ffa1cc13"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "50519efe-3b90-410d-ae5b-580ce300e641",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e92f38a0-25d8-4e32-b55b-f830e84170bd"
            }
          }
        ]
      },
      {
        "id": "58a73161-56dd-46a6-acf1-df54f36b13d3",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "dfac37b4-b9c3-4cbe-b36b-028e03f75328",
            "name": "Negative Testing",
            "item": [
              {
                "id": "97d93d51-155b-429a-ae02-dd33f91bd605",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "272311c9-4036-4a01-b9a8-0a87a278e9f0",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03572c52-afa3-4af4-8d60-38dcea802b2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71ae2324-4686-429b-b70e-4e0d219fb02a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5597ff07-561d-458d-8064-d7f10859947c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6989cbde-c5af-42ab-bbab-db32df0df205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3dead50-4233-4201-9673-f61f59e86aaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0434d4b-444a-4080-b5d4-c726e0edcc03",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c11f429-5715-479c-b6c0-73788de6fcdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c85d599f-7be8-4832-9514-1d03520719cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9119e561-5b57-48fe-ba0a-b0c5697ae76f",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8a4985a-5b42-4c03-b31a-8367cb56873e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7238df9e-d8af-482a-ad47-76a640228760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99da9eb4-201a-41e1-b8aa-17c2bc839d41",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb6fb94-cb6b-49ba-baf9-878621bfa784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5315c315-6ca9-4f82-aa75-395026a08c9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d7ecaf8-5ca0-43f7-8e56-b6e0d5fc5896",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3ab1af3-af35-4c3c-847d-b1cc15027e89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab887ee6-959a-46f0-b1bb-ed03926eef69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27060d86-39ea-49ba-a64c-00d99e24dfee",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc20ab2-9679-4f4e-9638-9a55e018067f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22fd3df5-d4ec-47c9-b319-6b5eb41b8b0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c7c726c-77c9-4e71-b795-331bfe5b7d66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "377f3286-2649-4e02-9a54-77d6f4db78d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "881affd3-f115-4a39-8b6b-79ef6d50cfd3",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb4f3f8-a57b-4067-a6f9-ca9b180da6d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce2590aa-6d3c-445c-b52a-679179ad3f8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4603607a-62cb-4e34-a60a-005efc443927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4323325-b3e5-4787-9cb9-ee62b46493c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87c8e299-7865-407b-b761-151d48771973",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "557f94ef-2d26-4590-9e11-20daab25584e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04222295-f68f-475e-8cd0-c0494b94449e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a8e381-3926-4933-8ef6-fb02ebb4b438",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06ef874a-25d1-4f81-9c09-3696141ecc97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0cbd83c-6b5b-4f90-a4bb-02a3fd0b40b2",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc73b1fa-7320-4f60-bbd4-3fb62c5dfd84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce70424d-51d6-4016-a964-695ab6f2ab94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b0bf98-f7b8-4621-a729-cb836fb20778",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a36e1b8-0761-4baf-82fd-81d255867d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3822c874-ecfc-4bdb-aa03-ea75edf7d20b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f425e79b-b5ea-4d16-b055-e8d97500255b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eb98d84-5907-4ba7-aa91-3db778d4fa12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd39064-99df-4a89-804a-721e3f0b58e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20f08929-a7cb-428c-a0e5-f6742791a25a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9030f481-8752-47a6-9cbe-211db3228f6e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f196b63-59c4-46f3-9b45-6f079e9c7908",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43c5b1f2-f211-49b7-acb2-899fb78f3bef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a2cee6a-47d9-435d-b02f-ec6719a4a7cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5025329f-67c7-4a54-bac8-3eac306e55d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4945292b-f6df-4701-9f86-46c0dee8f0bc",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eda263b-2a26-4ef7-b50c-88884b407315",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b25ff3c-a18a-40cb-ac79-4b7dad6ad4fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e6124b0-181a-49f8-a692-c8e226d358ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99e72e69-3d07-4908-b011-116bf4dd9f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9620b9b1-4ac6-4f7a-81ff-d63fcb58b4d9",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9681d93-86df-4285-899a-19bbac1fdc1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b520085-a3e4-4d87-a3be-4f7d747dea25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82d8e4c-cb44-4ae6-bfdd-fef5a1942f18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d90326fd-a33d-4832-801d-837a30856354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb3f05e-ec3f-4a3b-9969-74d228208757",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3353ec3f-0f36-46ba-bf62-d3129120c411",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c767154-64e6-4dc9-b4fa-f7ab1d7e8d5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cc6852c-6181-44fc-a07f-3869ed150b6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b206dee-1592-49bc-930a-5ea1f26cb66a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53460adb-c62a-415c-a820-0ecfbac0c222",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5adf256-4a24-4809-bc04-12418088d618",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba244405-4fb7-48b7-bd8a-2a24a75b7339"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d95f11-7dc7-469f-a59c-ab56dbe44ea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "618f81e5-88d3-47bd-ac13-b1c755171713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6297ee89-ae01-406c-8d20-15ead02b3223",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d49a371-4272-4bf8-9fb3-89f1b2e676c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc3333df-8563-4213-8878-c7529e09df56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a5abe6e-86c0-4d6c-a7ab-c93be7e711b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9333378-b729-4de8-a047-ed21316e059a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "accab43f-a7ba-4806-bd90-97864951104e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf55298-cca2-48bb-b8d1-a33963cb913a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b194eb8d-6e18-445e-8030-30134a838f70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48797009-e83a-4bae-ac9d-010027363658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52970efa-2004-47b6-a4ae-1aaa08e434ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0674b38c-3c7a-413e-992e-48ee7a0f6d9c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44ee9ecc-cd62-4fab-b7f7-69b7ca2ab8da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6dce775-fb24-4156-b6b9-0486ee41d0b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5945fe50-c83c-411e-ad3d-5e9e0f91287a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a6ce42c-8128-4b5f-90c5-3e1c957d7aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac136b8d-002c-4b5a-9c96-b28d5769a05a",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "523b3c0a-0c3d-4676-a82d-6f5cd55f748c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94444ca2-e74b-4da0-8dec-b064184607a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdf59813-f5d2-4fba-b38c-e99f78c11fca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "261a3af4-64f4-434a-8f92-ea7af7ff0b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d031c1b-5aa5-41a5-aa7f-1c6997b28d9a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff87bba2-5038-4344-8d1e-24dfbb353e55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1af2bc55-2d80-40d7-a737-fdd410dd310b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef76c05c-c59b-4dbe-9370-17d88dfe4c62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ead620b8-4381-4e37-854e-ea54801ef0d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "603ec4cf-d969-4943-bc21-696057accb69",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0960a8a-b811-4437-85c5-3ed640959344",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b721ae84-fc4e-43ca-9631-aacf7a0b91dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88356d1a-2290-48e3-b809-2e0085a24cc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22afadea-e018-4ec3-ace3-e84a7ad1ef20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a993aba-50ff-480f-8218-007d21667442",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea760f7f-1e39-4d26-ac60-31ac620c9766",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98359e8d-1244-49e4-a88c-4ada442b0f6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d4d06d-7aa7-41f7-9037-6c6ba18f0e3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebb5862c-a1a1-4156-a9bb-7f1ae4473153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26990d75-db68-4fdf-97dc-3e26c54e6713",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afb50f7d-f470-4a05-9157-9eb9e22c32ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee4a26af-af91-46cd-a2cf-4732f952fbf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22ec98e3-04ce-4780-82bf-cf76a907e228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e295d8ff-95bf-4ed4-8195-d1892d6d6036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dc61af8-63fb-4274-815a-2c9b57f1bf4c",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80160c0e-bf47-4055-87af-089fb8e338f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af6cd216-7bee-47d1-b2a7-96bdc7fcc969"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b697194-16d3-41ab-a051-97a3912f5992",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae2f351b-2b54-4991-8b25-42ce44b620f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5eeb978-d877-4d49-830a-09cde504b727",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9349a6e0-f8a7-4165-bf2d-4b9bb5011af8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f730ad72-c668-42b4-aa80-83555a5f7ed3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c68a4c7f-21d8-4673-abf9-8d572a465669",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99511b44-2818-4ddf-bd8b-dc3d0a0b4e78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b201045-594b-46b1-bb03-04bc0e5d1a0b",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0422eec0-f4ba-44e7-a7b3-e1b8c8d67993",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79b5cc1b-ed2f-482d-adb7-ba8f1b23fa61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "103940b8-c1a0-41f8-969b-a176f727e90d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04b0a100-e77b-4b7e-a62d-49b3615734c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f86dfc87-0e21-4790-9192-894b5a30a9c1",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45bbd74f-30d6-446f-9840-b7f318ea3156",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92d969ac-bff8-45e7-a866-d977d1fc3d69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "762b664c-c8ac-4efa-9408-87716221d5c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "256fb3f7-1b25-4f84-8475-ae8cbf06dbd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a4eeb58-1ac9-4f89-be33-d10798b5312e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5582339d-3174-4ac9-b9ed-5327d5961753",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59b5a97f-e0f5-4e0e-9b53-edb2453eea16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8bc5232-c5f2-4a9a-bbec-a8977af9345d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf23729e-300d-427b-875b-3f624a32e555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b07ebd01-06d3-4667-b23c-421bf8df34c5",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38da62f2-a755-40b0-9aff-0f4eabf4172f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f37e6252-a808-4628-80d9-5af700a4596d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c4c391d-44cd-43bd-bc59-9c1b41befef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dc0ca17-06e9-40cc-a7e7-2a3eaf27b8b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1df62c3c-9a13-4cb8-a279-d621c3d59a97",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d6161a-8831-419e-b82d-164f8ee7f0b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e72fc1de-99b9-4de6-85b4-e482172b23da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6574a549-6217-49a1-80cd-26349e41f9fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6a1c2ca-cbf5-4cc8-a900-f36a7d650338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f93b6c2-6d60-4a34-856c-ea592f19f576",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0026da1-b77b-4f28-b4cb-5116056fa296",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fd67a12-5a0c-435d-843e-25a99486e883"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34cdb33c-9d88-4f29-baeb-3b7b946efea7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f64cff64-3ea5-49d6-aa95-8695768ada79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08df06a3-62fb-4c1a-ade4-f866910eb9b7",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2293f042-01ae-4704-8b74-14b882dc3e46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fbb8f3f-efee-4304-8e11-28d24d39a69f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11e4d600-32ce-4436-b610-e9cbe2d4e934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a0fb415-95e8-4351-b451-6e4c0d29af60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd8a034-ce71-49b2-80a8-7c6c0bcf8553",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3c8a35a-e35c-4187-9572-ee7837ba95f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d36ec24e-2f2e-4e73-bcab-7388a7fd56ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f234917b-c99d-4f07-88da-5f71df826b0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0f3963c-f13f-4b0f-a051-3693b934da63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d8f893-f883-4efe-bc95-e478f3326eee",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7192411e-6db3-4f8a-b3b6-5e636ca2bb7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c09cc4a-603b-4498-9b6e-28d7df300fcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d1bb3e-24b9-4edd-a084-8b9d43174fa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "005880df-83b9-46be-b6be-4ab95a0c00fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea78416-7f33-4001-84ad-460759e979ed",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74b8fbb6-7b74-48e0-853c-33550b4358b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bd7026a-c40e-4b44-bc93-196d35d66928"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da3a552d-e321-4413-8e61-852bb02c1c75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc4f23c2-0c52-4a85-9141-326611df5d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6911d66-a70f-4d32-a169-4a0d0eb9cb33",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae8c3147-e037-4613-b81b-38a16043fbde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "109b9ea6-00c2-4966-9547-c31c5e6c3207"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5ccc00-6404-465c-92b1-ea5838af0d9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9a88931-e634-4d9e-ad5e-bf1e05c09da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae8c58ed-652c-44ee-9604-9fc02b6d3bd4",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47004607-9545-48c8-a21a-7257315637ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ae75fc8-61d6-453f-8615-5647760f7e4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0eb5d6b-4130-4fb7-ae2e-ae34fa46e542",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b02f951-bde9-449a-ba15-4b29fd81bf88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60feb95e-f291-41df-8eb7-f83166c3ff9f",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e872614-e71f-421b-afb0-381304d0c5af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee345652-786f-4e69-8a5d-51db8b40bc6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d2bfc9-99f5-4a66-8ef7-d596ded06d56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c58fa6e1-9f62-476e-b1a4-c8f3826c952b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb3ecabb-87fe-4d10-adf8-babb0279b6ac",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2cea4b7-08f1-4f57-acdd-211204abfd04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "478601c2-2bca-4dd4-ac89-c64fafcee615"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d5878e-363d-4904-92f2-3f24a67421b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8df9dd8-de7b-49e2-aa9d-a4268703fa7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c7b9c7-d1f1-4872-8fbb-af5646ef2cd8",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de3a128-2995-4817-853a-287e30d7228f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2fea700-3a8d-40d3-a794-b879e0a03b48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd42bb6-69d3-4801-b254-52ca70815198",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e0cdcba-708b-4157-86a2-4f3747f570f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf33104-0089-47b5-8130-c11b4645203f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a49652c6-7e3c-45d6-abe6-0ac8e912a9ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "877f548b-ead5-43b3-8159-ab1c87c07004"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a8b6d9-4b3d-4189-a3e6-366c58277a30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "937f890a-0055-40e2-b905-47959bfdab7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6293b4fc-19a1-480c-8333-58bd202d528c",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9425c16-2d0a-4d1b-929e-7f6014b31b9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "767c53b3-a96f-4daa-ac4f-0bc515a8dba6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f9aa6e-a5ce-41c3-b24a-96891ba23f7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36edabd8-10ec-408a-a86a-ce434b726366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "319dea8c-9c24-4159-a911-84e0fb553654",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b0732a3-bb82-4ec6-b409-47740fa395cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d23e110-79cf-4119-85fb-909d050d684f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef96460-b9fd-4fae-b371-8c9caecd2c17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72773098-61ef-494c-92cc-8ac5aa2d3393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc025979-b3f0-4953-abae-9a02c3ea0a06",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "118856c5-4e4b-4121-9d27-83fb004c7c7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "998576db-ae39-44d6-8c22-a328ae08fb18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c28fb5-92cb-4d52-b508-b0a4f59f0f78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aa5b34f-7eac-457b-8fc8-af81c9f22ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7539ca56-375e-4f4e-bbc7-88f40ee23cd1",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97466ec6-27ef-4f6a-b26e-39654860bac3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8838287-2ae2-4d65-a171-dc64ceab7799"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b0ce608-855c-4dc8-9194-caabeef09889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "665e69f5-0d48-4959-b3fb-5c58047319df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "592a1471-d427-4b2a-a351-f91b5b6cca01",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63d585f9-022d-4173-bb3c-9537dd4c9632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d93f9739-19a5-4910-9307-2c9097079289"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71dda65e-74e3-48ae-a134-d530a336f7d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d7e53d0-b15a-48b2-9f98-02dac49c89e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "074958b9-af28-4872-9f43-74fa6b12472f",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cae2b2c-dd12-40d6-ad97-bf620df38de9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2485213b-1812-4ddb-b8a4-bc5968ee87ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ad0733-cd6a-4266-98c9-c926094001c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22562c94-5e25-4379-a800-a34b81991e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79ddb3cf-cdb2-4029-a008-14b40f24352c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e0e389a-68a2-4c1b-8456-f50cc372d1e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eb8bbd4-7864-487d-93cf-c3cfd2d5d037"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acf87fe1-c2a5-4edd-9cdc-1102c1e1e048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbf99b67-5825-4754-af5e-1248c0beb580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d5c9b88-4d68-4950-9e99-fb289c0f656d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e91b378-542e-4e93-b636-ec4de53fd68d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2d18ea8-b7b1-4aac-9884-66b1a40932f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e97b3b-e255-4754-a946-0ea7ad4f8779",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02da8403-56be-4327-b58d-4e24ce26d40c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44e88d14-b62f-4154-b382-9ea49562aaa7",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b534699-2f94-41b9-8c72-83e951c585e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0663507f-4e41-49ef-a26b-558103d10c32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "161090ac-a01f-4b81-8ad6-c4e97805f24b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e92b582-a75e-4a9b-9a09-989f3aacfdb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39eac2e1-8b27-4078-9aee-eececa43733c",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f1fce7d-3ead-43b7-8e27-7d6c031c3068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a22e2e4e-920c-4b4c-a7b4-cb275c63f1f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec52d29-7755-41d4-973f-1b6a44deaa12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3754b88a-5575-4954-a041-a8b146c795bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6be0786-fe43-4d1e-911e-a7e3cc6ab96c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff81248-e4cb-431f-93b8-3292565dab7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0decca6-8071-4bec-b2e7-97065feb15f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bc96006-d47d-4821-9d1c-35149e1d9cb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2772d3eb-62b4-4e82-98ea-5950ae29db23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d55d0033-758f-4e00-93a6-80cb6d870682",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ce14628-e404-4432-a282-845c51000375",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2065f3c-dcf9-4304-8090-c08079c86a27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf7ed91a-cb8a-44bd-bc16-b92394e05e12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0990a7e-50f7-4a69-bec0-9935d56f06d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b9ac00-5d18-4437-81df-298fde33ec00",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c804726e-41a5-4f1e-8756-da965e8c3d1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e52fbdae-a59f-43d5-8dfd-33da8f7376f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5dc29b0-ef46-40f5-b209-11dc4ab352bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e671e82c-0706-4517-9078-30b67aba6a72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aee2a8f-70a1-4dfe-9306-d3c737307fa9",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "492b10cc-854c-4f67-8df2-26c7a8406e4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0598656f-9be1-4f7d-8d34-cb3e2363e506"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "535d1c79-d304-4e0e-a28b-cf4f8ab779e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66dd8b58-7c04-478d-bf6a-b888e24fb78e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30391ceb-dec3-4cba-ae08-970e3c1f1a68",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84dc7896-a34d-4cd1-88af-d3db3290f017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3488c05e-eab7-4b06-b87d-7ae9d3a9e321"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f919ca31-8fb8-4c38-9e28-9500998e879f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d794eb32-57fc-49e6-bdca-fd1eecf303c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a52c63f-6078-4905-afa8-d4807c0b28c6",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9510231-f6e2-495d-b839-c31e52fc7062",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72ce8404-fa65-4924-9207-dd23d87d7e04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8692267-5887-4f3c-b18d-327d5e962197",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a31e494-7fad-436b-bee9-e4e1706e2fc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "354fd9ac-ba47-42f9-9c9f-2ba89a37d61d",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc4fc4e-f029-4128-b865-656aef44df08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3df3ec91-1ea4-4789-9d90-f352eae01627"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1df2b7c8-1a71-4be4-b265-25e092766166",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee9c784b-07e1-4204-b882-52f386be5c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18fa62e3-e4e1-4aea-af56-1c0174dfa61b",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee8e56f-76fe-468c-9610-42915a78871e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ed6ff1e-5107-494a-990d-e062b687a48b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a38a05-70f0-4bfe-94d1-b8220988de40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf968981-3ade-4196-a970-a68ca85623da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf392d3c-d8dc-4e70-91ad-25b1ac83110d",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e0c5bf-1ef6-4b08-ab04-2879bce5d2e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fef12bb-4a06-424b-9c2d-3643d4391c63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf037ee8-0b8c-4d7b-b7ac-7fc61d4f9cef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2793d445-22f8-49be-94eb-e8428c32c1d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01dbb224-b44b-4d53-b81b-bfd52a383226",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db94bc01-03e8-4544-9c06-bfbcf2b7f886",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cd36e9b-3b82-464c-8280-8103e135b5ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51dafba8-bac6-4fb3-9502-9d8865bb74b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d073b6a0-3aea-4176-870b-a7cf32ddf8b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a3d4d2-4cd9-4009-9625-97e4a6137b4b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d35694-8b33-4b62-9cf0-2ddd013d8833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28ac6cad-f396-4684-be93-8a074d648a8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7c5957a-aa6c-41f1-87f7-8984abdc1bcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9034a120-2147-4469-ae38-32bcdf03b9e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d8b05e9-1cbb-4836-bfa7-ed80c4783c8e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15dd0ee6-a396-4ceb-8145-cb224ad9eb24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54d6bb70-8c22-4a26-8ce3-10a5a518257a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf3293c1-5634-4f36-984a-d0006d3d0e03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d27bb697-df88-4ec4-9ce8-d78ab16c9c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "457d11da-3a53-4913-95c3-f5777ab2ac69",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "536f46a3-043a-49aa-bccd-de59332b93d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4b18db5-2286-49e5-a68b-27bb274d640a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "414dd3a7-afa2-4c87-8906-7485d559766f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c8898e7-34f6-4da8-b3d5-5156f72e3023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0adaba2b-cc40-4f2d-8b03-9c20bf30d833",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef30b499-afd2-47b5-9093-41f733be9991",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e578eff2-2595-4322-b823-19c0bc6dba5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb7588dd-e9ef-4cea-8146-5fadcaab4ff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c075f153-916c-43a9-806e-8c96028391ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d0f78c9-be20-4694-8115-9fc35b8e271c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ab34c2e-c0d0-4654-97db-10de5fe20606",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7405ecdf-f205-41a7-8ea3-726b73459eda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aaf914b-9e26-487f-9f52-bbc1dcd6a2ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bff53376-302f-4d51-8d02-33c752624f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87cbbfcf-678b-44c0-9231-376bba2e17a6",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf5fbf0-491e-4fee-b413-ea45ce5d4708",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "153ffa6d-2db9-4c83-9c26-46a4793d4a58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5575dabe-cd70-45a0-af53-5aebcb65142d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebd3918f-082a-49e5-9c22-868990184373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b585fc-64b5-4c99-bcc0-618047469dcb",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a70783f-4a81-4528-9e9f-5445dc0c9b6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bab278b-612c-4c74-aaa4-faa4b740ea8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e555da-69b4-4416-9aa7-2f3532bafba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8786550c-3e80-4c67-b33f-1984c8e9e28f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e512928a-6806-47f5-92bc-8e5681649c98",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "266b996b-f5e6-4fda-8552-af5d9ca2fab3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10439ecc-95a8-406e-93da-f8898addf4ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d781aea9-d675-4de2-bba5-f7388c1e5d43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c06299fd-2496-408c-bfb4-1fec6d6587f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "124c33c9-c281-4f5b-be7e-90b65badaff4",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e21cfb4b-4825-45a1-a919-7b34a0b9d686",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62fed186-d28f-4350-851c-c84a3228a29e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "670eabae-2516-4ebf-8a18-436e34edea83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b89e5eb3-de89-41c9-9600-d1cebdb6e008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab2ff4f3-286f-48bc-b63a-57a045ba35ad",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8bb8b5-a49e-4b90-94ae-1a8684617b4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8664ccdc-1be6-42a4-8dcb-e726d543526d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b7c269d-2af0-4536-8878-ce2300856cdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b8f0c49-91a6-4c01-a9d9-9c14bf4acb6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90e99554-18fb-414f-a5e9-d04f8f73d301",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "155db9b5-054a-44d0-b63c-ea6dfbb14d2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b908ac44-e2f1-40d2-9b69-2d9c6264b1c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e145c133-6e15-4b98-9217-3ccea77f431c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "878738af-f555-4647-a1dc-228bf36cbc74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a05d67d9-9d92-4c42-a0a3-956cdca67a88",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94987f34-0497-40ad-83d0-0d5149185e3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cd102a5-84e3-4b02-b668-9266bfd09d93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97046362-1474-479a-b472-69a97219f35d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e4ea166-2b92-44c3-94f7-0a7478d3205b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55c3c0ad-dc87-4fd8-8116-590f9cacb126",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73f56c6a-c8c9-4b3a-868c-3db3d8099fc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14a932b2-d5b3-4e4a-93df-6d6ea7c5b0bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed4fce4b-cca9-40a1-93d6-f2fcb8abaa1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d24ec5a8-951f-4659-91e0-119a2e561b44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "744a58bc-45b7-41a7-a227-cfc663fdbde9",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61658772-5f63-41bd-9fe4-8b8879f28090",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "718eec5b-c4cd-44a6-b3be-a5b2d5751a46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a2edfa-8df5-4352-b7d4-cccdbd79d502",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07273a91-7700-4bc3-bd3a-37dc1f4777d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f10d8f41-a98e-4d96-9355-1ff832ae39e1",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b449911b-7424-4a13-94ca-ec2cec8ce194",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f54c687a-9660-4550-a483-649e20db9234"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cbbdf1b-e630-4b56-ab72-229a209bafff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f46c61de-28a4-43a9-9450-4564d6912680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5be7ad6-10cd-4468-b8aa-3a32d1d7c796",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c245e86-c52d-4476-b525-1687db74c7d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c54fda1b-acf2-45a0-9e7f-52da31f55a2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c46215-b3d1-4c9d-9ad0-daf0b5a64d16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "982f89e7-db99-46f3-b136-93c6816464de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bdca532-38c8-4612-af72-af3bbd8ebe3d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508bc78b-860c-4555-9974-73e910b4f59d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bfe5784-fccc-49e0-88b2-368416593cbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27f38e9b-775e-4460-9a8e-db62daa5dd4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d272ac0e-25eb-4764-b42a-dba00c287566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "130fe142-432a-4b75-9a15-88778c33e2ae",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ce2e8af-f412-4851-be2d-62085493465f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9eab0212-77c4-486f-b7db-ef4e8986a387"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c6e234d-7390-496c-87da-030726d836f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16d1ccaf-8627-4ef4-a901-3a4754a74131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a2e887-da83-4e99-9680-b484be3bf1b9",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b13ff11-7b63-4368-9e97-a93ae91f39be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca3ef39c-9d4f-485c-ba1a-658aa83a12f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbd1a0f0-0e98-48d2-9b3c-126e50f0507f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e14ff0e-1afc-48e1-8c3a-e83358ec2c4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5590bf4c-80d5-4f70-a5c0-15af9f4cbf8c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "988c4c5a-0907-4bef-9572-e1ee6f310710",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7da1a7b0-3447-443c-8d5d-b57ecb2d35f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "133badde-e49a-4f52-b5bc-c250121c907a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22d55858-89d3-4c42-90af-4cf07f8341f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "640a2ff9-88b7-49a4-aca0-132551d556e1",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93077ffb-f42b-4821-b6d8-aaf1aa74862a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2002a63-e77f-45b7-a702-66f817e85d57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c87a48c9-9c36-4c30-8d5d-612acd2ef0fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "481f40b1-c2c8-44b5-8e21-8574ac2363cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d34fd241-a0b8-49a6-a6c4-17dcb90d4d10",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf73d3a-05d4-4965-80a9-cd54f25d6e79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6063fbda-818e-41db-b02d-012d4777ee5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df9d20e-8a2b-420f-9a11-e1df4dee8059",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e698127-cb33-45a3-9d72-4c098ad321d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b74e212b-b946-4bef-aff5-27777f63b6ca",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83995b14-af27-4a68-aecc-8d57236c7e88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85d462a5-2151-4731-b487-910fa7b81157"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb80f33-20a3-4960-a546-a6877926bdfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "957332ef-1d3b-4149-a2c4-97f820219f14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "508e848e-6a01-4ca8-97f6-511e063a9c8c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46ddba7b-a6b1-4283-8673-237cbc0df315",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21dff6ae-b834-42fd-9a82-00c734c0b912"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff88f95-c4c7-40c6-a429-fe3c76891695",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "896748d9-c696-41d9-a913-7299e59a7e59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab24d669-1979-4635-b781-cc0b6ec28201",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9949bba-7add-4e79-bbce-218d10026562",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16d20c0d-b887-46ff-90b2-ee876db382b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3afbf15-e511-441d-b810-d361dd59336b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "defbe0c5-c2b2-4fd9-9fc7-b05029af94e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7364d468-1aa0-4484-9090-890bdca97136",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2753ca21-3299-482f-a789-c7e7aa1ff720",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3895418b-4020-4feb-b822-7aa8c754f709"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f67345-f133-484a-9850-4324a90ab264",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdd5842f-256e-4ace-b889-4b2cb835cc2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ec1411-5923-41c3-b445-77f13fc0a632",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd3c229-ddf3-45d8-94ea-1642b4ff04e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74904efb-2c5d-4817-b2f1-ccf71c4fc388"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1997d19f-61ff-452b-a762-b2a4efa99d67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49b127a8-3eba-4d53-afb4-c70b11207b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c9b9103-1b0d-4f2d-995d-534dace9315e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e42a7653-8846-4789-be4a-fab4d05f6c78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab704054-4bc5-4988-a448-3f6431889137"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7684edd2-c33d-4558-bd0e-3786c731c4c0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c839c661-0f4c-4650-a75a-237eddf3ee61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d38b03a-be3c-4064-84da-4d4cec1c46c2",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a87edef2-3477-43eb-9eeb-8687a0f7a54f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "566ae86e-69c6-46e2-ad2a-59c26de01f7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a8fb848-4fbb-4c28-8a36-085e7ef42096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0badaaf5-fbaf-4c0b-83c9-ad4c776f84bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b799c4-5bf0-45e4-9b34-5f3f476b9e3d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363cdf54-f038-4d85-9304-ef18279fc850",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2aff3669-ea57-4eea-8196-8fd1971ef0d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d447492a-2f0c-45a1-b61a-344c6c8c4b44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce95902d-d83e-4346-8e7f-b4a800d373a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09344d78-9962-4b42-9738-9c2213edb020",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22099745-7701-4494-83d0-0ad207c03289",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48d18118-fa01-49e5-b522-6032a8463ad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77363fb0-57ee-448b-a620-03546a455d8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbd194ce-03f8-4c5c-980f-7d70fb1e80b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c1484db-28af-46a8-9295-82a4b955ea8e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54cd0b70-fa5e-45d4-9815-6db687081c9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4dd9047-4a43-4f37-916e-68a885cabe4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e4be4d4-2d6f-408a-9737-a508dbdac830",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cbc2eee-bafe-412e-87b9-3a8b4e653ebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "170b13de-872b-4205-ac0f-d293c4535435",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d2afad4-116f-4ced-9764-29e92ee49b96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a6a28f6-5924-48f8-980b-0cf7d964f7f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00622f29-3e0a-4d82-bb40-f4771d32e145",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ddfdd08-d1d1-4f87-a47c-0e4cf263004e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c49f085c-bfb9-4936-8604-c24fac06ff47",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebead4ad-2113-4fd7-8e2c-568060f0b148",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be60dc17-9e09-43fb-8382-2d0337d7907a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6be83d2-82ec-4ea8-af02-46839bb4efc3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "409eb192-f497-4227-98fe-de7a55564c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f76f83-9d28-4f34-9073-98cbcd753d58",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26959981-ee0b-4fc7-8f91-8c3e2b5a9768",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc723aeb-19c2-4e33-97a8-d06b3276c9e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc0179b-9038-4585-ad9a-297104958332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd37ddb1-61fa-43d8-94d9-bd196734a0b4"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac9a77bf-99fc-4681-b534-b73452009c14",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "458f2340-1441-4b98-84da-2c122fc154b3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1647f6f4-672e-411d-bc91-6a1d42858635",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a9529a19-9479-45bc-8f97-2258d9c35fbb"
                    }
                  }
                ]
              },
              {
                "id": "da86b8b2-1209-4ce8-955e-b3718de2d495",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f98ba667-e318-4e68-a64c-c90c800030c6",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0394a055-4cb4-4eef-9cf2-062d59696b87",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "18726c00-5e06-4ac5-8587-68d94bdf3eed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba11b64-d705-413d-a70e-5f6e886d2cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4adeb351-9094-4130-8068-389348bf6fa0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df2b9006-9b0d-4295-a94b-166a1baa84b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dea8baf3-b87e-426f-aedb-1a765b3b3d73"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "13119a58-4d32-48c6-80be-dd937f0f1051",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "88981acf-44a4-4b73-a430-7ad807bacadf"
                    }
                  }
                ]
              },
              {
                "id": "1f545c7b-a821-4440-988a-3d0cfbcbc333",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "5c00f136-5f78-4dd7-b3bf-a9f63b127339",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec2ddd3-02d1-43a5-8579-bc8221a2453b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "0d26a54b-347b-493a-8663-e5bf9acbfcd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ad645c-9fff-4c3b-8961-21f2df59df21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "696dce31-6a4c-4393-b4bf-0bcb46a5f470"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7154792d-eaf1-4d28-95a8-1e88f62d9746",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5cf11f84-8dfc-4528-b41e-57165d8da262",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0864f322-3725-4d95-8c36-9b31fe7f3a91",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b4103e2e-da47-46a6-91ec-6c73b51ec56f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45a5b23d-28ac-448d-8300-3c565f4e55bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a370b148-72ff-44d4-94e8-3f7b1d0a7438"
                    }
                  }
                ]
              },
              {
                "id": "7f513566-41e3-4501-94bd-b58666968397",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3403278f-b44b-46b8-a847-5692bbfdfd04",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b177a6aa-6a0c-4b1a-a244-dca9ca8cc17a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30ed097f-3440-4457-97df-80ea8316ea02",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da703d6e-a24e-4395-a333-5a9ff8e53e76"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a68e24a0-6af2-4977-8d5d-0359a3fc6a7f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "fe94ce89-a48b-4098-9219-c7c46ef7957b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e6dda142-abf0-4616-939d-1c71cf595ff9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "71d73c91-31a7-4185-a9fd-edc868f54f7a"
            }
          }
        ]
      },
      {
        "id": "76107f3a-a07b-4911-b464-6af02ddc8a04",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "bd21eea4-c290-45a0-b8ae-00919f65e00f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "13a30dcb-04bf-4120-92ea-ad00dda4aa9b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3316d6fe-0ada-4352-893d-db7ec4249f84",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3249ffe3-7a21-4b96-877a-dbe41f13b771",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "090aaa01-d5f2-4daa-9462-366f777b7b88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c79dc9a-45f2-41ea-97f9-c90beb008e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0fbf705-a2f4-4c61-b65f-f7c6183dc916"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ee8dfd3-f8cb-457a-80c1-0bb035afa2b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ccb4711c-0176-4ac7-b471-50870c734e05"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7eb8c9ff-f383-4552-8aa7-54798cd57e49",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7824cdf8-26d9-487d-a0c7-3b2154b78870"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "07f683ea-e9ec-408b-bbd3-076433b29e03",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "201c97af-0f23-458b-b167-f50635f33d9d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d1a8633f-cb2b-4013-9ec6-3d33442ac55c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3ac73d71-0303-44ee-b6ef-124b98f87b7a"
            }
          }
        ]
      },
      {
        "id": "4e9257c0-41ae-4f4b-be15-64908de059e6",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "bf8dbeee-78a2-4b62-a8c0-d04ebc067f5f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ef7f61b1-0e52-4455-89f7-4851b7e016ae",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cf5807ae-3dbd-42e9-bce5-136001eb6d77",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7acf64db-391f-4200-952f-b77a6a55b102",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d29a339-86ea-40bc-98a1-4ade3196a77f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "870d196d-a735-43e2-90f4-91b0467ce558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c2fb678-9c88-46de-81d9-52a591ffe78c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "90a3b416-276b-4e13-b297-17738594a381",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ae08e6f-e48f-48e3-a1b0-d8c5118d71b6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dff38f3b-9f61-49d3-8b74-62e400bca471",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d59d352-ffa4-44dd-9dab-9729edf2e1e7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "41859ff6-3aa7-465e-8f69-a313ca5ec305",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b5a60c15-b8c2-4952-b075-083c8c5a436f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bf113631-e541-46f2-9b65-9ea0b40a27b0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "91d8f542-5cb1-4d66-811c-4f7555f08ed2"
            }
          }
        ]
      },
      {
        "id": "cf7069d1-ae92-4470-9251-b8ad92541433",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3ba8b264-b86d-4e26-9df2-bde17d4e0697",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fcef761a-8f2e-4f21-862b-f91890fb0344",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8ee1db45-74c4-4982-ae99-f717515123a0",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f99b13-41a2-4a83-bb2e-561ee5050ff1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7d73ad9-8439-4002-9ce0-2e782fb72a56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d30a9f3-20f7-4bc7-a65c-2cc6b9cefc95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fd8c7ca0-af9e-4007-b20c-97e6d83a184c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a177c059-82d9-498d-b7b9-ca99b7e18c7b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cfa72e57-c7ab-4d52-b444-f484faa265f5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "245ceb5f-97ea-4df7-8dd6-2f8742cd5b0d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e207834d-8057-4257-91cd-6809536fe901"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eb6d5bbc-d017-44b3-b65c-eac837053bf1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "339a8fc5-54b4-4dc6-950a-7e488502f607"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ab653924-248d-42dd-8b69-fde32169b825",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6c15dd6d-d580-470c-b4c5-a04e0d79a384"
            }
          }
        ]
      },
      {
        "id": "81941f82-fce7-4771-a957-6ed4b1a0df1e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ccd814e4-3391-4a5f-baad-dc18147e51e2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7a97cb93-ca36-48b6-91d9-f01ac04358d4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e148ba00-62b2-4b28-9f0e-fcceb4b06875",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9a100b35-2fb3-41cc-a45c-4911a367fb22",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "184b0ea0-8c93-415b-9848-e9b3bbc4989c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 61.44841269841276,
      "responseMin": 9,
      "responseMax": 899,
      "responseSd": 97.58928206350826,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1713573295120,
      "completed": 1713573318896
    },
    "executions": [
      {
        "id": "b2594df0-4714-46ce-a4ae-e52e4994f949",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6c235bea-a119-4d42-973e-ec7d2dfe0653",
          "httpRequestId": "2bc2c319-3abd-4a09-9fc2-f2c6bc1c7791"
        },
        "item": {
          "id": "b2594df0-4714-46ce-a4ae-e52e4994f949",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ecc8307c-f388-4e7e-8ed0-9d3d2a26ee4a",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 0
        }
      },
      {
        "id": "c64b522c-202c-4ac2-bddb-4b7106f85625",
        "cursor": {
          "ref": "742a4022-0ce2-4fb1-a98c-7c5b97bc6bd6",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a99fe83a-ddb5-4497-a7ef-567e17f9201d"
        },
        "item": {
          "id": "c64b522c-202c-4ac2-bddb-4b7106f85625",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9c8dd339-f65d-4105-9a42-1a88d2c1dcd0",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "052effde-24a7-426f-b9a6-359d48e6acc7",
        "cursor": {
          "ref": "6a4d0e26-9336-4386-be43-07d8eb95d9f8",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "353817c0-aea0-4222-bd4a-98e91620f8e5"
        },
        "item": {
          "id": "052effde-24a7-426f-b9a6-359d48e6acc7",
          "name": "did_json"
        },
        "response": {
          "id": "7e70c4c9-d61c-442c-9af8-44e3309fded2",
          "status": "OK",
          "code": 200,
          "responseTime": 221,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13ddfd36-3628-436d-9848-9f414417c477",
        "cursor": {
          "ref": "05cce1ae-1b48-4e71-88f2-90e04bff7cd3",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a9d06958-9880-4382-abb0-2db1c6aa307f"
        },
        "item": {
          "id": "13ddfd36-3628-436d-9848-9f414417c477",
          "name": "did:invalid"
        },
        "response": {
          "id": "c268349b-32c4-4459-9158-d82b81bbfcb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13ddfd36-3628-436d-9848-9f414417c477",
        "cursor": {
          "ref": "05cce1ae-1b48-4e71-88f2-90e04bff7cd3",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a9d06958-9880-4382-abb0-2db1c6aa307f"
        },
        "item": {
          "id": "13ddfd36-3628-436d-9848-9f414417c477",
          "name": "did:invalid"
        },
        "response": {
          "id": "c268349b-32c4-4459-9158-d82b81bbfcb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6448aaff-35be-429b-be75-3b9dc35e418f",
        "cursor": {
          "ref": "f8e69090-ddab-4048-ab9c-537f58c5343b",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e810da5d-2b39-4ecc-aa34-187ef573e317"
        },
        "item": {
          "id": "6448aaff-35be-429b-be75-3b9dc35e418f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "df657876-3b7c-44cc-abaf-5898df7cc8d0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 145,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edae461b-142e-4112-9686-8efb130cbb28",
        "cursor": {
          "ref": "a3a3c957-133f-432a-9702-3be9c7f68bcc",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9ead229d-b6ab-4f51-a7a6-065dedf2612b"
        },
        "item": {
          "id": "edae461b-142e-4112-9686-8efb130cbb28",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e3b4379b-eb29-4f8e-9a44-3866572223a1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 39,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83743edd-7929-466e-87a1-ab23836fa063",
        "cursor": {
          "ref": "a8bf35d7-18d7-4343-9d56-cc55bb168177",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "91dd976a-edbe-4391-b722-e33c3b360c01"
        },
        "item": {
          "id": "83743edd-7929-466e-87a1-ab23836fa063",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "1f7ab35c-1da2-4096-90eb-d8d163a38a49",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc46d27a-d760-4ece-b359-0c9428972ed6",
        "cursor": {
          "ref": "d6f389f2-b3d5-4655-b836-10795585d62c",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b3bbe2ef-4e58-40f8-a470-8e142ff98e56"
        },
        "item": {
          "id": "dc46d27a-d760-4ece-b359-0c9428972ed6",
          "name": "identifiers"
        },
        "response": {
          "id": "7e929244-7e60-4aa8-9e3f-df28f7dd0b48",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b96b449-015f-4e02-9196-58f2201aaa12",
        "cursor": {
          "ref": "60fa142a-5dcf-4442-939c-e420f981af1c",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f4a59109-9f61-4bcf-92be-d1dcf9d0c933"
        },
        "item": {
          "id": "8b96b449-015f-4e02-9196-58f2201aaa12",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f7037296-f191-4035-a04b-d69cefc3645b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc01c905-0cd8-44b2-843a-e39cb0f90b1f",
        "cursor": {
          "ref": "23d8362a-fa84-46f6-9e47-6da2a318d88a",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "dac3a117-5f53-475d-a3fa-67d77a7c28e1"
        },
        "item": {
          "id": "bc01c905-0cd8-44b2-843a-e39cb0f90b1f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c6eb8925-daad-420d-ad62-0bcb4ba8506b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e2b32f0-f1de-4633-816e-92e81bb476d7",
        "cursor": {
          "ref": "ddae3f37-652c-4530-8c16-4cc19a0ff03d",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "94b7c680-56e0-49f3-88ec-d3e1c3241a2e"
        },
        "item": {
          "id": "5e2b32f0-f1de-4633-816e-92e81bb476d7",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "349816ce-d21d-45c6-b5ed-a2554231e97a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7207a612-f569-4b0e-8f1a-396fcdb785a9",
        "cursor": {
          "ref": "c1d0906e-7fd4-475d-9e57-d0fe36ad70f0",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3c5eac85-f4d9-4c4b-b2ac-5bc7c0c19ce6"
        },
        "item": {
          "id": "7207a612-f569-4b0e-8f1a-396fcdb785a9",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e7ba9a27-d2c7-48cc-9e72-50101a26cc6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65bad51f-7da6-4a89-a5d6-be28d754f020",
        "cursor": {
          "ref": "002a2be2-42a6-4585-8a1e-0b203e1f27f9",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "fbb50b6b-9e88-4e32-937b-202a92a03b09"
        },
        "item": {
          "id": "65bad51f-7da6-4a89-a5d6-be28d754f020",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "803753f2-eed3-4c67-80ec-8354ac469ec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcc77b14-ca5f-4b26-a89e-197c9640d1b5",
        "cursor": {
          "ref": "888868a1-f29d-40e6-b9db-a63520d31b2d",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "25bc15a3-21d4-4c73-942e-ebad50211677"
        },
        "item": {
          "id": "fcc77b14-ca5f-4b26-a89e-197c9640d1b5",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "867b28e6-1e4d-4b35-a7c3-cb4dfdf2a2c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07257de0-185d-4dd1-b956-a5409f4ea371",
        "cursor": {
          "ref": "3e3c20a3-c371-452a-9c7b-b24e53e69cc4",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "7027efac-6f5d-4d21-afdb-0e1c55204715"
        },
        "item": {
          "id": "07257de0-185d-4dd1-b956-a5409f4ea371",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "38f85086-f883-4217-b230-bafb9982c3ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44672eb7-b002-4d6f-966a-0e21460890dc",
        "cursor": {
          "ref": "99736491-9eec-44ff-bcaa-9f176c702c81",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5dc05ca9-e315-4c6d-a184-1a6947199984"
        },
        "item": {
          "id": "44672eb7-b002-4d6f-966a-0e21460890dc",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "18c87f80-af45-4cad-a3f1-2106512ea1f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79e87c61-4f8a-49d1-be5a-7d803b551504",
        "cursor": {
          "ref": "9bb050a5-6c5e-4f8f-a563-05fa0d3502a4",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a1c1b2df-2f8d-45f4-90ef-704af6a69692"
        },
        "item": {
          "id": "79e87c61-4f8a-49d1-be5a-7d803b551504",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "54cd0138-439f-4a94-862c-12c9ed5644cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec55ef9-7238-453f-91ab-088e491e966b",
        "cursor": {
          "ref": "77373b85-0840-4ec1-bc3e-43e50ad8ff3b",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0e23b212-43f2-411f-bcc9-6bd1a60a9f4a"
        },
        "item": {
          "id": "1ec55ef9-7238-453f-91ab-088e491e966b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f8c72fa6-8993-40a8-b8ec-817fb01b7dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cc3be54-04ce-4629-91ed-c667ae5e4444",
        "cursor": {
          "ref": "83c3df22-ed94-4304-879c-0a0bcdda6181",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "396ea112-f7d1-40f4-aabd-7ea916ee075e"
        },
        "item": {
          "id": "1cc3be54-04ce-4629-91ed-c667ae5e4444",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "735dfc30-c6f7-4904-8c25-105283191ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ac0d1a0-2193-4dec-85e3-27517b057d14",
        "cursor": {
          "ref": "7fd32098-0fa0-4e3b-a5e0-14c42300f2da",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d6b0fdd7-eeb8-4732-8a16-2b3ae8ca8ccf"
        },
        "item": {
          "id": "7ac0d1a0-2193-4dec-85e3-27517b057d14",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "4c8e824e-8c97-4e97-8249-20d66d355dcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15320b7c-3408-48b0-82a8-c6cdeae4a50c",
        "cursor": {
          "ref": "28653519-d389-4d5e-b04d-2d82d6c7ff6f",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "deb1db9a-ec24-4e24-980f-57482a2ed95d"
        },
        "item": {
          "id": "15320b7c-3408-48b0-82a8-c6cdeae4a50c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d80d3233-527d-4fea-83a7-7d83de86bca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12a690ad-4319-44e4-832b-8416d77ff408",
        "cursor": {
          "ref": "bb7283e6-656b-4c4f-93d0-e47e4a8a3812",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f122172e-27c6-4e3c-8226-95eeda51d509"
        },
        "item": {
          "id": "12a690ad-4319-44e4-832b-8416d77ff408",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "86b2b3d9-acf9-444b-8b75-329fd92278bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b5e0532-4a52-42fb-9d8c-17e58039939b",
        "cursor": {
          "ref": "99cca766-cb98-4aee-bb4f-fc93267060fa",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7cfd6141-4a41-4482-9889-ac6ffd85d294"
        },
        "item": {
          "id": "4b5e0532-4a52-42fb-9d8c-17e58039939b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "443f8bf4-e420-460a-b8cb-8065f043549f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac4d7da-6ad0-4882-af5e-f6370d4fc646",
        "cursor": {
          "ref": "92cf970a-988c-4e29-a8ec-f3a06df1565e",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "9653d796-b8dd-4612-8922-a54b63219995"
        },
        "item": {
          "id": "8ac4d7da-6ad0-4882-af5e-f6370d4fc646",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "94cd7aa4-b31e-40ad-bd8a-e2592da08747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b5cd9a3-09cd-44bf-b93a-01508d811f78",
        "cursor": {
          "ref": "d50d5e94-3c7b-4433-a06a-ab17d757b66d",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d69652ec-c13d-485a-ab82-1ae44149095d"
        },
        "item": {
          "id": "9b5cd9a3-09cd-44bf-b93a-01508d811f78",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e7236f31-f80b-4391-9c27-81cb8434df8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2577a72-13fd-4804-98ce-2313e56350e6",
        "cursor": {
          "ref": "760bb713-6f4d-437f-9ef1-2438407fdd95",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3426de6f-620e-47f2-9924-d3753b96379e"
        },
        "item": {
          "id": "d2577a72-13fd-4804-98ce-2313e56350e6",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "4b0ad2a2-0c19-439a-8fb8-948762970816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f841e1c-30f9-473e-9c4f-59bc7999debd",
        "cursor": {
          "ref": "55fe10f5-1e05-46a0-be36-1ae40071178c",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7b6ffbc8-791f-4d4c-94de-9994fe7edf51"
        },
        "item": {
          "id": "5f841e1c-30f9-473e-9c4f-59bc7999debd",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "fe3fb3f4-90db-4ecc-aacd-02ab917bb8b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afcb6939-0981-476b-9771-07c75f3ab78a",
        "cursor": {
          "ref": "2a5693bd-e382-43bd-82fd-1c8424fcb665",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "770e7590-190b-4d0c-9c66-8a021eb01614"
        },
        "item": {
          "id": "afcb6939-0981-476b-9771-07c75f3ab78a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "fc3510bd-1f57-4b3d-a2de-0a9c3657ed8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "298f850e-930f-4e03-9faa-c96e0b22bfe3",
        "cursor": {
          "ref": "1afb08f9-9a30-4a1d-a7f1-3d649915509b",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "912504b2-1102-4857-9bf0-00bc6282385e"
        },
        "item": {
          "id": "298f850e-930f-4e03-9faa-c96e0b22bfe3",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "c801324d-1d40-4ba4-9eaa-2803f2d27fbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f4ccc37-30f6-490d-a589-2afa0151eab4",
        "cursor": {
          "ref": "36de6921-d740-4dca-aff4-c24046c3449c",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a6364399-ef47-43ff-9172-f8af473e920c"
        },
        "item": {
          "id": "7f4ccc37-30f6-490d-a589-2afa0151eab4",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "bb6b1b2b-3885-43e7-8580-5c58394dd5e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc40639-b52c-42d4-a5c7-35b77c59b7d4",
        "cursor": {
          "ref": "2cb3c24f-514d-4596-9878-da073e002f19",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "6ecfc953-48b1-49e9-a063-e239ac2831e3"
        },
        "item": {
          "id": "0dc40639-b52c-42d4-a5c7-35b77c59b7d4",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "1fb3ceae-cf88-4b4c-b8ac-7a93e1926c99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8db469b4-1053-4c7c-a270-91f1e1b90ead",
        "cursor": {
          "ref": "f4ad6813-eaa6-4961-93ea-84f99d8dce74",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4203195f-30db-4e3a-b8fe-d2089c1729f8"
        },
        "item": {
          "id": "8db469b4-1053-4c7c-a270-91f1e1b90ead",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "4c5f9f41-ca19-4c6c-91eb-b42e250178bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "100cef89-c3cf-4a97-b7d5-807c1fab813e",
        "cursor": {
          "ref": "5561bc7b-b1e2-420d-816c-33ed56586911",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d1fc4fd4-1d31-4426-98ea-f26f917172a3"
        },
        "item": {
          "id": "100cef89-c3cf-4a97-b7d5-807c1fab813e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "b045e84b-fcab-48c5-92e6-8f17e38f26a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c1e9e92-5c09-4833-a10a-f3055c331a71",
        "cursor": {
          "ref": "f3eb0aed-e47e-404f-8e31-ce5c0735afab",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "7ca1c16d-4730-44c3-aa62-29f676656163"
        },
        "item": {
          "id": "8c1e9e92-5c09-4833-a10a-f3055c331a71",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "46d341fb-9bf1-4897-b5c7-983ca9726165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa1773b-ea9e-459c-aa11-90625e1e3d7d",
        "cursor": {
          "ref": "7e109a8c-a564-4b0b-a58c-b9dad8df097c",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "39f72dc5-9c2b-4188-b069-e8300ac757e3"
        },
        "item": {
          "id": "2fa1773b-ea9e-459c-aa11-90625e1e3d7d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "c2571b66-bfbb-413c-a67f-141aff97d026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e4d12d3-4379-4fbf-a8ab-ba7de6d18e69",
        "cursor": {
          "ref": "9b346b7c-fd3e-4c34-a55e-99fde8ebcbec",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "693e32d4-824b-495f-ad05-31a126a6e19b"
        },
        "item": {
          "id": "6e4d12d3-4379-4fbf-a8ab-ba7de6d18e69",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e0e1f95d-d957-4f74-b4fb-5d8e9842f9a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed7791c1-9b62-498b-844b-316ab89ce736",
        "cursor": {
          "ref": "ac43c0ac-b845-4524-9063-7246392612be",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "994b564b-231a-4e70-a0e5-07ec06cd74ee"
        },
        "item": {
          "id": "ed7791c1-9b62-498b-844b-316ab89ce736",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "6746a652-6084-41d6-8f0b-78eab6f12d6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f80173fa-b105-4091-b0de-57f2e1f35edb",
        "cursor": {
          "ref": "6707d0d7-d28b-4ae9-b0f8-9c8009b0aa30",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "407151e4-1e6b-4dad-b1c1-f912b286b038"
        },
        "item": {
          "id": "f80173fa-b105-4091-b0de-57f2e1f35edb",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "43857316-5e6c-4abe-a10a-44c5dfeebbff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1fb405b-84cc-4eb9-9e49-e5183ceb222e",
        "cursor": {
          "ref": "80ba7589-a461-4910-ac0e-ec248de39379",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d0bdc981-587a-491d-bbc5-289f84389fcd"
        },
        "item": {
          "id": "a1fb405b-84cc-4eb9-9e49-e5183ceb222e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a6605307-cc6c-4bc4-b61d-4e9d16c6c8ac",
          "status": "Created",
          "code": 201,
          "responseTime": 899,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "91ea8a5d-b9e7-402f-8a91-89d3459d936f",
        "cursor": {
          "ref": "07438f4c-04a7-4d54-86ea-abc456984cc0",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "5fa3276d-b6ef-4212-ba06-ab12aba8d9c6"
        },
        "item": {
          "id": "91ea8a5d-b9e7-402f-8a91-89d3459d936f",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ca3fdfd3-72c2-4eb7-9eb2-cb804a4a6f71",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "d4bdb143-2e43-4876-a802-901608118ad8",
        "cursor": {
          "ref": "5b7d6878-7d20-4a5f-a15b-438fa6631868",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0379bac6-3ffb-4e91-98ab-cdce93adb99c"
        },
        "item": {
          "id": "d4bdb143-2e43-4876-a802-901608118ad8",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "098bfa0a-5e52-466e-954f-9e7f45d8dff7",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "fc469281-a6f4-4d90-96cf-12885642e9db",
        "cursor": {
          "ref": "6305ba3c-1a16-4ce3-83ef-410782fb0c7e",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "913921c2-0fad-4de6-b7c5-0a8818423533"
        },
        "item": {
          "id": "fc469281-a6f4-4d90-96cf-12885642e9db",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "ddc44650-4f72-43c1-b0b5-2386dfcfde7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4579e44d-7adf-4bde-b9d1-ec615cbc88ed",
        "cursor": {
          "ref": "639e111c-44de-4732-bede-f6b6108599d5",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "6fac05a9-b348-4575-bf6a-35b1b350b4e8"
        },
        "item": {
          "id": "4579e44d-7adf-4bde-b9d1-ec615cbc88ed",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "e72f69e7-a7d4-4f6e-a935-022d85fac96b",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "b7df201e-ee47-4dc3-9c0f-e27f4904f2ae",
        "cursor": {
          "ref": "65a00eaf-a5fa-4438-b534-0a2cd9397cb6",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "3a70308f-ab4d-4734-a6ea-5f97efbc5109"
        },
        "item": {
          "id": "b7df201e-ee47-4dc3-9c0f-e27f4904f2ae",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e7fb6822-a479-45d4-b21d-d8bbec598526",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "58f8e2c7-137a-4abe-82d0-7c20a2ad851d",
        "cursor": {
          "ref": "ab0d22ea-4d2d-4608-b8de-d0a354837b4f",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3edb8a83-b8fd-4895-bb12-9e1bbc0fadfd"
        },
        "item": {
          "id": "58f8e2c7-137a-4abe-82d0-7c20a2ad851d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "ecb69557-a834-40c0-9368-cf917748c87d",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "6b25f438-12ab-4e31-88a8-826e8785cd0b",
        "cursor": {
          "ref": "910ac64b-f501-426f-b3ea-eca131506ef5",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f2d29f64-1a09-4443-b412-3a32985c0d6b"
        },
        "item": {
          "id": "6b25f438-12ab-4e31-88a8-826e8785cd0b",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "285151a8-8c46-47b6-a9f9-c136a94f254d",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "c8deace2-8bdd-4fe3-b24f-1026fe7f49d7",
        "cursor": {
          "ref": "99ed7731-1c68-4892-8651-cbf543722e45",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3aedd5d6-6e09-43cd-ae5c-cf63531e19c4"
        },
        "item": {
          "id": "c8deace2-8bdd-4fe3-b24f-1026fe7f49d7",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "98e0fe37-3878-43ae-88ac-3f4623e36413",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "084fbc3c-8fee-4b6c-b5b7-6e65ec551745",
        "cursor": {
          "ref": "07b47c4a-9e5f-41fc-bcf7-afa55f9a1210",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "206e2a3c-9301-4378-be4c-e7ab3c3bbfb4"
        },
        "item": {
          "id": "084fbc3c-8fee-4b6c-b5b7-6e65ec551745",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "f39cee4e-3172-4877-a1be-98e7bfa279e6",
          "status": "Created",
          "code": 201,
          "responseTime": 406,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "e63fafd3-c5ea-4aba-8283-ea193ada4f0f",
        "cursor": {
          "ref": "94989086-009c-4ffe-a6cc-112c1c34da97",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f146547a-6952-4c37-8271-821cccce0721"
        },
        "item": {
          "id": "e63fafd3-c5ea-4aba-8283-ea193ada4f0f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "3a2bf4a8-c10b-4e45-8363-b1f3b2959b82",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "fc032f30-18e3-45bd-9161-9b26e3d931c2",
        "cursor": {
          "ref": "52f25d57-3f2c-4c71-af71-630d519084b8",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "8637eb3f-faff-4e97-a564-7ebbc200ab21"
        },
        "item": {
          "id": "fc032f30-18e3-45bd-9161-9b26e3d931c2",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "3ce0b760-3acf-4910-ae21-9606ffd60396",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "4c71bff6-e18e-4ed2-9e63-31d0a3126bec",
        "cursor": {
          "ref": "6fc75f23-15f6-4fb3-9ca8-2202f5a6c46a",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f00d17cf-a375-4585-8532-0f2fa7f918da"
        },
        "item": {
          "id": "4c71bff6-e18e-4ed2-9e63-31d0a3126bec",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "458b071f-3a29-41ba-a69a-d012d5e1560d",
          "status": "Created",
          "code": 201,
          "responseTime": 398,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "d031042f-9deb-4752-9b36-cdf074539603",
        "cursor": {
          "ref": "f4eba681-f483-40fd-bc8b-f8bd9e37d425",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a01b86b5-4095-4943-b036-cd696c3ad6d7"
        },
        "item": {
          "id": "d031042f-9deb-4752-9b36-cdf074539603",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2a3afe57-1a48-4830-8365-88a6f57b7335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb8ade47-25b4-465a-8a1f-59b46ac5c491",
        "cursor": {
          "ref": "770e5a44-f782-4f19-92e4-394e74a4770d",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5ac2a4c2-9d8f-40cc-a288-dd08513f063e"
        },
        "item": {
          "id": "cb8ade47-25b4-465a-8a1f-59b46ac5c491",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4fe74e85-d5d4-4956-9b69-6f8e33ae2e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "851a117a-7839-4566-81ff-abe7d8a16fa0",
        "cursor": {
          "ref": "b0fb80e6-d713-4507-b24c-aeb46b140b95",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b0ba32df-f90a-47ea-a32d-5074bf65aa09"
        },
        "item": {
          "id": "851a117a-7839-4566-81ff-abe7d8a16fa0",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "9732356d-5db7-4a9a-9ca6-e73aab7392b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0de35416-493a-4268-8767-9f9bf180a8cc",
        "cursor": {
          "ref": "f340a82d-4644-4481-922e-4bc843105841",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "87223255-5496-48f4-ac6b-9a78158ea74d"
        },
        "item": {
          "id": "0de35416-493a-4268-8767-9f9bf180a8cc",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4a77f6d7-a2f9-4980-ad00-b5adf62e3674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3c38bff-0b75-4c56-be55-2749cd3ffbe0",
        "cursor": {
          "ref": "d388e113-1891-4972-8365-b73f08e66228",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a82640c1-29c2-4f89-a100-0c0c06a5f841"
        },
        "item": {
          "id": "c3c38bff-0b75-4c56-be55-2749cd3ffbe0",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "3ee9d5db-c737-43d9-8c16-3c461d72ccd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc7941ae-04c4-4af8-98bd-867fd91570de",
        "cursor": {
          "ref": "f2667199-c58c-45a1-b87c-4824b61acb00",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "7c3eb7d7-b72c-46fc-be4c-0a804b643b6f"
        },
        "item": {
          "id": "cc7941ae-04c4-4af8-98bd-867fd91570de",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "051e3910-6e52-43a8-81a0-581a48b4f738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e7554b4-b5d5-4d19-a1f2-e52283e95666",
        "cursor": {
          "ref": "12d4b26b-bdf3-4f3d-bac9-6aab7233491d",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8302072a-a09a-4993-aded-e792535fa5be"
        },
        "item": {
          "id": "9e7554b4-b5d5-4d19-a1f2-e52283e95666",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e4f8a775-5801-4f77-9c04-a36551f29a41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe0d5f46-0196-427b-ad02-34de9fbc9080",
        "cursor": {
          "ref": "1b981860-5a7d-4586-aa53-827c727a7757",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f9a4420b-a655-40df-89cd-a7a0ff7ad018"
        },
        "item": {
          "id": "fe0d5f46-0196-427b-ad02-34de9fbc9080",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "afbd2fff-94c6-4d2b-b089-de3472a39243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7adf3577-b965-4888-8282-50e8ecca6687",
        "cursor": {
          "ref": "3fa33d22-291b-451e-ba9c-686d692f55b3",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "3dd41d1a-e51b-4c6f-86ba-31cbdb8b9830"
        },
        "item": {
          "id": "7adf3577-b965-4888-8282-50e8ecca6687",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "74adeedc-c84e-4f8d-ba19-b8f7cf7bd8ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4637f893-aa1c-4f86-be80-c79980a41efe",
        "cursor": {
          "ref": "d754fef9-7cdb-4cf4-bc9f-7ad55a6c588e",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0ac31570-3929-4cab-911a-f5d3b60e0db1"
        },
        "item": {
          "id": "4637f893-aa1c-4f86-be80-c79980a41efe",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8c3f087f-4677-4fa2-aadb-d34ce6c2bdb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "155f9b67-9b9e-4c3d-96f2-c193854f65bf",
        "cursor": {
          "ref": "1f782cc9-79cb-4e66-9461-a295fa319aef",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ca57afa4-2ffb-4947-ab03-c4929be11e6e"
        },
        "item": {
          "id": "155f9b67-9b9e-4c3d-96f2-c193854f65bf",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "779c18d8-f7fe-4b5c-83d7-caefd607bece",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbd66ed9-1b86-4052-a90e-6cf7726290b4",
        "cursor": {
          "ref": "8fb1d841-3839-4610-8830-aa4d26f6e5b3",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "9156dca4-fa1e-426a-8753-b35409ffc101"
        },
        "item": {
          "id": "cbd66ed9-1b86-4052-a90e-6cf7726290b4",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "4446190e-f9bc-4f54-a32b-241f739ea09a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe7369e1-ca91-4312-976f-b25d196fc60c",
        "cursor": {
          "ref": "101a1ace-5931-4e56-953e-3d8c292d435c",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "0daa5ae0-d334-4f05-bcfb-c16a1505e381"
        },
        "item": {
          "id": "fe7369e1-ca91-4312-976f-b25d196fc60c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a98b4237-94fa-475c-9dee-780788f81406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a884ae4-d5b3-426f-8b9b-e69713905183",
        "cursor": {
          "ref": "9c833798-a64d-43b0-b881-8722044ffbf8",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a9f4797a-94fa-49de-8213-fee227f896d3"
        },
        "item": {
          "id": "9a884ae4-d5b3-426f-8b9b-e69713905183",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f26ee4ce-37a3-4900-8ad4-02935d39f572",
          "status": "Created",
          "code": 201,
          "responseTime": 369,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "c037e5b7-0069-4321-96f0-eeb86d1fe8af",
        "cursor": {
          "ref": "88101df0-9bbb-4f2a-b9cd-02d5afab940b",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f1e71659-ed4b-46f0-a644-101fda259138"
        },
        "item": {
          "id": "c037e5b7-0069-4321-96f0-eeb86d1fe8af",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "02b72627-00c3-4ab6-957d-2171a6b6d4c8",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "fab1431f-7bc7-4c0b-98a6-ff43fa5944c6",
        "cursor": {
          "ref": "21b24bca-d38d-440b-a990-cfc2596c669e",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "54b038b6-e1e7-4fdd-98ca-c73e00c60245"
        },
        "item": {
          "id": "fab1431f-7bc7-4c0b-98a6-ff43fa5944c6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "93d69365-d366-427a-9968-177aa3d176c3",
          "status": "Created",
          "code": 201,
          "responseTime": 340,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "742f2e5d-8ed2-4bbc-a497-17881fa66cc3",
        "cursor": {
          "ref": "265fee90-0615-4b01-8715-e71fa909c4a7",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "be3930cf-7204-4959-89c5-2fcc5c2ceaa2"
        },
        "item": {
          "id": "742f2e5d-8ed2-4bbc-a497-17881fa66cc3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "972de36a-d7f3-4c4f-9c6f-d8b655462ee5",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "7fa28cc1-5956-45f0-8e1a-94289b7a2647",
        "cursor": {
          "ref": "7368e6c2-07f3-493c-a0b3-678f4c54e480",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "5cd3f80a-dcad-4dcc-b536-b77d32cebdb1"
        },
        "item": {
          "id": "7fa28cc1-5956-45f0-8e1a-94289b7a2647",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a0957781-0911-4fc6-b3d9-a5b6ffd30883",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "9db779b3-84bc-4881-ad07-1a1d33e64e72",
        "cursor": {
          "ref": "6cd2c578-caed-452b-9514-2b51ef23e7ca",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b037ffe3-65f5-4915-ae07-e566d69ad72e"
        },
        "item": {
          "id": "9db779b3-84bc-4881-ad07-1a1d33e64e72",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2fcd5cc1-903f-4c78-b56f-b00fa62c12c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c53a2899-31c9-426f-8eb3-9bc7b0c0d671",
        "cursor": {
          "ref": "e017aa97-db72-46db-9d70-0429cb9f7162",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b0a01f71-9f02-4ef3-ad94-df910df605eb"
        },
        "item": {
          "id": "c53a2899-31c9-426f-8eb3-9bc7b0c0d671",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "abe0a66e-2f81-43e1-be54-c46e4f96494d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b785c95e-5444-423e-89b4-44dc0686bab3",
        "cursor": {
          "ref": "6c5a2df0-f5cc-415a-853c-1e454885d42b",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "7ca37226-e791-45d0-95ee-20972a4d7e99"
        },
        "item": {
          "id": "b785c95e-5444-423e-89b4-44dc0686bab3",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8f29baad-09de-43a7-a3f6-bc33b0f041e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4273ce3-8c0d-4621-8e2d-991b0dd60581",
        "cursor": {
          "ref": "370bf32e-222e-4c92-b831-9e9fee489996",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e1266e21-d09a-4d6d-9e34-093a44df957f"
        },
        "item": {
          "id": "e4273ce3-8c0d-4621-8e2d-991b0dd60581",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "94aac4c8-68df-4125-8322-5a81807bd8f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c706e21f-3d15-4e24-80a1-9f5dc5816e60",
        "cursor": {
          "ref": "c7c675bd-b7c4-4636-8601-c4583b56d96a",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9609456d-679e-4b60-84b4-3824772ba93f"
        },
        "item": {
          "id": "c706e21f-3d15-4e24-80a1-9f5dc5816e60",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "380a3ef6-3d40-476b-be39-6420025bb7c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1693a438-bb0e-4ccd-b45c-6947a8641363",
        "cursor": {
          "ref": "5c9068d0-68ed-4cd5-bd46-c0a544d81401",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "50163118-0151-4519-8e83-9068e1144708"
        },
        "item": {
          "id": "1693a438-bb0e-4ccd-b45c-6947a8641363",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "29be779e-f267-44bc-a9bb-fde65aae2707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa65c00-fe5e-4143-b5b0-4559ae9dfb85",
        "cursor": {
          "ref": "a5f2ddde-9eaa-462a-b63c-e038ffdb3fad",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2a2830f0-d486-4d38-ac98-559040e8e057"
        },
        "item": {
          "id": "4fa65c00-fe5e-4143-b5b0-4559ae9dfb85",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "1d0f9262-804f-4042-a2a5-1bcb8b004ab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ccf5dcf-5a28-4691-bc81-eb1866f8058c",
        "cursor": {
          "ref": "da6b1253-2b94-4026-8bde-118cc90387d3",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "7cb8a560-d23f-4ebb-be58-cd2c5400f67d"
        },
        "item": {
          "id": "7ccf5dcf-5a28-4691-bc81-eb1866f8058c",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "2ed37038-e33a-4ae9-bb48-6ab00a052d3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e222eba-f6c7-4046-a87a-81d5069791dd",
        "cursor": {
          "ref": "b4edd908-ff8d-436b-b564-266d9ec1e17e",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "05666d79-a31d-45f5-91f7-90f7a07382fb"
        },
        "item": {
          "id": "9e222eba-f6c7-4046-a87a-81d5069791dd",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "8d5d13a1-f6df-4968-bdce-7bd879dc2376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61514a0c-8674-4692-a8bc-d7714a787a3a",
        "cursor": {
          "ref": "3649eeb5-61cc-4afb-8fac-a7ee16aea336",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "055b17f8-76ab-46c3-aeb0-8b60945c454c"
        },
        "item": {
          "id": "61514a0c-8674-4692-a8bc-d7714a787a3a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7fc78f24-1bb9-4b3e-9719-23b3786650b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f586e740-0d01-4d8d-b958-166df09612ee",
        "cursor": {
          "ref": "bf22012e-e37f-4732-9b20-690e79d95401",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "dbdd0436-600e-41ee-8e09-fc03ddf3b41e"
        },
        "item": {
          "id": "f586e740-0d01-4d8d-b958-166df09612ee",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "094ee19a-558a-4a9a-a595-615284ce62f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "053d5b20-4861-403c-8da1-a8235b6cc3d4",
        "cursor": {
          "ref": "1b6e91b5-69bf-4204-b354-32aa3a02d132",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5a851bb7-f771-4867-bfaf-abe592c1e693"
        },
        "item": {
          "id": "053d5b20-4861-403c-8da1-a8235b6cc3d4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "168c1353-5e7f-43a0-b8d6-2f829d03a987",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5581546a-29be-4c2b-9a3e-08c49e06ab20",
        "cursor": {
          "ref": "c38d9024-910a-46fe-bf0b-c2706e9e3f18",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "66530f02-8b97-4ff6-bfc7-dfb71f3b60e4"
        },
        "item": {
          "id": "5581546a-29be-4c2b-9a3e-08c49e06ab20",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "70e45de4-d51f-4e02-87b3-a0c131bb0716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f82f0bc-d77e-4ef5-b76a-8be7f9fbcc73",
        "cursor": {
          "ref": "3962e02e-44e9-4635-8132-5ecc9537baba",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "5c7481e2-d7cd-4c30-b55f-9edf647071fd"
        },
        "item": {
          "id": "8f82f0bc-d77e-4ef5-b76a-8be7f9fbcc73",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d18a7868-5611-4a57-8b15-45ec9e8f702b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "518895fb-a568-4c68-9997-8a0a8fa2a2ee",
        "cursor": {
          "ref": "fe8ff562-2e2e-41ad-a17f-9901b5f811e7",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b42fdc04-e64e-4715-9260-245887fb3728"
        },
        "item": {
          "id": "518895fb-a568-4c68-9997-8a0a8fa2a2ee",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d764f216-d6cf-4f15-99df-490e128734da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ab3898-5eb2-47a8-b203-c4024d388410",
        "cursor": {
          "ref": "d6bdc952-9f56-4bb2-a173-22929c8f2b73",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b294ff1c-8e90-4e64-819d-55b775083646"
        },
        "item": {
          "id": "e3ab3898-5eb2-47a8-b203-c4024d388410",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "bddc8dd8-d1c9-4689-80e2-aee437ba0ece",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b39c03f-f429-4ec2-bb15-02e84f5734de",
        "cursor": {
          "ref": "3d39470d-d13d-4333-bfb8-d1bcd1bc3e95",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a5551b71-53d4-445b-b1ab-42352a4e49b3"
        },
        "item": {
          "id": "5b39c03f-f429-4ec2-bb15-02e84f5734de",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "327931f5-3615-4278-89bf-d1d22c3b815b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4132d784-c44a-48a8-ae38-81e685a6e0d0",
        "cursor": {
          "ref": "8d5d6c6f-4fb5-4097-acd6-d141b77062b2",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "4a38c986-6a0d-4238-a875-15102297ccbd"
        },
        "item": {
          "id": "4132d784-c44a-48a8-ae38-81e685a6e0d0",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "fa3f8a2f-704c-465a-a162-1895f0319667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a98fb444-7f7a-4ed8-a3e2-e29bfe274108",
        "cursor": {
          "ref": "ec41140e-ebe7-4de9-9c0e-ff431d69ed54",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a92c9c28-9c1d-4d1b-8730-0af959e1beef"
        },
        "item": {
          "id": "a98fb444-7f7a-4ed8-a3e2-e29bfe274108",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "aa1c4966-63df-4b96-a77f-56649645f91e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8276303-4dd8-4103-a246-3f0e1cf9c24b",
        "cursor": {
          "ref": "0378ac55-a9f8-47bc-b7d7-9f198c373cf2",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "4fa35c59-6967-42c2-8731-5d828bceff2f"
        },
        "item": {
          "id": "c8276303-4dd8-4103-a246-3f0e1cf9c24b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "1cbac5b5-3e86-48d1-88a8-84843d35db61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "239dc360-9df4-422a-a395-4cb9a747bbc6",
        "cursor": {
          "ref": "721f67fb-731a-4221-9a98-0415d2f768f4",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a330f906-9da3-464d-b227-9ef1fcb7e2ae"
        },
        "item": {
          "id": "239dc360-9df4-422a-a395-4cb9a747bbc6",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "dfdd3f63-59b2-482a-aeb1-73d2d8353c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cba6f348-d275-4630-8eeb-f9dd12ef8181",
        "cursor": {
          "ref": "42dea9d6-cccd-42ba-9330-c24a85229826",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "543695c2-690b-4580-9831-91081f1a72ab"
        },
        "item": {
          "id": "cba6f348-d275-4630-8eeb-f9dd12ef8181",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5b250c36-9a6f-4b03-9c5a-93423456f4fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17283692-3d43-4aa5-bc0b-4f7000f55c0c",
        "cursor": {
          "ref": "57df5e37-b076-4471-a0e5-be10b1c462b5",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "4469d7e6-4caa-46a2-b037-89e44caf172f"
        },
        "item": {
          "id": "17283692-3d43-4aa5-bc0b-4f7000f55c0c",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "624602fc-26e0-4441-afcb-1ba8505c0e65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a97f0a0-f2b0-471b-b736-5044977d4017",
        "cursor": {
          "ref": "1de0e572-5582-46ee-8bc0-f8b85706824f",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9677fc50-bf6c-4810-9802-4ee076d7ddf5"
        },
        "item": {
          "id": "6a97f0a0-f2b0-471b-b736-5044977d4017",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "4d64f529-f3d9-4217-8979-9f0d6f287345",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7675525-dcd7-4117-a998-dcdd45bdc086",
        "cursor": {
          "ref": "245fe0cd-e02b-4afa-abab-b02e511a2c30",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d8fc2237-5c09-4a31-8b07-5950d339f87e"
        },
        "item": {
          "id": "c7675525-dcd7-4117-a998-dcdd45bdc086",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "df545665-e00f-4b29-9a3a-869cb7432528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed7b1f31-1ea0-4c2a-977a-91954e90ad72",
        "cursor": {
          "ref": "ae54cbd7-3327-4131-ab03-c7f73eb3fc4b",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "5178af1f-9690-471a-85d5-ee39b39f9f29"
        },
        "item": {
          "id": "ed7b1f31-1ea0-4c2a-977a-91954e90ad72",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "7512f401-20c6-4f75-9540-ac7ec7c5d5be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2b3e0a4-d0ca-4ac1-aec3-93efb8b88d48",
        "cursor": {
          "ref": "69d080ac-0fcb-4786-88a0-648c33a0ed0a",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0a87d2d9-cf60-49bf-a67e-2832d860b5e7"
        },
        "item": {
          "id": "c2b3e0a4-d0ca-4ac1-aec3-93efb8b88d48",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "60c70a71-2ccc-4658-8a5d-464869c20ca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90fb9d85-b806-402c-a78f-84ac568efc40",
        "cursor": {
          "ref": "9a9f4512-d2af-41b8-a045-a0850ec908ea",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c4b903b6-d98d-49a9-b711-8334f58995b2"
        },
        "item": {
          "id": "90fb9d85-b806-402c-a78f-84ac568efc40",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "18b408c0-97d0-4b1d-bc74-92b2fa157dcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a81b47c8-78a8-4585-a008-bc3757853070",
        "cursor": {
          "ref": "b42e03a8-5ee4-49f5-9fe5-f60bd1a6187a",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "b40059d4-2fb1-4845-b664-5b04a3363b7a"
        },
        "item": {
          "id": "a81b47c8-78a8-4585-a008-bc3757853070",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "01ea7a51-7326-4dbe-8372-15d426598c3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92835c16-82eb-42a3-8624-27e8974537f4",
        "cursor": {
          "ref": "5c51e5cc-0da3-4233-9500-65a4f65e81a1",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "c5fc1ce1-3429-4f09-9804-2d6ad12e6a4e"
        },
        "item": {
          "id": "92835c16-82eb-42a3-8624-27e8974537f4",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "7b8f2b63-beca-4591-83be-86b8b7535ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "955b10d5-54c2-4edd-af4e-a7bd99ab2441",
        "cursor": {
          "ref": "6ecbfbfe-584f-4420-a74c-5c03dd7552cf",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "06d8adc6-7bc6-4884-9cda-c7ceb021e598"
        },
        "item": {
          "id": "955b10d5-54c2-4edd-af4e-a7bd99ab2441",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "de390799-b470-4dd3-8d41-bba6a67625ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb2e0d91-9eee-4216-9516-cdfe9431b885",
        "cursor": {
          "ref": "b791444f-ce41-475b-ac64-d65e9631c01f",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d3072fe2-bb49-4d52-aac6-d6d1d807f1ea"
        },
        "item": {
          "id": "eb2e0d91-9eee-4216-9516-cdfe9431b885",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "3939ebe5-3026-4634-95b0-1cb257dc15ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2359b483-df5e-415f-a824-5e27b154b72b",
        "cursor": {
          "ref": "e6bb7a12-559a-459a-80a6-d7115cdbe3f1",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "dbf2f28f-c1e1-427e-9e59-f00fb60fabdd"
        },
        "item": {
          "id": "2359b483-df5e-415f-a824-5e27b154b72b",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "291adc08-6cd6-49b4-8194-7476a8fa8a8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "0dad7263-ad1d-48bf-978b-f33d847cbd75",
        "cursor": {
          "ref": "f9748d5a-c1e4-4b99-b8ed-30eba511162c",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a1a7291b-e43e-40e6-8af7-65d8b793e5da"
        },
        "item": {
          "id": "0dad7263-ad1d-48bf-978b-f33d847cbd75",
          "name": "credentials_issue"
        },
        "response": {
          "id": "98f8961b-b40b-4828-91ea-272fb2734196",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb39c10a-7651-4830-81b6-0c2170100d52",
        "cursor": {
          "ref": "3ed7f228-6991-4267-9a77-2d4f84b8bb9c",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d31cdffb-087d-47f0-a11f-96db7047a579"
        },
        "item": {
          "id": "eb39c10a-7651-4830-81b6-0c2170100d52",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "6e9ee94e-ed9c-467c-bf16-a6780f11ef8d",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad1cda3-34f0-4ed6-98c7-fde7ad4528cc",
        "cursor": {
          "ref": "3c6596cb-2613-4c03-8ce5-252292bf2a58",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "c6fd3e5e-8f91-4949-8c8e-5594072e1eae"
        },
        "item": {
          "id": "fad1cda3-34f0-4ed6-98c7-fde7ad4528cc",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "91f50ba4-e0e3-489d-a29b-161ac6290df1",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "30b1b77e-e028-4e7d-950e-4fcc712e977e",
        "cursor": {
          "ref": "9458c4f2-d359-458a-beb0-070d5154f499",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ea622d0f-879d-4de6-96c3-73eb5815b2c1"
        },
        "item": {
          "id": "30b1b77e-e028-4e7d-950e-4fcc712e977e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "3cc724e6-0766-4be0-a806-be31482bf69f",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c36af206-edec-4796-b511-698168c6ffca",
        "cursor": {
          "ref": "9ce9f672-0a0a-4226-8bc9-73d77f08c2b7",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2d298b74-200b-4fa5-a2df-db29c917a9d5"
        },
        "item": {
          "id": "c36af206-edec-4796-b511-698168c6ffca",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ae604269-51c9-4404-b2c1-a4bb3bbebb65",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-20T00:35:09.111Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-20T00:35:09.111Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "4e78b71f-c643-4d86-a981-802a35353aee",
        "cursor": {
          "ref": "73ddd734-4701-4b41-9330-0b8066ef7119",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8f751a57-9fcc-49b2-9315-caddb477bd07"
        },
        "item": {
          "id": "4e78b71f-c643-4d86-a981-802a35353aee",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2236d84d-c423-43c1-b756-60c433913ac6",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "536ec037-6348-43cc-b18b-200ed44cf258",
        "cursor": {
          "ref": "acf92962-91fc-499a-8ef0-b8b15ecff4d7",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4659e996-1c9c-4ddb-b1ac-4ec6caaba898"
        },
        "item": {
          "id": "536ec037-6348-43cc-b18b-200ed44cf258",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "61010a34-00d1-4e8b-ae70-5982f9966bfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51a24593-05ec-4946-bd4d-079b4432b05e",
        "cursor": {
          "ref": "882674d8-1751-487f-b639-aaba7b8ef787",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "6031b26a-d9d5-4238-b088-876607816994"
        },
        "item": {
          "id": "51a24593-05ec-4946-bd4d-079b4432b05e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "047037e0-fe64-4869-80fe-73edae1d40ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59464f18-8339-4c23-ba38-d5acab1fdbe1",
        "cursor": {
          "ref": "8b765c23-e71c-4660-b15c-54c6e8c2f5a2",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c505c0bc-8d65-419e-9f2f-d3a4c32688e0"
        },
        "item": {
          "id": "59464f18-8339-4c23-ba38-d5acab1fdbe1",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "777466e9-4b1c-4537-9fb8-cd6383f8d0db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2f892aa-3fe4-4f4b-8eb0-4d49ebc0d45e",
        "cursor": {
          "ref": "7e1209c7-b5f7-449d-8418-326bfd7696f6",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ad9f95d0-ed5c-4a81-90ed-99134c5cd831"
        },
        "item": {
          "id": "d2f892aa-3fe4-4f4b-8eb0-4d49ebc0d45e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f38f42c3-d575-406a-b9ec-58f75ca5918f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3904815-6526-413c-bc36-75a5980e91a0",
        "cursor": {
          "ref": "ead4b6c5-4f8e-4475-b383-6ede08c920e8",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2e456fdf-fb06-41fb-9f46-dfa01396e78a"
        },
        "item": {
          "id": "d3904815-6526-413c-bc36-75a5980e91a0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c983289b-17e8-4dd4-89c0-b6a00defcafc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e3b5e90-0a4f-4a2e-9b46-31bf939fcc33",
        "cursor": {
          "ref": "a773a2f6-aad8-487a-afd9-d04b21bb4330",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "29946444-10da-4111-8aae-42f106246a00"
        },
        "item": {
          "id": "6e3b5e90-0a4f-4a2e-9b46-31bf939fcc33",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "843ead53-4f72-4d43-91eb-657446d0545d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cfd7fa9-aa05-40c9-8ff6-68d5004ecf19",
        "cursor": {
          "ref": "361344d6-7158-430e-95f5-9533c0024796",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b6de1228-a3d0-4f10-9f3d-c3be3ac7ab2c"
        },
        "item": {
          "id": "2cfd7fa9-aa05-40c9-8ff6-68d5004ecf19",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7bd772e1-5618-49d0-98d7-09f12424a08c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84077059-2d2e-4ebd-96c2-44e0be899609",
        "cursor": {
          "ref": "3f19e94b-5aaf-43f0-a8b3-af61701ee726",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "91b7290b-c0a0-45a7-bae5-8aecbcc6b996"
        },
        "item": {
          "id": "84077059-2d2e-4ebd-96c2-44e0be899609",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9d9bc995-13da-4f86-b5fd-0c0df012ccf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d53afe1-0642-43eb-b5fe-9cc9f424701f",
        "cursor": {
          "ref": "f7941922-f664-4510-bb47-891e41dc7736",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2be08ab2-81b4-41df-9309-ac77c6d83441"
        },
        "item": {
          "id": "9d53afe1-0642-43eb-b5fe-9cc9f424701f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "76533969-d9bd-48cb-a0fb-3eb100a3eeb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae7dca1f-7cf5-434f-bf5a-780b1f50de3f",
        "cursor": {
          "ref": "6e979764-47e3-4dd4-abf3-0bec9cce3f6a",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "929430b5-9009-4008-af28-fbb9b5886dd3"
        },
        "item": {
          "id": "ae7dca1f-7cf5-434f-bf5a-780b1f50de3f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9d6b01e8-2d61-404c-a00c-31c7eb290b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8115d28-bb61-4e75-9b7a-489bb207fd4e",
        "cursor": {
          "ref": "13dc484a-bd3a-41e8-91e3-b5b4641ef84e",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "85fbcbcb-d14b-48f7-8027-9c7e109e91e3"
        },
        "item": {
          "id": "e8115d28-bb61-4e75-9b7a-489bb207fd4e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b4846e65-8d40-43b7-a16e-8f4de09ca87a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910b9b55-add9-4578-beeb-f65e82b99cb3",
        "cursor": {
          "ref": "19787f4b-276a-4b21-a07e-35938859e87c",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "2bcff2d2-3de8-4ba2-9d1e-cf63b096c6c1"
        },
        "item": {
          "id": "910b9b55-add9-4578-beeb-f65e82b99cb3",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "22e53834-849f-4499-9b0f-28d43fe51ccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b621b44-e5d4-4384-98c6-94ec60d63afd",
        "cursor": {
          "ref": "35b0e838-b7c6-4763-b6ae-83cd17f579bb",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "ea19252e-0eb3-41c9-ae70-9dd44d5b7271"
        },
        "item": {
          "id": "9b621b44-e5d4-4384-98c6-94ec60d63afd",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "245e6ea7-30c2-457c-8196-ea995e2f1252",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20fad56a-7970-437c-b0c3-43983705209e",
        "cursor": {
          "ref": "33d6d980-d37f-4c1a-8921-a4d25dc8098c",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "90696377-df78-4271-98f9-8994cea18099"
        },
        "item": {
          "id": "20fad56a-7970-437c-b0c3-43983705209e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8247df8d-a1d9-4107-aeab-c3d2e3ec5202",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "f79b9b45-f9c7-4ae6-bf73-d398b087a246",
        "cursor": {
          "ref": "4df98dc9-6579-4b18-900e-92986fe55dba",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "e2700845-e631-40dd-af71-c3dd0131946a"
        },
        "item": {
          "id": "f79b9b45-f9c7-4ae6-bf73-d398b087a246",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0124a6f0-1e4c-4dac-8309-454b4b4b362c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a424b19e-029a-4264-9f5f-a7cd097503e8",
        "cursor": {
          "ref": "4002ea36-8c7e-47e4-bfa0-a33c267ffb13",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f1b76c47-4831-436c-b3a1-89bdc4b8c5b8"
        },
        "item": {
          "id": "a424b19e-029a-4264-9f5f-a7cd097503e8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8e6ed873-b693-423a-ad7a-9f6eb5d2f9db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd76bb6-8c27-449f-a2f0-5a67cae89e12",
        "cursor": {
          "ref": "d254dccb-cdbd-47e5-89e1-9d1818cd753b",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "4857af94-c87e-41f9-beb8-80dacd631bac"
        },
        "item": {
          "id": "6dd76bb6-8c27-449f-a2f0-5a67cae89e12",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "20a0cfa8-a3fe-4845-93e0-e146803d37ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22418f4e-af65-4813-9de1-d8832e3b4995",
        "cursor": {
          "ref": "4ac9b8d4-18f5-4b91-b36d-2737f0cfb98a",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "fa8220ed-015a-4655-9c80-f983608c861c"
        },
        "item": {
          "id": "22418f4e-af65-4813-9de1-d8832e3b4995",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "87a90c51-36a1-4853-9c40-5c782245dbb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb2430ee-22c4-44fc-bd3a-1b8e59527979",
        "cursor": {
          "ref": "b1f01b43-1aec-4a66-a3d6-542da8f95e4b",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "5e29c672-df0b-4268-b131-f357d4eeb9ac"
        },
        "item": {
          "id": "eb2430ee-22c4-44fc-bd3a-1b8e59527979",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "23043b98-5f4f-4ddd-abf9-49e4559ddaf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2df61d7-0921-49bd-809d-41e3464ed0a9",
        "cursor": {
          "ref": "1edac9c1-e9ea-4ab0-9ae2-2dac3c31cd24",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d8dbb305-da2c-447c-ba1f-6934c8174f59"
        },
        "item": {
          "id": "e2df61d7-0921-49bd-809d-41e3464ed0a9",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d6d1584a-5e7a-4ed1-877c-b97e2d63274a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c5d786-4842-4e1b-b833-c759ab6a318f",
        "cursor": {
          "ref": "4e65b706-0d88-4b02-b6e2-da81ebd655e3",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "777c9f8d-b1f5-43c8-97a6-08a1b7734cb9"
        },
        "item": {
          "id": "93c5d786-4842-4e1b-b833-c759ab6a318f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3fc44050-6d15-4ea5-992e-de3ac46a983d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f389a2c-adaa-42b5-8760-d1009baa84ae",
        "cursor": {
          "ref": "776655d4-e976-4a9b-909d-a7137367a3a0",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "30005f6b-1272-40d2-973e-bcac977e734c"
        },
        "item": {
          "id": "9f389a2c-adaa-42b5-8760-d1009baa84ae",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "eb39d359-d837-417c-b3a1-a0e9e268a285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "305f2787-bd26-4435-91b9-112bea8439d0",
        "cursor": {
          "ref": "5e99a819-e891-4612-8a5f-7587bec93ba7",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "2439829e-200b-4f14-9ddf-b71fdd155cfb"
        },
        "item": {
          "id": "305f2787-bd26-4435-91b9-112bea8439d0",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8ec74c64-d3fe-4884-925c-73df972d9172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20abd968-6d63-468c-be4a-8e4d52ce9b81",
        "cursor": {
          "ref": "ba14c942-9448-4e5a-a59d-f123ff3e34a3",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "039b736c-99b6-4b97-8226-3e6d92820be8"
        },
        "item": {
          "id": "20abd968-6d63-468c-be4a-8e4d52ce9b81",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9d256427-65de-451a-9d7c-a61723c45b70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62109793-46d6-48d4-97d1-0aa6efbfb34c",
        "cursor": {
          "ref": "d15f521e-d400-441d-b82f-dc3f037b93e5",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4f872e71-76ef-45a7-8409-6aa7e2e81075"
        },
        "item": {
          "id": "62109793-46d6-48d4-97d1-0aa6efbfb34c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "31b1d231-3b4c-452c-8d62-a93010efb4f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0b878e-3227-4a7e-a41d-1b91d88513dc",
        "cursor": {
          "ref": "d4281979-aa58-42cf-b33b-a090faf65b71",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "70a7a9ab-0dfc-4506-9420-8902b70bfc39"
        },
        "item": {
          "id": "6d0b878e-3227-4a7e-a41d-1b91d88513dc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6d2dd8d2-ba7f-415e-bc3c-c1f8eed80699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8ff511c-a72c-45d9-bfe0-2092e1e50038",
        "cursor": {
          "ref": "1615769b-316e-4ff2-8445-524c0f88a338",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "37393407-4074-4cf9-b815-b30373f24e49"
        },
        "item": {
          "id": "e8ff511c-a72c-45d9-bfe0-2092e1e50038",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "40d66b7d-e8c6-4053-adbc-3046b2202d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e0ea0c1-8c52-40a8-8a21-9e9ba49dce5e",
        "cursor": {
          "ref": "476815ea-7958-4421-b15e-49e49469c6e7",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f597e20e-f8bf-48f3-b667-fc4569b29bfe"
        },
        "item": {
          "id": "3e0ea0c1-8c52-40a8-8a21-9e9ba49dce5e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ee9ceaff-973e-4063-a61c-e000e0f5fb3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32266ce8-0a0c-4119-8d20-0193f1610116",
        "cursor": {
          "ref": "b3967341-3865-4f34-91a2-32813439a696",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e991216e-756b-45f3-9fa5-190962fa56cc"
        },
        "item": {
          "id": "32266ce8-0a0c-4119-8d20-0193f1610116",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "dca4e6ab-78f7-439d-9b5e-2bde9afb366e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9452a4c-2da6-4d4c-81a1-65a63ffe4577",
        "cursor": {
          "ref": "f165fd2a-8710-4beb-8006-0e26b010f0c8",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "49b90068-35c3-4ff9-a74c-7129b8d7a33c"
        },
        "item": {
          "id": "e9452a4c-2da6-4d4c-81a1-65a63ffe4577",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3ae3f5ba-066a-4214-894a-1326018b684f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7119abb5-8c29-480e-b392-fbd3eeda4d16",
        "cursor": {
          "ref": "3df9e733-dc68-478b-ab50-cfd5863dbe3f",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "921dd38e-caf4-40de-a820-610923d743b8"
        },
        "item": {
          "id": "7119abb5-8c29-480e-b392-fbd3eeda4d16",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "80735b35-f14e-4d21-b710-c5c092ee97c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1181b2b6-e0d2-497b-8db9-180e3d3dd8c5",
        "cursor": {
          "ref": "a18fdf6f-3e12-419d-ae7c-f27e0b644b6f",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d2cf1727-f1d7-477a-9927-1b4859070396"
        },
        "item": {
          "id": "1181b2b6-e0d2-497b-8db9-180e3d3dd8c5",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "77d633bf-fdfc-4465-9134-82dc85f9b469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8acdfd2f-dae0-4e7c-a559-f705f62b1e2c",
        "cursor": {
          "ref": "7f596559-5111-4879-8832-d8d86956dad9",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "33fde9fe-7e5f-480f-98b2-17f8a798ea1f"
        },
        "item": {
          "id": "8acdfd2f-dae0-4e7c-a559-f705f62b1e2c",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "90dbf910-cf21-4f5a-b2fb-cc44ec32105e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78299113-210a-4a35-a98e-c64ddc39868c",
        "cursor": {
          "ref": "12b96af8-b11a-4be3-9c16-121f5b77b6d1",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "9d0e0917-51fe-49d0-912a-d21c76740a73"
        },
        "item": {
          "id": "78299113-210a-4a35-a98e-c64ddc39868c",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "4b520175-2e30-4155-82d8-09bb336fcfef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "601ee1ed-6794-4e2d-8436-61b52333bd57",
        "cursor": {
          "ref": "40febf85-a742-440c-9453-a1cc8c019b49",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "54e6d152-4718-4766-a239-9fab154d342b"
        },
        "item": {
          "id": "601ee1ed-6794-4e2d-8436-61b52333bd57",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "d305775e-d0a0-4da7-b27b-a209e5291dcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b95e7e-0a19-43d5-ac5f-1911fb903b3d",
        "cursor": {
          "ref": "806338f8-63cd-4933-9300-40fa1ba8d8cd",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "b849a2ae-ff4d-4943-878e-e14dcc6036a9"
        },
        "item": {
          "id": "82b95e7e-0a19-43d5-ac5f-1911fb903b3d",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "82419b01-1354-48f3-8b82-4988eb5d364b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a70a835-1206-407e-8135-a06514b956a7",
        "cursor": {
          "ref": "ba1d3a5f-b292-439f-a90d-96e436053452",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "98429002-4790-44e4-9368-b2454589b608"
        },
        "item": {
          "id": "5a70a835-1206-407e-8135-a06514b956a7",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "2b4ae987-d4ed-4fe8-a40b-13ff60dbf67a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a436f1fe-9200-4273-8e1f-09cb4d5e220e",
        "cursor": {
          "ref": "55d047e9-3e74-4c0e-8f51-5f1ffc672d3e",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "e714b925-6bd6-4109-8d3c-2eb6f1327e36"
        },
        "item": {
          "id": "a436f1fe-9200-4273-8e1f-09cb4d5e220e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8d9573d5-fcbd-4238-815d-91699a50a85f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "272311c9-4036-4a01-b9a8-0a87a278e9f0",
        "cursor": {
          "ref": "bcc80ce7-5d04-492a-9f91-9e3a6a65219e",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "03d34bee-b048-4eea-b9ba-c81a5d6ea53f"
        },
        "item": {
          "id": "272311c9-4036-4a01-b9a8-0a87a278e9f0",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e4f5eb2f-2e82-4032-9517-ce08e407a90a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5597ff07-561d-458d-8064-d7f10859947c",
        "cursor": {
          "ref": "f88c96f5-c95a-4cea-8704-670e3745fc9e",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "dd319246-b003-4597-b6e5-ff60328793b3"
        },
        "item": {
          "id": "5597ff07-561d-458d-8064-d7f10859947c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "012e6529-67b2-410f-b134-70eab9d8ecc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0434d4b-444a-4080-b5d4-c726e0edcc03",
        "cursor": {
          "ref": "147244ff-20d1-4e54-8302-2ffb76e4d726",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "dd34d487-82d8-4c78-8ab6-ae9136e0a3e9"
        },
        "item": {
          "id": "c0434d4b-444a-4080-b5d4-c726e0edcc03",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1ccd1c9f-5043-4245-aa0b-a35f1ac0d7e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9119e561-5b57-48fe-ba0a-b0c5697ae76f",
        "cursor": {
          "ref": "f0f3e413-b592-443b-9702-ed93be65c06a",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "eed1e22f-0771-449d-8094-f16adeb951b6"
        },
        "item": {
          "id": "9119e561-5b57-48fe-ba0a-b0c5697ae76f",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "978c3104-c121-42ef-9956-9183f9d41ea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99da9eb4-201a-41e1-b8aa-17c2bc839d41",
        "cursor": {
          "ref": "2d1be8fc-0de3-4539-981d-7a13f70bd987",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "ab14d4c3-ff5a-4433-996c-8f294b97e27b"
        },
        "item": {
          "id": "99da9eb4-201a-41e1-b8aa-17c2bc839d41",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "0ab521d7-2eca-4257-9c65-7593d2f6840a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d7ecaf8-5ca0-43f7-8e56-b6e0d5fc5896",
        "cursor": {
          "ref": "b32f2f19-0d29-4751-9840-a03d3e97ba23",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "8369dcbb-15f2-41d5-a6c5-4418c74d1296"
        },
        "item": {
          "id": "4d7ecaf8-5ca0-43f7-8e56-b6e0d5fc5896",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "6d426f68-e1ee-43dd-b310-be61ed553cb6",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "27060d86-39ea-49ba-a64c-00d99e24dfee",
        "cursor": {
          "ref": "41de0cb7-b1b6-4091-81bf-55017918551f",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "07f3a75a-e314-4cd6-86ca-0f6661471521"
        },
        "item": {
          "id": "27060d86-39ea-49ba-a64c-00d99e24dfee",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1803a845-5bd6-43aa-86d2-fe3309f6c492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "881affd3-f115-4a39-8b6b-79ef6d50cfd3",
        "cursor": {
          "ref": "87e13359-d3a9-488e-af82-6dd285d2a978",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "cd88641d-175d-4e80-b5ce-32c50ed9c880"
        },
        "item": {
          "id": "881affd3-f115-4a39-8b6b-79ef6d50cfd3",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "88f556dd-ee65-4072-8a50-7a745dffe9b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87c8e299-7865-407b-b761-151d48771973",
        "cursor": {
          "ref": "7be863ac-28a7-4759-9369-7b389f5c5477",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c3d15088-7cff-4b65-9817-d68d5bb29e2f"
        },
        "item": {
          "id": "87c8e299-7865-407b-b761-151d48771973",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d07b15ca-8410-4e1e-b029-258e6057325a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0cbd83c-6b5b-4f90-a4bb-02a3fd0b40b2",
        "cursor": {
          "ref": "1678ce7f-0640-47a4-9c2f-b9b4c806c3d6",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d44c3b87-bf3f-408c-a74e-fb7c010ed469"
        },
        "item": {
          "id": "a0cbd83c-6b5b-4f90-a4bb-02a3fd0b40b2",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9465912c-b345-4234-b080-d0fe93d0ebe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3822c874-ecfc-4bdb-aa03-ea75edf7d20b",
        "cursor": {
          "ref": "ab0c50e2-9b44-4cb5-8270-ab81c9507ee4",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "4eb228c9-5ea8-49bb-9e8b-33db78ae11bc"
        },
        "item": {
          "id": "3822c874-ecfc-4bdb-aa03-ea75edf7d20b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "48d2ede4-8d38-4a29-9e4d-f8333b2d510b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9030f481-8752-47a6-9cbe-211db3228f6e",
        "cursor": {
          "ref": "e945ef1e-8e48-4d41-8d9e-9d15624a9318",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c84b5a98-cddc-44fe-8d8a-e5a1b01c6b4b"
        },
        "item": {
          "id": "9030f481-8752-47a6-9cbe-211db3228f6e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "fcb32747-8998-4ab9-80d3-fe81577c0843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4945292b-f6df-4701-9f86-46c0dee8f0bc",
        "cursor": {
          "ref": "77642682-0afb-4e19-880c-8ac9d5c60f4f",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "44ba4aa3-74fd-4317-a643-86478245e42f"
        },
        "item": {
          "id": "4945292b-f6df-4701-9f86-46c0dee8f0bc",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ffc29a3d-c600-4291-a5e9-65c93ebf8e95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9620b9b1-4ac6-4f7a-81ff-d63fcb58b4d9",
        "cursor": {
          "ref": "8a6ca414-f7fe-415d-9ded-f832e44182bd",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "61e210df-bc47-40c5-a50e-bcfd4fbac173"
        },
        "item": {
          "id": "9620b9b1-4ac6-4f7a-81ff-d63fcb58b4d9",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f7a66a93-6042-4fd2-bc2e-611a74a735b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb3f05e-ec3f-4a3b-9969-74d228208757",
        "cursor": {
          "ref": "6619dfc0-f7e5-42e3-8ada-9797183e1a9f",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "cf28c6b5-9237-435a-9d69-06b1280dba5b"
        },
        "item": {
          "id": "fcb3f05e-ec3f-4a3b-9969-74d228208757",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "96809443-4b18-4327-ab2d-e4076919bae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53460adb-c62a-415c-a820-0ecfbac0c222",
        "cursor": {
          "ref": "3e7fd794-97ba-41d0-8afc-bee5c56ecb21",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "1151bdbb-e16e-414e-8be6-d3cacb899371"
        },
        "item": {
          "id": "53460adb-c62a-415c-a820-0ecfbac0c222",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "007dc827-a15e-421f-b460-7eee39184272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6297ee89-ae01-406c-8d20-15ead02b3223",
        "cursor": {
          "ref": "adc2c0d1-b747-46f5-ad87-058473d83564",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "69d8902f-813a-420f-bb06-bb53fc3feaff"
        },
        "item": {
          "id": "6297ee89-ae01-406c-8d20-15ead02b3223",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "d955e99c-c1aa-4319-9c46-95590d2ea372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "accab43f-a7ba-4806-bd90-97864951104e",
        "cursor": {
          "ref": "f5ce5100-7339-4073-b982-7444f22ea1a5",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "6d6adcb0-95c3-42cd-92ad-c8cffb222db0"
        },
        "item": {
          "id": "accab43f-a7ba-4806-bd90-97864951104e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "e6a73341-537b-4bb0-93fc-ca84cf3450b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0674b38c-3c7a-413e-992e-48ee7a0f6d9c",
        "cursor": {
          "ref": "c0c00a58-c2ac-4ac2-ad0f-f3c712f6650f",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8040bbb3-30d4-4e05-b5b7-ad2402e76958"
        },
        "item": {
          "id": "0674b38c-3c7a-413e-992e-48ee7a0f6d9c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "4d60c63f-4839-4ea9-9125-61f3a9918190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac136b8d-002c-4b5a-9c96-b28d5769a05a",
        "cursor": {
          "ref": "6d97ec8c-813c-4512-952f-d611a9e99c03",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "99fb8132-6be7-4d81-ba84-964ddffaad76"
        },
        "item": {
          "id": "ac136b8d-002c-4b5a-9c96-b28d5769a05a",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "3a9292e7-1582-4c26-87f0-7e2f8fdd200f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d031c1b-5aa5-41a5-aa7f-1c6997b28d9a",
        "cursor": {
          "ref": "e35149cb-1263-4f50-982c-0d6434457f70",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "cf72b0d5-657a-446b-9b2e-a7a4fc73ea63"
        },
        "item": {
          "id": "7d031c1b-5aa5-41a5-aa7f-1c6997b28d9a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b6c73679-e7ad-4441-8036-44c14aa7fc0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "603ec4cf-d969-4943-bc21-696057accb69",
        "cursor": {
          "ref": "8b8b37bd-33d9-4b9a-b7c7-a3cc1f0e2961",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "4620560b-8ebb-4f73-bbe5-16c6427e25ad"
        },
        "item": {
          "id": "603ec4cf-d969-4943-bc21-696057accb69",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "81afa676-7db4-41c0-b6fc-4b29f2c28b53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a993aba-50ff-480f-8218-007d21667442",
        "cursor": {
          "ref": "cf026e33-b4f9-4ac0-8c94-c6b8aa07601d",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8eb78ca2-ac38-45bf-b813-fc4d8239b36a"
        },
        "item": {
          "id": "1a993aba-50ff-480f-8218-007d21667442",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "9be660cd-d54c-486f-b3c2-037540b3830d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26990d75-db68-4fdf-97dc-3e26c54e6713",
        "cursor": {
          "ref": "ba9e62ed-431a-4bd1-82b6-f71a0bfdf0fb",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "9f3813a3-337f-4409-b2bd-aeff7ce056e0"
        },
        "item": {
          "id": "26990d75-db68-4fdf-97dc-3e26c54e6713",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "1b27f7a6-8a8c-4f1b-b392-cd74f5d6193f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dc61af8-63fb-4274-815a-2c9b57f1bf4c",
        "cursor": {
          "ref": "509b42b4-c5c9-4269-8794-148e9eb99db3",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e40353d6-9db2-47b6-b0b0-3ae0f1743e42"
        },
        "item": {
          "id": "5dc61af8-63fb-4274-815a-2c9b57f1bf4c",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "acb2e4fa-dad0-4989-ba0c-32c161d4f8c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5eeb978-d877-4d49-830a-09cde504b727",
        "cursor": {
          "ref": "78022407-2cbd-4fd4-8844-66aeb6afefa1",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "359164fd-4423-4731-86ff-476ae8c4cd8a"
        },
        "item": {
          "id": "e5eeb978-d877-4d49-830a-09cde504b727",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "bf7fc1f8-e0b2-4174-a74f-68a50343fa5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b201045-594b-46b1-bb03-04bc0e5d1a0b",
        "cursor": {
          "ref": "50c18492-850c-467a-a586-d9619515897f",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "cb767206-4ad6-4791-af51-36f0cc0577d4"
        },
        "item": {
          "id": "1b201045-594b-46b1-bb03-04bc0e5d1a0b",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "4569aae5-7195-4a65-864b-eb59f038e380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f86dfc87-0e21-4790-9192-894b5a30a9c1",
        "cursor": {
          "ref": "dc918f21-cc39-42fe-a690-226704010675",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6c4e1eb5-26b6-46fb-b1c8-3c9eba62823e"
        },
        "item": {
          "id": "f86dfc87-0e21-4790-9192-894b5a30a9c1",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "282e7d02-10bc-4fb9-8b45-d51c2eeb6b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a4eeb58-1ac9-4f89-be33-d10798b5312e",
        "cursor": {
          "ref": "d3047637-2151-45a7-a293-1eace4f36812",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "1bb0f384-c70a-4e41-9771-8c558a7f156c"
        },
        "item": {
          "id": "2a4eeb58-1ac9-4f89-be33-d10798b5312e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "65d75a51-c77b-4832-81b4-e695b72d86bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b07ebd01-06d3-4667-b23c-421bf8df34c5",
        "cursor": {
          "ref": "c77bff57-e73f-4559-b80a-ffb9a46e4b58",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "64787abe-dcb0-42d0-8048-385de4085e74"
        },
        "item": {
          "id": "b07ebd01-06d3-4667-b23c-421bf8df34c5",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "0eeb66e0-38bc-4066-a588-e9b61924beb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1df62c3c-9a13-4cb8-a279-d621c3d59a97",
        "cursor": {
          "ref": "3e6856a2-9db6-41ed-876f-148b38774f61",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b30f7146-93ab-4888-b61f-d9c86aa70549"
        },
        "item": {
          "id": "1df62c3c-9a13-4cb8-a279-d621c3d59a97",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "81193dee-1cd9-46f0-8dbb-b71a36f027e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f93b6c2-6d60-4a34-856c-ea592f19f576",
        "cursor": {
          "ref": "2ee21ce5-730e-47f4-b64d-1190a8bead31",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "225a9ddc-9fbc-40a0-bb4b-170bf42a798b"
        },
        "item": {
          "id": "0f93b6c2-6d60-4a34-856c-ea592f19f576",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "1f8cc351-8a72-4eef-9c27-4561bdf76e66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08df06a3-62fb-4c1a-ade4-f866910eb9b7",
        "cursor": {
          "ref": "c65718c4-e5ea-4175-8d00-7268e3bc4245",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "432dde05-ee47-4312-a5c5-bb03ca5e8b97"
        },
        "item": {
          "id": "08df06a3-62fb-4c1a-ade4-f866910eb9b7",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "fe3d0bf9-a8e4-4695-a63b-13b4e55026a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd8a034-ce71-49b2-80a8-7c6c0bcf8553",
        "cursor": {
          "ref": "e196474c-320f-45d9-ba4d-33143679e319",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "2362e077-bab0-484d-afbf-0651b30cd41b"
        },
        "item": {
          "id": "6fd8a034-ce71-49b2-80a8-7c6c0bcf8553",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "4a5716aa-6561-4703-8354-b7514eff3532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3d8f893-f883-4efe-bc95-e478f3326eee",
        "cursor": {
          "ref": "19b31298-ba39-4315-9404-eb27171878fa",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "7e40ec9b-9183-431c-a82f-3796a2d084b2"
        },
        "item": {
          "id": "f3d8f893-f883-4efe-bc95-e478f3326eee",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "76a677bc-bf60-4ca5-a8f6-5bf02d3c6b25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fea78416-7f33-4001-84ad-460759e979ed",
        "cursor": {
          "ref": "2a48922d-3951-486f-a478-74e0e43eb8c2",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3c946755-e202-40c2-8900-2bfe82d15ddc"
        },
        "item": {
          "id": "fea78416-7f33-4001-84ad-460759e979ed",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "20855dcc-fc07-4f59-9e65-a2ffb43faa42",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "a6911d66-a70f-4d32-a169-4a0d0eb9cb33",
        "cursor": {
          "ref": "ba031416-e444-4826-b50b-c59811136906",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "9c46507a-a101-40ce-95e9-ae00ca0a113f"
        },
        "item": {
          "id": "a6911d66-a70f-4d32-a169-4a0d0eb9cb33",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "07a6093e-cebe-41b5-a6e1-da1248451cbd",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "ae8c58ed-652c-44ee-9604-9fc02b6d3bd4",
        "cursor": {
          "ref": "f41e0bc3-1f54-4ac3-8020-37e30b2a20f2",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "338520de-7535-4a1f-b76f-70970ba55506"
        },
        "item": {
          "id": "ae8c58ed-652c-44ee-9604-9fc02b6d3bd4",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "9ec0f862-e95d-48d5-b08a-2d474f74e8b1",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "60feb95e-f291-41df-8eb7-f83166c3ff9f",
        "cursor": {
          "ref": "fb814963-a3d3-4a86-b2be-6ccc3ed1a01a",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f5c59307-a8af-4049-9976-76339ad88a9f"
        },
        "item": {
          "id": "60feb95e-f291-41df-8eb7-f83166c3ff9f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "7482910c-d220-4f7e-92a3-5e85742b1190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb3ecabb-87fe-4d10-adf8-babb0279b6ac",
        "cursor": {
          "ref": "9b7097ce-36aa-4eab-904c-4793272ba396",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "654c97ca-9879-48d5-948a-d67f5d929662"
        },
        "item": {
          "id": "cb3ecabb-87fe-4d10-adf8-babb0279b6ac",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "01f9911b-fc2f-49e3-b9eb-70dedd62cee5",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "23c7b9c7-d1f1-4872-8fbb-af5646ef2cd8",
        "cursor": {
          "ref": "34834939-c07d-49e4-98f3-8a320cd6a888",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "931fba7d-95cb-44cb-b6b9-4ae62feb064d"
        },
        "item": {
          "id": "23c7b9c7-d1f1-4872-8fbb-af5646ef2cd8",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "54423f45-52e0-4921-b30f-c882d83f0c88",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "6cf33104-0089-47b5-8130-c11b4645203f",
        "cursor": {
          "ref": "c7a4e787-d470-4c0d-85a4-bed0fa1d6a4b",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "477e8b82-a919-4f4f-890a-e8280e1d3cb8"
        },
        "item": {
          "id": "6cf33104-0089-47b5-8130-c11b4645203f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "275477e1-a93c-440f-bb49-3437844930f3",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "6293b4fc-19a1-480c-8333-58bd202d528c",
        "cursor": {
          "ref": "2f38bbfe-0967-43bd-b6b5-e62a60155abd",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b7d454e7-4b70-4c18-a968-a403e1af0360"
        },
        "item": {
          "id": "6293b4fc-19a1-480c-8333-58bd202d528c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "1f7d2aca-1e82-48dc-9176-5e8cbee246f5",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "319dea8c-9c24-4159-a911-84e0fb553654",
        "cursor": {
          "ref": "507e4c70-71cd-42af-ae44-0995afb22c18",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "88246eb2-3f05-424c-9cc1-5228882fcfde"
        },
        "item": {
          "id": "319dea8c-9c24-4159-a911-84e0fb553654",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "3660f997-c663-4688-b3e4-59e3ee625d1f",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "cc025979-b3f0-4953-abae-9a02c3ea0a06",
        "cursor": {
          "ref": "efd1a2e4-e99b-432b-8184-34e5da76d0f7",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "08660398-69d1-4115-8beb-401da59ef217"
        },
        "item": {
          "id": "cc025979-b3f0-4953-abae-9a02c3ea0a06",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "232808f9-8307-48d2-8b0d-5507d056fc10",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "7539ca56-375e-4f4e-bbc7-88f40ee23cd1",
        "cursor": {
          "ref": "2e221d72-b7ea-4285-b7fc-0008d1e85032",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e86d686e-6e15-45b1-b9ce-5f1014a6f052"
        },
        "item": {
          "id": "7539ca56-375e-4f4e-bbc7-88f40ee23cd1",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "2ef7deea-ec9b-4a2e-bac4-aaac8f343875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "592a1471-d427-4b2a-a351-f91b5b6cca01",
        "cursor": {
          "ref": "3bfe4dac-86f0-42bb-8192-fd300d436c2c",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "7c076b51-6493-4be4-b178-b1267913b1cd"
        },
        "item": {
          "id": "592a1471-d427-4b2a-a351-f91b5b6cca01",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e66364fc-ea5d-4596-a8e5-9939f7a5a382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "074958b9-af28-4872-9f43-74fa6b12472f",
        "cursor": {
          "ref": "f9688a4d-b5ef-46c1-a5f2-16c3391cc296",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "11a61ae3-4488-4d0d-a73d-c13fbbfcc45d"
        },
        "item": {
          "id": "074958b9-af28-4872-9f43-74fa6b12472f",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c0411d85-d5fd-4454-ab97-da830ec1df7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79ddb3cf-cdb2-4029-a008-14b40f24352c",
        "cursor": {
          "ref": "7dc30bfc-9208-4fbf-8f4b-7730037d9972",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "81c8d4e3-ba9f-489b-86d0-2558e1b0527b"
        },
        "item": {
          "id": "79ddb3cf-cdb2-4029-a008-14b40f24352c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c3d5ecc9-fa5f-4a2d-b285-fec277802122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d5c9b88-4d68-4950-9e99-fb289c0f656d",
        "cursor": {
          "ref": "a6f5d274-3f59-4aab-8de6-9cc0b7025d52",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "95c7dca4-be60-4ad9-930f-1bc3445470da"
        },
        "item": {
          "id": "3d5c9b88-4d68-4950-9e99-fb289c0f656d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "507c8095-d969-4163-b5f0-9fc6fa116c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44e88d14-b62f-4154-b382-9ea49562aaa7",
        "cursor": {
          "ref": "4e224bf8-7445-4f7c-b99b-79d5a2e7ff8a",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "4588a6f4-7075-42b9-891a-1d1bebf44cbf"
        },
        "item": {
          "id": "44e88d14-b62f-4154-b382-9ea49562aaa7",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "734ecb59-11e3-40b9-a5c2-6e4d338a7bc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39eac2e1-8b27-4078-9aee-eececa43733c",
        "cursor": {
          "ref": "99b65db6-8ea8-4709-9ee1-1490ab6a3c9f",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "16eb8e4e-9ce6-4a0e-b491-2d4c24406dca"
        },
        "item": {
          "id": "39eac2e1-8b27-4078-9aee-eececa43733c",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "72c107bf-4292-4ef1-bda2-4db9de9c7699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6be0786-fe43-4d1e-911e-a7e3cc6ab96c",
        "cursor": {
          "ref": "9b124c4a-3ca3-4ef2-bb52-d845360309a0",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f7debc0f-a1f3-4e7b-be8e-fde2a25177eb"
        },
        "item": {
          "id": "e6be0786-fe43-4d1e-911e-a7e3cc6ab96c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "97ecfe98-2fd6-4600-b903-14102b3b09e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d55d0033-758f-4e00-93a6-80cb6d870682",
        "cursor": {
          "ref": "3cbcfe17-082b-4161-a9b1-80acfa38cffe",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4d73747f-203e-44e2-b592-0c835d04d09f"
        },
        "item": {
          "id": "d55d0033-758f-4e00-93a6-80cb6d870682",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c2405bb9-10c1-465d-a807-35b6a9bf7e77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2b9ac00-5d18-4437-81df-298fde33ec00",
        "cursor": {
          "ref": "a7817f61-20e8-468c-b6cc-13bd04c8a0ac",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "2d0553f4-ca0e-4251-ba4d-1aeb3a75a653"
        },
        "item": {
          "id": "e2b9ac00-5d18-4437-81df-298fde33ec00",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "3d3706d8-66eb-4dff-968f-59fbc713edd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aee2a8f-70a1-4dfe-9306-d3c737307fa9",
        "cursor": {
          "ref": "f29dde81-0079-48e5-a238-aa6b8e192d2d",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "0be136e3-cfeb-432c-a119-7de53dc96589"
        },
        "item": {
          "id": "0aee2a8f-70a1-4dfe-9306-d3c737307fa9",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "8874edeb-5d0b-4611-8d32-98fc8124961b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30391ceb-dec3-4cba-ae08-970e3c1f1a68",
        "cursor": {
          "ref": "78e718a8-9524-473d-9587-6a5cbef49ce6",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "2702c9d5-ae34-45f4-9ea7-4d8da132e92b"
        },
        "item": {
          "id": "30391ceb-dec3-4cba-ae08-970e3c1f1a68",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "64536d60-a600-4bc1-b88f-3c5aa2864bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a52c63f-6078-4905-afa8-d4807c0b28c6",
        "cursor": {
          "ref": "68c2620c-57d5-4c5f-80e7-f470c805a72e",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "53868d40-630f-451b-990b-8ade9eb2596c"
        },
        "item": {
          "id": "0a52c63f-6078-4905-afa8-d4807c0b28c6",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "c65ad3d7-df82-4537-a97b-3df20f19daa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "354fd9ac-ba47-42f9-9c9f-2ba89a37d61d",
        "cursor": {
          "ref": "73983054-7be6-476d-a2dc-67ee6e5cf96a",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "fc681370-bc40-4824-9285-e299d460e97f"
        },
        "item": {
          "id": "354fd9ac-ba47-42f9-9c9f-2ba89a37d61d",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "88a22677-d11c-4511-a52c-1c3e21ce4892",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "18fa62e3-e4e1-4aea-af56-1c0174dfa61b",
        "cursor": {
          "ref": "1de66dca-8190-4939-8b51-16874ec6b5dd",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "56075851-213e-43e5-a38d-25ecfed2cc5b"
        },
        "item": {
          "id": "18fa62e3-e4e1-4aea-af56-1c0174dfa61b",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e03804c7-c781-4f5a-be03-c60241bef84e",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "bf392d3c-d8dc-4e70-91ad-25b1ac83110d",
        "cursor": {
          "ref": "36a1bfa2-57b5-4a37-bc21-636ba50ea0b3",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "8ac05b44-c419-4058-853a-a9b752debd27"
        },
        "item": {
          "id": "bf392d3c-d8dc-4e70-91ad-25b1ac83110d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "1d02f831-7aa3-4859-bb62-39d0f661c668",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "01dbb224-b44b-4d53-b81b-bfd52a383226",
        "cursor": {
          "ref": "c7584a71-5194-41c8-9057-52d0a5380089",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6bcd6c64-af39-45f4-816d-eeca6d5dee4b"
        },
        "item": {
          "id": "01dbb224-b44b-4d53-b81b-bfd52a383226",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "cdc467e0-04e5-4155-bd7a-630ba025ee24",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "75a3d4d2-4cd9-4009-9625-97e4a6137b4b",
        "cursor": {
          "ref": "222a7226-3010-45a7-972f-186d43f25fbf",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6543088a-f390-4f1e-82f2-2c1ac1ab6466"
        },
        "item": {
          "id": "75a3d4d2-4cd9-4009-9625-97e4a6137b4b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "1ccb0f68-b043-458e-9ef7-7ab073af6a58",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "9d8b05e9-1cbb-4836-bfa7-ed80c4783c8e",
        "cursor": {
          "ref": "f3dc9260-3e99-4ad6-a9ce-3b1a14206a04",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "9a677800-7a4a-4892-a2ae-5c8161bb9f05"
        },
        "item": {
          "id": "9d8b05e9-1cbb-4836-bfa7-ed80c4783c8e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d7dff11a-6695-4d38-ba29-958e61354717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "457d11da-3a53-4913-95c3-f5777ab2ac69",
        "cursor": {
          "ref": "11bfdedf-6563-4e88-b9bc-f4ac30d29958",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a14b2f6e-41fb-417c-8b50-997dcbe4475e"
        },
        "item": {
          "id": "457d11da-3a53-4913-95c3-f5777ab2ac69",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b07fa6bd-cb4e-4199-8f08-b97779303b50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0adaba2b-cc40-4f2d-8b03-9c20bf30d833",
        "cursor": {
          "ref": "a65ff6d2-219c-4f7c-b4b3-6c0baa2bddf4",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "2dfee479-dced-45a9-b3cf-59cb8d4c2120"
        },
        "item": {
          "id": "0adaba2b-cc40-4f2d-8b03-9c20bf30d833",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "4ebb3d1f-dae3-49ae-88b5-f7281e2892dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d0f78c9-be20-4694-8115-9fc35b8e271c",
        "cursor": {
          "ref": "a6c9f481-ac3a-411e-a63b-f6346bc8be31",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4ec23359-affc-4ffc-a693-810455a14abd"
        },
        "item": {
          "id": "9d0f78c9-be20-4694-8115-9fc35b8e271c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "336a6959-9f2a-41e8-8dd4-8bea106aa353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87cbbfcf-678b-44c0-9231-376bba2e17a6",
        "cursor": {
          "ref": "a70774f1-18b3-4707-a531-f94ff3d83518",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "1f3d518d-ec4b-46df-8bbb-f7b923c8ff81"
        },
        "item": {
          "id": "87cbbfcf-678b-44c0-9231-376bba2e17a6",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2e219f8e-2065-45fc-bf29-9b67c7834003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71b585fc-64b5-4c99-bcc0-618047469dcb",
        "cursor": {
          "ref": "2d32a1cb-81fa-4c48-8497-221fac0fed94",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "bf118806-7395-40a1-9063-b9d2e8613cbf"
        },
        "item": {
          "id": "71b585fc-64b5-4c99-bcc0-618047469dcb",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "74662a8d-efed-42c3-bde6-862dc4ba0948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e512928a-6806-47f5-92bc-8e5681649c98",
        "cursor": {
          "ref": "7276d4e6-c23a-433c-89f7-1a780cfe72b9",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "33d15bac-c879-452d-8fe2-695877f1e587"
        },
        "item": {
          "id": "e512928a-6806-47f5-92bc-8e5681649c98",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "5d2b3668-ae03-4a99-813c-45645e211690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "124c33c9-c281-4f5b-be7e-90b65badaff4",
        "cursor": {
          "ref": "d3c73f9b-c08e-4ad8-b868-7d3338cf36c4",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7dc16c27-7b47-444a-a3a1-23369d1adc31"
        },
        "item": {
          "id": "124c33c9-c281-4f5b-be7e-90b65badaff4",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "eef77ec4-d67b-4de8-bdf3-d51e12079a13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab2ff4f3-286f-48bc-b63a-57a045ba35ad",
        "cursor": {
          "ref": "4d7e0294-ee51-4bd9-90f2-d1ab5fa00443",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b37be800-df6f-4544-b93b-6ea75e97c568"
        },
        "item": {
          "id": "ab2ff4f3-286f-48bc-b63a-57a045ba35ad",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "5ae37828-80e8-4d0b-8fcc-8a51ed80ea2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90e99554-18fb-414f-a5e9-d04f8f73d301",
        "cursor": {
          "ref": "d2044ced-d113-4959-a7f8-82c621ecc452",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "71658898-938a-4a4b-8732-c869de96cfb6"
        },
        "item": {
          "id": "90e99554-18fb-414f-a5e9-d04f8f73d301",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "9843be98-17fb-4490-80fc-87939c6a9587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a05d67d9-9d92-4c42-a0a3-956cdca67a88",
        "cursor": {
          "ref": "6ef11563-ee32-4d02-9bd3-cd1b282e2c11",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ea1a5000-cd46-4506-b265-81f4745855df"
        },
        "item": {
          "id": "a05d67d9-9d92-4c42-a0a3-956cdca67a88",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7985e3cb-9428-4af7-95c7-90e8def15687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c3c0ad-dc87-4fd8-8116-590f9cacb126",
        "cursor": {
          "ref": "df1719fd-b35e-45e6-b5d9-11d3d52af9df",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "abc1718a-8a92-496f-8444-a245d625855f"
        },
        "item": {
          "id": "55c3c0ad-dc87-4fd8-8116-590f9cacb126",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "6e8d4b97-c91b-4a44-b229-e2ae0f2d7c70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "744a58bc-45b7-41a7-a227-cfc663fdbde9",
        "cursor": {
          "ref": "3cc610b2-39a9-4721-a33a-ea633f7f9313",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "cd4e0e26-8744-41a2-899e-1e9ba0701510"
        },
        "item": {
          "id": "744a58bc-45b7-41a7-a227-cfc663fdbde9",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "8f1df2a8-abc7-44c2-841a-768a1773a2e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f10d8f41-a98e-4d96-9355-1ff832ae39e1",
        "cursor": {
          "ref": "11221737-882e-415e-b311-d31dc7a2daa8",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "195906f0-86a9-4c63-b63e-29ccab086172"
        },
        "item": {
          "id": "f10d8f41-a98e-4d96-9355-1ff832ae39e1",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "0cecd136-471d-4599-9467-4c571ab59d44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5be7ad6-10cd-4468-b8aa-3a32d1d7c796",
        "cursor": {
          "ref": "dcd81a2f-6371-4e35-a1ec-8d49ecc2f880",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d4477fb7-e358-40e5-983d-d66c428d0b0e"
        },
        "item": {
          "id": "f5be7ad6-10cd-4468-b8aa-3a32d1d7c796",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "d5012995-99b5-43c1-a935-657dc9f352a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bdca532-38c8-4612-af72-af3bbd8ebe3d",
        "cursor": {
          "ref": "bf960ae0-435d-4fa3-9873-19c2922c5df0",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9b9e2565-375a-4710-98f6-4454acd6a31f"
        },
        "item": {
          "id": "0bdca532-38c8-4612-af72-af3bbd8ebe3d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7bd412b5-d0e2-48b4-ac60-b2d8820a3f88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "130fe142-432a-4b75-9a15-88778c33e2ae",
        "cursor": {
          "ref": "8d98c322-188b-45ca-85ac-6d92ba9ab236",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d776f8e2-5b86-473c-8952-ef81a5a5a201"
        },
        "item": {
          "id": "130fe142-432a-4b75-9a15-88778c33e2ae",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "996e1eb0-9bcc-4a28-956d-e543cc56a4dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34a2e887-da83-4e99-9680-b484be3bf1b9",
        "cursor": {
          "ref": "4d0f3983-2285-4b96-a31a-3f539d4a20b6",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a8e7014c-c297-41ca-a15f-857a13619403"
        },
        "item": {
          "id": "34a2e887-da83-4e99-9680-b484be3bf1b9",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "623d1ba6-1d50-4d20-8a31-6acac6bcf126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5590bf4c-80d5-4f70-a5c0-15af9f4cbf8c",
        "cursor": {
          "ref": "599c19a4-fe04-4e8c-b1f7-97ea671738d7",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "00017d38-7ab9-48ba-9fd0-bd7d431dd87a"
        },
        "item": {
          "id": "5590bf4c-80d5-4f70-a5c0-15af9f4cbf8c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "92ef1f9e-e777-4ebc-b540-5d75afe867fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "640a2ff9-88b7-49a4-aca0-132551d556e1",
        "cursor": {
          "ref": "7139af93-4c95-439f-b7c7-27e9da4f0187",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b60accb5-31f8-4c84-a989-4e9655046110"
        },
        "item": {
          "id": "640a2ff9-88b7-49a4-aca0-132551d556e1",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d929a02b-90a1-4e48-b313-de0461293336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d34fd241-a0b8-49a6-a6c4-17dcb90d4d10",
        "cursor": {
          "ref": "e8c1f13b-be65-44ab-9752-5668062a30bd",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "51a84ae8-24f1-4682-83ba-4c5b4ae3d2c5"
        },
        "item": {
          "id": "d34fd241-a0b8-49a6-a6c4-17dcb90d4d10",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a741ad84-b507-4ca2-8d7a-37e92e0ca975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b74e212b-b946-4bef-aff5-27777f63b6ca",
        "cursor": {
          "ref": "2d21282a-0663-4d73-85a8-434bab171a9c",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "625609bc-e2cc-4dab-add5-f85f8dac6ef5"
        },
        "item": {
          "id": "b74e212b-b946-4bef-aff5-27777f63b6ca",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "bdfa1a57-3985-45e8-9ee6-83c9574d09ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "508e848e-6a01-4ca8-97f6-511e063a9c8c",
        "cursor": {
          "ref": "48dc8d9a-6c16-4fe7-a22f-b673e49ef370",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "12caa2b5-8a72-46fb-a400-1359614f2c57"
        },
        "item": {
          "id": "508e848e-6a01-4ca8-97f6-511e063a9c8c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e142909c-1ea1-4c63-8e97-85b1889de457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab24d669-1979-4635-b781-cc0b6ec28201",
        "cursor": {
          "ref": "c63a8c2d-0b4a-4887-a93d-440504c487dd",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "d7bb5ea9-3bca-4cdf-bfd0-b800a2d2ec16"
        },
        "item": {
          "id": "ab24d669-1979-4635-b781-cc0b6ec28201",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "8e2ee0cc-c54a-4eff-8935-1a44e0978c81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7364d468-1aa0-4484-9090-890bdca97136",
        "cursor": {
          "ref": "cd3501b4-28c2-46b5-83f4-999f8f711bb8",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "6cb17419-b027-413c-804a-8bdbc915ace4"
        },
        "item": {
          "id": "7364d468-1aa0-4484-9090-890bdca97136",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "79c27ac3-5a21-474c-b8bf-ae3e615a9da6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ec1411-5923-41c3-b445-77f13fc0a632",
        "cursor": {
          "ref": "49a2754f-64b4-41d8-b53f-5a1e6797833a",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "8237a49a-b88f-4519-b09e-7c95bc3d9949"
        },
        "item": {
          "id": "28ec1411-5923-41c3-b445-77f13fc0a632",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "1c6a2e54-f9e5-4a39-9ad2-62af687106d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c9b9103-1b0d-4f2d-995d-534dace9315e",
        "cursor": {
          "ref": "fd0713c5-b5f2-4206-8c73-db88e5c24181",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "9499e99e-56ab-4b6b-b0ee-5abaa5af7a4b"
        },
        "item": {
          "id": "7c9b9103-1b0d-4f2d-995d-534dace9315e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "945b912f-b640-40d6-ad83-bc99f912dd1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d38b03a-be3c-4064-84da-4d4cec1c46c2",
        "cursor": {
          "ref": "05e2efba-b80c-4476-8402-235fe571fe15",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0256599a-f389-4853-bdba-c8e1a57534ea"
        },
        "item": {
          "id": "3d38b03a-be3c-4064-84da-4d4cec1c46c2",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "d34343c1-3514-426a-9169-5fd8d43f56f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b799c4-5bf0-45e4-9b34-5f3f476b9e3d",
        "cursor": {
          "ref": "0982f1bb-3d93-4b45-9db6-8e8c9776cf05",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "bb90ebfd-1537-478d-a298-f9cf5d1e3197"
        },
        "item": {
          "id": "78b799c4-5bf0-45e4-9b34-5f3f476b9e3d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "2dc10025-bf8a-4d4d-8019-8902192b9cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09344d78-9962-4b42-9738-9c2213edb020",
        "cursor": {
          "ref": "ab5daabd-d04e-4361-9ba6-b9ae3c2b430b",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "921e13e6-6970-480e-9f1e-2c8d2ca33da5"
        },
        "item": {
          "id": "09344d78-9962-4b42-9738-9c2213edb020",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "67032275-0afb-4439-baf8-7d79f340cf4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c1484db-28af-46a8-9295-82a4b955ea8e",
        "cursor": {
          "ref": "4500a609-4e39-4361-b8be-aed013f1981c",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "84a54786-8db9-4287-9d34-07c987ec9820"
        },
        "item": {
          "id": "3c1484db-28af-46a8-9295-82a4b955ea8e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "1ffc26ac-86db-4b26-b4e8-de5529ce2c06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "170b13de-872b-4205-ac0f-d293c4535435",
        "cursor": {
          "ref": "7652cbd4-704e-490e-a5c4-a7231f86db3c",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "62cc047d-11fd-4ecf-89ef-14f979febcef"
        },
        "item": {
          "id": "170b13de-872b-4205-ac0f-d293c4535435",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "bda62740-0ad8-473f-9b0d-4defef7c6f38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c49f085c-bfb9-4936-8604-c24fac06ff47",
        "cursor": {
          "ref": "fc104e6c-84e6-4080-86e5-ac530c4c2386",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "af713e1d-7cbe-4607-98fa-abf636e32ea2"
        },
        "item": {
          "id": "c49f085c-bfb9-4936-8604-c24fac06ff47",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "8c1e2726-cf29-4c7c-a7a9-e0b46d5395b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f76f83-9d28-4f34-9073-98cbcd753d58",
        "cursor": {
          "ref": "ae6b6adc-7f0c-494c-99cc-d058022aad78",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a2b17604-81a0-4ef9-ba29-245cdac43385"
        },
        "item": {
          "id": "12f76f83-9d28-4f34-9073-98cbcd753d58",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "6512de46-bfe3-4d6d-a27c-62ede4d5b57a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f98ba667-e318-4e68-a64c-c90c800030c6",
        "cursor": {
          "ref": "8f446ddb-f1b2-408d-96c2-155e16600486",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "8635e712-7190-4185-8906-241c1c7917da"
        },
        "item": {
          "id": "f98ba667-e318-4e68-a64c-c90c800030c6",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "cc024919-9ae5-4536-b74a-5b9ead2df652",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c00f136-5f78-4dd7-b3bf-a9f63b127339",
        "cursor": {
          "ref": "17307921-8824-41a7-9e0f-cf7bc2043cdb",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8405065d-f08b-4d7e-a3d2-d1ac19ad56ae"
        },
        "item": {
          "id": "5c00f136-5f78-4dd7-b3bf-a9f63b127339",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "9305bab2-4fe8-44af-ae51-1f047816c9ca",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "5cf11f84-8dfc-4528-b41e-57165d8da262",
        "cursor": {
          "ref": "386128cc-2ca9-4ab4-bf2d-994c85c83d94",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "33849948-74f6-492a-a31b-70b7040b0f7c"
        },
        "item": {
          "id": "5cf11f84-8dfc-4528-b41e-57165d8da262",
          "name": "credentials_verify"
        },
        "response": {
          "id": "12ce98a8-7345-4853-9a90-abee0e5b0311",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f513566-41e3-4501-94bd-b58666968397",
        "cursor": {
          "ref": "0f548a7a-044a-4595-aac8-69bf550c651c",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c3b72c13-13de-403c-8d12-85cb35d99c14"
        },
        "item": {
          "id": "7f513566-41e3-4501-94bd-b58666968397",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d1b74adb-be79-4953-8147-2a7958a5580d",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3316d6fe-0ada-4352-893d-db7ec4249f84",
        "cursor": {
          "ref": "c415efba-22b7-4b0b-a5ed-d50cd0fc6c76",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4447197c-0788-4291-882e-273152cf402a"
        },
        "item": {
          "id": "3316d6fe-0ada-4352-893d-db7ec4249f84",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "bb6a7cac-1b0a-40b5-87d9-2aac97bde39c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3316d6fe-0ada-4352-893d-db7ec4249f84",
        "cursor": {
          "ref": "c415efba-22b7-4b0b-a5ed-d50cd0fc6c76",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4447197c-0788-4291-882e-273152cf402a"
        },
        "item": {
          "id": "3316d6fe-0ada-4352-893d-db7ec4249f84",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "bb6a7cac-1b0a-40b5-87d9-2aac97bde39c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf5807ae-3dbd-42e9-bce5-136001eb6d77",
        "cursor": {
          "ref": "8a77dc94-b9b2-4e48-93cb-c082fa5d9a2c",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "aed49059-840d-478a-85b4-14fda636104f"
        },
        "item": {
          "id": "cf5807ae-3dbd-42e9-bce5-136001eb6d77",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9cb40979-9c74-4eb0-a30e-6505c7aa2c31",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ee1db45-74c4-4982-ae99-f717515123a0",
        "cursor": {
          "ref": "15439949-135e-45a5-a61c-85d7e2a1fed5",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "d2d04e27-d94d-4732-bc48-879bb7f2f653"
        },
        "item": {
          "id": "8ee1db45-74c4-4982-ae99-f717515123a0",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7be772e2-ccc7-4878-b557-b515542be943",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}